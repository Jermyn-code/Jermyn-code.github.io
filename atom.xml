<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jermyn&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/005cdc178de0c7cd114da083c8f91a8b</icon>
  <subtitle>Jermyn</subtitle>
  <link href="https://www.jermyn.cn/atom.xml" rel="self"/>
  
  <link href="https://www.jermyn.cn/"/>
  <updated>2023-05-28T15:04:33.103Z</updated>
  <id>https://www.jermyn.cn/</id>
  
  <author>
    <name>Jermyn</name>
    <email>born_in2084@yeah.net</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop2.x源码编译</title>
    <link href="https://www.jermyn.cn/posts/77ed.html"/>
    <id>https://www.jermyn.cn/posts/77ed.html</id>
    <published>2023-05-25T18:12:54.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop编译源码（面试重点）"><a href="#Hadoop编译源码（面试重点）" class="headerlink" title="Hadoop编译源码（面试重点）"></a>Hadoop编译源码（面试重点）</h1><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><h3 id="配置CentOS能连接外网。Linux虚拟机ping-www-baidu-com-是畅通的"><a href="#配置CentOS能连接外网。Linux虚拟机ping-www-baidu-com-是畅通的" class="headerlink" title="配置CentOS能连接外网。Linux虚拟机ping www.baidu.com 是畅通的"></a>配置CentOS能连接外网。Linux虚拟机ping www.baidu.com 是畅通的</h3><p>注意：采用root角色编译，减少文件夹权限出现问题</p><h3 id="jar包准备-hadoop源码、JDK8、maven、ant-、protobuf"><a href="#jar包准备-hadoop源码、JDK8、maven、ant-、protobuf" class="headerlink" title="jar包准备(hadoop源码、JDK8、maven、ant 、protobuf)"></a>jar包准备(hadoop源码、JDK8、maven、ant 、protobuf)</h3><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>hadoop-2.7.2-src.tar.gz</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>jdk-8u144-linux-x64.tar.gz</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>apache-ant-1.9.9-bin.tar.gz（build工具，打包用的）</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>apache-maven-3.0.5-bin.tar.gz</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>protobuf-2.5.0.tar.gz（序列化的框架）</p>            </div><h2 id="jar包安装"><a href="#jar包安装" class="headerlink" title="jar包安装"></a>jar包安装</h2><span class='p red'>注意：所有操作必须在root用户下完成</span><h3 id="JDK解压、配置环境变量-JAVA-HOME和PATH，验证java-version-如下都需要验证是否配置成功"><a href="#JDK解压、配置环境变量-JAVA-HOME和PATH，验证java-version-如下都需要验证是否配置成功" class="headerlink" title="JDK解压、配置环境变量 JAVA_HOME和PATH，验证java-version(如下都需要验证是否配置成功)"></a><strong>JDK解压、配置环境变量 JAVA_HOME和PATH，验证java-version(如下都需要验证是否配置成功)</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxf</span> jdk<span class="literal">-8u144-linux-x64</span>.tar.gz <span class="literal">-C</span> /opt/module/</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#JAVA_HOME：</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.<span class="number">8.0</span>_144</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><span class='p red'>验证命令：java -version</span><h3 id="Maven解压、配置-MAVEN-HOME和PATH"><a href="#Maven解压、配置-MAVEN-HOME和PATH" class="headerlink" title="Maven解压、配置  MAVEN_HOME和PATH"></a>Maven解压、配置  MAVEN_HOME和PATH</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment"># tar -zxvf apache-maven-3.0.5-bin.tar.gz -C /opt/module/</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">maven</span>-<span class="number">3.0</span><span class="type">.5</span>]<span class="comment"># vim conf/settings.xml</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">&lt;mirror&gt;</span></span><br><span class="line"><span class="comment">       &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">       &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">       &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">       &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">      &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">maven</span>-<span class="number">3.0</span><span class="type">.5</span>]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="comment">#MAVEN_HOME</span></span><br><span class="line">export MAVEN_HOME=/opt/module/apache<span class="literal">-maven-3</span>.<span class="number">0.5</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$MAVEN_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment">#source /etc/profile</span></span><br></pre></td></tr></table></figure><span class='p red'>验证命令：mvn -version</span><h3 id="ant解压、配置-ANT-HOME和PATH"><a href="#ant解压、配置-ANT-HOME和PATH" class="headerlink" title="ant解压、配置  ANT_HOME和PATH"></a>ant解压、配置  ANT_HOME和PATH</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment"># tar -zxvf apache-ant-1.9.9-bin.tar.gz -C /opt/module/</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">ant</span>-<span class="number">1.9</span><span class="type">.9</span>]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="comment">#ANT_HOME</span></span><br><span class="line">export ANT_HOME=/opt/module/apache<span class="literal">-ant-1</span>.<span class="number">9.9</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$ANT_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment">#source /etc/profile</span></span><br></pre></td></tr></table></figure><span class='p red'>验证命令：ant -version</span><h3 id="安装-glibc-headers-和-g-命令如下"><a href="#安装-glibc-headers-和-g-命令如下" class="headerlink" title="安装  glibc-headers 和  g++  命令如下"></a>安装  glibc-headers 和  g++  命令如下</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">ant</span>-<span class="number">1.9</span><span class="type">.9</span>]<span class="comment"># yum install glibc-headers</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">ant</span>-<span class="number">1.9</span><span class="type">.9</span>]<span class="comment"># yum install gcc-c++</span></span><br></pre></td></tr></table></figure><h3 id="安装make和cmake"><a href="#安装make和cmake" class="headerlink" title="安装make和cmake"></a>安装make和cmake</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">ant</span>-<span class="number">1.9</span><span class="type">.9</span>]<span class="comment"># yum install glibc-headers</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">ant</span>-<span class="number">1.9</span><span class="type">.9</span>]<span class="comment"># yum install gcc-c++</span></span><br></pre></td></tr></table></figure><h3 id="安装make和cmake-1"><a href="#安装make和cmake-1" class="headerlink" title="安装make和cmake"></a>安装make和cmake</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">ant</span>-<span class="number">1.9</span><span class="type">.9</span>]<span class="comment"># yum install make</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">apache</span>-<span class="type">ant</span>-<span class="number">1.9</span><span class="type">.9</span>]<span class="comment"># yum install cmake</span></span><br></pre></td></tr></table></figure><h3 id="解压protobuf-，进入到解压后protobuf主目录，-opt-module-protobuf-2-5-0，然后相继执行命令"><a href="#解压protobuf-，进入到解压后protobuf主目录，-opt-module-protobuf-2-5-0，然后相继执行命令" class="headerlink" title="解压protobuf ，进入到解压后protobuf主目录，/opt/module/protobuf-2.5.0，然后相继执行命令"></a>解压protobuf ，进入到解压后protobuf主目录，/opt/module/protobuf-2.5.0，然后相继执行命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment"># tar -zxvf protobuf-2.5.0.tar.gz -C /opt/module/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">opt</span>]<span class="comment"># cd /opt/module/protobuf-2.5.0/</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">protobuf</span>-<span class="number">2.5</span><span class="type">.0</span>]<span class="comment">#./configure </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">protobuf</span>-<span class="number">2.5</span><span class="type">.0</span>]<span class="comment"># make </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">protobuf</span>-<span class="number">2.5</span><span class="type">.0</span>]<span class="comment"># make check </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">protobuf</span>-<span class="number">2.5</span><span class="type">.0</span>]<span class="comment"># make install </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">protobuf</span>-<span class="number">2.5</span><span class="type">.0</span>]<span class="comment"># ldconfig </span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">hadoop</span>-<span class="type">dist</span>]<span class="comment"># vi /etc/profile</span></span><br><span class="line"><span class="comment">#LD_LIBRARY_PATH</span></span><br><span class="line">export LD_LIBRARY_PATH=/opt/module/protobuf<span class="literal">-2</span>.<span class="number">5.0</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment">#source /etc/profile</span></span><br></pre></td></tr></table></figure><span class='p red'>验证命令：protoc --version</span><h3 id="安装openssl库"><a href="#安装openssl库" class="headerlink" title="安装openssl库"></a>安装openssl库</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment">#yum install openssl-devel</span></span><br></pre></td></tr></table></figure><h3 id="安装-ncurses-devel库"><a href="#安装-ncurses-devel库" class="headerlink" title="安装 ncurses-devel库"></a>安装 ncurses-devel库</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment">#yum install ncurses-devel</span></span><br></pre></td></tr></table></figure><h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><h3 id="解压源码到-opt-目录"><a href="#解压源码到-opt-目录" class="headerlink" title="解压源码到/opt/目录"></a>解压源码到/opt/目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">software</span>]<span class="comment"># tar -zxvf hadoop-2.7.2-src.tar.gz -C /opt/</span></span><br></pre></td></tr></table></figure><h3 id="进入到hadoop源码主目录"><a href="#进入到hadoop源码主目录" class="headerlink" title="进入到hadoop源码主目录"></a>进入到hadoop源码主目录</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>-<span class="type">src</span>]<span class="comment"># pwd</span></span><br><span class="line">/opt/hadoop<span class="literal">-2</span>.<span class="number">7.2</span><span class="literal">-src</span></span><br></pre></td></tr></table></figure><h3 id="通过maven执行编译命令"><a href="#通过maven执行编译命令" class="headerlink" title="通过maven执行编译命令"></a>通过maven执行编译命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="comment">### 等待时间30分钟左右，最终成功是全部SUCCESS，</span></span><br><span class="line">```powershell</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>-<span class="type">src</span>]<span class="comment">#mvn package -Pdist,native -DskipTests -Dtar</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525182556.png" alt=""></p><h3 id="成功的64位hadoop包在-opt-hadoop-2-7-2-src-hadoop-dist-target下"><a href="#成功的64位hadoop包在-opt-hadoop-2-7-2-src-hadoop-dist-target下" class="headerlink" title="成功的64位hadoop包在/opt/hadoop-2.7.2-src/hadoop-dist/target下"></a>成功的64位hadoop包在/opt/hadoop-2.7.2-src/hadoop-dist/target下</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop101</span> <span class="type">target</span>]<span class="comment"># pwd</span></span><br><span class="line">/opt/hadoop<span class="literal">-2</span>.<span class="number">7.2</span><span class="literal">-src</span>/hadoop<span class="literal">-dist</span>/target</span><br></pre></td></tr></table></figure><h3 id="编译源码过程中常见的问题及解决方案"><a href="#编译源码过程中常见的问题及解决方案" class="headerlink" title="编译源码过程中常见的问题及解决方案"></a>编译源码过程中常见的问题及解决方案</h3><ul><li><strong>MAVEN install时候JVM内存溢出</strong><br>处理方式：在环境配置文件和maven的执行文件均可调整MAVEN_OPT的heap大小。（详情查阅MAVEN 编译 JVM调优问题，如：<a href="http://outofmemory.cn/code-snippet/12652/maven-outofmemoryerror-method）">http://outofmemory.cn/code-snippet/12652/maven-outofmemoryerror-method）</a></li><li><strong>编译期间maven报错。可能网络阻塞问题导致依赖库下载不完整导致，多次执行命令（一次通过比较难）：</strong><br>[root@hadoop101 hadoop-2.7.2-src]#mvn package -Pdist,nativeN -DskipTests -Dtar</li><li><strong>报ant、protobuf等错误，插件下载未完整或者插件版本问题，最开始链接有较多特殊情况，同时推荐2.7.0版本的问题汇总帖子 <a href="http://www.tuicool.com/articles/IBn63qf">http://www.tuicool.com/articles/IBn63qf</a></strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hadoop编译源码（面试重点）&quot;&gt;&lt;a href=&quot;#Hadoop编译源码（面试重点）&quot; class=&quot;headerlink&quot; title=&quot;Hadoop编译源码（面试重点）&quot;&gt;&lt;/a&gt;Hadoop编译源码（面试重点）&lt;/h1&gt;&lt;h2 id=&quot;前期准备工作&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="大数据" scheme="https://www.jermyn.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="hadoop" scheme="https://www.jermyn.cn/tags/hadoop/"/>
    
    <category term="大数据" scheme="https://www.jermyn.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop2.x</title>
    <link href="https://www.jermyn.cn/posts/facf.html"/>
    <id>https://www.jermyn.cn/posts/facf.html</id>
    <published>2023-05-23T21:12:50.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Hadoop框架"><a href="#第一章-Hadoop框架" class="headerlink" title="第一章 Hadoop框架"></a>第一章 Hadoop框架</h1><h2 id="Hadoop1-x-和-Hadoop2-x-区别"><a href="#Hadoop1-x-和-Hadoop2-x-区别" class="headerlink" title="Hadoop1.x 和 Hadoop2.x 区别"></a>Hadoop1.x 和 Hadoop2.x 区别</h2><ul><li><strong>Hadoop1.x组成</strong><br>MapReduce（计算+资源调度），HDFS（数据存储），Common（辅助工具）</li><li><strong>Hadoop2.x组成</strong><br>MapReduce（计算），Yarn（资源调度），HDFS（数据存储），Common（辅助工具）<blockquote><p>在Hadoop1.x时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大，在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapReduce只负责运算</p></blockquote></li></ul><h2 id="HDFS架构概述"><a href="#HDFS架构概述" class="headerlink" title="HDFS架构概述"></a>HDFS架构概述</h2><ol><li>NameNode（nn）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等。</li><li>DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</li><li>Secondary NameNode(2nn)：辅助NameNode工作，用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。</li></ol><h2 id="Yarn架构"><a href="#Yarn架构" class="headerlink" title="Yarn架构"></a>Yarn架构</h2><p>ResourceManager（RM）：资源由RM管理（理解为部门经理）。<br>（1）处理客户端请求；<br>（2）监控NodeManager<br>（3）启动或监控ApplicationMaster<br>（4）资源的分配与调度</p><p>NodeManager（NM）：单个节点上的资源由NM管理，但是经过RM协调。（理解为小组长）<br>（1）管理单个节点上的资源<br>（2）处理来自ResourceManager的命令<br>（3）处理来自ApplicationMaster的命令</p><p>ApplicationMaster（AM）：集群上某一个任务的开启关闭，协调（理解为一个个项目）<br>（1）负责数据的切分<br>（2）为应用程序申请资源并分配给内部的任务<br>（3）任务的监控与容错</p><p>Container ：Container是YARN中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等。<br> <img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230523213727.png" alt=""></p><h2 id="MapReduce架构概述"><a href="#MapReduce架构概述" class="headerlink" title="MapReduce架构概述"></a>MapReduce架构概述</h2><p>MapReduce将计算过程分为两个阶段：Map和Reduce</p><ol><li>Map阶段并行处理输入数据（分：一个大的任务分给多个节点，每个节点都做一部分）</li><li>Reduce阶段对Map结果进行汇总（和：将每个节点的计算结果汇总）</li></ol><h1 id="第二章-Hadoop运行环境搭建"><a href="#第二章-Hadoop运行环境搭建" class="headerlink" title="第二章 Hadoop运行环境搭建"></a>第二章 Hadoop运行环境搭建</h1><ul><li><strong>JAVA_HOME</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/opt/module/jdk1.<span class="number">8.0</span>_144</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HADOOP_HOME</span></span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure></li></ul><h1 id="第三章-Hadoop运行模式"><a href="#第三章-Hadoop运行模式" class="headerlink" title="第三章 Hadoop运行模式"></a>第三章 Hadoop运行模式</h1><p>Hadoop运行模式包括：本地模式、伪分布式模式以及完全分布式模式。<br>Hadoop官方网站：<a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p><h2 id="本地运行模式"><a href="#本地运行模式" class="headerlink" title="本地运行模式"></a>本地运行模式</h2><h3 id="官方WordCount案例"><a href="#官方WordCount案例" class="headerlink" title="官方WordCount案例"></a><strong>官方WordCount案例</strong></h3><ol><li>创建在hadoop-2.7.2文件下面创建一个wcinput文件夹</li><li>在wcinput文件下创建一个wc.input文件</li><li>编辑wc.input文件(输入任意内容)</li><li>回到Hadoop目录/opt/module/hadoop-2.7.2</li><li>执行程序</li><li>查看结果<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> mkdir wcinput</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> <span class="built_in">cd</span> wcinput/</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">wcinput</span>]<span class="variable">$</span> vim wc.input</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">wcinput</span>]<span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">wc.input</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">wcinput</span>]<span class="variable">$</span> <span class="built_in">cd</span> ..</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">bin  etc  include  input  lib  libexec  LICENSE.txt  NOTICE.txt  output  README.txt  sbin  share  wcinput</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> hadoop jar share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce-examples-2</span>.<span class="number">7.2</span>.jar wordcount wcinput/ wcouput</span><br><span class="line"><span class="number">23</span>/<span class="number">05</span>/<span class="number">24</span> <span class="number">09</span>:<span class="number">09</span>:<span class="number">19</span> INFO Configuration.deprecation: session.id is deprecated. Instead, use dfs.metrics.session<span class="literal">-id</span></span><br><span class="line"><span class="number">23</span>/<span class="number">05</span>/<span class="number">24</span> <span class="number">09</span>:<span class="number">09</span>:<span class="number">19</span> INFO jvm.JvmMetrics: Initializing JVM Metrics with processName=JobTracker, sessionId=</span><br><span class="line">............</span><br><span class="line">............</span><br><span class="line">............</span><br><span class="line">        File Output Format Counters</span><br><span class="line">                Bytes Written=<span class="number">235</span></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> <span class="built_in">cd</span> wcouput/</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">wcouput</span>]<span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line">part<span class="literal">-r-00000</span>  _SUCCESS</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">wcouput</span>]<span class="variable">$</span> <span class="built_in">cat</span> part<span class="literal">-r-00000</span></span><br><span class="line">EJERMYN <span class="number">1</span></span><br><span class="line">HADOOP  <span class="number">6</span></span><br><span class="line">JAVA    <span class="number">5</span></span><br><span class="line">JAVAA   <span class="number">1</span></span><br><span class="line">JEERMYN <span class="number">1</span></span><br><span class="line">JERDMYN <span class="number">1</span></span><br><span class="line">JEREMYN <span class="number">1</span></span><br><span class="line">JERMYCN <span class="number">1</span></span><br><span class="line">JERMYN  <span class="number">1</span></span><br><span class="line">JERMYTN <span class="number">1</span></span><br><span class="line">JRECMYN <span class="number">1</span></span><br><span class="line">JREEMYN <span class="number">2</span></span><br><span class="line">JREMYDN <span class="number">1</span></span><br><span class="line">JREMYEN <span class="number">1</span></span><br><span class="line">Jefrmyn <span class="number">1</span></span><br><span class="line">Jermfdyn        <span class="number">1</span></span><br><span class="line">Jermyfn <span class="number">1</span></span><br><span class="line">Jermyn  <span class="number">3</span></span><br><span class="line">hadoop  <span class="number">6</span></span><br><span class="line">java    <span class="number">2</span></span><br><span class="line">javaC   <span class="number">1</span></span><br><span class="line">javaEE  <span class="number">1</span></span><br><span class="line">javaSE  <span class="number">1</span></span><br><span class="line">javac   <span class="number">1</span></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">wcouput</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="伪分布式运行模式"><a href="#伪分布式运行模式" class="headerlink" title="伪分布式运行模式"></a>伪分布式运行模式</h2><div class="tip fa-gamepad faa-horizontal animated"><p>启动HDFS并运行MapReduce程序</p></div><p><strong><em>点击图片查看文档</em></strong><br><a href="https://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-common/SingleCluster.html"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524100352.png" alt=""></a></p><ul><li><strong>配置：hadoop-env.sh</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>]<span class="variable">$</span> <span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br><span class="line">/opt/module/jdk1.<span class="number">8.0</span>_144</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>]<span class="variable">$</span> vim hadoop<span class="literal">-env</span>.sh</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524100154.png" alt=""></li><li><strong>配置：core-site.xml</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop100:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.7.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>配置：hdfs-site.xml</strong><br><strong><em>点击图片查看文档</em></strong><br><a href="https://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524100755.png" alt=""></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS副本的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>启动集群</strong></li><li>格式化NameNode（第一次启动时格式化，以后就不要总格式化）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode <span class="literal">-format</span></span><br></pre></td></tr></table></figure></li><li>启动NameNode<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop<span class="literal">-daemon</span>.sh <span class="built_in">start</span> namenode</span><br></pre></td></tr></table></figure></li><li>启动DataNode<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop<span class="literal">-daemon</span>.sh <span class="built_in">start</span> datanode</span><br></pre></td></tr></table></figure></li><li>查看进程<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> [<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">3826</span> DataNode</span><br><span class="line"><span class="number">3683</span> NameNode</span><br><span class="line"><span class="number">3902</span> Jps</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>web端查看HDFS文件系统<br><a href="http://hadoop100:50070/dfshealth.html#tab-overview">http://hadoop100:50070/dfshealth.html#tab-overview</a><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524103135.png" alt=""></li></ul><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>说明：在企业中遇到Bug时，经常根据日志提示信息去分析问题、解决Bug</p></div><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">logs</span>]<span class="variable">$</span> <span class="built_in">pwd</span></span><br><span class="line">/opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">logs</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">68</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root <span class="number">24131</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">10</span>:<span class="number">31</span> hadoop<span class="literal">-Jermyn-datanode-hadoop100</span>.log</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root   <span class="number">717</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">10</span>:<span class="number">23</span> hadoop<span class="literal">-Jermyn-datanode-hadoop100</span>.out</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root <span class="number">29149</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">10</span>:<span class="number">29</span> hadoop<span class="literal">-Jermyn-namenode-hadoop100</span>.log</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root  <span class="number">5007</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">10</span>:<span class="number">27</span> hadoop<span class="literal">-Jermyn-namenode-hadoop100</span>.out</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root     <span class="number">0</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">10</span>:<span class="number">20</span> SecurityAuth<span class="literal">-Jermyn</span>.audit</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">logs</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>思考：为什么不能一直格式化NameNode，格式化NameNode，要注意什么？</p></div><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> <span class="built_in">cat</span> <span class="keyword">data</span>/tmp/dfs/<span class="keyword">data</span>/current/VERSION | grep <span class="string">&#x27;clusterID&#x27;</span></span><br><span class="line">clusterID=CID<span class="literal">-77af8246-5931-4a4f-bdbe-5fe9624458a3</span></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> <span class="built_in">cat</span> <span class="keyword">data</span>/tmp/dfs/name/current/VERSION | grep <span class="string">&#x27;clusterID&#x27;</span></span><br><span class="line">clusterID=CID<span class="literal">-77af8246-5931-4a4f-bdbe-5fe9624458a3</span></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<span class='p red'>可以看出data和name的集群ID是相同的</span>格式化NameNode，会产生新的集群id,导致NameNode和DataNode的集群id不一致，集群找不到已往数据。所以，格式NameNode时，一定要先删除data数据和log日志<span class='p red'>（删除data和log时候，必须把NameNode和DataNode关闭，否则删除无效）</span>，然后再格式化NameNode。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524115949.png" alt=""></p></blockquote><ul><li><p><strong>在HDFS文件系统上创建一个input文件夹</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs <span class="literal">-mkdir</span> <span class="literal">-p</span> /user/Jermyn/input</span><br></pre></td></tr></table></figure><p><a href="http://hadoop100:50070/explorer.html#/user/Jermyn/input">http://hadoop100:50070/explorer.html#/user/Jermyn/input</a></p></li><li><p><strong>将本地的 wcinput/wc.input 上传到hdfs的/user/Jermyn/input</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs <span class="literal">-put</span> wcinput/wc.input /user/Jermyn/input</span><br></pre></td></tr></table></figure><p><strong><em>点击图片查看</em></strong><br><a href="http://hadoop100:50070/explorer.html#/user/Jermyn/input"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524104943.png" alt=""></a></p></li><li><p><strong>执行官方WordCount案例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce-examples-2</span>.<span class="number">7.2</span>.jar wordcount /user/Jermyn/input /user/Jermyn/output</span><br></pre></td></tr></table></figure><p><strong><em>点击图片查看</em></strong><br><a href="http://hadoop100:50070/explorer.html#/user/Jermyn/output"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524110240.png" alt=""></a></p></li><li><p><strong>查看运行的结果</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop dfs <span class="literal">-cat</span> /user/Jermyn/output/p*</span><br></pre></td></tr></table></figure></li><li><p><strong>删除输出结果</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop dfs <span class="literal">-rm</span> <span class="literal">-r</span> /user/Jermyn/out</span><br></pre></td></tr></table></figure><div class="tip fa-gamepad faa-horizontal animated"><p>启动YARN并运行MapReduce程序</p></div></li><li><p><strong>配置yarn-env.sh</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.<span class="number">8.0</span>_144</span><br></pre></td></tr></table></figure></li><li><p><strong>配置yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置：mapred-env.sh</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure></li><li><p><strong>配置： (对mapred-site.xml.template重新命名为) mapred-site.xml</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> mapred<span class="literal">-site</span>.xml.template mapred<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在YARN上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><span class='p green'>点击图片查看配置文件</span><p><a href="https://hadoop.apache.org/docs/r2.7.2/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524122131.png" alt=""></a></p></li></ul><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a><strong>启动集群</strong></h3><span class='p red'>注意：启动前必须保证NameNode和DataNode已经启动</span><ul><li><strong>启动ResourceManager</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh <span class="built_in">start</span> resourcemanager</span><br></pre></td></tr></table></figure></li><li><strong>启动NodeManager</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh <span class="built_in">start</span> nodemanager</span><br></pre></td></tr></table></figure></li><li><strong>查看进程</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">6016</span> Jps</span><br><span class="line"><span class="number">3826</span> DataNode</span><br><span class="line"><span class="number">3683</span> NameNode</span><br><span class="line"><span class="number">5637</span> ResourceManager</span><br><span class="line"><span class="number">5897</span> NodeManager</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><h3 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a><strong>集群操作</strong></h3></li><li><p><strong>YARN的浏览器页面查看</strong><br><a href="http://hadoop100:8088/cluster">http://hadoop100:8088/cluster</a><br><strong><em>点击图片跳转</em></strong><br><a href="http://hadoop100:8088/cluster"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524123246.png" alt=""></a></p></li><li><p><strong>执行执行官方WordCount案例查看任务</strong></p><span class='p red'>执行任务前必须把output删除</span><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs <span class="literal">-rm</span> <span class="literal">-r</span> /user/Jermyn/output</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce-examples-2</span>.<span class="number">7.2</span>.jar wordcount /user/Jermyn/input /user/Jermyn/output</span><br></pre></td></tr></table></figure><p><a href="http://hadoop100:8088/cluster"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524124532.png" alt=""></a></p></li></ul><div class="tip fa-gamepad faa-horizontal animated"><p>配置历史服务器</p></div><p>为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：</p><ul><li><strong>配置mapred-site.xml</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>启动历史服务器</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/mr<span class="literal">-jobhistory-daemon</span>.sh <span class="built_in">start</span> historyserver</span><br></pre></td></tr></table></figure></li><li><p><strong>查看历史服务器是否启动</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">3826</span> DataNode</span><br><span class="line"><span class="number">3683</span> NameNode</span><br><span class="line"><span class="number">6836</span> Jps</span><br><span class="line"><span class="number">5637</span> ResourceManager</span><br><span class="line"><span class="number">6758</span> JobHistoryServer</span><br><span class="line"><span class="number">5897</span> NodeManager</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop100</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li><strong>查看JobHistory</strong><br><a href="http://hadoop100:19888/jobhistory">http://hadoop100:19888/jobhistory</a><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524125336.png" alt=""><br><a href="http://hadoop100:19888/jobhistory/job/job_1684902467164_0001"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524125303.png" alt=""></a></li></ul><div class="tip fa-gamepad faa-horizontal animated"><p>配置日志的聚集</p></div><p>日志聚集概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上。<br>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。<br><span class='p red'>注意：开启日志聚集功能，需要重新启动NodeManager 、ResourceManager和HistoryManager。</span></p><ul><li><p><strong>配置yarn-site.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>关闭NodeManager 、ResourceManager和HistoryManage</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh stop nodemanager</span><br><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh stop resourcemanager</span><br><span class="line">sbin/mr<span class="literal">-jobhistory-daemon</span>.sh stop historyserver</span><br></pre></td></tr></table></figure></li><li><p><strong>启动NodeManager 、ResourceManager和HistoryManager</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh <span class="built_in">start</span> nodemanager</span><br><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh <span class="built_in">start</span> resourcemanager</span><br><span class="line">sbin/mr<span class="literal">-jobhistory-daemon</span>.sh <span class="built_in">start</span> historyserver</span><br></pre></td></tr></table></figure></li><li><p><strong>删除HDFS上已经存在的输出文件</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs <span class="literal">-rm</span> <span class="literal">-r</span> /user/Jermyn/output</span><br></pre></td></tr></table></figure></li><li><p><strong>执行WordCount程序</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce-examples-2</span>.<span class="number">7.2</span>.jar wordcount /user/Jermyn/input /user/Jermyn/output</span><br></pre></td></tr></table></figure></li><li><strong>查看日志</strong><br><a href="http://hadoop100:19888/jobhistory">http://hadoop100:19888/jobhistory</a><br><a href="http://hadoop100:19888/jobhistory/job/job_1684908681616_0001"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524142503.png" alt=""></a><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230524142605.png" alt=""></li></ul><div class="tip fa-gamepad faa-horizontal animated"><p>配置文件说明</p></div><ol><li>Hadoop配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。<br>core-default.xml  在     hadoop-common-2.7.2.jar/ core-default.xml<br>hdfs-default.xml  在     hadoop-hdfs-2.7.2.jar/ hdfs-default.xml<br>yarn-default.xml  在     hadoop-yarn-common-2.7.2.jar/ yarn-default.xml<br>mapred-default.xml  在     hadoop-mapreduce-client-core-2.7.2.jar/ mapred-default.xml</li><li>core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在$HADOOP_HOME/etc/hadoop这个路径上，用户可以根据项目需求重新进行修改配置</li></ol><h2 id="完全分布式运行模式"><a href="#完全分布式运行模式" class="headerlink" title="完全分布式运行模式"></a>完全分布式运行模式</h2><span class='p red'>根据 hadoop100 进行拷贝出hadoop102，hadoop103，hadoop104，然后把在hadoop100上配置的/opt/module 分发到 hadoop102，hadoop103，hadoop104，还有配置文件 /etc/profile (使用 scp -r 命令)</span><h3 id="scp（secure-copy）安全拷贝"><a href="#scp（secure-copy）安全拷贝" class="headerlink" title="scp（secure copy）安全拷贝"></a><strong>scp（secure copy）安全拷贝</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp    <span class="literal">-r</span>          <span class="variable">$pdir</span>/<span class="variable">$fname</span>              <span class="variable">$user</span>@hadoop<span class="variable">$host:</span><span class="variable">$pdir</span>/<span class="variable">$fname</span></span><br><span class="line">命令   递归       要拷贝的文件路径/名称    目的用户<span class="selector-tag">@</span>主机:目的路径/名称</span><br></pre></td></tr></table></figure><h3 id="rsync-远程同步工具"><a href="#rsync-远程同步工具" class="headerlink" title="rsync 远程同步工具"></a><strong>rsync 远程同步工具</strong></h3><p>rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。<br>rsync和scp区别：用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rsync    <span class="literal">-rvl</span>       <span class="variable">$pdir</span>/<span class="variable">$fname</span>              <span class="variable">$user</span>@hadoop<span class="variable">$host:</span><span class="variable">$pdir</span>/<span class="variable">$fname</span></span><br><span class="line">命令   选项参数   要拷贝的文件路径/名称    目的用户<span class="selector-tag">@</span>主机:目的路径/名称</span><br></pre></td></tr></table></figure></p><blockquote><p>-r    递归<br>-v    显示复制过程<br>-l    拷贝符号连接</p></blockquote><h3 id="编写脚本，使用xsync实现文件在集群中传输"><a href="#编写脚本，使用xsync实现文件在集群中传输" class="headerlink" title="编写脚本，使用xsync实现文件在集群中传输"></a><strong>编写脚本，使用xsync实现文件在集群中传输</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment"># Desc    : xsync集群分发脚本</span></span><br><span class="line"><span class="comment"># Path    : /home/Jermyn/bin</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2023-05-24</span></span><br><span class="line"><span class="comment"># Version : 1.0</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment"># 前置需要一个ip.txt文件，注意：文件格式严按照“ipaddress空格hostname”格式如：“127.0.0.1 root”</span></span><br><span class="line">p1=<span class="variable">$1</span></span><br><span class="line">pcount=<span class="variable">$</span><span class="comment">#</span></span><br><span class="line">user=`whoami`</span><br><span class="line">HOSTNAME=`hostname`</span><br><span class="line">fname=`basename <span class="variable">$p1</span>`</span><br><span class="line"><span class="built_in">echo</span> fname=<span class="variable">$fname</span></span><br><span class="line"><span class="keyword">if</span>((pcount==<span class="number">0</span>)); then</span><br><span class="line">        <span class="built_in">echo</span> no args;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">pdir=`cd <span class="literal">-P</span> <span class="variable">$</span>(dirname <span class="variable">$p1</span>); <span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">echo</span> pdir=<span class="variable">$pdir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> read ip hostname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$hostname</span>&quot;</span> = <span class="string">&quot;<span class="variable">$HOSTNAME</span>&quot;</span> ] &amp;&amp; <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;-----------------------\033[5;34mSending a file to <span class="variable">$hostname</span>\033[0m-----------------------&quot;</span></span><br><span class="line">        rsync <span class="literal">-rvl</span> <span class="variable">$pdir</span>/<span class="variable">$fname</span> <span class="variable">$user</span><span class="selector-tag">@</span><span class="variable">$hostname:</span><span class="variable">$pdir</span></span><br><span class="line">        [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]&amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;           \033[5;32m已成功向<span class="variable">$hostname</span>传输文件\033[0m&quot;</span> || <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;           \033[5;31m文件传输失败，请检查主机<span class="variable">$hostname</span>\033[0m&quot;</span></span><br><span class="line">done &lt; ip.txt</span><br></pre></td></tr></table></figure><div class="tip fa-gamepad faa-horizontal animated"><p>集群配置</p></div><h3 id="集群部署规划"><a href="#集群部署规划" class="headerlink" title="集群部署规划"></a><strong>集群部署规划</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                HDFS                    YARN</span><br><span class="line">hadoop102       NameNode                NodeManager</span><br><span class="line">                DataNode</span><br><span class="line">hadoop103       DataNode                ResourceManager </span><br><span class="line">                                        NodeManager</span><br><span class="line">hadoop104       SecondaryNameNode</span><br><span class="line">                DataNode                NodeManager</span><br></pre></td></tr></table></figure><ul><li><strong>修改配置Core-site.xml</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop102:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.7.2/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><span class='p red'>注：伪分布是NameNode是 hadoop100</span><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525100948.png" alt=""></li><li><strong>修改hadoop-env.sh</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.<span class="number">8.0</span>_144</span><br></pre></td></tr></table></figure><span class='p red'>注：伪分布已添加，此处不做修改</span></li><li><strong>修改hdfs-site.xml</strong> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS副本的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop104:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><span class='p red'>注：伪分布是dfs.replication是1，其实默认配置是3，伪分布式的时候不用改，因为只有一台节点的时候，不会产生3个副本，还是一个，如果节点多的话才会增加，snn的配置是新增加的</span><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525102138.png" alt=""></li><li><strong>配置yarn-env.sh</strong> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.<span class="number">8.0</span>_144</span><br></pre></td></tr></table></figure><span class='p red'>注：伪分布已添加，此处不做修改</span></li><li><strong>修改配置yarn-site.xml</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop103<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><span class='p red'>注:伪分布式rm配置是hadoop100 在此改为hadoop103</span><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525103003.png" alt=""></li><li><p><strong>配置mapred-env.sh</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.<span class="number">8.0</span>_144</span><br></pre></td></tr></table></figure><ul><li><strong>配置mapred-site.xml</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> mapred<span class="literal">-site</span>.xml.template mapred<span class="literal">-site</span>.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><span class='p red'>注:伪分布式修改过，此处不用修改</span><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525103804.png" alt=""></li></ul></li><li><p><strong>在集群上分发配置好的Hadoop配置文件</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xsync /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/</span><br></pre></td></tr></table></figure><h3 id="集群单点启动"><a href="#集群单点启动" class="headerlink" title="集群单点启动"></a><strong>集群单点启动</strong></h3><span class='p red'>注意:此处如果是第一次启动，一定要注意需要格式化namenode，原因上面1.3.2思考已经注明，我这里是已经配置过伪分布，也格式化过，所以这里需要删除data/和log/文件夹</span><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop namenode <span class="literal">-format</span></span><br></pre></td></tr></table></figure></li><li><strong>在hadoop102、hadoop103以及hadoop104上分别启动DataNode</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop<span class="literal">-daemon</span>.sh <span class="built_in">start</span> datanode</span><br></pre></td></tr></table></figure></li><li><strong>jps 查看进程</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">3384</span> NameNode</span><br><span class="line"><span class="number">3516</span> Jps</span><br><span class="line"><span class="number">3308</span> DataNode</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop103</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">3227</span> Jps</span><br><span class="line"><span class="number">3117</span> DataNode</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop104</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">3200</span> Jps</span><br><span class="line"><span class="number">3082</span> DataNode</span><br></pre></td></tr></table></figure></li></ul><h3 id="SSH无密登录配置"><a href="#SSH无密登录配置" class="headerlink" title="SSH无密登录配置"></a><strong>SSH无密登录配置</strong></h3><ul><li><strong>免密登录原理</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525110211.png" alt=""></li><li><strong>生成公钥和私钥：</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (/home/Jermyn/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/Jermyn/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/Jermyn/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:xAXniHrEhQ4pWD2L1xsyS8ixH5jv8Zsx9X8zghOE23o Jermyn@hadoop102</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">| o.. . .o.o      |</span></span><br><span class="line"><span class="string">|. o =..+ =       |</span></span><br><span class="line"><span class="string">| . O *+ +..      |</span></span><br><span class="line"><span class="string">|  B Bo+.. .      |</span></span><br><span class="line"><span class="string">|   =.=.oS+       |</span></span><br><span class="line"><span class="string">|    =.....o      |</span></span><br><span class="line"><span class="string">|   . oo  ..o     |</span></span><br><span class="line"><span class="string">|    . .+. E.. +  |</span></span><br><span class="line"><span class="string">|      o. . ..o o |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">[Jermyn@hadoop102 hadoop-2.7.2]$</span></span><br></pre></td></tr></table></figure></li><li><strong>将公钥拷贝到要免密登录的目标机器上</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id hadoop102</span><br><span class="line">ssh-copy-id hadoop103</span><br><span class="line">ssh-copy-id hadoop104</span><br></pre></td></tr></table></figure></li><li><strong>.ssh文件夹下（~/.ssh）的文件功能解释</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">known_hosts         记录ssh访问过计算机的公钥(public key)</span><br><span class="line">id_rsa              生成的私钥</span><br><span class="line">id_rsa.pub          生成的公钥</span><br><span class="line">authorized_keys    存放授权过得无密登录服务器公钥</span><br></pre></td></tr></table></figure><span class='p red'>注意： 还需要在hadoop102上采用root账号，配置一下无密登录到hadoop102、hadoop103、hadoop104； 还需要在hadoop103上采用Jermyn账号配置一下无密登录到hadoop102、hadoop103、hadoop104服务器上。(103上有一个resourcemanager在控制其他节点，所以也需要免密登录其他节点)</span></li></ul><div class="tip fa-gamepad faa-horizontal animated"><p>群起集群</p></div><ul><li><p><strong>配置/etc/hadoop/slaves</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hadoop/slaves</span><br><span class="line"></span><br><span class="line">hadoop102</span><br><span class="line">hadoop103</span><br><span class="line">hadoop104</span><br></pre></td></tr></table></figure><span class='p red'>注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。</span></li><li><p><strong>启动HDFS</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> sbin/<span class="built_in">start-dfs</span>.sh</span><br><span class="line">Starting namenodes on [<span class="type">hadoop102</span>]</span><br><span class="line">hadoop102: starting namenode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-namenode-hadoop102</span>.out</span><br><span class="line">hadoop103: starting datanode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-datanode-hadoop103</span>.out</span><br><span class="line">hadoop102: starting datanode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-datanode-hadoop102</span>.out</span><br><span class="line">hadoop104: starting datanode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-datanode-hadoop104</span>.out</span><br><span class="line">Starting secondary namenodes [<span class="type">hadoop104</span>]</span><br><span class="line">hadoop104: starting secondarynamenode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-secondarynamenode-hadoop104</span>.out</span><br></pre></td></tr></table></figure><p>-<strong>启动YARN，在hadoop103</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> [<span class="type">Jermyn</span>@<span class="type">hadoop103</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> sbin/<span class="built_in">start-yarn</span>.sh</span><br><span class="line">starting yarn daemons</span><br><span class="line">starting resourcemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-resourcemanager-hadoop103</span>.out</span><br><span class="line">hadoop102: starting nodemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-nodemanager-hadoop102</span>.out</span><br><span class="line">hadoop104: starting nodemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-nodemanager-hadoop104</span>.out</span><br><span class="line">hadoop103: starting nodemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-nodemanager-hadoop103</span>.out</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop103</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">4871</span> NodeManager</span><br><span class="line"><span class="number">4711</span> ResourceManager</span><br><span class="line"><span class="number">5065</span> Jps</span><br><span class="line"><span class="number">4575</span> DataNode</span><br></pre></td></tr></table></figure></li><li><strong>Web端查看SecondaryNameNode</strong><br><a href="http://hadoop104:50090/status.html">http://hadoop104:50090/status.html</a><br><a href="http://hadoop104:50090/status.html"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525121828.png" alt=""></a></li></ul><h3 id="集群基本测试：上传小文件和大文件"><a href="#集群基本测试：上传小文件和大文件" class="headerlink" title="集群基本测试：上传小文件和大文件"></a><strong>集群基本测试：上传小文件和大文件</strong></h3><ul><li><strong>上传小文件</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> hdfs dfs <span class="literal">-put</span> wcinput/ /user/Jermyn/input put: /user/Jermyn/input: No such file or directory</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> hdfs dfs <span class="literal">-mkdir</span> <span class="literal">-p</span> /user/Jermyn/input</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> hdfs dfs <span class="literal">-put</span> wcinput/ /user/Jermyn/input</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525152756.png" alt=""></li><li><strong>上传大文件</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs <span class="literal">-put</span> /opt/software/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>.tar.gz /user/Jermyn/input</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525152911.png" alt=""><span class='p red'>可以直接点击下载在win下载，且两个块自动进行组合</span><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525153553.png" alt=""></li><li><strong>将两个文件下载（拼接）</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">subdir3</span>]<span class="variable">$</span> <span class="built_in">cat</span> blk_1073742741 &gt;&gt; tmp.txt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">subdir3</span>]<span class="variable">$</span> <span class="built_in">cat</span> blk_1073742742 &gt;&gt; tmp.txt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">subdir3</span>]<span class="variable">$</span> tar <span class="literal">-zxvf</span> tmp.txt</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/NOTICE.txt</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/etc/</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/etc/hadoop/</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/etc/hadoop/kms<span class="literal">-log4j</span>.properties</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/etc/hadoop/mapred<span class="literal">-env</span>.sh</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/etc/hadoop/hdfs<span class="literal">-site</span>.xml</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/etc/hadoop/httpfs<span class="literal">-signature</span>.secret</span><br><span class="line">hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/etc/hadoop/mapred<span class="literal">-site</span>.xml.template</span><br><span class="line">...........................</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">subdir3</span>]<span class="variable">$</span> ll <span class="literal">-ah</span></span><br><span class="line">总用量 <span class="number">379</span>M</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">3</span> Jermyn root  <span class="number">16</span>K <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">38</span> .</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">6</span> Jermyn root <span class="number">4.0</span>K <span class="number">5</span>月  <span class="number">25</span> <span class="number">14</span>:<span class="number">28</span> ..</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root  <span class="number">293</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">19</span> blk_1073742740</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root   <span class="number">11</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">19</span> blk_1073742740_1916.meta</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root <span class="number">128</span>M <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">22</span> blk_1073742741</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root <span class="number">1.1</span>M <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">22</span> blk_1073742741_1917.meta</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root  <span class="number">61</span>M <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">22</span> blk_1073742742</span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root <span class="number">485</span>K <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">22</span> blk_1073742742_1918.meta</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">9</span> Jermyn root <span class="number">4.0</span>K <span class="number">5</span>月  <span class="number">22</span> <span class="number">2017</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>. <span class="number">1</span> Jermyn root <span class="number">189</span>M <span class="number">5</span>月  <span class="number">25</span> <span class="number">15</span>:<span class="number">37</span> tmp.txt</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525153835.png" alt=""></li></ul><h3 id="hadoop相关执行命令"><a href="#hadoop相关执行命令" class="headerlink" title="hadoop相关执行命令"></a><strong>hadoop相关执行命令</strong></h3><ul><li>启动NameNode<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop<span class="literal">-daemon</span>.sh <span class="built_in">start</span> namenode</span><br></pre></td></tr></table></figure></li><li>启动DataNode<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop<span class="literal">-daemon</span>.sh <span class="built_in">start</span> datanode</span><br></pre></td></tr></table></figure></li><li><strong>在HDFS文件系统上创建一个input文件夹</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs <span class="literal">-mkdir</span> <span class="literal">-p</span> /user/Jermyn/input</span><br></pre></td></tr></table></figure></li><li><strong>将本地的 wcinput/wc.input 上传到hdfs的/user/Jermyn/input</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs dfs <span class="literal">-put</span> wcinput/wc.input /user/Jermyn/input</span><br></pre></td></tr></table></figure></li><li><strong>执行官方WordCount案例</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop jar share/hadoop/mapreduce/hadoop<span class="literal">-mapreduce-examples-2</span>.<span class="number">7.2</span>.jar wordcount /user/Jermyn/input /user/Jermyn/output</span><br></pre></td></tr></table></figure></li><li><strong>查看运行的结果</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop dfs <span class="literal">-cat</span> /user/Jermyn/output/p*</span><br></pre></td></tr></table></figure></li><li><strong>删除输出结果</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop dfs <span class="literal">-rm</span> <span class="literal">-r</span> /user/Jermyn/out</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭NodeManager 、ResourceManager和HistoryManage</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh stop nodemanager</span><br><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh stop resourcemanager</span><br><span class="line">sbin/mr<span class="literal">-jobhistory-daemon</span>.sh stop historyserver</span><br></pre></td></tr></table></figure></li><li><p><strong>启动NodeManager 、ResourceManager和HistoryManager</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh <span class="built_in">start</span> nodemanager</span><br><span class="line">sbin/yarn<span class="literal">-daemon</span>.sh <span class="built_in">start</span> resourcemanager</span><br><span class="line">sbin/mr<span class="literal">-jobhistory-daemon</span>.sh <span class="built_in">start</span> historyserver</span><br></pre></td></tr></table></figure></li><li><strong>启动HDFS</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/<span class="built_in">start-dfs</span>.sh</span><br></pre></td></tr></table></figure>-<strong>启动YARN，在hadoop103</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/<span class="built_in">start-yarn</span>.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="集群时间同步"><a href="#集群时间同步" class="headerlink" title="集群时间同步"></a>集群时间同步</h3><p>时间同步的方式：找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，比如，每隔十分钟，同步一次时间。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525161707.png" alt=""></p><ul><li><strong>时间服务器配置（必须root用户）</strong><ul><li><strong>检查ntp是否安装</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm <span class="literal">-qa</span>|grep ntp</span><br></pre></td></tr></table></figure></li><li><strong>修改ntp配置文件/ etc/ntp.conf</strong><br>修改内容如下:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">修改1（授权192.168.1.0-192.168.1.255网段上的所有机器可以从这台机器上查询和同步时间）</span><br><span class="line">#restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap为</span><br><span class="line">restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line">修改2（集群在局域网中，不使用其他互联网上的时间）</span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line">server 1.centos.pool.ntp.org iburst</span><br><span class="line">server 2.centos.pool.ntp.org iburst</span><br><span class="line">server 3.centos.pool.ntp.org iburst为</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">添加3（当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步）</span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></table></figure></li><li><strong>修改/etc/sysconfig/ntpd 文件</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">增加内容如下（让硬件时间与系统时间一起同步）</span><br><span class="line"></span><br><span class="line">SYNC_HWCLOCK=yes</span><br></pre></td></tr></table></figure></li><li><strong>查看ntpd状态</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ntpd status</span><br></pre></td></tr></table></figure></li><li><strong>启动ntpd</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ntpd <span class="built_in">start</span></span><br></pre></td></tr></table></figure></li><li><strong>查看ntpd状态</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop102</span> ~]<span class="comment"># service ntpd status</span></span><br><span class="line">Redirecting to /bin/systemctl status ntpd.service</span><br><span class="line">● ntpd.service - Network Time Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop102</span> ~]<span class="comment"># service ntpd start</span></span><br><span class="line">Redirecting to /bin/systemctl <span class="built_in">start</span> ntpd.service</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop102</span> ~]<span class="comment"># service ntpd status</span></span><br><span class="line">Redirecting to /bin/systemctl status ntpd.service</span><br><span class="line">● ntpd.service - Network Time Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 四 <span class="number">2023</span><span class="literal">-05-25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> CST; <span class="number">2</span>s ago</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">12860</span> ExecStart=/usr/sbin/ntpd <span class="literal">-u</span> ntp:ntp <span class="variable">$OPTIONS</span> (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">12863</span> (ntpd)</span><br><span class="line">    Tasks: <span class="number">1</span></span><br><span class="line">   CGroup: /system.slice/ntpd.service</span><br><span class="line">           └─<span class="number">12863</span> /usr/sbin/ntpd <span class="literal">-u</span> ntp:ntp <span class="literal">-g</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: Listen normally on <span class="number">2</span> lo <span class="number">127.0</span>.<span class="number">0.1</span> UDP <span class="number">123</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: Listen normally on <span class="number">3</span> ens33 <span class="number">192.168</span>.<span class="number">10.102</span> UDP <span class="number">123</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: Listen normally on <span class="number">4</span> virbr0 <span class="number">192.168</span>.<span class="number">122.1</span> UDP <span class="number">123</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: Listen normally on <span class="number">5</span> lo ::<span class="number">1</span> UDP <span class="number">123</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: Listen normally on <span class="number">6</span> ens33 fe80::<span class="number">4</span>e60:<span class="number">766</span>f:adbc:<span class="number">1548</span> UDP <span class="number">123</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: Listening on routing socket on fd <span class="comment">#23 for interface updates</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c016 <span class="number">06</span> restart</span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c012 <span class="number">02</span> freq_set kernel <span class="number">0.000</span> PPM</span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">05</span> hadoop102 ntpd[<span class="number">12863</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c011 <span class="number">01</span> freq_not_set</span><br><span class="line"><span class="number">5</span>月 <span class="number">25</span> <span class="number">17</span>:<span class="number">18</span>:<span class="number">06</span> hadoop102 ntpd[<span class="number">12863</span>]: <span class="number">0.0</span>.<span class="number">0.0</span> c514 <span class="number">04</span> freq_mode</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop102</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><strong>设置ntpd服务开机启动</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop102</span> ~]<span class="comment"># chkconfig ntpd on</span></span><br><span class="line">注意：正在将请求转发到“systemctl enable ntpd.service”。</span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service.</span><br></pre></td></tr></table></figure></li><li><strong>其他机器配置（必须root用户）</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）在其他机器配置<span class="number">10</span>分钟与时间服务器同步一次</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop103</span>桌面]<span class="comment"># crontab -e</span></span><br><span class="line">编写定时任务如下：</span><br><span class="line">*/<span class="number">10</span> * * * * /usr/sbin/ntpdate hadoop102</span><br><span class="line">（<span class="number">2</span>）修改任意机器时间</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop103</span>桌面]<span class="comment"># date -s &quot;2017-9-11 11:11:11&quot;</span></span><br><span class="line">（<span class="number">3</span>）十分钟后查看机器是否与时间服务器同步</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop103</span>桌面]<span class="comment"># date</span></span><br><span class="line">说明：测试的时候可以将<span class="number">10</span>分钟调整为<span class="number">1</span>分钟，节省时间。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="第四章-HDFS-概述"><a href="#第四章-HDFS-概述" class="headerlink" title="第四章 HDFS 概述"></a>第四章 HDFS 概述</h1><h2 id="HDFS优缺点"><a href="#HDFS优缺点" class="headerlink" title="HDFS优缺点"></a>HDFS优缺点</h2><ul><li><p><strong>优点</strong></p><ul><li>高容错性：<br>（1）数据自动保存多个副本。它通过增加副本的形式，提高容错性；<br>（2）某一个副本丢失以后，它可以自动恢复。</li><li>适合处理大数据：<br>（1）数据规模：能够处理数据规模达到GB、TB、甚至PB级别的数据；<br>（2）文件规模：能够处理百万规模以上的文件数量，数量相当之大。</li><li>可构建在廉价机器上，通过多副本机制，提高可靠性。</li></ul></li><li><p><strong>缺点</strong></p><ul><li>不适合低延时数据访问，比如毫秒级的存储数据，是做不到的。</li><li>无法高效的对大量小文件进行存储。<br>（1）存储大量小文件的话，它会占用NameNode大量的内存来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限的；<br>（2）小文件存储的寻址时间会超过读取时间，它违反了HDFS的设计目标。</li><li>不支持并发写入、文件随机修改。<br>（1）一个文件只能有一个写，不允许多个线程同时写；<br>（2）仅支持数据append（追加），不支持文件的随机修改。</li></ul></li></ul><h2 id="HDFS组成架构"><a href="#HDFS组成架构" class="headerlink" title="HDFS组成架构"></a>HDFS组成架构</h2><ol><li>NameNode（nn）：就是Master，它是一个主管、管理者。<br>（1）管理HDFS的名称空间；<br>（2）配置副本策略；<br>（3）管理数据块（Block）映射信息；<br>（4）处理客户端读写请求。</li><li>DataNode：就是Slave。NameNode下达命令，DataNode执行实际的操作。<br>（1）存储实际的数据块；<br>（2）执行数据块的读/写操作。</li><li>Client：就是客户端。<br>（1）文件切分。文件上传HDFS的时候，Client将文件切分成一个一个的Block，然后进行上传；<br>（2）与NameNode交互，获取文件的位置信息；<br>（3）与DataNode交互，读取或者写入数据；<br>（4）Client提供一些命令来管理HDFS，比如NameNode格式化；<br>（5）Client可以通过一些命令来访问HDFS，比如对HDFS增删查改操作；</li><li>Secondary NameNode：并非NameNode的热备。当NameNode挂掉的时候，它并不能马上替换NameNode并提供服务。<br>（1）辅助NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode ；<br>（2）在紧急情况下，可辅助恢复NameNode。</li></ol><h2 id="HDFS文件块大小"><a href="#HDFS文件块大小" class="headerlink" title="HDFS文件块大小"></a>HDFS文件块大小</h2><p>HDFS中的文件在物理上是分块存储（Block），块的大小可以通过配置参数( dfs.blocksize)来规定，默认大小在Hadoop2.x版本中是128M，老版本中是64M。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230525195408.png" alt=""></p><h1 id="第五章-HDFS的Shell操作"><a href="#第五章-HDFS的Shell操作" class="headerlink" title="第五章 HDFS的Shell操作"></a>第五章 HDFS的Shell操作</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/hadoop fs 具体命令</span><br><span class="line">bin/hdfs dfs 具体命令</span><br></pre></td></tr></table></figure><h2 id="常用命令实操"><a href="#常用命令实操" class="headerlink" title="常用命令实操"></a>常用命令实操</h2><ol><li>启动Hadoop集群<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> ~]<span class="variable">$</span> <span class="built_in">start-dfs</span>.sh</span><br><span class="line">Starting namenodes on [<span class="type">hadoop102</span>]</span><br><span class="line">hadoop102: starting namenode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-namenode-hadoop102</span>.out</span><br><span class="line">hadoop103: starting datanode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-datanode-hadoop103</span>.out</span><br><span class="line">hadoop104: starting datanode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-datanode-hadoop104</span>.out</span><br><span class="line">hadoop102: starting datanode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-datanode-hadoop102</span>.out</span><br><span class="line">Starting secondary namenodes [<span class="type">hadoop104</span>]</span><br><span class="line">hadoop104: starting secondarynamenode, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/hadoop<span class="literal">-Jermyn-secondarynamenode-hadoop104</span>.out</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> ~]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">2305</span> DataNode</span><br><span class="line"><span class="number">2409</span> NodeManager</span><br><span class="line"><span class="number">2729</span> Jps</span><br><span class="line"><span class="number">2190</span> NameNode</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop103</span> ~]<span class="variable">$</span> <span class="built_in">start-yarn</span>.sh</span><br><span class="line">starting yarn daemons</span><br><span class="line">starting resourcemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-resourcemanager-hadoop103</span>.out</span><br><span class="line">hadoop104: starting nodemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-nodemanager-hadoop104</span>.out</span><br><span class="line">hadoop103: starting nodemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-nodemanager-hadoop103</span>.out</span><br><span class="line">hadoop102: starting nodemanager, logging to /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/logs/yarn<span class="literal">-Jermyn-nodemanager-hadoop102</span>.out</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop103</span> ~]<span class="variable">$</span> jps</span><br><span class="line"><span class="number">2561</span> Jps</span><br><span class="line"><span class="number">2066</span> ResourceManager</span><br><span class="line"><span class="number">2005</span> DataNode</span><br><span class="line"><span class="number">2191</span> NodeManager</span><br></pre></td></tr></table></figure></li><li>-help：输出这个命令参数(查某个命令的使用)<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> ~]<span class="variable">$</span> hadoop fs <span class="literal">-help</span> mkdir</span><br><span class="line"><span class="literal">-mkdir</span> [-<span class="type">p</span>] &lt;path&gt; ... :</span><br><span class="line">  Create a directory <span class="keyword">in</span> specified location.</span><br><span class="line"></span><br><span class="line">  <span class="literal">-p</span>  <span class="keyword">Do</span> not fail <span class="keyword">if</span> the directory already exists</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> ~]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>-ls: 显示目录信息　<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> ~]<span class="variable">$</span> hadoop fs <span class="literal">-ls</span> /</span><br><span class="line">Found <span class="number">1</span> items</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   - Jermyn supergroup          <span class="number">0</span> <span class="number">2023</span><span class="literal">-05-25</span> <span class="number">14</span>:<span class="number">24</span> /user</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> ~]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>-mkdir：在HDFS上创建目录<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> ~]<span class="variable">$</span> hadoop fs <span class="literal">-mkdir</span> <span class="literal">-p</span> /folder1/folder2/folder3</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526103718.png" alt=""></li><li>-moveFromLocal：从本地剪切粘贴到HDFS<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">38</span> demo.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">15</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">10</span>:<span class="number">52</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">8</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">18</span>:<span class="number">55</span> jdk1.<span class="number">8.0</span>_144</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-moveFromLocal</span> ./demo.txt /folder1/folder2/folder3</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">8</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">15</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">10</span>:<span class="number">52</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">8</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">18</span>:<span class="number">55</span> jdk1.<span class="number">8.0</span>_144</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526104029.png" alt=""></li><li>-appendToFile：追加一个文件到已经存在的文件末尾<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> vim demo2.txt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> <span class="built_in">cat</span> demo2.txt</span><br><span class="line">hello hadoop2.<span class="number">7.2</span></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-appendToFile</span> ./demo2.txt /folder1/folder2/folder3/demo.txt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526104628.png" alt=""></li><li>-cat：显示文件内容<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> <span class="built_in">cat</span> demo2.txt</span><br><span class="line">hello hadoop2.<span class="number">7.2</span></span><br></pre></td></tr></table></figure></li><li>-chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-chgrp</span> Jermyn /folder1/folder2/folder3/demo.txt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526105125.png" alt=""></li><li>-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-copyFromLocal</span> ./DEMO.txt /folder1/folder2/folder3</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526105506.png" alt=""></li><li>-copyToLocal：从HDFS拷贝到本地<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">12</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">43</span> demo2.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">52</span> DEMO.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">15</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">10</span>:<span class="number">52</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">8</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">18</span>:<span class="number">55</span> jdk1.<span class="number">8.0</span>_144</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-copyToLocal</span> /folder1/folder2/folder3/demo.txt ./</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">16</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">43</span> demo2.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">57</span> demo.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">52</span> DEMO.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">15</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">10</span>:<span class="number">52</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">8</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">18</span>:<span class="number">55</span> jdk1.<span class="number">8.0</span>_144</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>-cp ：从HDFS的一个路径拷贝到HDFS的另一个路径<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-cp</span> /user/Jermyn/input/wcinput /folder1/folder2/folder3</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-ls</span> /folder1/folder2/folder3</span><br><span class="line">Found <span class="number">3</span> items</span><br><span class="line"><span class="literal">-rw-r--r--</span>   <span class="number">3</span> Jermyn supergroup          <span class="number">0</span> <span class="number">2023</span><span class="literal">-05-26</span> <span class="number">10</span>:<span class="number">54</span> /folder1/folder2/folder3/DEMO.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>   <span class="number">3</span> Jermyn Jermyn             <span class="number">18</span> <span class="number">2023</span><span class="literal">-05-26</span> <span class="number">10</span>:<span class="number">44</span> /folder1/folder2/folder3/demo.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   - Jermyn supergroup          <span class="number">0</span> <span class="number">2023</span><span class="literal">-05-26</span> <span class="number">10</span>:<span class="number">59</span> /folder1/folder2/folder3/wcinput</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526110030.png" alt=""></li><li>-mv：在HDFS目录中移动文件<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-mv</span> /folder1/folder2/folder3/demo.txt /user/Jermyn/input</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-ls</span> /user/Jermyn/input</span><br><span class="line">Found <span class="number">3</span> items</span><br><span class="line"><span class="literal">-rw-r--r--</span>   <span class="number">3</span> Jermyn Jermyn             <span class="number">18</span> <span class="number">2023</span><span class="literal">-05-26</span> <span class="number">10</span>:<span class="number">44</span> /user/Jermyn/input/demo.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>   <span class="number">3</span> Jermyn supergroup  <span class="number">197657687</span> <span class="number">2023</span><span class="literal">-05-25</span> <span class="number">15</span>:<span class="number">22</span> /user/Jermyn/input/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>.tar.gz</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   - Jermyn supergroup          <span class="number">0</span> <span class="number">2023</span><span class="literal">-05-25</span> <span class="number">15</span>:<span class="number">19</span> /user/Jermyn/input/wcinput</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526110313.png" alt=""></li><li>-get：等同于copyToLocal，就是从HDFS下载文件到本地<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-get</span> /folder1/folder2/folder3/wcinput /opt/module/</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">43</span> demo2.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">57</span> demo.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">52</span> DEMO.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">15</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">10</span>:<span class="number">52</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">8</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">18</span>:<span class="number">55</span> jdk1.<span class="number">8.0</span>_144</span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">2</span> Jermyn root   <span class="number">4096</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">09</span> wcinput</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> </span><br></pre></td></tr></table></figure></li><li>-put：等同于copyFromLocal<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">43</span> demo2.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">57</span> demo.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">52</span> DEMO.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">15</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">10</span>:<span class="number">52</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">8</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">18</span>:<span class="number">55</span> jdk1.<span class="number">8.0</span>_144</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">12</span> log1.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">12</span> log2.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">12</span> log3.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">2</span> Jermyn root   <span class="number">4096</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">09</span> wcinput</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-put</span> log* /log</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526111445.png" alt=""></li><li>-getmerge：合并下载多个文件，比如HDFS的目录 /user/Jermyn/test下有多个文件:log.1, log.2,log.3,…<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-getmerge</span> /log/log* /opt/module/log_mege.txt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> ll</span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">43</span> demo2.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root     <span class="number">18</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">57</span> demo.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">52</span> DEMO.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>. <span class="number">15</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">25</span> <span class="number">10</span>:<span class="number">52</span> hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">8</span> Jermyn Jermyn <span class="number">4096</span> <span class="number">5</span>月  <span class="number">24</span> <span class="number">18</span>:<span class="number">55</span> jdk1.<span class="number">8.0</span>_144</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">12</span> log1.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">12</span> log2.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">12</span> log3.txt</span><br><span class="line"><span class="literal">-rw-r--r--</span>.  <span class="number">1</span> Jermyn root      <span class="number">0</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">16</span> log_mege.txt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>.  <span class="number">2</span> Jermyn root   <span class="number">4096</span> <span class="number">5</span>月  <span class="number">26</span> <span class="number">11</span>:<span class="number">09</span> wcinput</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>-tail：显示一个文件的末尾<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-tail</span> /user/Jermyn/input/wcinput/wc.input</span><br><span class="line">JERMYN JREMYEN Jermfdyn java JAVA hadoop HADOOP</span><br><span class="line">JERMYTN JREMYDN Jefrmyn java JAVA hadoop HADOOP</span><br><span class="line">JERMYCN JRECMYN Jermyfn javaC JAVAA hadoop HADOOP</span><br><span class="line">EJERMYN JREEMYN Jermyn javac JAVA hadoop HADOOP</span><br><span class="line">JEERMYN JREEMYN Jermyn javaSE JAVA hadoop HADOOP</span><br><span class="line">JERDMYN JEREMYN Jermyn javaEE JAVA hadoop HADOOP</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>-rm：删除文件或文件夹<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-rm</span> <span class="literal">-R</span> /folder1</span><br><span class="line"><span class="number">23</span>/<span class="number">05</span>/<span class="number">26</span> <span class="number">11</span>:<span class="number">21</span>:<span class="number">44</span> INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = <span class="number">0</span> minutes, Emptier interval = <span class="number">0</span> minutes.</span><br><span class="line">Deleted /folder1</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526112207.png" alt=""></li><li>-rmdir：删除空目录<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-mkdir</span> /FolderEmpt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-rmdir</span> /FolderEmpt</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>-du统计文件夹的大小信息<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-du</span> /</span><br><span class="line"><span class="number">0</span>          /log</span><br><span class="line"><span class="number">197657998</span>  /user</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li>-setrep：设置HDFS中文件的副本数量<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span> hadoop fs <span class="literal">-setrep</span> <span class="number">7</span> /user/Jermyn/input/wcinput/wc.input</span><br><span class="line">Replication <span class="number">7</span> <span class="built_in">set</span>: /user/Jermyn/input/wcinput/wc.input</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">module</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230526112849.png" alt=""><span class='p red'>这里设置的副本数只是记录在NameNode的元数据中，是否真的会有这么多副本，还得看DataNode的数量，因为目前只有3台设备，最多也就3个副本，只有节点数的增加到7台时，副本数才能达到7</span></li></ol><h1 id="第六章-HDFS客户端操作"><a href="#第六章-HDFS客户端操作" class="headerlink" title="第六章 HDFS客户端操作"></a>第六章 HDFS客户端操作</h1><h2 id="HDFS客户端环境准备"><a href="#HDFS客户端环境准备" class="headerlink" title="HDFS客户端环境准备"></a>HDFS客户端环境准备</h2><ol><li><strong>Win下面配置高级环境变量</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HADOOP_HOME=D:\PATH_EN\hadoop<span class="literal">-2</span>.<span class="number">7.2</span></span><br><span class="line"></span><br><span class="line">path添加：</span><br><span class="line">PATH=%HADOOP_HOME%\bin</span><br></pre></td></tr></table></figure></li><li><strong>创建一个Maven工程HdfsClient</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230527195758.png" alt=""></li><li><strong>导入相应的依赖坐标+日志添加</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HdfsClient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>HdfsClient<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>注意：如果Eclipse/Idea打印不出日志，需要在项目的src/main/resources目录下，新建一个文件，命名为“log4j.properties”，在文件中填入</strong><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br><span class="line"><span class="attr">log4j.appender.logfile</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.File</span>=<span class="string">target/spring.log</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m%n</span></span><br></pre></td></tr></table></figure></li><li><strong>创建HdfsClient类测试</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.hdfs;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * hadoop在访问hdfs的时候会进行权限认证，取用户名的过程是这样的：</span></span><br><span class="line"><span class="comment">         * 读取HADOOP_USER_NAME系统环境变量，如果不为空，那么拿它作username，如果为空</span></span><br><span class="line"><span class="comment">         * 读取HADOOP_USER_NAME这个java环境变量，如果为空</span></span><br><span class="line"><span class="comment">         * 从com.sun.security.auth.NTUserPrincipal或者com.sun.security.auth.UnixPrincipal的实例获取username。</span></span><br><span class="line"><span class="comment">         * 如果以上尝试都失败，那么抛出异常LoginException(&quot;Can’t find user name&quot;)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        Properties properties = System.getProperties();</span></span><br><span class="line"><span class="comment">//        properties.setProperty(&quot;HADOOP_USER_NAME&quot;, &quot;Jermyn&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://hadoop102:9000&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取hdfs客户端对象</span></span><br><span class="line"><span class="comment">//        FileSystem fileSystem = FileSystem.get(conf);</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), conf, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.在hdfs上创建路径</span></span><br><span class="line">        fileSystem.mkdirs(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hdfsClient/demo/test&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.关闭资源</span></span><br><span class="line">        fileSystem.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;OVER&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230527200459.png" alt=""></li></ol><h2 id="HDFS的API操作"><a href="#HDFS的API操作" class="headerlink" title="HDFS的API操作"></a>HDFS的API操作</h2><h3 id="HDFS文件上传（测试参数优先级）"><a href="#HDFS文件上传（测试参数优先级）" class="headerlink" title="HDFS文件上传（测试参数优先级）"></a>HDFS文件上传（测试参数优先级）</h3><ol><li><strong>编写源代码</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyFromLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.获取fs对象</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), conf, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.执行上传API</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;D:/TestData.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一次客户端代码中设置的值默认副本为3</span></span><br><span class="line"><span class="comment">//        Path dst = new Path(&quot;/hdfsClient/demo/test&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二次配置xml，副本设为1</span></span><br><span class="line"><span class="comment">//        Path dst = new Path(&quot;/hdfsClient/demo/test/TestData2.txt&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三次设置副本数</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hdfsClient/demo/test/TestData3.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fileSystem.copyFromLocalFile(src, dst);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.关闭对象</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;over&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230527202444.png" alt=""></li><li><strong>将hdfs-site.xml拷贝到项目的根目录下</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230527203019.png" alt=""></li><li><strong>参数优先级</strong><br>参数优先级排序：<span class='p red'>（1）客户端代码中设置的值 >（2）ClassPath下的用户自定义配置文件 >（3）然后是服务器的默认配置</span><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230527203244.png" alt=""></li></ol><h3 id="HDFS文件下载"><a href="#HDFS文件下载" class="headerlink" title="HDFS文件下载"></a>HDFS文件下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCopyToLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.执行下载操作</span></span><br><span class="line">    <span class="comment">// boolean delSrc 指是否将原文件删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">delSrc</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Path src 指要下载的文件路径</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hdfsClient/demo/test/TestData.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Path dst 指将文件下载到的路径</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// boolean useRawLocalFileSystem 是否开启文件校验</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">useRawLocalFileSystem</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    fileSystem.copyToLocalFile(delSrc, src, dst, useRawLocalFileSystem);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;OVER&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528104839.png" alt=""></p><h3 id="HDFS文件的删除"><a href="#HDFS文件的删除" class="headerlink" title="HDFS文件的删除"></a>HDFS文件的删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fileSystem</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), conf, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 执行删除</span></span><br><span class="line">    <span class="comment">// 要删除的路径</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hdfsClient/demo/test/TestData3.txt&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果path是一个目录并设置为true，则删除该目录，否则抛出异常。在文件的情况下，递归可以设置为true或false。</span></span><br><span class="line">    <span class="type">boolean</span> recursive= <span class="literal">true</span>;</span><br><span class="line">    fileSystem.delete(f, recursive);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 关闭资源</span></span><br><span class="line">    fileSystem.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;OVER&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDFS文件名更改"><a href="#HDFS文件名更改" class="headerlink" title="HDFS文件名更改"></a>HDFS文件名更改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRename</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException, URISyntaxException&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// src -要重命名的路径</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hdfsClient/demo/test/TestData2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dst -重命名后的新路径</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">dst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hdfsClient/demo/test/TestData3.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 修改文件名称</span></span><br><span class="line">    fs.rename(src,dst);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 关闭资源</span></span><br><span class="line">    fs.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;OVER&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDFS文件详情查看"><a href="#HDFS文件详情查看" class="headerlink" title="HDFS文件详情查看"></a>HDFS文件详情查看</h3><p><strong>查看文件名称、权限、长度、块信息</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListFiles</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 获取文件详情</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// f 是递归路径</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="comment">// 递归地遍历</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">recursive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 返回遍历文件状态的迭代器</span></span><br><span class="line">    RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fs.listFiles(f, recursive);</span><br><span class="line">    <span class="keyword">while</span> (listFiles.hasNext()) &#123;</span><br><span class="line">        <span class="type">LocatedFileStatus</span> <span class="variable">status</span> <span class="operator">=</span> listFiles.next();</span><br><span class="line">        <span class="comment">// 输出详情</span></span><br><span class="line">        <span class="comment">// 文件名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件名称：&quot;</span>+status.getPath().getName());</span><br><span class="line">        <span class="comment">// 长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的大小（长度）：&quot;</span>+status.getLen());</span><br><span class="line">        <span class="comment">// 权限</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的权限：&quot;</span>+status.getPermission());</span><br><span class="line">        <span class="comment">// 分组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的所属组：&quot;</span>+status.getGroup());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文件的块位置</span></span><br><span class="line">        BlockLocation[] blockLocations = status.getBlockLocations();</span><br><span class="line">        <span class="keyword">for</span> (BlockLocation blockLocation : blockLocations) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String host : blockLocation.getHosts()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;承载此文件的主机名：&quot;</span>+host);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.close();</span><br><span class="line">    System.out.println(<span class="string">&quot;OVER&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH_EN\JDK17\bin\java.exe...</span><br><span class="line">文件名称：TestData.txt</span><br><span class="line">文件的大小（长度）：<span class="number">0</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：supergroup</span><br><span class="line">----------------------------------</span><br><span class="line">文件名称：TestData3.txt</span><br><span class="line">文件的大小（长度）：<span class="number">0</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：supergroup</span><br><span class="line">----------------------------------</span><br><span class="line">文件名称：log1.txt</span><br><span class="line">文件的大小（长度）：<span class="number">0</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：supergroup</span><br><span class="line">----------------------------------</span><br><span class="line">文件名称：log2.txt</span><br><span class="line">文件的大小（长度）：<span class="number">0</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：supergroup</span><br><span class="line">----------------------------------</span><br><span class="line">文件名称：log3.txt</span><br><span class="line">文件的大小（长度）：<span class="number">0</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：supergroup</span><br><span class="line">----------------------------------</span><br><span class="line">文件名称：demo.txt</span><br><span class="line">文件的大小（长度）：<span class="number">18</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：Jermyn</span><br><span class="line">----------------------------------</span><br><span class="line">承载此文件的主机名：hadoop104</span><br><span class="line">承载此文件的主机名：hadoop102</span><br><span class="line">承载此文件的主机名：hadoop103</span><br><span class="line">--------------------------------------</span><br><span class="line">文件名称：hadoop-<span class="number">2.7</span><span class="number">.2</span>.tar.gz</span><br><span class="line">文件的大小（长度）：<span class="number">197657687</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：supergroup</span><br><span class="line">----------------------------------</span><br><span class="line">承载此文件的主机名：hadoop104</span><br><span class="line">承载此文件的主机名：hadoop102</span><br><span class="line">承载此文件的主机名：hadoop103</span><br><span class="line">--------------------------------------</span><br><span class="line">承载此文件的主机名：hadoop104</span><br><span class="line">承载此文件的主机名：hadoop102</span><br><span class="line">承载此文件的主机名：hadoop103</span><br><span class="line">--------------------------------------</span><br><span class="line">文件名称：wc.input</span><br><span class="line">文件的大小（长度）：<span class="number">293</span></span><br><span class="line">文件的权限：rw-r--r--</span><br><span class="line">文件的所属组：supergroup</span><br><span class="line">----------------------------------</span><br><span class="line">承载此文件的主机名：hadoop104</span><br><span class="line">承载此文件的主机名：hadoop102</span><br><span class="line">承载此文件的主机名：hadoop103</span><br><span class="line">--------------------------------------</span><br><span class="line">OVER</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><h3 id="HDFS文件和文件夹判断"><a href="#HDFS文件和文件夹判断" class="headerlink" title="HDFS文件和文件夹判断"></a>HDFS文件和文件夹判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListStatus</span><span class="params">()</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>), configuration, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    FileStatus[] fileStatuses = fs.listStatus(path);</span><br><span class="line">    <span class="keyword">for</span> (FileStatus fileStatus : fileStatuses) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是文件还是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (fileStatus.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f：&quot;</span> + fileStatus.getPath().getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d：&quot;</span> + fileStatus.getPath().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HDFS的I-O流操作"><a href="#HDFS的I-O流操作" class="headerlink" title="HDFS的I/O流操作"></a>HDFS的I/O流操作</h2><h3 id="HDFS文件上传"><a href="#HDFS文件上传" class="headerlink" title="HDFS文件上传"></a>HDFS文件上传</h3><ol><li><strong>需求：把本机桌面(C:\Users\Administrator\Desktop)上的文件Test.txt上传到HDFS(/hdfsClient/demo/test/Test.txt)目录</strong></li><li><strong>编写代码</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFileFromHDFS</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>),</span><br><span class="line">            configuration,</span><br><span class="line">            <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 获取输入流</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\Test.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 获取输出流</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/hdfsClient/demo/test/Test.txt&quot;</span>);</span><br><span class="line">    <span class="type">FSDataOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> fs.create(f);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fis, fos, configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528165150.png" alt=""></li></ol><h3 id="HDFS文件下载-1"><a href="#HDFS文件下载-1" class="headerlink" title="HDFS文件下载"></a>HDFS文件下载</h3><ol><li><strong>需求：从HDFS(/log)上下载log1.txt文件到本地桌面（C:\Users\Administrator\Desktop）上</strong></li><li><strong>编写代码</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFileFromHDFS</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>),</span><br><span class="line">            configuration,</span><br><span class="line">            <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 获取输入流</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/log/log1.txt&quot;</span>);</span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(f);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 获取输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\log.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fis, fos, configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528170500.png" alt=""></li></ol><h3 id="定位文件读取"><a href="#定位文件读取" class="headerlink" title="定位文件读取"></a>定位文件读取</h3><ol><li><strong>需求：分块读取HDFS上的大文件，比如根目录下的/user/Jermyn/input/hadoop-2.7.2.tar.gz</strong></li><li><strong>编写代码</strong></li></ol><ul><li><strong>下载第一块</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFileSeek1</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>),</span><br><span class="line">            configuration,</span><br><span class="line">            <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 获取输入流</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/user/Jermyn/input/hadoop-2.7.2.tar.gz&quot;</span>);</span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(f);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 获取输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\hadoop-2.7.2.tar.gz.block1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 流的对拷(只拷贝128)</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1024</span> * <span class="number">128</span>; i++) &#123;</span><br><span class="line">        fis.read(bytes);</span><br><span class="line">        fos.write(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528171624.png" alt=""></li><li><strong>下载第二块</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFileSeek2</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1 获取文件系统</span></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:9000&quot;</span>),</span><br><span class="line">            configuration,</span><br><span class="line">            <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 获取输入流</span></span><br><span class="line">    <span class="type">Path</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/user/Jermyn/input/hadoop-2.7.2.tar.gz&quot;</span>);</span><br><span class="line">    <span class="type">FSDataInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> fs.open(f);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 设置指定的读取节点</span></span><br><span class="line">    fis.seek(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 获取输出流</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\hadoop-2.7.2.tar.gz.block2&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5 流的对拷</span></span><br><span class="line">    IOUtils.copyBytes(fis, fos, configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6 关闭资源</span></span><br><span class="line">    IOUtils.closeStream(fis);</span><br><span class="line">    IOUtils.closeStream(fos);</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528172455.png" alt=""></li><li><strong>合并文件</strong><br>在Window命令窗口中进入到目录E:\，然后执行如下命令，对数据进行合并 type hadoop-2.7.2.tar.gz.part2 &gt;&gt; hadoop-2.7.2.tar.gz.part1<br>合并完成后，将hadoop-2.7.2.tar.gz.part1重新命名为hadoop-2.7.2.tar.gz。解压发现该tar包非常完整。</li></ul><h1 id="第七章-HDFS的数据流"><a href="#第七章-HDFS的数据流" class="headerlink" title="第七章 HDFS的数据流"></a>第七章 HDFS的数据流</h1><h2 id="HDFS写数据流程"><a href="#HDFS写数据流程" class="headerlink" title="HDFS写数据流程"></a>HDFS写数据流程</h2><h3 id="剖析文件写入"><a href="#剖析文件写入" class="headerlink" title="剖析文件写入"></a>剖析文件写入</h3><span class='p center logo large'>HDFS写数据流程</span><span class='p center small green'>点击下图可放大查看</span><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528175922.png" alt=""><br><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>HDFS写数据流程</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第一步</p></div></div><div class='timeline-item-content'><p>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第二步</p></div></div><div class='timeline-item-content'><p>NameNode返回是否可以上传。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第三步</p></div></div><div class='timeline-item-content'><p>客户端请求第一个 Block上传到哪几个DataNode服务器上。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第四步</p></div></div><div class='timeline-item-content'><p>NameNode返回3个DataNode节点，分别为dn1、dn2、dn3（如何返回合适的datanode详细可见7.1.2）。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第五步</p></div></div><div class='timeline-item-content'><p>客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第六步</p></div></div><div class='timeline-item-content'><p>dn1、dn2、dn3逐级应答客户端。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第七步</p></div></div><div class='timeline-item-content'><p>客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第八步</p></div></div><div class='timeline-item-content'><p>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</p></div></div></div></p><h3 id="网络拓扑-节点距离计算"><a href="#网络拓扑-节点距离计算" class="headerlink" title="网络拓扑-节点距离计算"></a>网络拓扑-节点距离计算</h3><p>在HDFS写数据的过程中，NameNode会选择距离待上传数据最近距离的DataNode接收数据。<br>节点距离：<span class='p red'>两个节点到达最近的共同祖先的距离总和。</span><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528184907.png" alt=""></p><h3 id="机架感知（副本存储节点选择）"><a href="#机架感知（副本存储节点选择）" class="headerlink" title="机架感知（副本存储节点选择）"></a>机架感知（副本存储节点选择）</h3><ol><li><strong>官方ip地址</strong><br><strong><em>点击图片跳转链接</em></strong><br><a href="https://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html#Data_Replication"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528185714.png" alt=""></a></li><li><strong>Hadoop2.7.2副本节点选择</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528185910.png" alt=""></li></ol><h2 id="HDFS读数据流程"><a href="#HDFS读数据流程" class="headerlink" title="HDFS读数据流程"></a>HDFS读数据流程</h2><span class='p center logo large'>HDFS的读数据流程</span><span class='p center logo small green'>点击下图可放大查看</span><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528190740.png" alt=""><br><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>HDFS读数据流程</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第一步</p></div></div><div class='timeline-item-content'><p>客户端通过Distributed FileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第二步</p></div></div><div class='timeline-item-content'><p>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第三步</p></div></div><div class='timeline-item-content'><p>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>第四步</p></div></div><div class='timeline-item-content'><p>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</p></div></div></div></p><h1 id="第八章-NameNode和SecondaryNameNode"><a href="#第八章-NameNode和SecondaryNameNode" class="headerlink" title="第八章 NameNode和SecondaryNameNode"></a>第八章 NameNode和SecondaryNameNode</h1><h2 id="NN和2NN工作机制"><a href="#NN和2NN工作机制" class="headerlink" title="NN和2NN工作机制"></a>NN和2NN工作机制</h2><span class='p red'>思考：NameNode中的元数据是存储在哪里的？</span><p>首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。因此，元数据需要存放在内存中。但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。因此产生在磁盘中备份元数据的FsImage。这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，一旦NameNode节点断电，就会产生数据丢失。因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，修改内存中的元数据并追加到Edits中。这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据。但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。因此，引入一个新的节点SecondaryNamenode，专门用于FsImage和Edits的合并。<br><span class='p center logo large'>NN和2NN工作机制</span><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528193202.png" alt=""><br><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>NN和2NN工作机制</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>NN第1步</p></div></div><div class='timeline-item-content'><p>第一次启动NameNode格式化后，创建Fsimage和Edits文件。如果不是第一次启动，直接加载编辑日志和镜像文件到内存。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>NN第2步</p></div></div><div class='timeline-item-content'><p>客户端对元数据进行增删改的请求。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>NN第3步</p></div></div><div class='timeline-item-content'><p>NameNode记录操作日志，更新滚动日志（即：nd向将操作写到edits在进行相应操作）。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>NN第4步</p></div></div><div class='timeline-item-content'><p>NameNode在内存中对数据进行增删改。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第1步</p></div></div><div class='timeline-item-content'><p>Secondary NameNode询问NameNode是否需要CheckPoint。直接带回NameNode是否检查结果。<br>CheckPoint：将edits和fsimage进行合并成为最新的元数据，序列化到fsimage中</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第2步</p></div></div><div class='timeline-item-content'><p>Secondary NameNode请求执行CheckPoint。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第3步</p></div></div><div class='timeline-item-content'><p>NameNode滚动正在写的Edits日志。正在写入的edits叫edits_inprogress_001,滚动生成edits_001，同时生成edits_inprogress_002（空的内容），此后在进行的操作写入到edits_inprogress_002中，</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第4步</p></div></div><div class='timeline-item-content'><p>将滚动前的编辑日志（edits_001）和镜像文件（fsimage）拷贝到Secondary NameNode</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第5步</p></div></div><div class='timeline-item-content'><p>Secondary NameNode加载编辑日志和镜像文件到内存，并合并。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第6步</p></div></div><div class='timeline-item-content'><p>生成新的镜像文件fsimage.chkpoint。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第7步</p></div></div><div class='timeline-item-content'><p>拷贝fsimage.chkpoint到NameNode。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2NN第8步</p></div></div><div class='timeline-item-content'><p>NameNode将fsimage.chkpoint重新命名成fsimage。</p></div></div></div></p><h2 id="NN和2NN工作机制详解："><a href="#NN和2NN工作机制详解：" class="headerlink" title="NN和2NN工作机制详解："></a>NN和2NN工作机制详解：</h2><p>Fsimage：NameNode内存中元数据序列化后形成的文件。<br>Edits：记录客户端更新元数据信息的每一步操作（可通过Edits运算出元数据）。<br>NameNode启动时，先滚动Edits并生成一个空的edits.inprogress，然后加载Edits和Fsimage到内存中，此时NameNode内存就持有最新的元数据信息。Client开始对NameNode发送元数据的增删改的请求，这些请求的操作首先会被记录到edits.inprogress中（查询元数据的操作不会被记录在Edits中，因为查询操作不会更改元数据信息），如果此时NameNode挂掉，重启后会从Edits中读取元数据的信息。然后，NameNode会在内存中执行元数据的增删改的操作。<br>由于Edits中记录的操作会越来越多，Edits文件会越来越大，导致NameNode在启动加载Edits时会很慢，所以需要对Edits和Fsimage进行合并（所谓合并，就是将Edits和Fsimage加载到内存中，照着Edits中的操作一步步执行，最终形成新的Fsimage）。SecondaryNameNode的作用就是帮助NameNode进行Edits和Fsimage的合并工作。<br>SecondaryNameNode首先会询问NameNode是否需要CheckPoint（触发CheckPoint需要满足两个条件中的任意一个，定时时间到和Edits中数据写满了）。直接带回NameNode是否检查结果。SecondaryNameNode执行CheckPoint操作，首先会让NameNode滚动Edits并生成一个空的edits.inprogress，滚动Edits的目的是给Edits打个标记，以后所有新的操作都写入edits.inprogress，其他未合并的Edits和Fsimage会拷贝到SecondaryNameNode的本地，然后将拷贝的Edits和Fsimage加载到内存中进行合并，生成fsimage.chkpoint，然后将fsimage.chkpoint拷贝给NameNode，重命名为Fsimage后替换掉原来的Fsimage。NameNode在启动时就只需要加载之前未合并的Edits和Fsimage即可，因为合并过的Edits中的元数据信息已经被记录在Fsimage中。</p><h2 id="Fsimage和Edits解析"><a href="#Fsimage和Edits解析" class="headerlink" title="Fsimage和Edits解析"></a>Fsimage和Edits解析</h2><span class='p center logo large'>Fsimage和Edits概念</span><p>NameNode被格式化之后，将在/opt/module/hadoop-2.7.2/data/tmp/dfs/name/current目录中产生如下文件<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528202634.png" alt=""></p><ol><li>Fsimage文件：HDFS文件系统元数据的一个永久性的检查点，其中包含HDFS文件系统的所有目录和文件inode的序列化信息。 </li><li>Edits文件：存放HDFS文件系统的所有更新操作的路径，文件系统客户端执行的所有写操作首先会被记录到Edits文件中。 </li><li>seen<em>txid文件保存的是一个数字，就是最后一个edits</em>的数字(即最新的操作的edits的文件id)</li><li>每次NameNode启动的时候都会将Fsimage文件读入内存，加载Edits里面的更新操作，保证内存中的元数据信息是最新的、同步的，可以看成NameNode启动的时候就将Fsimage和Edits文件进行了合并。</li></ol><h3 id="oiv查看Fsimage文件"><a href="#oiv查看Fsimage文件" class="headerlink" title="oiv查看Fsimage文件"></a>oiv查看Fsimage文件</h3><ol><li><strong>查看oiv和oev命令</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span> hdfs | grep <span class="literal">-E</span>  <span class="string">&#x27;oiv|oev&#x27;</span></span><br><span class="line">  oiv                  apply the offline fsimage viewer to an fsimage</span><br><span class="line">  oiv_legacy           apply the offline fsimage viewer to an legacy fsimage</span><br><span class="line">  oev                  apply the offline edits viewer to an edits file</span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">hadoop</span>-<span class="number">2.7</span><span class="type">.2</span>]<span class="variable">$</span></span><br></pre></td></tr></table></figure></li><li><strong>基本语法</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs oiv <span class="literal">-p</span> 文件类型 <span class="literal">-i</span>镜像文件 <span class="literal">-o</span> 转换后文件输出路径</span><br></pre></td></tr></table></figure></li><li><strong>案例实操</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">current</span>]<span class="variable">$</span> <span class="built_in">pwd</span></span><br><span class="line">/opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/<span class="keyword">data</span>/tmp/dfs/name/current</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">current</span>]<span class="variable">$</span> hdfs oiv <span class="literal">-p</span> XML <span class="literal">-i</span> fsimage_0000000000000000025 <span class="literal">-o</span> /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/fsimage.xml</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">current</span>]<span class="variable">$</span> <span class="built_in">cat</span> /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/fsimage.xml</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>思考：可以看出，Fsimage中没有记录块所对应DataNode，为什么？</strong><br>在集群启动后，要求DataNode上报数据块信息，并间隔一段时间后再次上报。</li></ul><h3 id="oev查看Edits文件"><a href="#oev查看Edits文件" class="headerlink" title="oev查看Edits文件"></a>oev查看Edits文件</h3><ol><li><strong>基本语法</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs oev <span class="literal">-p</span> 文件类型 <span class="literal">-i</span>编辑日志 <span class="literal">-o</span> 转换后文件输出路径</span><br></pre></td></tr></table></figure></li><li><strong>实例实操</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">current</span>]<span class="variable">$</span> hdfs oev <span class="literal">-p</span> XML <span class="literal">-i</span> edits_0000000000000000012<span class="literal">-0000000000000000013</span> <span class="literal">-o</span> /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/edits.xml</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">current</span>]<span class="variable">$</span> <span class="built_in">cat</span> /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/edits.xml</span><br></pre></td></tr></table></figure></li></ol><h2 id="CheckPoint时间设置"><a href="#CheckPoint时间设置" class="headerlink" title="CheckPoint时间设置"></a>CheckPoint时间设置</h2><p><a href="https://hadoop.apache.org/docs/r2.7.2/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/facf/20230528222032.png" alt=""></a></p><ol><li><strong>通常情况下，SecondaryNameNode每隔一小时执行一次。</strong><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hdfs<span class="literal">-default</span>.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>3600<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><strong>一分钟检查一次操作次数，3当操作次数达到1百万时，SecondaryNameNode执行一次。</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.txns<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>1000000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>操作动作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.check.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span> 1分钟检查一次操作次数<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">&lt;/property &gt;</span><br></pre></td></tr></table></figure><h2 id="NameNode故障处理"><a href="#NameNode故障处理" class="headerlink" title="NameNode故障处理"></a>NameNode故障处理</h2>NameNode故障后，可以采用如下两种方法恢复数据。</li></ol><ul><li><strong>方法一：将SecondaryNameNode中数据拷贝到NameNode存储数据的目录(我们发现2NN和NN相比NN多个seentxid文件，其他都一样，所以此方法是将2NN的所有文件拷贝到NN所在的相应目录下)</strong></li></ul><ol><li>kill -9 NameNode进程</li><li>删除NameNode存储的数据（/opt/module/hadoop-2.7.2/data/tmp/dfs/name）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/<span class="keyword">data</span>/tmp/dfs/name/*</span><br></pre></td></tr></table></figure></li><li>拷贝SecondaryNameNode中数据到原NameNode存储数据目录<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="literal">-r</span> Jermyn@hadoop104:/opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/<span class="keyword">data</span>/tmp/dfs/namesecondary/* ./name/</span><br></pre></td></tr></table></figure></li><li>重新启动NameNode<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop<span class="literal">-daemon</span>.sh <span class="built_in">start</span> namenode</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>方法二：使用-importCheckpoint选项启动NameNode守护进程，从而将SecondaryNameNode中数据拷贝到NameNode目录中。（CheckPoint触发条件是①定时时间到②edits中数据满，显然数据满不了了，所以我们修改定时任务，时间缩短，让他尽快触发进行Checkpoint，把内存的数据导出）</strong></li></ul><ol><li>修改hdfs-site.xml中的<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.checkpoint.period<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>120<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-2.7.2/data/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>kill -9 NameNode进程</li><li>删除NameNode存储的数据（/opt/module/hadoop-2.7.2/data/tmp/dfs/name）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> /opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/<span class="keyword">data</span>/tmp/dfs/name/*</span><br></pre></td></tr></table></figure></li><li>如果SecondaryNameNode不和NameNode在一个主机节点上，需要将SecondaryNameNode存储数据的目录拷贝到NameNode存储数据的平级目录，并删除in_use.lock文件<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">dfs</span>]<span class="variable">$</span> scp <span class="literal">-r</span> Jermyn@hadoop104:/opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/<span class="keyword">data</span>/tmp/dfs/namesecondary ./</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">namesecondary</span>]<span class="variable">$</span> <span class="built_in">rm</span> <span class="literal">-rf</span> in_use.lock</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">dfs</span>]<span class="variable">$</span> <span class="built_in">pwd</span></span><br><span class="line">/opt/module/hadoop<span class="literal">-2</span>.<span class="number">7.2</span>/<span class="keyword">data</span>/tmp/dfs</span><br><span class="line"></span><br><span class="line">[<span class="type">Jermyn</span>@<span class="type">hadoop102</span> <span class="type">dfs</span>]<span class="variable">$</span> <span class="built_in">ls</span></span><br><span class="line"><span class="keyword">data</span>  name  namesecondary</span><br></pre></td></tr></table></figure></li><li>导入检查点数据（等待一会ctrl+c结束掉）<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode <span class="literal">-importCheckpoint</span></span><br></pre></td></tr></table></figure></li><li>启动NameNode<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/hadoop<span class="literal">-daemon</span>.sh <span class="built_in">start</span> namenode</span><br></pre></td></tr></table></figure></li></ol><h2 id="集群安全模式"><a href="#集群安全模式" class="headerlink" title="集群安全模式"></a>集群安全模式</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-Hadoop框架&quot;&gt;&lt;a href=&quot;#第一章-Hadoop框架&quot; class=&quot;headerlink&quot; title=&quot;第一章 Hadoop框架&quot;&gt;&lt;/a&gt;第一章 Hadoop框架&lt;/h1&gt;&lt;h2 id=&quot;Hadoop1-x-和-Hadoop2-x-区别&quot;</summary>
      
    
    
    
    <category term="大数据" scheme="https://www.jermyn.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="hadoop" scheme="https://www.jermyn.cn/tags/hadoop/"/>
    
    <category term="大数据" scheme="https://www.jermyn.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础命令</title>
    <link href="https://www.jermyn.cn/posts/eb1d.html"/>
    <id>https://www.jermyn.cn/posts/eb1d.html</id>
    <published>2023-05-22T22:17:56.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程线程类"><a href="#进程线程类" class="headerlink" title="进程线程类"></a>进程线程类</h1><p>进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。</p><h3 id="ps-查看当前系统进程状态"><a href="#ps-查看当前系统进程状态" class="headerlink" title="ps 查看当前系统进程状态"></a>ps 查看当前系统进程状态</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ps</span> aux | grep xxx（功能描述：查看系统中所有进程）</span><br><span class="line"><span class="built_in">ps</span> <span class="literal">-ef</span> | grep xxx（功能描述：可以查看子父进程之间的关系）</span><br></pre></td></tr></table></figure><blockquote><p>-a    选择所有进程<br>-u    显示所有用户的所有进程<br>-x    显示没有终端的进程</p></blockquote><h3 id="ps-aux显示信息说明"><a href="#ps-aux显示信息说明" class="headerlink" title="ps aux显示信息说明"></a>ps aux显示信息说明</h3><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522222115.png" alt=""><br>USER：该进程是由哪个用户产生的<br>PID：进程的ID号<br>%CPU：该进程占用CPU资源的百分比，占用越高，进程越耗费资源；<br>%MEM：该进程占用物理内存的百分比，占用越高，进程越耗费资源；<br>VSZ：该进程占用虚拟内存的大小，单位KB；<br>RSS：该进程占用实际物理内存的大小，单位KB；<br>TTY：该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端。<br>STAT：进程状态。常见的状态有：R：运行、S：睡眠、T：停止状态、s：包含子进程、+：位于后台<br>START：该进程的启动时间<br>TIME：该进程占用CPU的运算时间，注意不是系统时间<br>COMMAND：产生此进程的命令名</p><h3 id="ps-ef显示信息说明"><a href="#ps-ef显示信息说明" class="headerlink" title="ps -ef显示信息说明"></a>ps -ef显示信息说明</h3><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522222239.png" alt=""><br>UID：用户ID<br>PID：进程ID<br>PPID：父进程ID<br>C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高<br>STIME：进程启动的时间<br>TTY：完整的终端名称<br>TIME：CPU时间<br>CMD：启动进程所用的命令和参数</p><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>如果想查看进程的CPU占用率和内存占用率，可以使用aux;<br>如果想查看进程的父进程ID可以使用ef;</p><h2 id="kill-终止进程"><a href="#kill-终止进程" class="headerlink" title="kill 终止进程"></a>kill 终止进程</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span>  [选项] 进程号（功能描述：通过进程号杀死进程）</span><br><span class="line">killall 进程名称（功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</span><br></pre></td></tr></table></figure><blockquote><p>-9    表示强迫进程立即停止</p></blockquote><h2 id="top-查看系统健康状态"><a href="#top-查看系统健康状态" class="headerlink" title="top 查看系统健康状态"></a>top 查看系统健康状态</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [选项]</span><br></pre></td></tr></table></figure><blockquote><p>-d 秒数    指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行的命令：<br>-i    使top不显示任何闲置或者僵死进程。<br>-p    通过指定监控进程ID来仅仅监控某个进程的状态。</p></blockquote><h3 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h3><p>P    以CPU使用率排序，默认就是此项<br>M    以内存的使用率排序<br>N    以PID排序<br>q    退出top</p><h3 id="查询结果字段解释"><a href="#查询结果字段解释" class="headerlink" title="查询结果字段解释"></a>查询结果字段解释</h3><ul><li><strong>第一行信息为任务队列信息</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522223544.png" alt=""></li><li><strong>第二行为进程信息</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522223649.png" alt=""></li><li><strong>第三行为CPU信息</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522223735.png" alt=""></li><li><strong>第四行为物理内存信息</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522223820.png" alt=""></li><li><strong>第五行为交换分区（swap）信息</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522223902.png" alt=""></li></ul><h2 id="netstat-显示网络统计信息和端口占用情况"><a href="#netstat-显示网络统计信息和端口占用情况" class="headerlink" title="netstat 显示网络统计信息和端口占用情况"></a>netstat 显示网络统计信息和端口占用情况</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat <span class="literal">-anp</span> |grep 进程号    （功能描述：查看该进程网络信息）</span><br><span class="line">netstat <span class="literal">-nlp</span>| grep 端口号（功能描述：查看网络端口号占用情况）</span><br></pre></td></tr></table></figure><blockquote><p>-n    拒绝显示别名，能显示数字的全部转化成数字<br>-l    仅列出有在listen（监听）的服务状态<br>-p    表示显示哪个进程在调用</p></blockquote><h2 id="crond-系统定时任务"><a href="#crond-系统定时任务" class="headerlink" title="crond 系统定时任务"></a>crond 系统定时任务</h2><h3 id="crond-服务管理"><a href="#crond-服务管理" class="headerlink" title="crond 服务管理"></a>crond 服务管理</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># service crond restart</span></span><br><span class="line">Redirecting to /bin/systemctl restart crond.service</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># systemctl status crond</span></span><br><span class="line">● crond.service - Command Scheduler</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 一 <span class="number">2023</span><span class="literal">-05-22</span> <span class="number">22</span>:<span class="number">44</span>:<span class="number">56</span> CST; <span class="number">16</span>s ago</span><br><span class="line"> Main PID: <span class="number">3383</span> (crond)</span><br><span class="line">    Tasks: <span class="number">1</span></span><br><span class="line">   CGroup: /system.slice/crond.service</span><br><span class="line">           └─<span class="number">3383</span> /usr/sbin/crond <span class="literal">-n</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>月 <span class="number">22</span> <span class="number">22</span>:<span class="number">44</span>:<span class="number">56</span> hadoop100 systemd[<span class="number">1</span>]: Started Command Scheduler.</span><br><span class="line"><span class="number">5</span>月 <span class="number">22</span> <span class="number">22</span>:<span class="number">44</span>:<span class="number">56</span> hadoop100 systemd[<span class="number">1</span>]: Starting Command Scheduler...</span><br><span class="line"><span class="number">5</span>月 <span class="number">22</span> <span class="number">22</span>:<span class="number">44</span>:<span class="number">56</span> hadoop100 crond[<span class="number">3383</span>]: (CRON) INFO (RANDOM_DELAY will be scaled with factor <span class="number">23</span>% <span class="keyword">if</span> used.)</span><br><span class="line"><span class="number">5</span>月 <span class="number">22</span> <span class="number">22</span>:<span class="number">44</span>:<span class="number">56</span> hadoop100 crond[<span class="number">3383</span>]: (CRON) INFO (running with inotify support)</span><br><span class="line"><span class="number">5</span>月 <span class="number">22</span> <span class="number">22</span>:<span class="number">44</span>:<span class="number">56</span> hadoop100 crond[<span class="number">3383</span>]: (CRON) INFO (@reboot jobs will be run at computer<span class="string">&#x27;s startup.)</span></span><br><span class="line"><span class="string">[root@hadoop100 ~]#</span></span><br></pre></td></tr></table></figure><h3 id="crontab-定时任务设置"><a href="#crontab-定时任务设置" class="headerlink" title="crontab 定时任务设置"></a>crontab 定时任务设置</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab [选项]</span><br></pre></td></tr></table></figure><blockquote><p>-e    编辑crontab定时任务<br>-l    查询crontab任务<br>-r    删除当前用户所有的crontab任务</p></blockquote><ul><li><p><strong>进入crontab编辑界面。会打开vim编辑你的工作</strong><br>* * * * * 执行的任务<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522224845.png" alt=""></p></li><li><p><strong>特殊符号</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522224938.png" alt=""></p></li></ul><p>-<strong>特定时间执行命令</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522225008.png" alt=""></p><h1 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h1><h2 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h2><h3 id="RPM查询命令（rpm-qa）"><a href="#RPM查询命令（rpm-qa）" class="headerlink" title="RPM查询命令（rpm -qa）"></a>RPM查询命令（rpm -qa）</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm <span class="literal">-qa</span>（功能描述：查询所安装的所有rpm软件包）</span><br></pre></td></tr></table></figure><ul><li><strong>经验</strong><br>由于软件包比较多，一般都会采取过滤。rpm -qa | grep rpm软件包</li></ul><h3 id="RPM卸载命令（rpm-e）"><a href="#RPM卸载命令（rpm-e）" class="headerlink" title="RPM卸载命令（rpm -e）"></a>RPM卸载命令（rpm -e）</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm <span class="literal">-e</span> RPM软件包   </span><br><span class="line">rpm <span class="literal">-e</span> <span class="literal">--nodeps</span> 软件包  </span><br></pre></td></tr></table></figure><blockquote><p>-e    卸载软件包<br>—nodeps    卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</p></blockquote><h3 id="RPM安装命令（rpm-ivh）"><a href="#RPM安装命令（rpm-ivh）" class="headerlink" title="RPM安装命令（rpm -ivh）"></a>RPM安装命令（rpm -ivh）</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm <span class="literal">-ivh</span> RPM包全名</span><br></pre></td></tr></table></figure><blockquote><p>-i    -i=install，安装<br>-v    -v=verbose，显示详细信息<br>-h    -h=hash，进度条<br>—nodeps    —nodeps，不检测依赖进度</p></blockquote><h2 id="YUM仓库配置"><a href="#YUM仓库配置" class="headerlink" title="YUM仓库配置"></a>YUM仓库配置</h2><h3 id="YUM的常用命令"><a href="#YUM的常用命令" class="headerlink" title="YUM的常用命令"></a>YUM的常用命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [选项] [参数]</span><br></pre></td></tr></table></figure><blockquote><p>-y    对所有提问都回答“yes”<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522225929.png" alt=""></p></blockquote><h3 id="修改网络YUM源"><a href="#修改网络YUM源" class="headerlink" title="修改网络YUM源"></a>修改网络YUM源</h3><p><strong>原来的配置会根据你的地理位置选择最近的源，所以此项可以不用配置</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># YUM 源文件配置文件存储的位置 /etc/yum.repos.d/ #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># ls</span></span><br><span class="line">CentOS<span class="literal">-Base</span>.repo  CentOS<span class="literal">-Debuginfo</span>.repo  CentOS<span class="literal">-Media</span>.repo    CentOS<span class="literal">-Vault</span>.repo  epel<span class="literal">-testing</span>.repo</span><br><span class="line">CentOS<span class="literal">-CR</span>.repo    CentOS<span class="literal">-fasttrack</span>.repo  CentOS<span class="literal">-Sources</span>.repo  epel.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># yum 安装工具 wget #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># yum install wget</span></span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.<span class="number">163</span>.com</span><br><span class="line"> * epel: mirrors.bfsu.edu.cn</span><br><span class="line"> * extras: mirrors.bfsu.edu.cn</span><br><span class="line"> * updates: mirrors.<span class="number">163</span>.com</span><br><span class="line">正在解决依赖关系</span><br><span class="line"><span class="literal">--</span>&gt; 正在检查事务</span><br><span class="line"><span class="literal">---</span>&gt; 软件包 wget.x86_64.<span class="number">0.1</span>.<span class="number">14</span><span class="literal">-15</span>.el7_4.<span class="number">1</span> 将被 升级</span><br><span class="line"><span class="literal">---</span>&gt; 软件包 wget.x86_64.<span class="number">0.1</span>.<span class="number">14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span> 将被 更新</span><br><span class="line"><span class="literal">--</span>&gt; 解决依赖关系完成</span><br><span class="line"></span><br><span class="line">依赖关系解决</span><br><span class="line"></span><br><span class="line">======================================================================================================================</span><br><span class="line"> Package                 架构                      版本                                 源                       大小</span><br><span class="line">======================================================================================================================</span><br><span class="line">正在更新:</span><br><span class="line"> <span class="built_in">wget</span>                    x86_64                    <span class="number">1.14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>                      base                    <span class="number">547</span> k</span><br><span class="line"></span><br><span class="line">事务概要</span><br><span class="line">======================================================================================================================</span><br><span class="line">升级  <span class="number">1</span> 软件包</span><br><span class="line"></span><br><span class="line">总计：<span class="number">547</span> k</span><br><span class="line">Is this ok [<span class="type">y</span>/<span class="type">d</span>/<span class="type">N</span>]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  正在更新    : w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>.x86_64                                                                       <span class="number">1</span>/<span class="number">2</span></span><br><span class="line">  清理        : w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-15</span>.el7_4.<span class="number">1</span>.x86_64                                                                       <span class="number">2</span>/<span class="number">2</span></span><br><span class="line">  验证中      : w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span>.x86_64                                                                       <span class="number">1</span>/<span class="number">2</span></span><br><span class="line">  验证中      : w<span class="built_in">get-1</span>.<span class="number">14</span><span class="literal">-15</span>.el7_4.<span class="number">1</span>.x86_64                                                                       <span class="number">2</span>/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">更新完毕:</span><br><span class="line">  wget.x86_64 <span class="number">0</span>:<span class="number">1.14</span><span class="literal">-18</span>.el7_6.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份原来的配置文件 # </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># cp CentOS-Base.repo CentOS-Base.repo_$(date +%F_%T)</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># ls</span></span><br><span class="line">CentOS<span class="literal">-Base</span>.repo                      CentOS<span class="literal">-Debuginfo</span>.repo  CentOS<span class="literal">-Sources</span>.repo  epel<span class="literal">-testing</span>.repo</span><br><span class="line">CentOS<span class="literal">-Base</span>.repo_2023<span class="literal">-05-22_23</span>:<span class="number">04</span>:<span class="number">45</span>  CentOS<span class="literal">-fasttrack</span>.repo  CentOS<span class="literal">-Vault</span>.repo</span><br><span class="line">CentOS<span class="literal">-CR</span>.repo                        CentOS<span class="literal">-Media</span>.repo      epel.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 wget 工具获取 网易的镜像配置文件 #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span></span><br><span class="line"><span class="literal">--2023-05-22</span> <span class="number">23</span>:<span class="number">06</span>:<span class="number">28</span><span class="literal">--</span>  http://mirrors.<span class="number">163</span>.com/.help/CentOS7<span class="literal">-Base-163</span>.repo</span><br><span class="line">正在解析主机 mirrors.<span class="number">163</span>.com (mirrors.<span class="number">163</span>.com)... <span class="number">117.147</span>.<span class="number">202.12</span></span><br><span class="line">正在连接 mirrors.<span class="number">163</span>.com (mirrors.<span class="number">163</span>.com)|<span class="number">117.147</span>.<span class="number">202.12</span>|:<span class="number">80</span>... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... <span class="number">200</span> OK</span><br><span class="line">长度：<span class="number">1572</span> (<span class="number">1.5</span>K) [<span class="type">application</span>/<span class="type">octet</span>-<span class="type">stream</span>]</span><br><span class="line">正在保存至: “CentOS7<span class="literal">-Base-163</span>.repo”</span><br><span class="line"></span><br><span class="line"><span class="number">100</span>%[============================================================================&gt;] <span class="number">1</span>,<span class="number">572</span>       <span class="literal">--</span>.<span class="literal">-K</span>/s 用时 <span class="number">0</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2023</span><span class="literal">-05-22</span> <span class="number">23</span>:<span class="number">06</span>:<span class="number">28</span> (<span class="number">108</span> MB/s) - 已保存 “CentOS7<span class="literal">-Base-163</span>.repo” [<span class="number">1572</span>/<span class="number">1572</span>])</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># ls</span></span><br><span class="line">CentOS7<span class="literal">-Base-163</span>.repo                 CentOS<span class="literal">-CR</span>.repo         CentOS<span class="literal">-Media</span>.repo    epel.repo</span><br><span class="line">CentOS<span class="literal">-Base</span>.repo                      CentOS<span class="literal">-Debuginfo</span>.repo  CentOS<span class="literal">-Sources</span>.repo  epel<span class="literal">-testing</span>.repo</span><br><span class="line">CentOS<span class="literal">-Base</span>.repo_2023<span class="literal">-05-22_23</span>:<span class="number">04</span>:<span class="number">45</span>  CentOS<span class="literal">-fasttrack</span>.repo  CentOS<span class="literal">-Vault</span>.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除原来的配置文件 #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># rm -rf CentOS-Base.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将刚才下载的网易的配置文件改名为原来的配置文件名 #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># mv CentOS7-Base-163.repo CentOS-Base.repo</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># ls</span></span><br><span class="line">CentOS<span class="literal">-Base</span>.repo                      CentOS<span class="literal">-Debuginfo</span>.repo  CentOS<span class="literal">-Sources</span>.repo  epel<span class="literal">-testing</span>.repo</span><br><span class="line">CentOS<span class="literal">-Base</span>.repo_2023<span class="literal">-05-22_23</span>:<span class="number">04</span>:<span class="number">45</span>  CentOS<span class="literal">-fasttrack</span>.repo  CentOS<span class="literal">-Vault</span>.repo</span><br><span class="line">CentOS<span class="literal">-CR</span>.repo                        CentOS<span class="literal">-Media</span>.repo      epel.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum makecache就是把服务器的包信息下载到本地电脑缓存起来#</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> <span class="type">yum.repos.d</span>]<span class="comment"># yum clean all &amp;&amp; yum makecache</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程线程类&quot;&gt;&lt;a href=&quot;#进程线程类&quot; class=&quot;headerlink&quot; title=&quot;进程线程类&quot;&gt;&lt;/a&gt;进程线程类&lt;/h1&gt;&lt;p&gt;进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="shell脚本" scheme="https://www.jermyn.cn/tags/shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Linux磁盘的挂载和卸载</title>
    <link href="https://www.jermyn.cn/posts/f495.html"/>
    <id>https://www.jermyn.cn/posts/f495.html</id>
    <published>2023-05-22T14:41:20.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><p><strong>使用命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]<span class="comment"># df</span></span><br><span class="line">文件系统          1K-块    已用     可用 已用% 挂载点</span><br><span class="line">/dev/sda2      46313300 5660220 38277452   13% /</span><br><span class="line">devtmpfs        4062932       0  4062932    0% /dev</span><br><span class="line">tmpfs           4078600       0  4078600    0% /dev/shm</span><br><span class="line">tmpfs           4078600   12612  4065988    1% /run</span><br><span class="line">tmpfs           4078600       0  4078600    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1        999320  127160   803348   14% /boot</span><br><span class="line">tmpfs            815720      12   815708    1% /run/user/42</span><br><span class="line">tmpfs            815720       0   815720    0% /run/user/0</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]<span class="comment"># df -h</span></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda2        45G  5.4G   37G   13% /</span><br><span class="line">devtmpfs        3.9G     0  3.9G    0% /dev</span><br><span class="line">tmpfs           3.9G     0  3.9G    0% /dev/shm</span><br><span class="line">tmpfs           3.9G   13M  3.9G    1% /run</span><br><span class="line">tmpfs           3.9G     0  3.9G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1       976M  125M  785M   14% /boot</span><br><span class="line">tmpfs           797M   12K  797M    1% /run/user/42</span><br><span class="line">tmpfs           797M     0  797M    0% /run/user/0</span><br><span class="line">[root@hadoop100 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><blockquote><p>-h: 以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；<br>sda1:表示第一个划分的分区，boot的引导分区，仅用125M，一个G足够使用<br>sda2:表示第二个划分的分区<br>tmpfs：临时的文件系统，基于内存的文件系统<br>/dec/shm: share memory 共享的内存，所有的系统进程都可使用<br>devtmpfs：Linux系统启动时创建的初步的 /dev管理设备</p></blockquote><h1 id="查看设备挂载情况"><a href="#查看设备挂载情况" class="headerlink" title="查看设备挂载情况"></a>查看设备挂载情况</h1><p><strong>使用命令</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda      8:0    0   50G  0 disk</span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0   45G  0 part /</span><br><span class="line">└─sda3   8:3    0    4G  0 part [SWAP]</span><br><span class="line">sr0     11:0    1 1024M  0 rom</span><br><span class="line">[root@hadoop100 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><blockquote><p>IDE磁盘：价格低廉，兼容性强，性价比高，但是数据传输慢，不支持热插拔等<br>SCSI磁盘：传输速率高，读写性能好，运行稳定，可连接多个设备，支持热插拔，占用CPU低，但是价格相对较贵，一般用于工作站或服务器上<br>SATA磁盘：结构简单、支持热插拔<br>Linux中硬盘以及分区等设备均表示为文件，其命名规则如下：<br>IDE磁盘的文件名为：/dev/hdxx<br>SCSI/SATA/USB磁盘文件名为：/dev/sdxx<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522152729.png" alt=""></p></blockquote><h1 id="mount-umount-挂载-卸载"><a href="#mount-umount-挂载-卸载" class="headerlink" title="mount/umount 挂载/卸载"></a>mount/umount 挂载/卸载</h1><p>对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。</p><ol><li>挂载前准备（必须要有光盘或者已经连接镜像文件）<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522185341.png" alt=""></li><li>基本语法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount [-t vfstype] [-o options] device dir（功能描述：挂载设备）</span><br><span class="line">umount 设备文件名或挂载点（功能描述：卸载设备）</span><br></pre></td></tr></table></figure></li><li>参数说明<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522185455.png" alt=""></li></ol><h2 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h2><ol><li>挂载光盘镜像文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]<span class="comment"># mkdir /mnt/cdrom/建立挂载点</span></span><br><span class="line">[root@hadoop101 ~]<span class="comment"># mount -t iso9660 /dev/cdrom /mnt/cdrom/设备/dev/cdrom挂载到 挂载点 ：  /mnt/cdrom中</span></span><br><span class="line">[root@hadoop101 ~]<span class="comment"># ll /mnt/cdrom/</span></span><br></pre></td></tr></table></figure></li><li><p>卸载光盘镜像文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]<span class="comment"># umount /mnt/cdrom</span></span><br></pre></td></tr></table></figure></li><li><p>设置开机自动挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop101 ~]<span class="comment"># vi /etc/fstab</span></span><br></pre></td></tr></table></figure><p>添加红框中内容，保存退出。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522185745.png" alt=""></p></li></ol><h1 id="fdisk-查看分区"><a href="#fdisk-查看分区" class="headerlink" title="fdisk 查看分区"></a>fdisk 查看分区</h1><ol><li>基本语法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l（功能描述：查看磁盘分区详情）</span><br></pre></td></tr></table></figure><blockquote><p>-l: 显示所有硬盘的分区列表<br>注意：该命令必须在root用户下才能使用</p></blockquote></li><li>功能说明<br>Device：分区序列<br>Boot：引导<br>Start：从X磁柱开始<br>End：到Y磁柱结束<br>Blocks：容量<br>Id：分区类型ID<br>System：分区类型<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop100 ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：53.7 GB, 53687091200 字节，104857600 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：0x000a3d44</span><br><span class="line"></span><br><span class="line">   设备 Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048     2099199     1048576   83  Linux</span><br><span class="line">/dev/sda2         2099200    96468991    47184896   83  Linux</span><br><span class="line">/dev/sda3        96468992   104857599     4194304   82  Linux swap / Solaris</span><br><span class="line">[root@hadoop100 ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="磁盘分区-1"><a href="#磁盘分区-1" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><p>添加一块新的磁盘<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522190738.png" alt=""><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522190813.png" alt=""><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230522190855.png" alt=""><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看详细分区，发现只有初始时设置的 50G 磁盘 sda #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：<span class="number">53.7</span> GB, <span class="number">53687091200</span> 字节，<span class="number">104857600</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x000a3d44</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        <span class="number">2048</span>     <span class="number">2099199</span>     <span class="number">1048576</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda2         <span class="number">2099200</span>    <span class="number">96468991</span>    <span class="number">47184896</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda3        <span class="number">96468992</span>   <span class="number">104857599</span>     <span class="number">4194304</span>   <span class="number">82</span>  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动设置添加 10G 磁盘后，发现并没有 sdb 需要重启 #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：<span class="number">53.7</span> GB, <span class="number">53687091200</span> 字节，<span class="number">104857600</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x000a3d44</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        <span class="number">2048</span>     <span class="number">2099199</span>     <span class="number">1048576</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda2         <span class="number">2099200</span>    <span class="number">96468991</span>    <span class="number">47184896</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda3        <span class="number">96468992</span>   <span class="number">104857599</span>     <span class="number">4194304</span>   <span class="number">82</span>  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 # </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># reboot</span></span><br><span class="line">PolicyKit daemon disconnected from the bus.</span><br><span class="line">We are no longer a registered authentication agent.</span><br><span class="line">Connection to <span class="number">192.168</span>.<span class="number">10.100</span> closed by remote host.</span><br><span class="line">Connection to <span class="number">192.168</span>.<span class="number">10.100</span> closed.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新连接系统 # </span></span><br><span class="line"><span class="comment"># PS C:\Users\Administrator&gt; ssh root@192.168.10.100</span></span><br><span class="line"><span class="comment"># root@192.168.10.100&#x27;s password:</span></span><br><span class="line"><span class="comment"># Last login: Mon May 22 19:02:16 2023 from 192.168.10.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设备挂载情况 # </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># lsblk -l</span></span><br><span class="line">NAME MAJ:MIN <span class="built_in">RM</span>  SIZE RO <span class="built_in">TYPE</span> MOUNTPOINT</span><br><span class="line">sda    <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">50</span>G  <span class="number">0</span> disk</span><br><span class="line">sda1   <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">sda2   <span class="number">8</span>:<span class="number">2</span>    <span class="number">0</span>   <span class="number">45</span>G  <span class="number">0</span> part /</span><br><span class="line">sda3   <span class="number">8</span>:<span class="number">3</span>    <span class="number">0</span>    <span class="number">4</span>G  <span class="number">0</span> part [<span class="type">SWAP</span>]</span><br><span class="line">sdb    <span class="number">8</span>:<span class="number">16</span>   <span class="number">0</span>   <span class="number">10</span>G  <span class="number">0</span> disk</span><br><span class="line">sr0   <span class="number">11</span>:<span class="number">0</span>    <span class="number">1</span> <span class="number">1024</span>M  <span class="number">0</span> rom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新查看分区发现已经读取到磁盘 sdb 但是没有分区#</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：<span class="number">53.7</span> GB, <span class="number">53687091200</span> 字节，<span class="number">104857600</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x000a3d44</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        <span class="number">2048</span>     <span class="number">2099199</span>     <span class="number">1048576</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda2         <span class="number">2099200</span>    <span class="number">96468991</span>    <span class="number">47184896</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda3        <span class="number">96468992</span>   <span class="number">104857599</span>     <span class="number">4194304</span>   <span class="number">82</span>  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：<span class="number">10.7</span> GB, <span class="number">10737418240</span> 字节，<span class="number">20971520</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对sdb 进行分区 # </span></span><br><span class="line"><span class="comment"># [root@hadoop100 ~]# fdisk /dev/sdb</span></span><br><span class="line"><span class="comment"># 欢迎使用 fdisk (util-linux 2.23.2)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改将停留在内存中，直到您决定将更改写入磁盘。</span></span><br><span class="line"><span class="comment"># 使用写入命令前请三思。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Device does not contain a recognized partition table</span></span><br><span class="line"><span class="comment"># 使用磁盘标识符 0x3ab7f970 创建新的 DOS 磁盘标签。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令(输入 m 获取帮助)：m</span></span><br><span class="line"><span class="comment"># 命令操作</span></span><br><span class="line"><span class="comment">#    a   toggle a bootable flag</span></span><br><span class="line"><span class="comment">#    b   edit bsd disklabel</span></span><br><span class="line"><span class="comment">#    c   toggle the dos compatibility flag</span></span><br><span class="line"><span class="comment">#    d   delete a partition</span></span><br><span class="line"><span class="comment">#    g   create a new empty GPT partition table</span></span><br><span class="line"><span class="comment">#    G   create an IRIX (SGI) partition table</span></span><br><span class="line"><span class="comment">#    l   list known partition types</span></span><br><span class="line"><span class="comment">#    m   print this menu</span></span><br><span class="line"><span class="comment">#    n   add a new partition</span></span><br><span class="line"><span class="comment">#    o   create a new empty DOS partition table</span></span><br><span class="line"><span class="comment">#    p   print the partition table</span></span><br><span class="line"><span class="comment">#    q   quit without saving changes</span></span><br><span class="line"><span class="comment">#    s   create a new empty Sun disklabel</span></span><br><span class="line"><span class="comment">#    t   change a partition&#x27;s system id</span></span><br><span class="line"><span class="comment">#    u   change display/entry units</span></span><br><span class="line"><span class="comment">#    v   verify the partition table</span></span><br><span class="line"><span class="comment">#    w   write table to disk and exit</span></span><br><span class="line"><span class="comment">#    x   extra functionality (experts only)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令(输入 m 获取帮助)：n</span></span><br><span class="line"><span class="comment"># Partition type:</span></span><br><span class="line"><span class="comment">#    p   primary (0 primary, 0 extended, 4 free)</span></span><br><span class="line"><span class="comment">#    e   extended</span></span><br><span class="line"><span class="comment"># Select (default p): p</span></span><br><span class="line"><span class="comment"># 分区号 (1-4，默认 1)：</span></span><br><span class="line"><span class="comment"># 起始 扇区 (2048-20971519，默认为 2048)：</span></span><br><span class="line"><span class="comment"># 将使用默认值 2048</span></span><br><span class="line"><span class="comment"># Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-20971519，默认为 20971519)：</span></span><br><span class="line"><span class="comment"># 将使用默认值 20971519</span></span><br><span class="line"><span class="comment"># 分区 1 已设置为 Linux 类型，大小设为 10 GiB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令(输入 m 获取帮助)：p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区</span></span><br><span class="line"><span class="comment"># Units = 扇区 of 1 * 512 = 512 bytes</span></span><br><span class="line"><span class="comment"># 扇区大小(逻辑/物理)：512 字节 / 512 字节</span></span><br><span class="line"><span class="comment"># I/O 大小(最小/最佳)：512 字节 / 512 字节</span></span><br><span class="line"><span class="comment"># 磁盘标签类型：dos</span></span><br><span class="line"><span class="comment"># 磁盘标识符：0x3ab7f970</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    设备 Boot      Start         End      Blocks   Id  System</span></span><br><span class="line"><span class="comment"># /dev/sdb1            2048    20971519    10484736   83  Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令(输入 m 获取帮助)：w</span></span><br><span class="line"><span class="comment"># The partition table has been altered!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling ioctl() to re-read partition table.</span></span><br><span class="line"><span class="comment"># 正在同步磁盘。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用lsblk -l 会发现没有文件系统，也没有UUID # </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME   FSTYPE LABEL UUID                                 MOUNTPOINT</span><br><span class="line">sda</span><br><span class="line">├─sda1 ext4         f7c0baa9<span class="literal">-a792-47a8-9ef3-33b88d518be0</span> /boot</span><br><span class="line">├─sda2 ext4         <span class="number">2</span>e8612ce<span class="literal">-6487-496c-a2d0-b83df67219dc</span> /</span><br><span class="line">└─sda3 swap         <span class="number">73</span>d75515<span class="literal">-cfac-4c38-82ba-215b9774b9bb</span> [<span class="type">SWAP</span>]</span><br><span class="line">sdb</span><br><span class="line">└─sdb1 xfs          </span><br><span class="line">sr0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时查看分区的话，就发现 sdb 已经分区了 # </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：<span class="number">53.7</span> GB, <span class="number">53687091200</span> 字节，<span class="number">104857600</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x000a3d44</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        <span class="number">2048</span>     <span class="number">2099199</span>     <span class="number">1048576</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda2         <span class="number">2099200</span>    <span class="number">96468991</span>    <span class="number">47184896</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda3        <span class="number">96468992</span>   <span class="number">104857599</span>     <span class="number">4194304</span>   <span class="number">82</span>  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：<span class="number">10.7</span> GB, <span class="number">10737418240</span> 字节，<span class="number">20971520</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x3ab7f970</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sdb1            <span class="number">2048</span>    <span class="number">20971519</span>    <span class="number">10484736</span>   <span class="number">83</span>  Linux</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定文件系统 # </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># mkfs -t xfs /dev/sdb1</span></span><br><span class="line">meta<span class="literal">-data</span>=/dev/sdb1              isize=<span class="number">512</span>    agcount=<span class="number">4</span>, agsize=<span class="number">655296</span> blks</span><br><span class="line">         =                       sectsz=<span class="number">512</span>   attr=<span class="number">2</span>, projid32bit=<span class="number">1</span></span><br><span class="line">         =                       crc=<span class="number">1</span>        finobt=<span class="number">0</span>, sparse=<span class="number">0</span></span><br><span class="line"><span class="keyword">data</span>     =                       bsize=<span class="number">4096</span>   blocks=<span class="number">2621184</span>, imaxpct=<span class="number">25</span></span><br><span class="line">         =                       sunit=<span class="number">0</span>      swidth=<span class="number">0</span> blks</span><br><span class="line">naming   =version <span class="number">2</span>              bsize=<span class="number">4096</span>   ascii<span class="literal">-ci</span>=<span class="number">0</span> ftype=<span class="number">1</span></span><br><span class="line">log      =internal log           bsize=<span class="number">4096</span>   blocks=<span class="number">2560</span>, version=<span class="number">2</span></span><br><span class="line">         =                       sectsz=<span class="number">512</span>   sunit=<span class="number">0</span> blks, lazy<span class="literal">-count</span>=<span class="number">1</span></span><br><span class="line">realtime =none                   extsz=<span class="number">4096</span>   blocks=<span class="number">0</span>, rtextents=<span class="number">0</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：<span class="number">53.7</span> GB, <span class="number">53687091200</span> 字节，<span class="number">104857600</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x000a3d44</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        <span class="number">2048</span>     <span class="number">2099199</span>     <span class="number">1048576</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda2         <span class="number">2099200</span>    <span class="number">96468991</span>    <span class="number">47184896</span>   <span class="number">83</span>  Linux</span><br><span class="line">/dev/sda3        <span class="number">96468992</span>   <span class="number">104857599</span>     <span class="number">4194304</span>   <span class="number">82</span>  Linux swap / Solaris</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sdb：<span class="number">10.7</span> GB, <span class="number">10737418240</span> 字节，<span class="number">20971520</span> 个扇区</span><br><span class="line">Units = 扇区 of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">扇区大小(逻辑/物理)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">I/O 大小(最小/最佳)：<span class="number">512</span> 字节 / <span class="number">512</span> 字节</span><br><span class="line">磁盘标签类型：dos</span><br><span class="line">磁盘标识符：<span class="number">0</span>x3ab7f970</span><br><span class="line"></span><br><span class="line">   设备 Boot      <span class="built_in">Start</span>         <span class="keyword">End</span>      Blocks   Id  System</span><br><span class="line">/dev/sdb1            <span class="number">2048</span>    <span class="number">20971519</span>    <span class="number">10484736</span>   <span class="number">83</span>  Linux</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME   MAJ:MIN <span class="built_in">RM</span>  SIZE RO <span class="built_in">TYPE</span> MOUNTPOINT</span><br><span class="line">sda      <span class="number">8</span>:<span class="number">0</span>    <span class="number">0</span>   <span class="number">50</span>G  <span class="number">0</span> disk</span><br><span class="line">├─sda1   <span class="number">8</span>:<span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>G  <span class="number">0</span> part /boot</span><br><span class="line">├─sda2   <span class="number">8</span>:<span class="number">2</span>    <span class="number">0</span>   <span class="number">45</span>G  <span class="number">0</span> part /</span><br><span class="line">└─sda3   <span class="number">8</span>:<span class="number">3</span>    <span class="number">0</span>    <span class="number">4</span>G  <span class="number">0</span> part [<span class="type">SWAP</span>]</span><br><span class="line">sdb      <span class="number">8</span>:<span class="number">16</span>   <span class="number">0</span>   <span class="number">10</span>G  <span class="number">0</span> disk</span><br><span class="line">└─sdb1   <span class="number">8</span>:<span class="number">17</span>   <span class="number">0</span>   <span class="number">10</span>G  <span class="number">0</span> part</span><br><span class="line">sr0     <span class="number">11</span>:<span class="number">0</span>    <span class="number">1</span> <span class="number">1024</span>M  <span class="number">0</span> rom</span><br><span class="line"><span class="comment"># 指定挂载点，这里挂载在 /home/atguigu/ 目的是如果以后的atguigu的数据都在 sdb1 里面#</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># mount /dev/sdb1 /home/atguigu/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># df -h</span></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda2        <span class="number">45</span>G  <span class="number">5.4</span>G   <span class="number">37</span>G   <span class="number">13</span>% /</span><br><span class="line">devtmpfs        <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs           <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G    <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">3.9</span>G   <span class="number">13</span>M  <span class="number">3.9</span>G    <span class="number">1</span>% /run</span><br><span class="line">tmpfs           <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1       <span class="number">976</span>M  <span class="number">125</span>M  <span class="number">785</span>M   <span class="number">14</span>% /boot</span><br><span class="line">tmpfs           <span class="number">797</span>M   <span class="number">12</span>K  <span class="number">797</span>M    <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs           <span class="number">797</span>M     <span class="number">0</span>  <span class="number">797</span>M    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br><span class="line">/dev/sdb1        <span class="number">10</span>G   <span class="number">33</span>M   <span class="number">10</span>G    <span class="number">1</span>% /home/atguigu</span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">如果想要开机自启动的话，可以参考上方的<span class="number">3.1</span>.<span class="number">3</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 sdb #</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># umount /home/atguigu/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">hadoop100</span> ~]<span class="comment"># df -h</span></span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/sda2        <span class="number">45</span>G  <span class="number">5.4</span>G   <span class="number">37</span>G   <span class="number">13</span>% /</span><br><span class="line">devtmpfs        <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G    <span class="number">0</span>% /dev</span><br><span class="line">tmpfs           <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G    <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">3.9</span>G   <span class="number">13</span>M  <span class="number">3.9</span>G    <span class="number">1</span>% /run</span><br><span class="line">tmpfs           <span class="number">3.9</span>G     <span class="number">0</span>  <span class="number">3.9</span>G    <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/sda1       <span class="number">976</span>M  <span class="number">125</span>M  <span class="number">785</span>M   <span class="number">14</span>% /boot</span><br><span class="line">tmpfs           <span class="number">797</span>M   <span class="number">12</span>K  <span class="number">797</span>M    <span class="number">1</span>% /run/user/<span class="number">42</span></span><br><span class="line">tmpfs           <span class="number">797</span>M     <span class="number">0</span>  <span class="number">797</span>M    <span class="number">0</span>% /run/user/<span class="number">0</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;磁盘分区&quot;&gt;&lt;a href=&quot;#磁盘分区&quot; class=&quot;headerlink&quot; title=&quot;磁盘分区&quot;&gt;&lt;/a&gt;磁盘分区&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;使用命令&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table</summary>
      
    
    
    
    
    <category term="shell脚本" scheme="https://www.jermyn.cn/tags/shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>JavaCodeDemo</title>
    <link href="https://www.jermyn.cn/posts/2053.html"/>
    <id>https://www.jermyn.cn/posts/2053.html</id>
    <published>2023-05-07T18:21:42.000Z</published>
    <updated>2023-05-28T15:04:33.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础示例代码"><a href="#Java基础示例代码" class="headerlink" title="Java基础示例代码"></a>Java基础示例代码</h1><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exer.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 饿汉式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBank</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank1</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank2</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        System.out.println(bank1 == bank2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 懒汉式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer1</span> <span class="operator">=</span> Customer.getInstance();</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer2</span> <span class="operator">=</span> Customer.getInstance();</span><br><span class="line">        System.out.println(customer1 == customer2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.私有化类的空参构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在类的内部创建一个对象，要求这个对象是静态的，&quot;3&quot;的静态方法只能访问静态成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.在类的内部提供一个公共的且是静态的方法返回一个实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.私有化类的空参构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Customer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.声明此对象，没有初始化，&quot;3&quot;的静态方法只能访问静态成员变量</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="type">Customer</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.声明 public static 返回当前类对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Customer <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="程序中成员变量赋值的执行顺序的例子"><a href="#程序中成员变量赋值的执行顺序的例子" class="headerlink" title="程序中成员变量赋值的执行顺序的例子"></a>程序中成员变量赋值的执行顺序的例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.声明成员变量的默认初始化</span></span><br><span class="line"><span class="comment"> * 2.显式初始化、多个初始化块依次被执行（同级别下按先后顺序执行）</span></span><br><span class="line"><span class="comment"> * 3.构造器再对成员进行初始化操作</span></span><br><span class="line"><span class="comment"> * 4.通过”对象.属性”或”对象.方法”的方式，可多次给属性赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeafTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------分割线---------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Root</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Root</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的无参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mid</span> <span class="keyword">extends</span> <span class="title class_">Root</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mid</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的无参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mid</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="comment">//通过this调用同一类中重载的构造器</span></span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的带参数构造器，其参数值：&quot;</span></span><br><span class="line">                + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">extends</span> <span class="title class_">Mid</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Leaf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//通过super调用父类中有一个字符串参数的构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Root的静态初始化块</span><br><span class="line">Mid的静态初始化块</span><br><span class="line">Leaf的静态初始化块</span><br><span class="line">Root的普通初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的普通初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：Jermyn</span><br><span class="line">Leaf的普通初始化块</span><br><span class="line">Leaf的构造器</span><br><span class="line">---------------------------分割线---------------------------</span><br><span class="line">Root的普通初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的普通初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：Jermyn</span><br><span class="line">Leaf的普通初始化块</span><br><span class="line">Leaf的构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="创建线程的四种方式"><a href="#创建线程的四种方式" class="headerlink" title="创建线程的四种方式"></a>创建线程的四种方式</h2><p>JDK1.5 之前创建新执行线程有两种方法：①继承Thread类的方式；②实现Runnable接口的方式；<br>JDK1.5 ③新增实现Callable创建方式<br><div class="tabs" id="方式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#方式-1">方式一：继承Thread类</button></li><li class="tab"><button type="button" data-href="#方式-2">方式二：实现Runnable接口</button></li><li class="tab"><button type="button" data-href="#方式-3">方式三：实现Callable接口</button></li><li class="tab"><button type="button" data-href="#方式-4">方式四：使用线程池创建线程</button></li><li class="tab"><button type="button" data-href="#方式-5">选择</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="方式-1"><ol><li>定义子类继承Thread类。</li><li>子类中重写Thread类中的run方法。</li><li>创建Thread子类对象，即创建了线程对象。</li><li>调用线程对象start方法：启动线程，调用run方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Declare a class to be a subclass of Thread</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvenNumber</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvenNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Override the run method of class Thread.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i + <span class="string">&quot; is a even number&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.Build an instance of the subclass</span></span><br><span class="line">        <span class="type">EvenNumber</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenNumber</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. This instance can  be allocated and started</span></span><br><span class="line">        n.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This code will be executed in the main method</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n.number; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i + <span class="string">&quot; is a even number&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>           <div class='content'>           <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">main:<span class="number">0</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">0</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">2</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">4</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">6</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">8</span> is a even number</span><br><span class="line">main:<span class="number">2</span> is a even number</span><br><span class="line">main:<span class="number">4</span> is a even number</span><br><span class="line">main:<span class="number">6</span> is a even number</span><br><span class="line">main:<span class="number">8</span> is a even number</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>           </div>         </details></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方式-2"><ol><li>定义子类，实现Runnable接口。</li><li>子类中重写Runnable接口中的run方法。</li><li>通过Thread类含参构造器创建线程对象。</li><li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。</li><li>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Create a thread is to declare a class that implements the Runnable interface.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">long</span> minPrime;</span><br><span class="line"></span><br><span class="line">    PrimeRun(<span class="type">long</span> minPrime) &#123;</span><br><span class="line">        <span class="built_in">this</span>.minPrime = minPrime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.This class then implements the run method.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Compute primes larger than minPrime</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3. Create an instance of PrimeRun class</span></span><br><span class="line">        <span class="type">PrimeRun</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrimeRun</span>(<span class="number">143</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When you create a thread put the instance as arguments and start it</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方式-3"><ol><li>创建一个实现Callable的实现类</li><li>实现call方法，将此线程需要执行的操作声明在call()中</li><li>创建Callable接口实现类的对象</li><li>将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</li><li>将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</li><li>获取Callable中call方法的返回值get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadCallable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3.创建Callable接口实现类的对象</span></span><br><span class="line">        <span class="type">SumOfEvenNumber</span> <span class="variable">sumOfEvenNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SumOfEvenNumber</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(sumOfEvenNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 6.获取Callable中call方法的返回值get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            System.out.println(<span class="string">&quot;sum=&quot;</span> + futureTask.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SumOfEvenNumber</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>           <div class='content'>           <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">sum=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>           </div>         </details></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方式-4"><ol><li>提供指定线程数量的线程池<br>设置线程池的属性</li><li>执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</li><li>关闭连接池<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 提供指定线程数量的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">EvenNum</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">OddNumber</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"><span class="comment">//        service.submit();</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvenNum</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                        <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OddNumber</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                        <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>           <div class='content'>           <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">8</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">5</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">7</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">9</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>           </div>         </details></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方式-5"><p><strong>方式一和方式二相比：</strong></p><ol><li>避免了单继承的局限性</li><li>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</li></ol><p><strong>方式二和方式三相比：</strong></p><ol><li>与使用Runnable相比， Callable功能更强大</li><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ol><p><strong>使用线程池的好处：</strong></p><ol><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li><li>…</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="死锁示例"><a href="#死锁示例" class="headerlink" title="死锁示例"></a>死锁示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="反射的应用：动态代理"><a href="#反射的应用：动态代理" class="headerlink" title="反射的应用：动态代理"></a>反射的应用：动态代理</h2><div class="note success flat"><p>静态代理</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClothFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyClothFactory</span><span class="params">(ClothFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂准备工作&quot;</span>);</span><br><span class="line"></span><br><span class="line">        factory.produceCloth();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂做收尾工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AntaClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;安踏工厂生产产品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AntaClothFactory</span> <span class="variable">anta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntaClothFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProxyClothFactory</span> <span class="variable">pcf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyClothFactory</span>(anta);</span><br><span class="line"></span><br><span class="line">        pcf.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">代理工厂准备工作</span><br><span class="line">安踏工厂生产产品</span><br><span class="line">代理工厂做收尾工作</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><ul><li>代理设计模式的原理:使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原 始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原 始对象上。</li><li>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时 根据需要动态创建目标类的代理对象。</li><li><p>动态代理使用场合:</p><ul><li>调试</li><li>远程方法调用</li></ul></li><li><p>动态代理相比于静态代理的优点：抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中 处理，这样，我们可以更加灵活和统一的处理众多的方法。</p></li><li><p><strong>Java动态代理相关API</strong></p><ul><li>Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。</li><li>提供用于创建动态代理类和动态代理对象的静态方法<ul><li>static Class&lt;?&gt;getProxyClass(ClassLoader loader, Class&lt;?&gt;… interfaces) 创建一个动态代理类所对应的Class对象</li><li>static Object    newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h) 直接创建一个动态代理对象</li></ul></li></ul></li><li><p><strong>动态代理步骤</strong></p></li></ul><ol><li>创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</li><li>创建被代理的类以及接口</li><li>通过Proxy的静态方法newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建一个Subject接口代理</li><li>通过 Subject代理调用RealSubject实现类的方法<div class="note success flat"><p>动态代理</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getBelief</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建被代理的类以及接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">implements</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBelief</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Peace and love!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxyInstance</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>();</span><br><span class="line"></span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="comment">// 3.通过Proxy的静态方法newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建一个Subject接口代理</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SuperMan</span> <span class="variable">superMan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>();</span><br><span class="line">        <span class="comment">//4. 通过ProxyFactory代理调用getProxyInstance实现类的方法</span></span><br><span class="line">        <span class="type">Human</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">belief</span> <span class="operator">=</span> proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line"></span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;KFC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Peace and love!</span><br><span class="line">我喜欢吃KFC</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="SQL相关"><a href="#SQL相关" class="headerlink" title="SQL相关"></a>SQL相关</h1><h2 id="7种SQL-JOINS的实现"><a href="#7种SQL-JOINS的实现" class="headerlink" title="7种SQL JOINS的实现"></a>7种SQL JOINS的实现</h2></li></ol><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221109171401.png" alt=""><br><strong>语法格式小结</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> 左中图</span><br><span class="line">#实现A <span class="operator">-</span> A∩B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 右中图</span><br><span class="line">#实现B <span class="operator">-</span> A∩B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 左下图</span><br><span class="line">#实现查询结果是A∪B</span><br><span class="line">#用左外的A，<span class="keyword">union</span> 右外的B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 等其他子句</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span> 右下图</span><br><span class="line">#实现A∪B <span class="operator">-</span> A∩B 或 (A <span class="operator">-</span> A∩B) ∪ （B <span class="operator">-</span> A∩B）</span><br><span class="line">#使用左外的 (A <span class="operator">-</span> A∩B) <span class="keyword">union</span> 右外的（B <span class="operator">-</span> A∩B）</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句</span><br></pre></td></tr></table></figure><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="使用PreparedStatement实现CURD操作"><a href="#使用PreparedStatement实现CURD操作" class="headerlink" title="使用PreparedStatement实现CURD操作"></a>使用PreparedStatement实现CURD操作</h2><div class="tabs" id="使用preparedstatement实现增、删、改操作"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#使用preparedstatement实现增、删、改操作-1">GeneralForQuery.java</button></li><li class="tab"><button type="button" data-href="#使用preparedstatement实现增、删、改操作-2">JDBCUtils.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="使用preparedstatement实现增、删、改操作-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exer.curd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Exer.bean.Customer;</span><br><span class="line"><span class="keyword">import</span> Exer.bean.Order;</span><br><span class="line"><span class="keyword">import</span> Exer.junit.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneralForQuery</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql  包含占位符的sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 修改的字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String sql, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取数据库的连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//3.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.执行sql语句</span></span><br><span class="line">            ps.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.关闭资源</span></span><br><span class="line">            JDBCUtils.closeResource(ps, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的查找操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tClass 泛型，想查询的表的class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql    包含占位符的sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   查询的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    泛型，返回指定的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">generalForQuery</span><span class="params">(Class&lt;T&gt; tClass, String sql, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//TODO 获取数据库的连接</span></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//TODO 预编译sql语句，返回 PrepareStatement 实例</span></span><br><span class="line">            ps = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//TODO 填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//TODO 执行,并返回结果集</span></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO 查询的资源的列数封装的结果集的元数据中</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO 创建集合对象</span></span><br><span class="line">            ArrayList&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TODO 处理结果集,判断结果集的下一条是否有数据，有的话返回 true 否则返回 false</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> tClass.newInstance();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取这一列的列的别名，使用元数据的getColumnLabel方法获取列的别名，getColumnName是获取列的字段名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取这一列的列名</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">columnValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// TODO 给 customer 对象指定的属性 columnName 赋值为 columnValue,使用反射</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> tClass.getDeclaredField(columnLabel);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 属性名可能是私有的</span></span><br><span class="line">                    declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 根据属性名设置属性值</span></span><br><span class="line">                    declaredField.set(t, columnValue);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | IllegalAccessException | IllegalArgumentException | SecurityException |</span><br><span class="line">                 NoSuchFieldException | SQLException | ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ignored) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(ps, connection, rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的查询方式测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGeneralForQuery</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 针对 order 表的查询方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;select order_id as orderID, order_name as orderName, order_date as orderDate from `order` where order_id = ?&quot;</span>;</span><br><span class="line">        List&lt;Order&gt; orders = generalForQuery(Order.class, sql1, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (Order order : orders) &#123;</span><br><span class="line">            System.out.println(order);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 针对 customers 表的查询方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email from customers where id &lt; ?&quot;</span>;</span><br><span class="line">        List&lt;Customer&gt; customers = generalForQuery(Customer.class, sql2, <span class="number">5</span>);</span><br><span class="line">        customers.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用的增删改操作（同一表）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 删除 id=？的customer</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;delete from customers where id = ? &quot;</span>;</span><br><span class="line">        update(sql1, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改 order 表的 order_id = ? 的姓名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update  `order` set order_name = ? where order_id = ?&quot;</span>;</span><br><span class="line">        update(sql2, <span class="string">&quot;bb&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.cj.jdbc.ConnectionImpl@1e6454ec</span><br><span class="line">Order&#123;orderID=<span class="number">2</span>, orderName=<span class="string">&#x27;bb&#x27;</span>, orderDate=<span class="number">2000</span>-<span class="number">02</span>-<span class="number">01</span>&#125;</span><br><span class="line">com.mysql.cj.jdbc.ConnectionImpl@3e11f9e9</span><br><span class="line">Customer&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;汪峰&#x27;</span>, email=<span class="string">&#x27;wf@126.com&#x27;</span>, birth=<span class="literal">null</span>&#125;</span><br><span class="line">Customer&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;王菲&#x27;</span>, email=<span class="string">&#x27;wangf@163.com&#x27;</span>, birth=<span class="literal">null</span>&#125;</span><br><span class="line">Customer&#123;id=<span class="number">3</span>, name=<span class="string">&#x27;林志玲&#x27;</span>, email=<span class="string">&#x27;linzl@gmail.com&#x27;</span>, birth=<span class="literal">null</span>&#125;</span><br><span class="line">Customer&#123;id=<span class="number">4</span>, name=<span class="string">&#x27;汤唯&#x27;</span>, email=<span class="string">&#x27;tangw@sina.com&#x27;</span>, birth=<span class="literal">null</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="使用preparedstatement实现增、删、改操作-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exer.junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Statement ps, Connection connection)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 资源关闭</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Statement ps, Connection connection, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 资源关闭</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="考虑到数据库事务的情况下的通用操作"><a href="#考虑到数据库事务的情况下的通用操作" class="headerlink" title="考虑到数据库事务的情况下的通用操作"></a>考虑到数据库事务的情况下的通用操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exer.connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Exer.junit.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.事务处理的原则：保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。</span></span><br><span class="line"><span class="comment"> * 当在一个事务中执行多个操作时，要么所有的事务都被提交(commit)，那么这些修改就永久地保存</span></span><br><span class="line"><span class="comment"> * 下来；要么数据库管理系统将放弃所作的所有修改，整个事务回滚(rollback)到最初状态。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.数据一旦提交，就不可回滚</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3.哪些操作会导致数据的自动提交？</span></span><br><span class="line"><span class="comment"> * &gt;DDL操作一旦执行，都会自动提交。</span></span><br><span class="line"><span class="comment"> * &gt;set autocommit = false 对DDL操作失效</span></span><br><span class="line"><span class="comment"> * &gt;DML默认情况下，一旦执行，就会自动提交。</span></span><br><span class="line"><span class="comment"> * &gt;我们可以通过set autocommit = false的方式取消DML操作的自动提交。</span></span><br><span class="line"><span class="comment"> * &gt;默认在关闭连接时，会自动的提交数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionSqlGeneral</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//******************未考虑数据库事务情况下的转账操作**************************</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 针对于数据表user_table来说：</span></span><br><span class="line"><span class="comment">     * AA用户给BB用户转账100</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * update user_table set balance = balance - 100 where user = &#x27;AA&#x27;;</span></span><br><span class="line"><span class="comment">     * update user_table set balance = balance + 100 where user = &#x27;BB&#x27;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;</span><br><span class="line">        update(sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟网络异常</span></span><br><span class="line">        System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;</span><br><span class="line">        update(sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的增删改操作---version 1.0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql, Object... args)</span> &#123;<span class="comment">// sql中占位符的个数与可变形参的长度相同！</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.获取数据库的连接</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.预编译sql语句，返回PreparedStatement的实例</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 3.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);<span class="comment">// 小心参数声明错误！！</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.执行</span></span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//修改其为自动提交数据</span></span><br><span class="line">            <span class="comment">//主要针对于使用数据库连接池的使用</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5.资源的关闭</span></span><br><span class="line">            JDBCUtils.closeResource(ps, conn);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//********************考虑数据库事务后的转账操作*********************</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateWithTx</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            System.out.println(conn.getAutoCommit());<span class="comment">//true</span></span><br><span class="line">            <span class="comment">//1.取消数据的自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;</span><br><span class="line">            update(conn, sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟网络异常</span></span><br><span class="line">            System.out.println(<span class="number">10</span> / <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;</span><br><span class="line">            update(conn, sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提交数据</span></span><br><span class="line">            conn.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//3.回滚数据</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>, conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通用的增删改操作---version 2.0 （考虑上事务）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Connection conn, String sql, Object... args)</span> &#123;<span class="comment">// sql中占位符的个数与可变形参的长度相同！</span></span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.预编译sql语句，返回PreparedStatement的实例</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 2.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);<span class="comment">// 小心参数声明错误！！</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.执行</span></span><br><span class="line">            <span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4.资源的关闭</span></span><br><span class="line">            JDBCUtils.closeResource(ps, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//*****************************************************</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransactionSelect</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line">        <span class="comment">//获取当前连接的隔离级别</span></span><br><span class="line">        System.out.println(conn.getTransactionIsolation());</span><br><span class="line">        <span class="comment">//设置数据库的隔离级别：</span></span><br><span class="line">        conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);</span><br><span class="line">        <span class="comment">//取消自动提交数据</span></span><br><span class="line">        conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select user,password,balance from user_table where user = ?&quot;</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getInstance(conn, User.class, sql, <span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransactionUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消自动提交数据</span></span><br><span class="line">        conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = ? where user = ?&quot;</span>;</span><br><span class="line">        update(conn, sql, <span class="number">5000</span>, <span class="string">&quot;CC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">15000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的查询操作，用于返回数据表中的一条记录（version 2.0：考虑上事务）</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(Connection conn, Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">                ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">// 获取结果集的元数据 :ResultSetMetaData</span></span><br><span class="line">            <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line">            <span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                <span class="comment">// 处理结果集一行数据中的每一个列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line">                    <span class="comment">// 获取列值</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">columValue</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取每个列的列名</span></span><br><span class="line">                    <span class="comment">// String columnName = rsmd.getColumnName(i + 1);</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span></span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    field.set(t, columValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(ps, <span class="literal">null</span>, rs);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接池之一：C3P0数据库连接池"><a href="#数据库连接池之一：C3P0数据库连接池" class="headerlink" title="数据库连接池之一：C3P0数据库连接池"></a>数据库连接池之一：C3P0数据库连接池</h2><div class="tip warning faa-horizontal animated-hover"><p>C3P0数据库连接池</p></div><div class="tabs" id="块名"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#块名-1">获取连接方式一</button></li><li class="tab"><button type="button" data-href="#块名-2">获取连接方式二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="块名-1"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">cpds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">cpds.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">cpds.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">cpds.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">cpds.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpds.setMaxPoolSize(100);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="块名-2"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="comment">// new在外面，只需要生成一次就可以</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">cpds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;helloc3p0&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中，src下的配置文件为：【c3p0-config.xml】<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;helloc3p0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="数据库连接池之二：DBCP数据库连接池"><a href="#数据库连接池之二：DBCP数据库连接池" class="headerlink" title="数据库连接池之二：DBCP数据库连接池"></a>数据库连接池之二：DBCP数据库连接池</h2><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table></div><div class="tabs" id="块名"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#块名-1">获取连接方式一：</button></li><li class="tab"><button type="button" data-href="#块名-2">获取连接方式二：</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="块名-1"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">BasicDataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line"></span><br><span class="line">source.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">source.setUrl(<span class="string">&quot;jdbc:mysql:///test&quot;</span>);</span><br><span class="line">source.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">source.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">source.setInitialSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="块名-2"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DBCPTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span></span><br><span class="line">source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中，src下的配置文件为：【dbcp.properties】<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span></span><br><span class="line">username=root</span><br><span class="line">password=abc123</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">#...</span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Druid（德鲁伊）数据库连接池"><a href="#Druid（德鲁伊）数据库连接池" class="headerlink" title="Druid（德鲁伊）数据库连接池"></a>Druid（德鲁伊）数据库连接池</h2><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDruid</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中，src下的配置文件为：【druid.properties】<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">20</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br><span class="line">filters=wall</span><br></pre></td></tr></table></figure><br>详细配置参数：</p><ul><li>详细配置参数：</li></ul><div class="table-container"><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table></div><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li><li><p>API包说明：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230213161215.png" alt=""><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230213161303.png" alt=""></p></li><li><p><strong>主要API的使用</strong><br><strong>DbUtils</strong><br>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：</p></li><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul><p><strong>QueryRunner类</strong></p><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li></ul><div class="tip fa-gamepad faa-horizontal animated"><p>使用德鲁伊数据库连接池进行最终版本测试</p></div><div class="tabs" id="最终版本"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#最终版本-1">GeneralTest.java</button></li><li class="tab"><button type="button" data-href="#最终版本-2">Customer.java</button></li><li class="tab"><button type="button" data-href="#最终版本-3">JDBCUtils.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="最终版本-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exer.curd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Exer.bean.Customer;</span><br><span class="line"><span class="keyword">import</span> Exer.junit.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.DbUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.ResultSetHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneralTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向 Customers 表中插入一条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">insertCount</span> <span class="operator">=</span> runner.update(conn, sql, <span class="string">&quot;蔡徐坤&quot;</span>, <span class="string">&quot;caixukun@126.com&quot;</span>, <span class="string">&quot;1997-09-08&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;添加了&quot;</span> + insertCount + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>, conn, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BeanHandler：查询 Customers 表中的一条记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryInfo</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line">            BeanHandler&lt;Customer&gt; customerBeanHandler = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;Customer&gt;(Customer.class);</span><br><span class="line">            <span class="type">Customer</span> <span class="variable">query</span> <span class="operator">=</span> queryRunner.query(connection, sql, customerBeanHandler, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(query);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DbUtils.close(connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BeanListHandler：查询 Customers 中的多条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryInfos</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">queryRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt;= ?&quot;</span>;</span><br><span class="line">            BeanListHandler&lt;Customer&gt; customerBeanHandler = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;Customer&gt;(Customer.class);</span><br><span class="line">            List&lt;Customer&gt; customers = queryRunner.query(connection, sql, customerBeanHandler, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            customers.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>, connection, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MapHandler:是ResultSetHandler接口的实现类，对应表中的一条记录。</span></span><br><span class="line"><span class="comment">     * 将字段及相应字段的值作为map中的key和value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturnMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line">            <span class="type">MapHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapHandler</span>();</span><br><span class="line">            Map&lt;String, Object&gt; map = runner.query(connection, sql, handler, <span class="number">10</span>);</span><br><span class="line">            System.out.println(map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>, connection, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MapListHandler:是ResultSetHandler接口的实现类，对应表中的多条记录。</span></span><br><span class="line"><span class="comment">     * 将字段及相应字段的值作为map中的key和value。将这些map添加到List中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturnMapList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">MapListHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapListHandler</span>();</span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; list = runner.query(connection, sql, handler, <span class="number">13</span>);</span><br><span class="line">            list.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(<span class="literal">null</span>, connection, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ScalarHandler:用于查询特殊值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturnScalarHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from customers&quot;</span>;</span><br><span class="line">            <span class="type">ScalarHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> (Long) runner.query(conn, sql, handler);</span><br><span class="line"></span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ScalarHandler:用于查询特殊值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReturnScalarHandler2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">ScalarHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>();</span><br><span class="line">            <span class="type">Date</span> <span class="variable">maxBirth</span> <span class="operator">=</span> (Date) runner.query(conn, sql, handler);</span><br><span class="line">            System.out.println(maxBirth);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery7</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line">            ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">ResultSetHandler</span>&lt;Customer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> Customer <span class="title function_">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">                        <span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line">                        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(id, name, email, birth);</span><br><span class="line">                        <span class="keyword">return</span> customer;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> runner.query(conn, sql, handler, <span class="number">13</span>);</span><br><span class="line">            System.out.println(customer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.closeResource(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">57</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">1</span>&#125; inited</span><br><span class="line"><span class="number">2014</span>-<span class="number">01</span>-<span class="number">17</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">57</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">2</span>&#125; inited</span><br><span class="line">Customer&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;王菲&#x27;</span>, email=<span class="string">&#x27;wangf@163.com&#x27;</span>, birth=<span class="number">1988</span>-<span class="number">12</span>-<span class="number">26</span>&#125;</span><br><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">58</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">3</span>&#125; inited</span><br><span class="line">Customer&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;汪峰&#x27;</span>, email=<span class="string">&#x27;wf@126.com&#x27;</span>, birth=<span class="number">2010</span>-<span class="number">02</span>-<span class="number">02</span>&#125;</span><br><span class="line">Customer&#123;id=<span class="number">2</span>, name=<span class="string">&#x27;王菲&#x27;</span>, email=<span class="string">&#x27;wangf@163.com&#x27;</span>, birth=<span class="number">1988</span>-<span class="number">12</span>-<span class="number">26</span>&#125;</span><br><span class="line">Customer&#123;id=<span class="number">3</span>, name=<span class="string">&#x27;林志玲&#x27;</span>, email=<span class="string">&#x27;linzl@gmail.com&#x27;</span>, birth=<span class="number">1984</span>-<span class="number">06</span>-<span class="number">12</span>&#125;</span><br><span class="line">Customer&#123;id=<span class="number">4</span>, name=<span class="string">&#x27;汤唯&#x27;</span>, email=<span class="string">&#x27;tangw@sina.com&#x27;</span>, birth=<span class="number">1986</span>-<span class="number">06</span>-<span class="number">13</span>&#125;</span><br><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">58</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">4</span>&#125; inited</span><br><span class="line">&#123;id=<span class="number">4</span>, name=汤唯, email=tangw<span class="meta">@sina</span>.com, birth=<span class="number">1986</span>-<span class="number">06</span>-<span class="number">13</span>&#125;</span><br><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">58</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">5</span>&#125; inited</span><br><span class="line">&#123;id=<span class="number">1</span>, name=汪峰, email=wf@<span class="number">126.</span>com, birth=<span class="number">2010</span>-<span class="number">02</span>-<span class="number">02</span>&#125;</span><br><span class="line">&#123;id=<span class="number">2</span>, name=王菲, email=wangf@<span class="number">163.</span>com, birth=<span class="number">1988</span>-<span class="number">12</span>-<span class="number">26</span>&#125;</span><br><span class="line">&#123;id=<span class="number">3</span>, name=林志玲, email=linzl<span class="meta">@gmail</span>.com, birth=<span class="number">1984</span>-<span class="number">06</span>-<span class="number">12</span>&#125;</span><br><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">58</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">6</span>&#125; inited</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">58</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">7</span>&#125; inited</span><br><span class="line">添加了<span class="number">1</span>条记录</span><br><span class="line"><span class="number">5</span>月 <span class="number">20</span>, <span class="number">2023</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">59</span> 下午 com.alibaba.druid.pool.DruidDataSource info</span><br><span class="line">信息: &#123;dataSource-<span class="number">8</span>&#125; inited</span><br><span class="line">Customer&#123;id=<span class="number">4</span>, name=<span class="string">&#x27;汤唯&#x27;</span>, email=<span class="string">&#x27;tangw@sina.com&#x27;</span>, birth=<span class="number">1986</span>-<span class="number">06</span>-<span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/2053/20230520225844.png" alt=""></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="最终版本-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exer.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(<span class="type">int</span> id, String name, String email, Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="最终版本-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exer.junit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Connection 连接，使用数据库连接池（Druid）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源，但是 org.apache.commons.dbutils.DbUtils 有关闭资源的方法，所以下面方法可不用。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 资源关闭</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源，但是 org.apache.commons.dbutils.DbUtils 有关闭资源的方法，所以下面方法可不用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeResource</span><span class="params">(Statement ps, Connection connection, ResultSet rs)</span> &#123;</span><br><span class="line">        <span class="comment">//TODO 资源关闭</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java基础示例代码&quot;&gt;&lt;a href=&quot;#Java基础示例代码&quot; class=&quot;headerlink&quot; title=&quot;Java基础示例代码&quot;&gt;&lt;/a&gt;Java基础示例代码&lt;/h1&gt;&lt;h2 id=&quot;单例设计模式&quot;&gt;&lt;a href=&quot;#单例设计模式&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Maven技术</title>
    <link href="https://www.jermyn.cn/posts/3755.html"/>
    <id>https://www.jermyn.cn/posts/3755.html</id>
    <published>2023-02-14T18:56:51.000Z</published>
    <updated>2023-05-28T15:04:33.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven基础知识"><a href="#Maven基础知识" class="headerlink" title="Maven基础知识"></a>Maven基础知识</h1><div class="note info flat"><p>生产环境下开发不再是一个项目一个工程，而是每一个模块创建一个工程而多个模块整合在一起就需要使用到像Maven这样的构建工具。</p></div><h2 id="构建过程的几个主要环节"><a href="#构建过程的几个主要环节" class="headerlink" title="构建过程的几个主要环节"></a>构建过程的几个主要环节</h2><p><strong>①清理 ：</strong>删除以前的编译结果，为重新编译做好准备。<br><strong>②编译 ：</strong>将Java源程序编译为字节码文件。<br><strong>③测试 ：</strong>针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br><strong>④报告 ：</strong>在每一次测试后以标准的格式记录和展示测试结果。<br><strong>⑤打包 ：</strong>将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。 Java 工程对应 jar 包， Web工程对应 war 包。<br><strong>⑥安装 ：</strong>在 Maven 环境下特指将打包的结果 jar 包或 war 包安装到本地仓库中。<br><strong>⑦部署 ：</strong>将打包的结果部署到远程仓库或将 war 包部署到服务器上运行。</p><h2 id="安装Maven核心程序"><a href="#安装Maven核心程序" class="headerlink" title="安装Maven核心程序"></a>安装Maven核心程序</h2><p><strong>① 检查JAVA_HOME环境变量（开启cmd，输入echo %JAVA_HOME%）</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;<span class="built_in">echo</span> %JAVA_HOME%</span><br><span class="line">D:\PATH<span class="literal">-EN</span>\jdk11</span><br></pre></td></tr></table></figure><br><strong>② 解压Maven核心程序压缩包，放在一个非中文无空格路径下</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\PATH<span class="literal">-EN</span>\Maven_path&gt; <span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line">Path</span><br><span class="line"><span class="literal">----</span></span><br><span class="line">D:\PATH<span class="literal">-EN</span>\Maven_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\PATH<span class="literal">-EN</span>\Maven_path&gt; <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: D:\PATH<span class="literal">-EN</span>\Maven_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line"><span class="literal">----</span>                 <span class="literal">-------------</span>         <span class="literal">------</span> <span class="literal">----</span></span><br><span class="line">d<span class="literal">-----</span>  <span class="number">2023</span>/<span class="number">2</span>/<span class="number">17</span> 星期五     <span class="number">20</span>:<span class="number">11</span>                apache<span class="literal">-maven-3</span>.<span class="number">2.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">PS</span> D:\PATH<span class="literal">-EN</span>\Maven_path&gt;</span><br></pre></td></tr></table></figure><br><strong>③ 配置Maven相关的环境变量</strong></p><ul><li><p>MAVEN_HOME或者是M2_HOME(路径一般是bin文件夹的上一级)<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230217202752.png" alt=""></p></li><li><p>配置Path(路径一般是bin文件夹所在的一级)<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230217203203.png" alt=""></p></li></ul><p><strong>④ 验证：运行 mvn -v命令查看</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\PATH<span class="literal">-EN</span>\Maven_path&gt; mvn <span class="literal">-v</span></span><br><span class="line">Apache Maven <span class="number">3.2</span>.<span class="number">2</span> (<span class="number">45</span>f7c06d68e745d05611f7fd14efb6594181933e; <span class="number">2014</span><span class="literal">-06-17T21</span>:<span class="number">51</span>:<span class="number">42</span>+<span class="number">08</span>:<span class="number">00</span>)</span><br><span class="line">Maven home: D:\PATH<span class="literal">-EN</span>\Maven_path\apache<span class="literal">-maven-3</span>.<span class="number">2.2</span></span><br><span class="line">Java version: <span class="number">11.0</span>.<span class="number">2</span>, vendor: Oracle Corporation</span><br><span class="line">Java home: D:\PATH<span class="literal">-EN</span>\jdk11</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">&quot;windows 10&quot;</span>, version: <span class="string">&quot;10.0&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;dos&quot;</span></span><br><span class="line"><span class="built_in">PS</span> D:\PATH<span class="literal">-EN</span>\Maven_path&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Maven-核心概念"><a href="#Maven-核心概念" class="headerlink" title="Maven 核心概念"></a>Maven 核心概念</h1><h2 id="根据坐标创建-Maven-工程"><a href="#根据坐标创建-Maven-工程" class="headerlink" title="根据坐标创建 Maven 工程"></a>根据坐标创建 Maven 工程</h2><p><strong>向量说明</strong></p><ul><li>使用三个『向量』在『Maven的仓库』中唯一的定位到一个『jar』包。<ul><li><strong>groupId：</strong>公司或组织的 id</li><li><strong>artifactId：</strong>一个项目或者是项目中的一个模块的 id</li><li><strong>version：</strong>版本号</li></ul></li></ul><p><strong>三个向量的取值方式</strong></p><ul><li><strong>groupId：</strong>公司或组织域名的倒序，通常也会加上项目名称 <ul><li>例如：cn.jermyn.maven</li></ul></li><li><strong>artifactId：</strong>模块的名称，将来作为 Maven 工程的工程名</li><li><strong>version：</strong>模块的版本号，根据自己的需要设定<ul><li>例如：SNAPSHOT 表示快照版本，正在迭代过程中，不稳定的版本</li><li>例如：RELEASE 表示正式版本<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">举例：</span><br><span class="line">groupId：cn.jermyn.maven</span><br><span class="line">artifactId：pro01-jermyn-maven</span><br><span class="line">version：<span class="number">1.0</span>-SNAPSHOT</span><br></pre></td></tr></table></figure><strong>坐标和仓库中 jar 包的存储路径之间的对应关系</strong><br>坐标：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br></pre></td></tr></table></figure>上面坐标对应的 jar 包在 Maven 本地仓库中的位置：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Maven本地仓库根目录\javax\servlet\servlet-api\<span class="number">2.5</span>\<span class="number">1</span> servlet-api-<span class="number">2.5</span>.jar</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="实验操作"><a href="#实验操作" class="headerlink" title="实验操作"></a>实验操作</h2><p><strong>运行 mvn archetype:generate 命令</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230220213932.png" alt=""></p><p><strong>调整</strong><br>Maven 默认生成的工程，对 junit 依赖的是较低的 3.8.1 版本，我们可以改成较适合的 4.12 版本。自动生成的 App.java 和 AppTest.java 可以删除。<br><strong>自动生成的 pom.xml 解读</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根标签：project 对当前工程进行配置管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- modeVersion 标签： 从Maven2开始就是固定的4.0.0--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 代表当前pom.xml所采用的标签结构--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 坐标信息 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- groupId 标签：坐标向量之一；代表公司或组织开发的某一个项目 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jermyn.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- artifactId 标签：坐标向量之一；代表项目下的某一个模块 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- version 标签：坐标向量之一；代表当前模块的版本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- packaging 标签：当前Maven工程的打包方式，可选值有下面三种 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- jar：表示这个工程是一个Java工程 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- war：表示这个工程是一个Web工程 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- pom：表示这个工程是“管理其他工程”的工程 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>pro01-maven-java<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在Maven中定义属性值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 工程构建过程中读取源码时使用的字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 当前工程所依赖的jar包 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用dependency配置一个具体的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 在dependency标签内使用具体的坐标依赖我们需要的一个jar包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- scope标签配置依赖的范围 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="Maven核心概念：POM"><a href="#Maven核心概念：POM" class="headerlink" title="Maven核心概念：POM"></a>Maven核心概念：POM</h2><p><strong>含义:</strong>POM：Project Object Model，项目对象模型。和 POM 类似的是：DOM（Document ObjectModel），文档对象模型。它们都是模型化思想的具体体现。<br><strong>模型化思想:</strong><br>POM 表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是将现实生活中的事物抽象为模型，然后封装模型相关的数据作为一个对象，这样就可以在程序中计算与现实事物相关的数据。<br><strong>对应的配置文件:</strong>POM 理念集中体现在 Maven 工程根目录下 pom.xml 这个配置文件中。所以这个 pom.xml 配置文件就<br>是 Maven 工程的核心配置文件。其实学习 Maven 就是学这个文件怎么配置，各个配置有什么用。</p><h2 id="Maven核心概念：约定的目录结构"><a href="#Maven核心概念：约定的目录结构" class="headerlink" title="Maven核心概念：约定的目录结构"></a>Maven核心概念：约定的目录结构</h2><p><strong>约定目录结构的意义:</strong>Maven 为了让构建过程能够尽可能自动化完成，所以必须约定目录结构的作用。例如：Maven 执行编译操作，必须先去 Java 源程序目录读取 Java 源代码，然后执行编译，最后把编译结果存放在 target 目录。<br><strong>约定大于配置:</strong>Maven 对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建 Maven 工程后，还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221215607.png" alt=""></p><h2 id="在-Maven-工程中编写代码"><a href="#在-Maven-工程中编写代码" class="headerlink" title="在 Maven 工程中编写代码"></a>在 Maven 工程中编写代码</h2><h3 id="1、主体程序"><a href="#1、主体程序" class="headerlink" title="1、主体程序"></a>1、主体程序</h3><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221220311.png" alt=""><br>主体程序指的是被测试的程序，同时也是将来在项目中真正要使用的程序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.jermyn.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、测试程序"><a href="#2、测试程序" class="headerlink" title="2、测试程序"></a>2、测试程序</h3><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221221050.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.maven;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> cn.jermyn.maven.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态导入的效果是将Assert类中的静态资源导入当前类</span></span><br><span class="line"><span class="comment">// 这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSum</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建Calculator对象</span></span><br><span class="line"><span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用Calculator对象的方法，获取到程序运行实际的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">actualResult</span> <span class="operator">=</span> calculator.sum(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.声明一个变量，表示程序运行期待的结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">expectedResult</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.使用断言来判断实际结果和期待结果是否一致</span></span><br><span class="line"><span class="comment">// 如果一致：测试通过，不会抛出异常</span></span><br><span class="line"><span class="comment">// 如果不一致：抛出异常，测试失败</span></span><br><span class="line">assertEquals(expectedResult, actualResult);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="执行-Maven-的构建命令"><a href="#执行-Maven-的构建命令" class="headerlink" title="执行 Maven 的构建命令"></a>执行 Maven 的构建命令</h2><h3 id="1、要求"><a href="#1、要求" class="headerlink" title="1、要求:"></a>1、要求:</h3><p>运行 Maven 中和构建操作相关的命令时，必须进入到pom.xml所在的目录。如果没有在 pom.xml 所在的目录运行 Maven 的构建令，那么会看到下面的错误信息：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The goal you specified requires a project to execute but there is no POM in this directory</span><br></pre></td></tr></table></figure></p><blockquote><blockquote><p>mvn -v 命令和构建操作无关，只要正确配置了 PATH，在任何目录下执行都可以。而构建相关的命令要在 pom.xml 所在目录下运行——操作哪个工程，就进入这个工程的 pom.xml 目录。</p></blockquote></blockquote><h3 id="2、清理操作"><a href="#2、清理操作" class="headerlink" title="2、清理操作"></a>2、清理操作</h3><p>mvn clean<br>效果：删除 target 目录</p><h3 id="3、编译操作"><a href="#3、编译操作" class="headerlink" title="3、编译操作"></a>3、编译操作</h3><p>主程序编译：mvn compile<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221221823.png" alt=""></p><p>测试程序编译：mvn test-compile<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221222127.png" alt=""><br>主体程序编译结果存放的目录：target/classes<br>测试程序编译结果存放的目录：target/test-classes</p><h3 id="4、测试操作"><a href="#4、测试操作" class="headerlink" title="4、测试操作"></a>4、测试操作</h3><p>mvn test<br>测试的报告存放的目录：target/surefire-reports<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221222348.png" alt=""></p><h3 id="5、打包操作"><a href="#5、打包操作" class="headerlink" title="5、打包操作"></a>5、打包操作</h3><p>mvn package<br>打包的结果——jar 包，存放的目录：target<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221222821.png" alt=""><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/3755/20230221223006.png" alt=""></p>]]></content>
    
    
    <summary type="html">本文为Maven学习笔记，仅作为学习的参考，文档资源来自尚硅谷，整理为博主，加入部分自己的理解，在此感谢尚硅谷无私分享大量的学习资源。</summary>
    
    
    
    <category term="JavaEE" scheme="https://www.jermyn.cn/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>JDBC核心技术</title>
    <link href="https://www.jermyn.cn/posts/d625.html"/>
    <id>https://www.jermyn.cn/posts/d625.html</id>
    <published>2022-12-21T08:55:15.000Z</published>
    <updated>2023-05-28T15:04:33.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h1><h2 id="数据的持久化"><a href="#数据的持久化" class="headerlink" title="数据的持久化"></a>数据的持久化</h2><ul><li>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</li><li>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221221094630.png" alt=""></li></ul><h2 id="Java中的数据存储技术"><a href="#Java中的数据存储技术" class="headerlink" title="Java中的数据存储技术"></a>Java中的数据存储技术</h2><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><strong>JDBC</strong>直接访问数据库</li><li>JDO (Java Data Object )技术</li><li><strong>第三方O/R工具</strong>，如Hibernate, Mybatis 等</li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h2 id="JDBC介绍"><a href="#JDBC介绍" class="headerlink" title="JDBC介绍"></a>JDBC介绍</h2><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li><p>如果没有JDBC，那么Java程序访问数据库时是这样的：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221221094721.png" alt=""></p></li><li><p>有了JDBC，Java程序访问数据库时是这样的：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221221094800.png" alt=""></p></li><li><p>总结如下：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221221094824.png" alt=""></p></li></ul><h2 id="JDBC体系结构"><a href="#JDBC体系结构" class="headerlink" title="JDBC体系结构"></a>JDBC体系结构</h2><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。<blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong><br><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。                                                                ————面向接口编程</strong></p></blockquote></li></ul></li></ul><h2 id="JDBC程序编写步骤"><a href="#JDBC程序编写步骤" class="headerlink" title="JDBC程序编写步骤"></a>JDBC程序编写步骤</h2><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221221100057.png" alt=""></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h1 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h1><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221221122421.png" alt=""></p></li></ul><h2 id="用户名和密码"><a href="#用户名和密码" class="headerlink" title="用户名和密码"></a>用户名和密码</h2><ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h2 id="数据库连接方式举例"><a href="#数据库连接方式举例" class="headerlink" title="数据库连接方式举例"></a>数据库连接方式举例</h2><ul><li><p><strong>连接方式一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.提供java.sql.Driver接口实现类的对象</span></span><br><span class="line">           <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           driver = <span class="keyword">new</span> <span class="title class_">com</span>.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           <span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote></li><li><p><strong>连接方式二</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection2</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.实例化Driver</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">           <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">           <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           <span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">           info.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">           info.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote></li><li><p><strong>连接方式三</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection3</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">driverName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.实例化Driver</span></span><br><span class="line">           <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(driverName);</span><br><span class="line">           <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver) clazz.newInstance();</span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           DriverManager.registerDriver(driver);</span><br><span class="line">           <span class="comment">//4.获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote></li><li><p><strong>连接方式四</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConnection4</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">driverName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span></span><br><span class="line">           Class.forName(driverName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//Driver driver = (Driver) clazz.newInstance();</span></span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           <span class="comment">//DriverManager.registerDriver(driver);</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span></span><br><span class="line"><span class="comment">           static &#123;</span></span><br><span class="line"><span class="comment">               try &#123;</span></span><br><span class="line"><span class="comment">                   DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">               &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                   throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.获取连接</span></span><br><span class="line">           <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote></li><li><p><strong>连接方式五(最终版)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testConnection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">//1.加载配置文件</span></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">       <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">       pros.load(is);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2.读取配置信息</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">driverClass</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.加载驱动</span></span><br><span class="line">       Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.获取连接</span></span><br><span class="line">       <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">       System.out.println(conn);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中，配置文件声明在工程的src目录下：jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件<br><strong>使用配置文件的好处：</strong><br>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote></li></ul><h1 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h1><h2 id="PreparedStatement的使用"><a href="#PreparedStatement的使用" class="headerlink" title="PreparedStatement的使用"></a>PreparedStatement的使用</h2><ul><li><strong>PreparedStatement介绍</strong><ul><li>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</li><li><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></li><li>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</li></ul></li></ul><hr><ul><li><strong>PreparedStatement vs Statement</strong><ul><li>代码的可读性和可维护性。</li><li><strong>PreparedStatement 能最大可能提高性能：</strong><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以 语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。 </li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样 每执行一次都要对传入的语句编译一次。 </li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li>PreparedStatement 可以防止 SQL 注入 </li></ul></li></ul><hr><ul><li><strong>Java与SQL对应数据类型转换表</strong><table>  <tr>      <td>Java类型 </td>      <td>SQL类型</td>   </tr>  <tr>      <td>boolean</td>      <td>BIT</td>   </tr>  <tr>      <td>byte</td>      <td>TINYINT</td>   </tr>  <tr>      <td>short </td>      <td>SMALLINT</td>   </tr>  <tr>      <td>int</td>      <td>INTEGER</td>   </tr>  <tr>      <td>long</td>      <td>BIGINT</td>   </tr>  <tr>      <td>String</td>      <td>CHAR,VARCHAR,LONGVARCHAR</td>   </tr>  <tr>      <td>long</td>      <td>BIGINT</td>   </tr>  <tr>      <td>byte   array</td>      <td>BINARY,VAR BINARY</td>   </tr>  <tr>      <td>java.sql.Date</td>      <td>DATE</td>   </tr>  <tr>      <td>java.sql.Time</td>      <td>TIME</td>   </tr>  <tr>      <td>java.sql.Timestamp</td>      <td>TIMESTAMP</td>   </tr></table></li></ul><hr><ul><li><strong>使用PreparedStatement实现增、删、改操作</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String sql,Object ... args)</span>&#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取数据库的连接</span></span><br><span class="line">        conn = JDBCUtils.getConnection();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//3.填充占位符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">            ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.执行sql语句</span></span><br><span class="line">        ps.execute();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//5.关闭资源</span></span><br><span class="line">        JDBCUtils.closeResource(conn, ps);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><strong>使用PreparedStatement实现查询操作</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取数据库连接</span></span><br><span class="line">        conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.填充占位符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">        <span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line">        <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取列值</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">columnVal</span> <span class="operator">=</span> rs.getObject(i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 7.关闭资源</span></span><br><span class="line">        JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明： 使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。 </p></blockquote></li></ul><hr><h2 id="ResultSet与ResultSetMetaData"><a href="#ResultSet与ResultSetMetaData" class="headerlink" title="ResultSet与ResultSetMetaData"></a>ResultSet与ResultSetMetaData</h2><ul><li><p><strong>ResultSet</strong></p><ul><li>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</li><li>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</li><li>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</li><li>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。 </p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li>boolean next()</li><li>getString()<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230206111109.png" alt=""></li></ul></li></ul></li></ul><hr><ul><li><strong>ResultSetMetaData</strong><ul><li>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</li><li>ResultSetMetaData meta = rs.getMetaData();<ul><li><strong>getColumnName</strong>(int column)：获取指定列的名称</li><li><strong>getColumnLabel</strong>(int column)：获取指定列的别名</li><li><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </li><li>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </li><li>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </li><li><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </li><li>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230206133704.png" alt=""></li></ul></li></ul></li></ul><hr><ul><li><strong>资源的释放</strong><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul></li></ul><h1 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h1><h2 id="MySQL-BLOB类型"><a href="#MySQL-BLOB类型" class="headerlink" title="MySQL BLOB类型"></a>MySQL BLOB类型</h2><ul><li>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</li><li>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</li><li>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230206134732.png" alt=""></li><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h2 id="向数据表中插入大数据类型"><a href="#向数据表中插入大数据类型" class="headerlink" title="向数据表中插入大数据类型"></a>向数据表中插入大数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;徐海强&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">&quot;xhq@126.com&quot;</span>);</span><br><span class="line">ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date().getTime()));</span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xhq.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">4</span>, fis);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改数据表中的Blob类型字段"><a href="#修改数据表中的Blob类型字段" class="headerlink" title="修改数据表中的Blob类型字段"></a>修改数据表中的Blob类型字段</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update customers set photo = ? where id = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;coffee.png&quot;</span>);</span><br><span class="line">ps.setBlob(<span class="number">1</span>, fis);</span><br><span class="line">ps.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h2 id="从数据表中读取大数据类型"><a href="#从数据表中读取大数据类型" class="headerlink" title="从数据表中读取大数据类型"></a>从数据表中读取大数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, name, email, birth, photo FROM customer WHERE id = ?&quot;</span>;</span><br><span class="line">conn = getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line">    <span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getDate(<span class="number">4</span>);</span><br><span class="line"><span class="type">Customer</span> <span class="variable">cust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(id, name, email, birth);</span><br><span class="line">    System.out.println(cust); </span><br><span class="line">    <span class="comment">//读取Blob类型的字段</span></span><br><span class="line"><span class="type">Blob</span> <span class="variable">photo</span> <span class="operator">=</span> rs.getBlob(<span class="number">5</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> photo.getBinaryStream();</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;c.jpg&quot;</span>);</span><br><span class="line"><span class="type">byte</span> [] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">    JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(os !=  <span class="literal">null</span>)&#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h1><h2 id="批量执行SQL语句"><a href="#批量执行SQL语句" class="headerlink" title="批量执行SQL语句"></a>批量执行SQL语句</h2><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h2 id="高效的批量插入"><a href="#高效的批量插入" class="headerlink" title="高效的批量插入"></a>高效的批量插入</h2><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="实现层次一：使用Statement"><a href="#实现层次一：使用Statement" class="headerlink" title="实现层次一：使用Statement"></a>实现层次一：使用Statement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"><span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="string">&quot;)&quot;</span>;</span><br><span class="line">st.executeUpdate(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现层次二：使用PreparedStatement"><a href="#实现层次二：使用PreparedStatement" class="headerlink" title="实现层次二：使用PreparedStatement"></a>实现层次二：使用PreparedStatement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//82340</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h2 id="实现层次三"><a href="#实现层次三" class="headerlink" title="实现层次三"></a>实现层次三</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span></span><br><span class="line"><span class="comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span></span><br><span class="line"><span class="comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span></span><br><span class="line"><span class="comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//20000条：625                                                                         //1000000条:14733  </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现层次四"><a href="#实现层次四" class="headerlink" title="实现层次四"></a>实现层次四</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 层次四：在层次三的基础上操作</span></span><br><span class="line"><span class="comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置为不自动提交数据</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into goods(name)values(?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;name_&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="comment">//1000000条:4978 </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h1><h2 id="数据库事务介绍"><a href="#数据库事务介绍" class="headerlink" title="数据库事务介绍"></a>数据库事务介绍</h2><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都<strong>被提交(commit)</strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务<strong>回滚(rollback)</strong>到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 </p></li></ul><h2 id="JDBC事务处理"><a href="#JDBC事务处理" class="headerlink" title="JDBC事务处理"></a>JDBC事务处理</h2><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJDBCTransaction</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 3.进行数据库操作</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql1, <span class="string">&quot;AA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络异常</span></span><br><span class="line"><span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;</span><br><span class="line">update(conn, sql2, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line"><span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>, <span class="literal">null</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> &#123;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="literal">null</span>, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务的ACID属性"><a href="#事务的ACID属性" class="headerlink" title="事务的ACID属性"></a>事务的ACID属性</h2><ol><li><p><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h2 id="数据库的并发问题"><a href="#数据库的并发问题" class="headerlink" title="数据库的并发问题"></a>数据库的并发问题</h2><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h2 id="四种隔离级别"><a href="#四种隔离级别" class="headerlink" title="四种隔离级别"></a>四种隔离级别</h2><ul><li><p>数据库提供的4种事务隔离级别：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230206135511.png" alt=""></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li><li><p>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></p><h2 id="在MySql中设置隔离级别"><a href="#在MySql中设置隔离级别" class="headerlink" title="在MySql中设置隔离级别"></a>在MySql中设置隔离级别</h2></li><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation;</span><br></pre></td></tr></table></figure></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>  transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> tom identified <span class="keyword">by</span> <span class="string">&#x27;abc123&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> tom@<span class="string">&#x27;%&#x27;</span>  identified <span class="keyword">by</span> <span class="string">&#x27;abc123&#x27;</span>; </span><br><span class="line"> #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span> <span class="keyword">on</span> atguigudb.<span class="operator">*</span> <span class="keyword">to</span> tom<span class="variable">@localhost</span> identified <span class="keyword">by</span> <span class="string">&#x27;abc123&#x27;</span>; </span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="第7章：数据库连接池"><a href="#第7章：数据库连接池" class="headerlink" title="第7章：数据库连接池"></a>第7章：数据库连接池</h1><h2 id="JDBC数据库连接池的必要性"><a href="#JDBC数据库连接池的必要性" class="headerlink" title="JDBC数据库连接池的必要性"></a>JDBC数据库连接池的必要性</h2><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </li></ul></li></ul><h2 id="数据库连接池技术"><a href="#数据库连接池技术" class="headerlink" title="数据库连接池技术"></a>数据库连接池技术</h2><ul><li>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</li><li><strong>数据库连接池技术的优点</strong><br><strong>1. 资源重用</strong><br>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。<br><strong>2. 更快的系统反应速度</strong><br>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间<br><strong>3. 新的资源分配手段</strong><br>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源<br><strong>4. 统一的连接管理，避免数据库连接泄漏</strong><br>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</li></ul><h2 id="多种开源的数据库连接池"><a href="#多种开源的数据库连接池" class="headerlink" title="多种开源的数据库连接池"></a>多种开源的数据库连接池</h2><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><div class="tip warning faa-horizontal animated-hover"><p>C3P0数据库连接池</p></div><div class="tabs" id="块名"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#块名-1">获取连接方式一</button></li><li class="tab"><button type="button" data-href="#块名-2">获取连接方式二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="块名-1"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">cpds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">cpds.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">cpds.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">cpds.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">cpds.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpds.setMaxPoolSize(100);</span></span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="块名-2"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">cpds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;helloc3p0&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException&#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中，src下的配置文件为：【c3p0-config.xml】<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;helloc3p0&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong>DBCP数据库连接池</strong></p><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table></div><div class="tabs" id="块名"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#块名-1">获取连接方式一：</button></li><li class="tab"><button type="button" data-href="#块名-2">获取连接方式二：</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="块名-1"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">BasicDataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line"></span><br><span class="line">source.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">source.setUrl(<span class="string">&quot;jdbc:mysql:///test&quot;</span>);</span><br><span class="line">source.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">source.setPassword(<span class="string">&quot;abc123&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">source.setInitialSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="块名-2"><p><strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DataSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> DBCPTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span></span><br><span class="line">source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> source.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中，src下的配置文件为：【dbcp.properties】<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span></span><br><span class="line">username=root</span><br><span class="line">password=abc123</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">#...</span><br></pre></td></tr></table></figure></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong>Druid（德鲁伊）数据库连接池</strong><br>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDruid</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中，src下的配置文件为：【druid.properties】<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">20</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br><span class="line">filters=wall</span><br></pre></td></tr></table></figure><br>详细配置参数：</p><ul><li>详细配置参数：</li></ul><div class="table-container"><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table></div><h1 id="第8章：Apache-DBUtils实现CRUD操作"><a href="#第8章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第8章：Apache-DBUtils实现CRUD操作"></a>第8章：Apache-DBUtils实现CRUD操作</h1><h2 id="Apache-DBUtils简介"><a href="#Apache-DBUtils简介" class="headerlink" title="Apache-DBUtils简介"></a>Apache-DBUtils简介</h2><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li><li>API包说明：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230213161215.png" alt=""><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20230213161303.png" alt=""></li></ul><h2 id="主要API的使用"><a href="#主要API的使用" class="headerlink" title="主要API的使用"></a>主要API的使用</h2><p><strong>DbUtils</strong><br>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：</p><ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul><p><strong>QueryRunner类</strong></p><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> runner.update(conn, sql, <span class="string">&quot;何成飞&quot;</span>, <span class="string">&quot;he@qq.com&quot;</span>, <span class="string">&quot;1992-09-08&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;添加了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from customers where id &lt; ?&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> runner.update(conn, sql,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;删除了&quot;</span> + count + <span class="string">&quot;条记录&quot;</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ResultSetHandler接口及实现类</strong></p><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p><strong>ScalarHandler：</strong>查询单个值对象</p></li></ul></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(Customer.class);</span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询多条记录构成的集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryList</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> <span class="title class_">ResultSetHandler</span>&lt;Customer&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Customer <span class="title function_">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;handle&quot;</span>);</span><br><span class="line"><span class="comment">//return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getDate(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(id, name, email, birth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span></span><br><span class="line"><span class="comment"> * 使用ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="type">QueryRunner</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一：</span></span><br><span class="line"><span class="comment">//String sql = &quot;select count(*) from customers where id &lt; ?&quot;;</span></span><br><span class="line"><span class="comment">//ScalarHandler handler = new ScalarHandler();</span></span><br><span class="line"><span class="comment">//long count = (long) runner.query(conn, sql, handler, 20);</span></span><br><span class="line"><span class="comment">//System.out.println(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二：</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select max(birth) from customers&quot;</span>;</span><br><span class="line"><span class="type">ScalarHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScalarHandler</span>();</span><br><span class="line"><span class="type">Date</span> <span class="variable">birth</span> <span class="operator">=</span> (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(birth);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">本文为JDBC核心技术学习笔记，仅作为学习的参考，文档资源来自尚硅谷，整理为博主，加入部分自己的理解，在此感谢尚硅谷无私分享大量的学习资源。</summary>
    
    
    
    <category term="JavaEE" scheme="https://www.jermyn.cn/categories/JavaEE/"/>
    
    
  </entry>
  
  <entry>
    <title>Mysql基础</title>
    <link href="https://www.jermyn.cn/posts/fac6.html"/>
    <id>https://www.jermyn.cn/posts/fac6.html</id>
    <published>2022-10-29T16:31:13.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-数据库概述"><a href="#第一章-数据库概述" class="headerlink" title="第一章 数据库概述"></a>第一章 数据库概述</h1><h2 id="为什么要使用数据库"><a href="#为什么要使用数据库" class="headerlink" title="为什么要使用数据库"></a>为什么要使用数据库</h2><ul><li>持久化(persistence)：把数据保存到可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化”，而持久化的实现过程大多通过各种关系数据库来完成。</li><li>持久化的主要作用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</li></ul><h2 id="数据库与数据库管理系统"><a href="#数据库与数据库管理系统" class="headerlink" title="数据库与数据库管理系统"></a>数据库与数据库管理系统</h2><ul><li><p><strong>数据库的相关概念</strong></p><ul><li>DB：数据库（Database）即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</li><li>DBMS：数据库管理系统（Database Management System）是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中表内的数据。</li><li>SQL：结构化查询语言（Structured Query Language）专门用来与数据库通信的语言。</li></ul></li><li><p><strong>数据库与数据库管理系统的关系</strong><br>数据库管理系统(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221101151051.png" alt=""></p></li></ul><h2 id="RDBMS-与-非RDBMS"><a href="#RDBMS-与-非RDBMS" class="headerlink" title="RDBMS 与 非RDBMS"></a>RDBMS 与 非RDBMS</h2><p>从排名中我们能看出来，关系型数据库绝对是 DBMS 的主流，其中使用最多的DBMS分别是Oracle、MySQL 和 SQL Server。这些都是关系型数据库（RDBMS）。</p><ul><li><p><strong>关系型数据库(RDBMS)实质</strong></p><ul><li>这种类型的数据库是最古老的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的二元关系（即二维表格形式）。</li><li>关系型数据库以行(row) 和列(column) 的形式存储数据，以便于用户理解。这一系列的行和列被称为表(table) ，一组表组成了一个库(database)。</li><li>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用</li><li>关系模型来表示。关系型数据库，就是建立在关系模型基础上的数据库。</li><li>SQL 就是关系型数据库的查询语言。</li></ul></li><li><p><strong>关系型数据库(RDBMS)优势</strong></p><ul><li><strong><em>复杂查询:</em></strong> 可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li><strong><em>事务支持:</em></strong> 使得对于安全性能很高的数据访问要求得以实现。</li></ul></li></ul><hr><ul><li><p><strong>非关系型数据库(非RDBMS)介绍</strong><br>非关系型数据库，可看成传统关系型数据库的功能阉割版本，基于键值对存储数据，不需要经过SQL层的解析， 性能非常高。同时，通过减少不常用的功能，进一步提高性能。目前基本上大部分主流的非关系型数据库都是免费的。</p></li><li><p><strong>有哪些非关系型数据库</strong><br>相比于 SQL，NoSQL 泛指非关系型数据库，包括了榜单上的键值型数据库、文档型数据库、搜索引擎和列存储等，除此以外还包括图形数据库。也只有用 NoSQL 一词才能将这些技术囊括进来。</p><ul><li><p><strong>键值型数据库</strong><br>键值型数据库通过 Key-Value 键值的方式来存储数据，其中 Key 和 Value 可以是简单的对象，也可以是复杂的对象。Key 作为唯一的标识符，优点是查找速度快，在这方面明显优于关系型数据库，缺点是无法像关系型数据库一样使用条件过滤（比如 WHERE），如果你不知道去哪里找数据，就要遍历所有的键，这就会消耗大量的计算。键值型数据库典型的使用场景是作为内存缓存。Redis 是最流行的键值型数据库。</p></li><li><p><strong>文档型数据库</strong><br>此类数据库可存放并获取文档，可以是XML、JSON等格式。在数据库中文档作为处理信息的基本单位，一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。MongoDB是最流行的文档型数据库。此外，还有CouchDB等。</p></li><li><p><strong>搜索引擎数据库</strong><br>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。核心原理是“倒排索引”。典型产品：Solr、Elasticsearch、Splunk 等。</p></li><li><p><strong>列式数据库</strong><br>列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server 等数据库都是采用的行式存储（Row-based），而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的I/O，适合于分布式文件系统，不足在于功能相对有限。典型产品：HBase等。</p></li><li><p><strong>图形数据库</strong><br>图形数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图形数据库最典型的例子就是社交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效地解决复杂的关系问题。图形数据库顾名思义，就是一种存储图形关系的数据库。它利用了图这种数据结构存储了实体（对象）之间的关系。关系型数据用于存储明确关系的数据，但对于复杂关系的数据存储却有些力不从心。如社交网络中人物之间的关系，如果用关系型数据库则非常复杂，用图形数据库将非常简单。典型产品：Neo4J、InfoGrid等。</p></li></ul></li></ul><hr><ul><li><strong>NoSQL的演变</strong><br>由于 SQL 一直称霸 DBMS，因此许多人在思考是否有一种数据库技术能远离 SQL，于是 NoSQL 诞生了，但是随着发展却发现越来越离不开 SQL。到目前为止 NoSQL 阵营中的 DBMS 都会有实现类似 SQL 的功能。下面是“NoSQL”这个名词在不同时期的诠释，从这些释义的变化中可以看出 NoSQL 功能的演变：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1970：NoSQL = We have no SQL</span><br><span class="line">1980：NoSQL = Know SQL</span><br><span class="line">2000：NoSQL = No SQL!</span><br><span class="line">2005：NoSQL = Not only SQL</span><br><span class="line">2013：NoSQL = No, SQL!</span><br></pre></td></tr></table></figure><p>NoSQL 对 SQL 做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据库功能，非关系型数据库的功能就足够使用了。这种情况下，使用性能更高、成本更低的非关系型数据库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p><h2 id="关系型数据库设计规则"><a href="#关系型数据库设计规则" class="headerlink" title="关系型数据库设计规则"></a>关系型数据库设计规则</h2><ul><li>关系型数据库的典型数据结构就是数据表，这些数据表的组成都是结构化的（Structured）。</li><li>将数据放到表中，表再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中 “类”的设计。</li></ul><ul><li><strong>表、记录、字段</strong><ul><li>E-R（entity-relationship，实体-联系）模型中有三个主要概念是：<strong>实体集、属性、联系集。</strong></li><li>一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列（column），也称为一个字段（field）。</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ORM思想 (Object Relational Mapping)体现：</span><br><span class="line">数据库中的一个表 &lt;---&gt; Java或Python中的一个类</span><br><span class="line">表中的一条数据 &lt;---&gt; 类中的一个对象（或实体）</span><br><span class="line">表中的一个列 &lt;----&gt; 类中的一个字段、属性(field)</span><br></pre></td></tr></table></figure><ul><li><p><strong>表的关联关系</strong></p><ul><li>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。</li><li><p>四种：<strong>一对一关联、一对多关联、多对多关联、自我引用</strong></p></li><li><p><strong>一对一关联（one-to-one）</strong></p><ul><li>在实际的开发中应用不多，因为一对一可以创建成一张表。</li><li>举例：设计学生表：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人、…</li><li><p>拆为两个表：两个表的记录是一一对应关系。</p><ul><li>基础信息表（常用信息）：学号、姓名、手机号码、班级、系别</li><li>档案信息表（不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、…</li></ul></li><li><p>两种建表原则：</p><ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul></li><li><p><strong>一对多关系（one-to-many）</strong></p><ul><li>常见实例场景： 客户表和订单表， 分类表和商品表， 部门表和员工表。</li><li><p>举例：</p><ul><li>员工表：编号、姓名、…、所属部门</li><li>部门表：编号、名称、简介</li></ul></li><li><p>一对多建表原则：在从表(多方)创建一个字段，<strong>字段</strong>作为外键指向主表(一方)的主键</p></li></ul></li><li><p><strong>多对多（many-to-many）</strong></p><ul><li>要表示多对多关系，必须创建第三个表，该表通常称为联接表，它将多对多关系划分为两个一对多关系。将这两个表的主键都插入到第三个表中。</li><li><p><strong>举例1:</strong>学生-课程</p><ul><li>学生信息表：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别…）</li><li>课程信息表：一行代表一个课程的信息（课程编号、授课老师、简介…）</li><li>选课信息表：一个学生可以选多门课，一门课可以被多个学生选择</li></ul></li><li><p><strong>举例2：</strong>产品-订单</p><ul><li><p>“订单”表和“产品”表有一种多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中。</p><ul><li>产品表：“产品”表中的每条记录表示一个产品。</li><li>订单表：“订单”表中的每条记录表示一个订单。</li><li>订单明细表：每个产品可以与“订单”表中的多条记录对应，即出现在多个订单中。一个订单</li></ul></li><li><p>可以与“产品”表中的多条记录对应，即包含多个产品。</p></li></ul></li><li><p><strong>举例3：</strong>用户-角色<br>多对多关系建表原则：需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。</p></li></ul></li><li><p><strong>自我引用(Self reference)</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221101160622.png" alt=""></p></li></ul></li></ul><h1 id="第二章-MySQL环境搭建Win"><a href="#第二章-MySQL环境搭建Win" class="headerlink" title="第二章 MySQL环境搭建Win"></a>第二章 MySQL环境搭建Win</h1><h2 id="MySQL的下载"><a href="#MySQL的下载" class="headerlink" title="MySQL的下载"></a>MySQL的下载</h2><p>下载地址官网： <a href="https://www.mysql.com">https://www.mysql.com</a></p><h2 id="MySQL的使用演示"><a href="#MySQL的使用演示" class="headerlink" title="MySQL的使用演示"></a>MySQL的使用演示</h2><ul><li><strong>查看所有的数据库</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p>“information_schema”是 MySQL 系统自带的数据库，主要保存 MySQL 数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件 所在的文件夹和系统使用的文件夹，等等<br>“performance_schema”是 MySQL 系统自带的数据库，可以用来监控 MySQL 的各类性能指标。<br>“sys”数据库是 MySQL 系统自带的数据库，主要作用是以一种更容易被理解的方式展示 MySQL 数据库服务器的各类性能指标，帮助系统管理员和开发人员监控 MySQL 的技术性能。<br>“mysql”数据库保存了 MySQL 数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等</p><ul><li><strong>MySQL的编码设置</strong><br>MySQL5.7中:</li></ul><ol><li>步骤1：查看编码命令</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character_%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;collation_%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>步骤2：修改mysql的数据目录下的my.ini配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysql] #大概在63行左右，在其下添加</span><br><span class="line">...</span><br><span class="line">default-character-set=utf8 #默认字符集</span><br><span class="line">[mysqld] # 大概在76行左右，在其下添加</span><br><span class="line">...</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><ol><li>步骤3：重启服务</li><li>步骤4：查看编码命令</li></ol><ul><li><p><strong>MySQL8.0中</strong><br>在MySQL 8.0版本之前，默认字符集为latin1，utf8字符集指向的是utf8mb3。网站开发人员在数据库设计的时候往往会将编码修改为utf8字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL 8.0开始，数据库的默认编码改为utf8mb4 ，从而避免了上述的乱码问题。</p></li><li><p><strong>在使用图形化工具时可能出现连接问题：</strong><br>有些图形界面工具，特别是旧版本的图形界面工具，在连接MySQL8时出现“Authentication plugin’caching_sha2_password’ cannot be loaded”错误。<br><strong>原因：</strong>是MySQL8之前的版本中加密规则是mysql_native_password，而在MySQL8之后，加密规则是caching_sha2_password(如下图所示)。解决问题方法有两种，第一种是升级图形界面工具版本，第二种是把MySQL8用户登录密码加密规则还原成mysql_native_password。第二种解决方案如下，用命令行登录MySQL数据库之后，执行如下命令修改用户密码加密规则并更新用户密码，这里修改用户名为“root@localhost”的用户密码规则为“mysql_native_password”，密码值为“自己设置的密码”<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221101190315.png" alt=""></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用mysql数据库</span><br><span class="line">USE mysql;</span><br><span class="line">#修改<span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>用户的密码规则和密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;abc123&#x27;</span>;</span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h2 id="常见问题的解决"><a href="#常见问题的解决" class="headerlink" title="常见问题的解决"></a>常见问题的解决</h2><ul><li><strong>问题1：root用户密码忘记，重置的操作</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1: 通过任务管理器或者服务管理，关掉mysqld(服务进程) </span><br><span class="line">2: 通过命令行+特殊参数开启mysqld mysqld --defaults-file=&quot;D:\ProgramFiles\mysql\MySQLServer5.7Data\my.ini&quot; --skip-grant-tables</span><br><span class="line">3: 此时，mysqld服务进程已经打开。并且不需要权限检查 </span><br><span class="line">4: mysql -uroot 无密码登陆服务器。另启动一</span><br><span class="line">个客户端进行 </span><br><span class="line">5: 修改权限表 </span><br><span class="line">（1） use mysql; </span><br><span class="line">（2）update user set authentication<span class="emphasis">_string=password(&#x27;新密码&#x27;) where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;; </span></span><br><span class="line"><span class="emphasis">（3）flush privileges; </span></span><br><span class="line"><span class="emphasis">6: 通过任务管理器，关掉mysqld服务进程。 </span></span><br><span class="line"><span class="emphasis">7: 再次通过服务管理，打开mysql服务。 </span></span><br><span class="line"><span class="emphasis">8: 即可用修改后的新密码登陆。</span></span><br></pre></td></tr></table></figure><ul><li><strong>问题2：修改数据库和表的字符编码</strong><br>修改编码：<br>（1)先停止服务<br>（2）修改my.ini文件<br>（3）重新启动服务<br>说明：<br>如果是在修改my.ini之前建的库和表，那么库和表的编码还是原来的Latin1，要么删了重建，要么使用alter语句修改编码。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database <span class="number">0728</span>db charset Latin1;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> use <span class="number">0728</span>db;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> , name <span class="type">varchar</span>(<span class="number">20</span>)) charset Latin1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">Table</span>: student</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>latin1</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> student charset utf8; #修改表字符编码为UTF8</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">Table</span>: student</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, #字段仍然是latin1编码</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> student modify name <span class="type">varchar</span>(<span class="number">20</span>) charset utf8; #修改字段字符编码为UTF8</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">Table</span>: student</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> database <span class="number">0728</span>db;;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>Database<span class="operator">|</span> <span class="keyword">Create</span> Database <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span><span class="number">0728</span>db<span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `<span class="number">0728</span>db` <span class="comment">/*!40100 DEFAULT CHARACTER SET latin1 */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> database <span class="number">0728</span>db charset utf8; #修改数据库的字符编码为utf8</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> database <span class="number">0728</span>db;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>Database<span class="operator">|</span> <span class="keyword">Create</span> Database <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0728</span>db <span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `<span class="number">0728</span>db` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-----------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="第三章-基本的SELECT语句"><a href="#第三章-基本的SELECT语句" class="headerlink" title="第三章 基本的SELECT语句"></a>第三章 基本的SELECT语句</h1><h2 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h2><ul><li><p><strong>SQL 分类</strong><br>SQL语言在功能上主要分为如下3大类：</p><ul><li><p><strong>DDL</strong>（Data Definition Languages、数据定义语言），这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</p><ul><li>主要的语句关键字包括CREATE 、DROP 、ALTER 等。</li></ul></li><li><p><strong>DML</strong>（Data Manipulation Language、数据操作语言），用于添加、删除、更新和查询数据库记录，并检查数据完整性。</p><ul><li>主要的语句关键字包括INSERT 、DELETE 、UPDATE 、SELECT 等。</li><li>SELECT是SQL语言的基础，最为重要。</li></ul></li><li><p><strong>DCL</strong>（Data Control Language、数据控制语言），用于定义数据库、表、字段、用户的访问权限和<br>安全级别。</p><ul><li>主要的语句关键字包括GRANT 、REVOKE 、COMMIT 、ROLLBACK 、SAVEPOINT 等。</li></ul></li></ul></li></ul><blockquote><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。还有单独将COMMIT 、ROLLBACK 取出来称为TCL （Transaction Control Language，事务控制语言）。</p></blockquote><h2 id="SQL语言的规则与规范"><a href="#SQL语言的规则与规范" class="headerlink" title="SQL语言的规则与规范"></a>SQL语言的规则与规范</h2><ul><li><p><strong>SQL语言的规则（必须遵守）</strong></p><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li><li>每条命令以 ; 或 \g 或 \G 结束</li><li>关键字不能被缩写也不能分行</li><li>关于标点符号<ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul></li><li><p><strong>SQL大小写规范（建议遵守）</strong></p><ul><li>MySQL 在 Windows 环境下是大小写不敏感的</li><li><p>MySQL 在 Linux 环境下是大小写敏感的</p><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><p>推荐采用统一的书写规范：</p><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul></li><li><p><strong>注释</strong><br>可以使用如下格式的注释结构</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行注释：#注释文字(MySQL特有的方式)</span><br><span class="line">单行注释：<span class="comment">-- 注释文字(--后面必须包含一个空格。)</span></span><br><span class="line">多行注释：<span class="comment">/* 注释文字 */</span></span><br></pre></td></tr></table></figure><ul><li><strong>命名规则</strong><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用`（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据</li><li>类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul></li></ul><h2 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h2><div class="tip warning faa-horizontal animated-hover"><p>本文先做SELECT的学习，DDL在后半部分学习</p></div><ul><li><strong>SELECT…</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>; #没有任何子句</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">9</span><span class="operator">/</span><span class="number">2</span>; #没有任何子句</span><br></pre></td></tr></table></figure><ul><li><strong>SELECT … FROM</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 标识选择哪些列 <span class="keyword">FROM</span> 标识从哪个表中选择;</span><br></pre></td></tr></table></figure><ul><li><strong>列的别名：另起名仅在本次查询起作用</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">employee_id emp_id,</span><br><span class="line">last_name <span class="keyword">AS</span> lname,</span><br><span class="line">department_id &quot;部门id&quot;,</span><br><span class="line">salary <span class="operator">*</span> <span class="number">12</span> &quot;annual sal&quot;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><ul><li><strong>去除重复行DISTINCT</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>  DEPARTMENT_ID </span><br><span class="line"><span class="keyword">FROM</span> EMPLOYEES E ;</span><br></pre></td></tr></table></figure><ul><li><strong>空值参与运算：为空</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 所有运算符或列值遇到<span class="keyword">null</span>值，运算的结果都为<span class="keyword">null</span></span><br><span class="line"># 无意义查询</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">employee_id,</span><br><span class="line">salary,</span><br><span class="line">commission_pct,</span><br><span class="line"><span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> commission_pct) &quot;annual_sal&quot;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees;</span><br><span class="line"></span><br><span class="line"># 正确的</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">employee_id,</span><br><span class="line">salary,</span><br><span class="line">commission_pct,</span><br><span class="line"><span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> IFNULL(COMMISSION_PCT,<span class="number">0</span>)) &quot;年工资&quot;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><ul><li><strong>着重号``:当表明和字段名重合时，加着重号</strong><br>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，请在SQL语句中使用一对``（着重号）引起来。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 错误的</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">ORDER</span>;</span><br><span class="line"># 正确的</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">order</span>` o ;</span><br></pre></td></tr></table></figure><ul><li><strong>查询常数</strong><ul><li>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的。</li><li>SQL 中的 SELECT 语法的确提供了这个功能，一般来说我们只从一个表中查询数据，通常不需要增加一个固定的常数列，但如果我们想整合不同的数据源，用常数列作为这个表的标记，就需要查询常数。</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">&#x27;Jermyn&#x27;</span>,</span><br><span class="line"><span class="number">123</span>,</span><br><span class="line">employee_id,</span><br><span class="line">last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><ul><li><strong>显示表结构:使用DESCRIBE 或 DESC 命令，表示表结构。</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> EMPLOYEES ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> EMPLOYEES ;</span><br></pre></td></tr></table></figure><ul><li><strong>过滤数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">EMPLOYEE_ID ,</span><br><span class="line">FIRST_NAME ,</span><br><span class="line">LAST_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES E</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">EMPLOYEE_ID <span class="operator">&gt;</span> <span class="number">90</span>;</span><br></pre></td></tr></table></figure><h1 id="第四章-运算符"><a href="#第四章-运算符" class="headerlink" title="第四章 运算符"></a>第四章 运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（/）和取模（%）运算。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102184104.png" alt=""></p><ul><li><strong>加法与减法运算符</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">+</span> <span class="number">0</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">-</span> <span class="number">0</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">+</span> <span class="number">50</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">+</span> <span class="number">50</span> <span class="operator">*</span> <span class="number">30</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">+</span> <span class="number">35.5</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">-</span> <span class="number">35.5</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">DUAL;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102184535.png" alt=""></p><blockquote><ul><li>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</li><li>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</li><li>加法和减法的优先级相同，进行先加后减操作与进行先减后加操作的结果是一样的；</li><li>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型先尝试转成数值，如果转失败，就按0计算。（补充：MySQL中字符串拼接要使用字符串函数CONCAT()实现）</li></ul></blockquote><ul><li><strong>乘法与除法运算符</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="number">100</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">*</span> <span class="number">1</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">*</span> <span class="number">1.0</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">/</span> <span class="number">1.0</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">/</span> <span class="number">2</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">+</span> <span class="number">2</span> <span class="operator">*</span> <span class="number">5</span> <span class="operator">/</span> <span class="number">2</span>,</span><br><span class="line"><span class="number">100</span> <span class="operator">/</span> <span class="number">3</span>,</span><br><span class="line"><span class="number">100</span></span><br><span class="line">DIV <span class="number">0</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">DUAL;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102192329.png" alt=""></p><ul><li><strong>取模</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="number">12</span> <span class="operator">%</span> <span class="number">3</span>,</span><br><span class="line"><span class="number">12</span> <span class="operator">%</span> <span class="number">5</span>,</span><br><span class="line"><span class="number">12</span> MOD <span class="number">-5</span>,</span><br><span class="line"><span class="number">-12</span> <span class="operator">%</span> <span class="number">5</span>,</span><br><span class="line"><span class="number">-12</span> <span class="operator">%</span> <span class="number">-5</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">DUAL;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102192823.png" alt=""></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL。比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><ol><li><strong>等号运算符:</strong></li></ol><ul><li>等号运算符（=）判断等号两边的值、字符串或表达式是否相等，如果相等则返回1，不相等则返回0。</li><li>在使用等号运算符时，遵循如下规则：<ul><li>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的是每个字符串中字符的ANSI编码是否相等。</li><li>如果等号两边的值都是整数，则MySQL会按照整数来比较两个值的大小。</li><li>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。</li><li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</li></ul></li></ul><ol><li><strong>安全等于运算符:</strong> 安全等于运算符（&lt;=&gt;）与等于运算符（=）的作用是相似的， 唯一的区别是‘&lt;=&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</li></ol><blockquote><p>注意：使用安全等于运算符时，两边的操作数的值都为NULL时，返回的结果为1而不是NULL，其他返回结果与等于运算符相同。</p></blockquote><ol><li><strong>不等于运算符:</strong> 不等于运算符（&lt;&gt;和!=）用于判断两边的数字、字符串或者表达式的值是否不相等，如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL，或两边都为NULL，则结果为NULL。</li></ol><div class="note info flat"><p>非符号类型的运算符</p></div><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102194904.png" alt=""></p><ol><li><strong>空运算符</strong> 空运算符（IS NULL或者ISNULL）判断一个值是否为NULL，如果为NULL则返回1，否则返回0。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span> <span class="keyword">FROM</span> EMPLOYEES E <span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span>  <span class="keyword">NULL</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span> <span class="keyword">FROM</span> EMPLOYEES E <span class="keyword">WHERE</span> ISNULL(commission_pct);</span><br></pre></td></tr></table></figure><ol><li><strong>最小值运算符</strong> 语法格式为：LEAST(值1，值2，…，值n)。其中，“值n”表示参数列表中有n个值。在有<br>两个或多个参数的情况下，返回最小值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LEAST (<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>), LEAST(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), LEAST(<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102200355.png" alt=""></p><blockquote><p>由结果可以看到，当参数是整数或者浮点数时，LEAST将返回其中最小的值；当参数为字符串时，返回字母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p></blockquote><ol><li><strong>最大值运算符</strong> 语法格式为：GREATEST(值1，值2，…，值n)。其中，n表示参数列表中有n个值。当有两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> GREATEST(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>), GREATEST(<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), GREATEST(<span class="number">1</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102200519.png" alt=""></p><blockquote><p>由结果可以看到，当参数中是整数或者浮点数时，GREATEST将返回其中最大的值；当参数为字符串时，返回字母表中顺序最靠后的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p></blockquote><ol><li><strong>BETWEEN…AND…运算符</strong> BETWEEN运算符使用的格式通常为SELECT D FROM TABLE WHERE C BETWEEN A AND B，此时，当C大于或等于A，并且C小于或等于B时，结果为1，否则结果为0。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">10</span> <span class="keyword">BETWEEN</span> <span class="number">11</span> <span class="keyword">AND</span> <span class="number">12</span>, <span class="string">&#x27;b&#x27;</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102200734.png" alt=""></p><blockquote><p>查询范围内的数据，包含边界即[ A,B ]</p></blockquote><ol><li><strong>IN运算符IN(Set)</strong> IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回1，否则返回0。如果给定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), <span class="number">1</span> <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>), <span class="keyword">NULL</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>), <span class="string">&#x27;a&#x27;</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102201759.png" alt=""></p><ol><li><strong>NOT IN运算符NOT IN(Set)</strong> NOT IN运算符用于判断给定的值是否不是IN列表中的一个值，如果不是IN列表中的一<br>个值，则返回1，否则返回0。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>), <span class="number">1</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102201949.png" alt=""></p><ol><li><strong>LIKE运算符</strong> LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character_%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;collation_%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li><p><strong>ESCAPE</strong></p><ul><li>回避特殊符号的：使用转义符。例如：将[%]转为[$%]、[]转为[$]，然后再加上[ESCAPE‘$’]即可。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> ‘IT\_<span class="operator">%</span>‘;</span><br></pre></td></tr></table></figure><ul><li>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id</span><br><span class="line"><span class="keyword">FROM</span> jobs</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> ‘IT$_<span class="operator">%</span>‘ <span class="keyword">escape</span> ‘$‘;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9. **REGEXP运算符**</span><br><span class="line">REGEXP运算符用来匹配字符串，语法格式为： expr REGEXP 匹配条件。如果expr满足匹配条件，返回1；如果不满足，则返回0。若expr或匹配条件任意一个为NULL，则结果为NULL。</span><br><span class="line">REGEXP运算符在进行匹配时，常用的有下面几种通配符：</span><br><span class="line">SQL语句示例如下：</span><br><span class="line">​```txt</span><br><span class="line">（1）‘^’匹配以该字符后面的字符开头的字符串。</span><br><span class="line">（2）‘$’匹配以该字符前面的字符结尾的字符串。</span><br><span class="line">（3）‘.’匹配任何一个单字符。</span><br><span class="line">（4）“[...]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”或“b”或“c”。为了命名字符的范围，使用一个‘-’。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。</span><br><span class="line">（5）‘*’匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的‘x’字符，“[0-9]*”匹配任何数量的数字，</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为1、0或者NULL。MySQL中支持4种逻辑运算符如下：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102220812.png" alt=""></p><ol><li><strong>逻辑非运算符 逻辑非（NOT或!）</strong>运算符表示当给定的值为0时返回1；当给定的值为非0值时返回0；当给定的值为NULL时，返回NULL。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOT</span> <span class="number">1</span>, <span class="keyword">NOT</span> <span class="number">0</span>, <span class="keyword">NOT</span>(<span class="number">1</span><span class="operator">+</span><span class="number">1</span>), <span class="keyword">NOT</span> <span class="operator">!</span><span class="number">1</span>, <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102221108.png" alt=""></p><ol><li><strong>逻辑与运算符 逻辑与（AND或&amp;&amp;）</strong>运算符是当给定的所有值均为非0值，并且都不为NULL时，返回1；当给定的一个值或者多个值为0时则返回0；否则返回NULL。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">-1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span>, <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>, <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102221543.png" alt=""></p><ol><li><strong>逻辑或运算符 逻辑或（OR或||）</strong>运算符是当给定的值都不为NULL，并且任何一个值为非0值时，则返回1，否则返回0；当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；当两个值都为NULL时，返回NULL。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">OR</span> <span class="number">-1</span>, <span class="number">1</span> <span class="keyword">OR</span> <span class="number">0</span>, <span class="number">1</span> <span class="keyword">OR</span> <span class="keyword">NULL</span>, <span class="number">0</span> <span class="operator">||</span> <span class="keyword">NULL</span>, <span class="keyword">NULL</span> <span class="operator">||</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102221703.png" alt=""></p><blockquote><p>注意：OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合。</p></blockquote><ol><li><strong>逻辑异或运算符 逻辑异或（XOR）</strong>运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果两个非NULL的值都是0或者都不等于0时，则返回0；如果一个值为0，另一个值不为0时，则返回1。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> XOR <span class="number">-1</span>, <span class="number">1</span> XOR <span class="number">0</span>, <span class="number">0</span> XOR <span class="number">0</span>, <span class="number">1</span> XOR <span class="keyword">NULL</span>, <span class="number">1</span> XOR <span class="number">1</span> XOR <span class="number">1</span>, <span class="number">0</span> XOR <span class="number">0</span> XOR <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102221835.png" alt=""></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。MySQL支持的位运算符如下：<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221102222002.png" alt=""></p><ol><li>按位与运算符 按位与（&amp;）运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二进制位的数值都为1时，则该位返回1，否则返回0。1的二进制数为0001，10的二进制数为1010，所以1 &amp; 10的结果为0000，对应的十进制数为0。20的二进制数10100，30的二进制数为11110，所以20 &amp; 30的结果为10100，对应的十进制数为20。</li><li>按位或运算符 按位或（|）运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的二进制位的数值有一个或两个为1时，则该位返回1，否则返回0。1的二进制数为0001，10的二进制数为1010，所以1 | 10的结果为1011，对应的十进制数为11。20的二进制数为10100，30的二进制数为11110，所以20 | 30的结果为11110，对应的十进制数为30。</li><li>按位异或运算符 按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值对应的二进制位的数值不同时则该位返回1，否则返回0。1的二进制数为0001，10的二进制数为1010，所以1 ^ 10的结果为1011，对应的十进制数为11。20的二进制数为10100，30的二进制数为11110，所以20 ^ 30的结果为01010，对应的十进制数为10。</li><li>按位异或运算符 按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值对应的二进制位的数值不同时,则该位返回1，否则返回0。由于按位取反（~）运算符的优先级高于按位与（&amp;）运算符的优先级，所以10 &amp; ~1，首先，对数字1进行按位取反操作，结果除了最低位为0，其他位都为1，然后与10进行按位与操作，结果为10。</li><li>按位右移运算符 按位右移（&gt;&gt;）运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用0补齐。1的二进制数为0000 0001，右移2位为0000 0000，对应的十进制数为0。4的二进制数为0000 0100，右移2位为0000 0001，对应的十进制数为1。</li><li>按位左移运算符 按位左移（&lt;&lt;）运算符将给定的值的二进制数的所有位左移指定的位数。左移指定的位数后，左边高位的数值被移出并丢弃，右边低位空出的位置用0补齐。1的二进制数为0000 0001，左移两位为0000 0100，对应的十进制数为4。4的二进制数为0000 0100，左移两位为0001 0000，对应的十进制数为16。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/b450693069e5b6435a97ed90e3ddbca.jpg" alt=""></li></ol><h1 id="第五章-排序与分页"><a href="#第五章-排序与分页" class="headerlink" title="第五章 排序与分页"></a>第五章 排序与分页</h1><h2 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h2><ol><li><p><strong>排序规则</strong></p><ul><li>使用 ORDER BY 子句排序<ul><li>ASC（ascend）: 升序</li><li>DESC（descend）:降序</li></ul></li><li>ORDER BY 子句在SELECT语句的结尾。</li><li>如果在ORDER BY 后没有显式指名排序的方式的话，则默认按照升序排列。</li><li>使用列的别名，进行排序，列的别名不可用于WHERE，原因：sql查询先是FROM….WHERE…，后SELECT，别名定义在SELECT，下面才是 ORDER BY…</li></ul></li><li><p><strong>单列排序</strong></p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 按照 department_id 降序排列</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES E</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">department_id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ol><li>多列排序</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 按照 department_id 降序排列,department_id相同的按salary降序排列</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES E</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">department_id <span class="keyword">DESC</span>,salary <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure><blockquote><ol><li>可以使用不在SELECT列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ol></blockquote><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><ol><li>实现规则<ul><li><strong>分页原理：</strong>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</li><li><strong>MySQL中使用 LIMIT 实现分页格式：</strong>LIMIT [位置偏移量,] 行数。</li><li><strong>MySQL中使用 LIMIT 实现分页公式：</strong>LIMIT (pageNo-1) * pageSize,pageSize;</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 显示<span class="number">21</span>以后的两个数据</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">first_name,</span><br><span class="line">last_name,</span><br><span class="line">salary,</span><br><span class="line">department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES E</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">department_id <span class="keyword">DESC</span>,salary <span class="keyword">DESC</span> </span><br><span class="line">LIMIT <span class="number">21</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><blockquote><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是1，以此类推）；第二个参数“行数”指示返回的记录条数。</p></blockquote><ol><li>MySQL8.0新特性：LIMIT … OFFSET …<br>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</li></ol><blockquote><p>注：和5.x的相反，后面是偏移量<br>LIMIT 子句必须放在整个SELECT语句的最后！</p></blockquote><ol><li>使用 LIMIT 的好处<br>约束返回结果的数量可以减少数据表的网络传输量，也可以提升查询效率。如果我们知道返回结果只有1 条，就可以使用LIMIT 1 ，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</li></ol><h1 id="第六章-多表查询"><a href="#第六章-多表查询" class="headerlink" title="第六章 多表查询"></a>第六章 多表查询</h1><p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。<br>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p><h2 id="多表查询分类讲解"><a href="#多表查询分类讲解" class="headerlink" title="多表查询分类讲解"></a>多表查询分类讲解</h2><ol><li>分类1：等值连接 vs 非等值连接.<br><strong>等值连接</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e.employee_id,</span><br><span class="line">e.last_name,</span><br><span class="line">d.department_name,</span><br><span class="line">l.city,</span><br><span class="line">e.department_id,</span><br><span class="line">l.location_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees e,</span><br><span class="line">departments d,</span><br><span class="line">locations l</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> d.`location_id` <span class="operator">=</span> l.`location_id`;</span><br></pre></td></tr></table></figure><p><strong>拓展1：</strong>多个连接条件与 AND 操作符<br><strong>拓展2：</strong>区分重复的列名</p><ul><li>多个表中有相同列时，必须在列名之前加上表名前缀。</li><li>在不同表中具有相同列名的列可以用表名加以区分。</li></ul><p><strong>拓展3：</strong>表的别名</p><ul><li>使用别名可以简化查询。</li><li>列名前使用表名前缀可以提高查询效率。</li></ul><blockquote><p>需要注意的是，如果我们使用了表的别名，在查询字段中、过滤条件中就只能使用别名进行代替，不能使用原有的表名，否则就会报错。</p></blockquote><div class="note info flat"><p>阿里开发规范：<br>【强制】对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。<br>说明：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。<br>正例：select t1.name from table_first as t1 , table_second as t2 where t1.id=t2.id;<br>反例：在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在 某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出1052 异常：Column ‘name’ in field list is ambiguous。</p></div><p><strong>拓展4：</strong>连接多个表<br>总结：连接 n个表,至少需要n-1个连接条件。比如，连接三个表，至少需要两个连接条件。</p><p><strong>非等值连接</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, j.grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e, job_grades j</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal;</span><br></pre></td></tr></table></figure><ol><li>分类2：自连接 vs 非自连接</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.last_name, e2.employee_id, e2.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> e, employees <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">WHERE</span> e.manager_id <span class="operator">=</span> e2.employee_id;</span><br></pre></td></tr></table></figure><ol><li>分类3：内连接 vs 外连接<br>除了查询满足条件的记录以外，外连接还可以查询某一方不满足条件的记录。<ul><li><strong>内连接:</strong> 合并具有同一列的两个以上的表的行, 结果集中不包含一个表与另一个表不匹配的行</li><li><strong>外连接:</strong>两个表在连接过程中除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的行 ，这种连接称为左（或右） 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。</li><li>如果是左外连接，则连接条件中左边的表也称为主表，右边的表称为从表。如果是右外连接，则连接条件中右边的表也称为主表，左边的表称为从表。</li></ul></li></ol><ul><li>SQL92：使用(+)创建连接<ul><li>在 SQL92 中采用（+）代表从表所在的位置。即左或右外连接中，(+) 表示哪个是从表。</li><li>Oracle 对 SQL92 支持较好，而 MySQL 则不支持 SQL92 的外连接。</li><li>而且在 SQL92 中，只有左外连接和右外连接，没有满（或全）外连接。</li></ul></li></ul><h2 id="SQL99语法实现多表查询"><a href="#SQL99语法实现多表查询" class="headerlink" title="SQL99语法实现多表查询"></a>SQL99语法实现多表查询</h2><ul><li><strong>基本语法:</strong>使用JOIN…ON子句创建连接的语法结构：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, table2.column,table3.column</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> table1 和 table2 的连接条件</span><br><span class="line"><span class="keyword">JOIN</span> table3 <span class="keyword">ON</span> table2 和 table3 的连接条件</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">department_name,</span><br><span class="line">city</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees e</span><br><span class="line"><span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">JOIN</span> locations <span class="keyword">AS</span> l</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">d.location_id <span class="operator">=</span> l.location_id;</span><br></pre></td></tr></table></figure><p>SQL99 采用的这种嵌套结构非常清爽、层次性更强、可读性更强，即使再多的表进行连接也都清晰<br>可见。如果你采用 SQL92，可读性就会大打折扣。</p><ul><li><strong>语法说明：</strong><ul><li>可以使用 ON 子句指定额外的连接条件。</li><li>这个连接条件是与其它条件分开的。</li><li>ON 子句使语句具有更高的易读性。</li><li>关键字 JOIN、INNER JOIN、CROSS JOIN 的含义是一样的，都表示内连接</li></ul></li></ul><ol><li><strong>内连接(INNER JOIN)的实现</strong></li></ol><ul><li><strong>语法：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><ol><li><strong>外连接(OUTER JOIN)的实现</strong></li></ol><ul><li><strong>左外连接(LEFT OUTER JOIN)</strong><ul><li><strong>语法</strong></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#实现查询结果是A</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">last_name,</span><br><span class="line">department_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments d <span class="keyword">ON</span></span><br><span class="line">e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><ul><li><strong>右外连接(RIGHT OUTER JOIN)</strong><ul><li><strong>语法</strong></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#实现查询结果是B</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，LEFT JOIN 和 RIGHT JOIN 只存在于 SQL99 及以后的标准中，在 SQL92 中不存在，只能用 (+) 表示。</p></blockquote><ul><li><strong>满外连接(FULL OUTER JOIN)</strong><ul><li>满外连接的结果 = 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li><li>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li><li>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN UNION RIGHT join代替。</li></ul></li></ul><h2 id="UNION的使用"><a href="#UNION的使用" class="headerlink" title="UNION的使用"></a>UNION的使用</h2><p>合并查询结果 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNIONALL关键字分隔。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table2</span><br></pre></td></tr></table></figure><ul><li><p><strong>UNION操作符:</strong>UNION 操作符返回两个查询的结果集的并集，去除重复记录。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221109171059.png" alt=""></p></li><li><p><strong>UNION ALL操作符:</strong>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221109171122.png" alt=""></p></li></ul><blockquote><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p></blockquote><h2 id="7种SQL-JOINS的实现"><a href="#7种SQL-JOINS的实现" class="headerlink" title="7种SQL JOINS的实现"></a>7种SQL JOINS的实现</h2><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221109171401.png" alt=""><br><strong>语法格式小结</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span> 左中图</span><br><span class="line">#实现A <span class="operator">-</span> A∩B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"># <span class="number">2.</span> 右中图</span><br><span class="line">#实现B <span class="operator">-</span> A∩B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 左下图</span><br><span class="line">#实现查询结果是A∪B</span><br><span class="line">#用左外的A，<span class="keyword">union</span> 右外的B</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 等其他子句</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 等其他子句;</span><br><span class="line"></span><br><span class="line"># <span class="number">4.</span> 右下图</span><br><span class="line">#实现A∪B <span class="operator">-</span> A∩B 或 (A <span class="operator">-</span> A∩B) ∪ （B <span class="operator">-</span> A∩B）</span><br><span class="line">#使用左外的 (A <span class="operator">-</span> A∩B) <span class="keyword">union</span> 右外的（B <span class="operator">-</span> A∩B）</span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">left</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> 字段列表</span><br><span class="line"><span class="keyword">from</span> A表 <span class="keyword">right</span> <span class="keyword">join</span> B表</span><br><span class="line"><span class="keyword">on</span> 关联条件</span><br><span class="line"><span class="keyword">where</span> 从表关联字段 <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">and</span> 等其他子句</span><br></pre></td></tr></table></figure><h2 id="SQL99语法新特性"><a href="#SQL99语法新特性" class="headerlink" title="SQL99语法新特性"></a>SQL99语法新特性</h2><ul><li><strong>自然连接</strong><br>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如 NATURAL JOIN 用来表示自然连接。我们可以把自然连接理解为 SQL92 中的等值连接。它会帮你自动查询两张连接表中所有相同的字段，然后进行等值连接。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 在SQL92标准中：</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> e.`manager_id` <span class="operator">=</span> d.`manager_id`;</span><br><span class="line"></span><br><span class="line"># 在 SQL99 中你可以写成：</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure><ul><li><strong>USING连接</strong><br>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的同名字段进行等值连接。但是只能配合JOIN一起使用。比如：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">USING</span> (department_id);</span><br></pre></td></tr></table></figure><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING的括号 () 中填入要指定的同名字段。同时使用 JOIN…USING 可以简化 JOIN ON 的等值连接。它与下面的 SQL 查询结果是相同的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e ,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure><h2 id="章节小结"><a href="#章节小结" class="headerlink" title="章节小结"></a>章节小结</h2><p>表连接的约束条件可以有三种方式：WHERE, ON, USING<br><strong>WHERE：</strong>适用于所有关联查询<br><strong>ON ：</strong>只能和JOIN一起使用，只能写关联条件。虽然关联条件可以并到WHERE中和其他条件一起写，但分开写可读性更好。<br><strong>USING：</strong>只能和JOIN一起使用，而且要求两个关联字段在关联表中名称一致，而且只能表示关联段值相等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#关联条件</span><br><span class="line">#把关联条件写在<span class="keyword">where</span>后面</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br><span class="line"></span><br><span class="line">#把关联条件写在<span class="keyword">on</span>后面，只能和<span class="keyword">JOIN</span>一起使用</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">JOIN</span> departments</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br><span class="line"></span><br><span class="line">#把关联字段写在<span class="keyword">using</span>()中，只能和<span class="keyword">JOIN</span>一起使用</span><br><span class="line">#而且两个表中的关联字段必须名称相同，而且只能表示<span class="operator">=</span></span><br><span class="line">#查询员工姓名与基本工资</span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs <span class="keyword">USING</span>(job_id);</span><br><span class="line"></span><br><span class="line">#n张表关联，需要n<span class="number">-1</span>个关联条件</span><br><span class="line">#查询员工姓名，基本工资，部门名称</span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_title,department_name <span class="keyword">FROM</span> employees,departments,jobs</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id</span><br><span class="line"><span class="keyword">AND</span> employees.job_id <span class="operator">=</span> jobs.job_id;</span><br><span class="line"><span class="keyword">SELECT</span> last_name,job_title,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments <span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs</span><br><span class="line"><span class="keyword">ON</span> employees.department_id <span class="operator">=</span> departments.department_id</span><br><span class="line"><span class="keyword">AND</span> employees.job_id <span class="operator">=</span> jobs.job_id;</span><br></pre></td></tr></table></figure><blockquote><p>注意：我们要控制连接表的数量。多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下降得很严重，因此不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制。<br>强制: 超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时， 保证被关联的字段需要有索引。<br>说明：即使双表 join 也要注意表索引、SQL 性能。</p></blockquote><h1 id="第七章-单行函数"><a href="#第七章-单行函数" class="headerlink" title="第七章 单行函数"></a>第七章 单行函数</h1><ul><li><strong>MySQL的内置函数及分类</strong><br>MySQL提供了丰富的内置函数，这些函数使得数据的维护与管理更加方便，能够更好地提供数据的分析<br>与统计功能，在一定程度上提高了开发人员进行数据分析与统计的效率。<br>MySQL提供的内置函数从实现的功能角度可以分为数值函数、字符串函数、日期和时间函数、流程控制<br>函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里，我将这些丰富的内置函数再分为两<br>类： 单行函数、聚合函数（或分组函数） 。</li></ul><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><p><strong>1. 基本函数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110185546.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#基本的操作</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-123</span>), <span class="built_in">ABS</span>(<span class="number">32</span>), SIGN(<span class="number">-23</span>), SIGN(<span class="number">43</span>), PI(), <span class="built_in">CEIL</span>(<span class="number">32.32</span>), <span class="built_in">CEILING</span>(<span class="number">-43.23</span>), <span class="built_in">FLOOR</span>(<span class="number">32.32</span>), <span class="built_in">FLOOR</span>(<span class="number">-43.23</span>), <span class="built_in">MOD</span>(<span class="number">12</span>, <span class="number">5</span>), <span class="number">12</span> MOD <span class="number">5</span>, <span class="number">12</span> <span class="operator">%</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line">#取随机数</span><br><span class="line"><span class="keyword">SELECT</span> RAND(), RAND(), RAND(<span class="number">10</span>), RAND(<span class="number">10</span>), RAND(<span class="number">-1</span>), RAND(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line">#四舍五入，截断操作</span><br><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="number">123.556</span>), ROUND(<span class="number">123.456</span>, <span class="number">0</span>), ROUND(<span class="number">123.456</span>, <span class="number">1</span>), ROUND(<span class="number">123.456</span>, <span class="number">2</span>), ROUND(<span class="number">123.456</span>,<span class="number">-1</span>), ROUND(<span class="number">153.456</span>,<span class="number">-2</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">123.456</span>, <span class="number">0</span>), <span class="keyword">TRUNCATE</span>(<span class="number">123.496</span>, <span class="number">1</span>), <span class="keyword">TRUNCATE</span>(<span class="number">129.45</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line">#单行函数可以嵌套</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(ROUND(<span class="number">123.456</span>, <span class="number">2</span>), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>2. 角度与弧度互换函数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110190414.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> RADIANS(<span class="number">30</span>), RADIANS(<span class="number">60</span>), RADIANS(<span class="number">90</span>), DEGREES(<span class="number">2</span> <span class="operator">*</span> PI()), DEGREES(RADIANS(<span class="number">90</span>))</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>3. 三角函数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110190544.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#三角函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SIN</span>(RADIANS(<span class="number">30</span>)), DEGREES(<span class="built_in">ASIN</span>(<span class="number">1</span>)), <span class="built_in">TAN</span>(RADIANS(<span class="number">45</span>)), DEGREES(<span class="built_in">ATAN</span>(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>4. 指数与对数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110190820.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#指数和对数</span><br><span class="line"><span class="keyword">SELECT</span> POW(<span class="number">2</span>, <span class="number">5</span>), <span class="built_in">POWER</span>(<span class="number">2</span>, <span class="number">4</span>), <span class="built_in">EXP</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LN</span>(<span class="built_in">EXP</span>(<span class="number">2</span>)), <span class="built_in">LOG</span>(<span class="built_in">EXP</span>(<span class="number">2</span>)), <span class="built_in">LOG10</span>(<span class="number">10</span>), LOG2(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>5. 进制间的转换</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110190952.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#进制间的转换</span><br><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">10</span>), HEX(<span class="number">10</span>), OCT(<span class="number">10</span>), CONV(<span class="number">10</span>, <span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110191236.png" alt=""></p><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ASCII(<span class="string">&#x27;Abcdfsf&#x27;</span>), <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;hello&#x27;</span>), <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;我们&#x27;</span>), LENGTH(<span class="string">&#x27;hello&#x27;</span>), LENGTH(<span class="string">&#x27;我们&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"># xxx worked <span class="keyword">for</span> yyy</span><br><span class="line">USE atguigudb;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(emp.last_name, <span class="string">&#x27; worked for &#x27;</span>, mgr.last_name) &quot;details&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees emp</span><br><span class="line"><span class="keyword">JOIN</span> employees mgr</span><br><span class="line"><span class="keyword">WHERE</span> emp.`manager_id` <span class="operator">=</span> mgr.employee_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT_WS(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;beijing&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line">#字符串的索引是从<span class="number">1</span>开始的！</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;helloworld&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;aaaaa&#x27;</span>), REPLACE(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;lol&#x27;</span>, <span class="string">&#x27;mmm&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;HelLo&#x27;</span>), <span class="built_in">LOWER</span>(<span class="string">&#x27;HelLo&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">LOWER</span>(last_name) <span class="operator">=</span> <span class="string">&#x27;King&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">2</span>), <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">3</span>), <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="number">13</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"># LPAD:实现右对齐效果</span><br><span class="line"># RPAD:实现左对齐效果</span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, LPAD(salary, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;---&#x27;</span>, LTRIM(<span class="string">&#x27;    h  el  lo   &#x27;</span>), <span class="string">&#x27;***&#x27;</span>), <span class="built_in">TRIM</span>(<span class="string">&#x27;oo&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;ooheollo&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> REPEAT(<span class="string">&#x27;hello&#x27;</span>, <span class="number">4</span>), LENGTH(SPACE(<span class="number">5</span>)), STRCMP(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abe&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;hello&#x27;</span>, <span class="number">2</span>, <span class="number">2</span>), LOCATE(<span class="string">&#x27;lll&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> ELT(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), FIELD(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;gg&#x27;</span>, <span class="string">&#x27;jj&#x27;</span>, <span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;dd&#x27;</span>, <span class="string">&#x27;mm&#x27;</span>), FIND_IN_SET(<span class="string">&#x27;mm&#x27;</span>, <span class="string">&#x27;gg,mm,jj,dd,mm,gg&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, <span class="built_in">NULLIF</span>(LENGTH(first_name), LENGTH(last_name)) &quot;compare&quot;</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><p><strong>1. 获取日期、时间</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110191656.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获取日期、时间</span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(), <span class="built_in">CURRENT_DATE</span>(), CURTIME(), NOW(), SYSDATE(), UTC_DATE(), UTC_TIME()</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE(), CURDATE() <span class="operator">+</span> <span class="number">0</span>, CURTIME() <span class="operator">+</span> <span class="number">0</span>, NOW() <span class="operator">+</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>2. 日期与时间戳的转换</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110193701.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 日期与时间戳的转换</span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP(), UNIX_TIMESTAMP(<span class="string">&#x27;1999-11-15 00:00:00&#x27;</span>), FROM_UNIXTIME(<span class="number">942595200</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>3. 获取月份、星期、星期数、天数等函数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110195018.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获取月份、星期、星期数、天数等函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(CURDATE()), <span class="keyword">MONTH</span>(CURDATE()), <span class="keyword">DAY</span>(CURDATE()), <span class="keyword">HOUR</span>(CURTIME()), <span class="keyword">MINUTE</span>(NOW()), <span class="keyword">SECOND</span>(SYSDATE())</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="string">&#x27;1999-11-15&#x27;</span>), DAYNAME(<span class="string">&#x27;1999-11-15&#x27;</span>), WEEKDAY(<span class="string">&#x27;1999-11-15&#x27;</span>), QUARTER(CURDATE()), WEEK(CURDATE()), DAYOFYEAR(NOW()), DAYOFMONTH(NOW()), DAYOFWEEK(NOW())</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>4. 日期的操作函数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110195230.png" alt=""></p><p><strong>EXTRACT(type FROM date)函数中type的取值与含义：</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110195708.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 日期的操作函数</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">SECOND</span> <span class="keyword">FROM</span> NOW()), <span class="built_in">EXTRACT</span>(<span class="keyword">DAY</span> <span class="keyword">FROM</span> NOW()), <span class="built_in">EXTRACT</span>(HOUR_MINUTE <span class="keyword">FROM</span> NOW()), <span class="built_in">EXTRACT</span>(QUARTER <span class="keyword">FROM</span> <span class="string">&#x27;1999-11-15&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>5. 时间和秒钟转换的函数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110200026.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 时间和秒钟转换的函数</span><br><span class="line"><span class="keyword">SELECT</span> TIME_TO_SEC(CURTIME()), SEC_TO_TIME(<span class="number">72049</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>6. 计算日期和时间的函数</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110200238.png" alt=""></p><p><strong>上述函数中type的取值：上述函数中type的取值：</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110200316.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 计算日期和时间的函数</span><br><span class="line"><span class="keyword">SELECT</span> NOW(), DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>), DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">YEAR</span>), DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>) <span class="keyword">AS</span> col1, DATE_ADD(<span class="string">&#x27;2021-10-21 23:32:12&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>) <span class="keyword">AS</span> col2, ADDDATE(<span class="string">&#x27;2021-10-21 23:32:12&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">SECOND</span>) <span class="keyword">AS</span> col3, DATE_ADD(<span class="string">&#x27;2021-10-21 23:32:12&#x27;</span>, <span class="type">INTERVAL</span> <span class="string">&#x27;1_1&#x27;</span> MINUTE_SECOND) <span class="keyword">AS</span> col4, DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">YEAR</span>) <span class="keyword">AS</span> col5,</span><br><span class="line">#可以是负数</span><br><span class="line">DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="string">&#x27;1_1&#x27;</span> YEAR_MONTH) <span class="keyword">AS</span> col6</span><br><span class="line">#需要单引号 </span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110202016.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ADDTIME(NOW(), <span class="number">20</span>), SUBTIME(NOW(), <span class="number">30</span>), SUBTIME(NOW(), <span class="string">&#x27;1:1:3&#x27;</span>), DATEDIFF(NOW(), <span class="string">&#x27;2021-10-01&#x27;</span>), TIMEDIFF(NOW(), <span class="string">&#x27;2021-10-25 22:10:10&#x27;</span>), FROM_DAYS(<span class="number">366</span>), TO_DAYS(<span class="string">&#x27;0000-12-25&#x27;</span>), LAST_DAY(NOW()), MAKEDATE(<span class="keyword">YEAR</span>(NOW()), <span class="number">12</span>), MAKETIME(<span class="number">10</span>, <span class="number">21</span>, <span class="number">23</span>), PERIOD_ADD(<span class="number">20200101010101</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><p><strong>7. 日期的格式化与解析</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110202602.png" alt=""></p><p>上述非<code>GET_FORMAT</code> 函数中fmt参数常用的格式符：</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110203048.png" alt=""></p><p>GET_FORMAT函数中date_type和format_type参数取值如下：</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110203149.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 日期的格式化与解析</span><br><span class="line"># 格式化：日期 <span class="comment">---&gt; 字符串</span></span><br><span class="line"># 解析：  字符串 <span class="comment">----&gt; 日期</span></span><br><span class="line">#此时我们谈的是日期的显式格式化和解析</span><br><span class="line">#之前，我们接触过隐式的格式化或解析</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> hire_date <span class="operator">=</span> <span class="string">&#x27;1993-01-13&#x27;</span>;</span><br><span class="line">#格式化：</span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(), <span class="string">&#x27;%Y-%M-%D&#x27;</span>), DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%m-%d&#x27;</span>), TIME_FORMAT(CURTIME(), <span class="string">&#x27;%h:%i:%S&#x27;</span>), DATE_FORMAT(NOW(), <span class="string">&#x27;%Y-%M-%D %h:%i:%S %W %w %T %r&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line">#解析：格式化的逆过程</span><br><span class="line"><span class="keyword">SELECT</span> STR_TO_DATE(<span class="string">&#x27;2021-October-25th 11:37:30 Monday 1&#x27;</span>, <span class="string">&#x27;%Y-%M-%D %h:%i:%S %W %w&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> GET_FORMAT(<span class="type">DATE</span>, <span class="string">&#x27;USA&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(CURDATE(), GET_FORMAT(<span class="type">DATE</span>, <span class="string">&#x27;USA&#x27;</span>))</span><br><span class="line"><span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。<br>MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110210437.png" alt=""></p><div class="note info flat"><p>练习：查询部门号为 10,20, 30 的员工信息, 若部门号为 10, 则打印其工资的 1.1 倍, 20 号部门, 则打印其工资的 1.2 倍, 30 号部门打印其工资的 1.3 倍数。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">employee_id,</span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">department_id </span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">10</span> <span class="keyword">THEN</span> salary <span class="operator">*</span> <span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">20</span> <span class="keyword">THEN</span> salary <span class="operator">*</span> <span class="number">1.2</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary <span class="operator">*</span> <span class="number">1.3</span></span><br><span class="line"><span class="keyword">END</span> &quot;details&quot;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">department_id <span class="keyword">IN</span> (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h2 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h2><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在<br>保证数据库安全时非常有用。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110221450.png" alt=""></p><p>可以看到，ENCODE(value,password_seed)函数与DECODE(value,password_seed)函数互为反函数。</p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 加密与解密的函数</span><br><span class="line"># PASSWORD()在mysql8<span class="number">.0</span>中弃用。</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">MD5(<span class="string">&#x27;mysql&#x27;</span>),</span><br><span class="line">SHA(<span class="string">&#x27;mysql&#x27;</span>),</span><br><span class="line">MD5(MD5(<span class="string">&#x27;mysql&#x27;</span>))</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">DUAL;</span><br><span class="line">#ENCODE()\DECODE() 在mysql8<span class="number">.0</span>中弃用。</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SELECT ENCODE(&#x27;Jermyn&#x27;,&#x27;mysql&#x27;),DECODE(ENCODE(&#x27;Jermyn&#x27;,&#x27;mysql&#x27;),&#x27;mysql&#x27;)</span></span><br><span class="line"><span class="comment">FROM DUAL;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="MySQL信息函数"><a href="#MySQL信息函数" class="headerlink" title="MySQL信息函数"></a>MySQL信息函数</h2><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地<br>对数据库进行维护工作。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110222614.png" alt=""></p><div class="note info flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">DATABASE(),</span><br><span class="line"><span class="keyword">USER</span>(),</span><br><span class="line"><span class="built_in">CURRENT_USER</span>(),</span><br><span class="line"><span class="built_in">SYSTEM_USER</span>(),</span><br><span class="line"><span class="built_in">SESSION_USER</span>(),</span><br><span class="line">CHARSET(<span class="string">&#x27;ABC&#x27;</span>),</span><br><span class="line"><span class="keyword">COLLATION</span>(<span class="string">&#x27;ABC&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视<br>的。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221110222759.png" alt=""></p><h1 id="第八章-聚合函数"><a href="#第八章-聚合函数" class="headerlink" title="第八章 聚合函数"></a>第八章 聚合函数</h1><h2 id="聚合函数介绍"><a href="#聚合函数介绍" class="headerlink" title="聚合函数介绍"></a>聚合函数介绍</h2><ul><li><strong>聚合函数类型：</strong>AVG()；SUM()；MAX()；MIN()；COUNT()</li><li>聚合函数不能嵌套调用。比如不能出现类似“AVG(SUM(字段名称))”形式的调用。</li></ul><p><strong>1. AVG和SUM函数：</strong>可以对数值型数据使用AVG 和 SUM 函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary), <span class="built_in">MAX</span>(salary),<span class="built_in">MIN</span>(salary), <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%REP%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>2. MIN和MAX函数：</strong>可以对任意数据类型的数据使用 MIN 和 MAX 函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(hire_date), <span class="built_in">MAX</span>(hire_date)</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p><strong>3. 1 COUNT函数：</strong>COUNT(*)返回表中记录总数，适用于任意数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure><p><strong>3.2 COUNT函数：</strong>COUNT(expr) 返回expr不为空的记录总数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(commission_pct)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><ul><li><strong>基本使用</strong></li></ul><p><strong>1. 可以使用GROUP BY子句将表中的数据分成若干组</strong></p><p><code>语法：</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>, group_function(<span class="keyword">column</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> group_by_expression]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">column</span>];</span><br></pre></td></tr></table></figure><blockquote><p><code>明确：</code>WHERE一定放在FROM后面</p></blockquote><p><strong>2. 在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id ;</span><br></pre></td></tr></table></figure><p><strong>3. 包含在 GROUP BY 子句中的列不必包含在SELECT 列表中</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id ;</span><br></pre></td></tr></table></figure><ul><li><strong>使用多个列分组</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id dept_id, job_id, <span class="built_in">SUM</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id ;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221114171242.png" alt=""></p><ul><li><strong>GROUP BY中使用WITH ROLLUP</strong></li></ul><p>使用<code>WITH ROLLUP</code> 关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所<br>有记录的总和，即统计记录数量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id,<span class="built_in">AVG</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">&gt;</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>注意：</code>当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥的。</p></blockquote><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><p>过滤分组：HAVING子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 行已经被分组。</span><br><span class="line">2. 使用了聚合函数。</span><br><span class="line">3. 满足HAVING 子句中条件的分组将被显示。</span><br><span class="line">4. HAVING 不能单独使用，必须要跟 GROUP BY 一起使用。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MAX</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MAX</span>(salary)<span class="operator">&gt;</span><span class="number">10000</span> ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>WHERE和HAVING的对比</p></div><p><code>区别1：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</code><br>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为，<br>在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之<br>后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成<br>的。另外，WHERE排除的记录不再包括在分组中。<br><code>区别2：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选。</code> 这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一<br>个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要<br>先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用<br>的资源就比较多，执行效率也较低。</p><p><strong>小结如下：</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221114175921.png" alt=""></p><p><code>开发中的选择：</code>WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发挥了 HAVING 可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很大的差别。</p><h2 id="SELECT的执行过程"><a href="#SELECT的执行过程" class="headerlink" title="SELECT的执行过程"></a>SELECT的执行过程</h2><p><strong>查询的结构:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#sql92语法：</span><br><span class="line"><span class="keyword">SELECT</span> ....,....,....(存在聚合函数)</span><br><span class="line"><span class="keyword">FROM</span> ...,....,....</span><br><span class="line"><span class="keyword">WHERE</span> 多表的连接条件 <span class="keyword">AND</span> 不包含聚合函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,....</span><br><span class="line"><span class="keyword">HAVING</span> 包含聚合函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ....,...(<span class="keyword">ASC</span> <span class="operator">/</span> <span class="keyword">DESC</span> )</span><br><span class="line">LIMIT ...,....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#sql99语法：</span><br><span class="line"><span class="keyword">SELECT</span> ....,....,....(存在聚合函数)</span><br><span class="line"><span class="keyword">FROM</span> ... (<span class="keyword">LEFT</span> <span class="operator">/</span> <span class="keyword">RIGHT</span>)<span class="keyword">JOIN</span> ....<span class="keyword">ON</span> 多表的连接条件 </span><br><span class="line">(<span class="keyword">LEFT</span> <span class="operator">/</span> <span class="keyword">RIGHT</span>)<span class="keyword">JOIN</span> ... <span class="keyword">ON</span> ....</span><br><span class="line"><span class="keyword">WHERE</span> 不包含聚合函数的过滤条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ...,....</span><br><span class="line"><span class="keyword">HAVING</span> 包含聚合函数的过滤条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ....,...(<span class="keyword">ASC</span> <span class="operator">/</span> <span class="keyword">DESC</span> )</span><br><span class="line">LIMIT ...,....</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#其中：</span><br><span class="line">#（<span class="number">1</span>）<span class="keyword">from</span>：从哪些表中筛选</span><br><span class="line">#（<span class="number">2</span>）<span class="keyword">on</span>：关联多表查询时，去除笛卡尔积</span><br><span class="line">#（<span class="number">3</span>）<span class="keyword">where</span>：从表中筛选的条件</span><br><span class="line">#（<span class="number">4</span>）<span class="keyword">group</span> <span class="keyword">by</span>：分组依据</span><br><span class="line">#（<span class="number">5</span>）<span class="keyword">having</span>：在统计结果中再次筛选</span><br><span class="line">#（<span class="number">6</span>）<span class="keyword">order</span> <span class="keyword">by</span>：排序</span><br><span class="line">#（<span class="number">7</span>）limit：分页</span><br></pre></td></tr></table></figure><ul><li><p><strong>SELECT执行顺序</strong></p><p><strong>1.  关键字的顺序是不能颠倒的：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> ... <span class="keyword">GROUP</span> <span class="keyword">BY</span> ... <span class="keyword">HAVING</span> ... <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... LIMIT...</span><br></pre></td></tr></table></figure><p><strong>2. SELECT 语句的执行顺序（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> 的字段 <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">DISTINCT</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">-</span><span class="operator">&gt;</span> LIMIT</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221114180312.png" alt=""></p></li></ul><div class="note info flat"><p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> player_id, player_name, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num # 顺序 <span class="number">5</span></span><br><span class="line"><span class="keyword">FROM</span> player <span class="keyword">JOIN</span> team <span class="keyword">ON</span> player.team_id <span class="operator">=</span> team.team_id # 顺序 <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span> height <span class="operator">&gt;</span> <span class="number">1.80</span> # 顺序 <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player.team_id # 顺序 <span class="number">3</span></span><br><span class="line"><span class="keyword">HAVING</span> num <span class="operator">&gt;</span> <span class="number">2</span> # 顺序 <span class="number">4</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> num <span class="keyword">DESC</span> # 顺序 <span class="number">6</span></span><br><span class="line">LIMIT <span class="number">2</span> # 顺序 <span class="number">7</span></span><br></pre></td></tr></table></figure><blockquote><p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个<code>虚拟表</code>，然后将这个虚拟表传入下一个步<br>骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p></blockquote><ul><li><p><strong>SQL 的执行原理</strong></p><p>SELECT 是先执行 FROM 这一步的。在这个阶段，如果是<code>多张表联查</code>，还会经历下面的几个步骤：</p></li></ul><ol><li><p>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</p></li><li><p>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</p></li><li><p>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p><p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 <code>vt1</code> ，就可以在此基础上再进行 WHERE 阶段。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code> 。<br>然后进入第三步和第四步，也就是 <code>GROUP 和 HAVING 阶段</code>。在这个阶段中，实际上是在虚拟表 <code>vt2</code> 的基础上进行分组和分组过滤，得到中间的虚拟表 <code>vt3 和 vt4</code> 。<br>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <code>SELECT 和 DISTINCT</code>阶段。<br>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表<br><code>vt5-1 和 vt5-2 。</code><br>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 <code>ORDER BY 阶段</code>，得到虚拟表 <code>vt6</code> 。<br>最后在 vt6 的基础上，取出指定行的记录，也就是 <code>LIMIT 阶段</code>，得到最终的结果，对应的是虚拟表<code>vt7</code> 。当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。<br>同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的关键字顺序，<code>所谓底层运行的原理，就是我们刚才讲到的执行顺序。</code></p></li></ol><h1 id="第九章-子查询"><a href="#第九章-子查询" class="headerlink" title="第九章 子查询"></a>第九章 子查询</h1><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li><p><strong>子查询的基本使用</strong></p><p><strong>1. 子查询的基本语法结构：</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221114211911.png" alt=""></p></li></ul><ul><li>子查询（内查询）在主查询之前一次执行完成。</li><li>子查询的结果被主查询（外查询）使用 。</li><li><strong>注意事项：</strong><br>子查询要包含在括号内<br>将子查询放在比较条件的右侧<br>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul><ul><li><p><strong>子查询的分类</strong></p><p><strong>分类方式1：</strong>我们按内查询的结果返回一条还是多条记录，将子查询分为<code>单行子查询</code>、<code>多行子查询</code></p><p><strong>分类方式2：</strong>我们按内查询是否被执行多次，将子查询划分为<code>相关(或关联)子查询和不相关(或非关联)子查询</code>。<br>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条<br>件进行执行，那么这样的子查询叫做不相关子查询。<br>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查<br>询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p></li></ul><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><ul><li><p><strong>单行比较操作符</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221114212428.png" alt=""></p></li><li><p><strong>代码示例</strong></p><div class="note success flat"><p>题目1：查询工资大于149号员工工资的员工的信息</p></div><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221115120314.png" alt=""></p><div class="note success flat"><p>题目2：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span></span><br><span class="line">            (<span class="keyword">SELECT</span> job_id</span><br><span class="line">            <span class="keyword">FROM</span> employees</span><br><span class="line">            <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">141</span>)</span><br><span class="line"><span class="keyword">AND</span> salary <span class="operator">&gt;</span></span><br><span class="line">            (<span class="keyword">SELECT</span> salary</span><br><span class="line">            <span class="keyword">FROM</span> employees</span><br><span class="line">            <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">143</span>);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>题目3：返回公司工资最少的员工的last_name,job_id和salary</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, job_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span></span><br><span class="line">            (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">            <span class="keyword">FROM</span> employees);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>题目4：查询与141号或174号员工的manager_id和department_id相同的其他员工的employee_id，manager_id，department_id</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 实现方式<span class="number">1</span>：不成对比较</span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id <span class="keyword">IN</span></span><br><span class="line">                (<span class="keyword">SELECT</span> manager_id</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>,<span class="number">141</span>))</span><br><span class="line"><span class="keyword">AND</span> department_id <span class="keyword">IN</span></span><br><span class="line">                (<span class="keyword">SELECT</span> department_id</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">174</span>,<span class="number">141</span>))</span><br><span class="line">                <span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="number">174</span>,<span class="number">141</span>);</span><br><span class="line"># 实现方式<span class="number">2</span>：成对比较    </span><br><span class="line"><span class="keyword">SELECT</span> employee_id, manager_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> (manager_id, department_id) <span class="keyword">IN</span></span><br><span class="line">                                (<span class="keyword">SELECT</span> manager_id, department_id</span><br><span class="line">                                <span class="keyword">FROM</span> employees</span><br><span class="line">                                <span class="keyword">WHERE</span> employee_id <span class="keyword">IN</span> (<span class="number">141</span>,<span class="number">174</span>))</span><br><span class="line"><span class="keyword">AND</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">141</span>,<span class="number">174</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>HAVING 中的子查询</strong></p><ul><li>首先执行子查询。</li><li>向主查询中的HAVING 子句返回结果。</li></ul><div class="note success flat"><p>题目5：查询最低工资大于50号部门最低工资的部门id和其最低工资</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">MIN</span>(salary) <span class="operator">&gt;</span></span><br><span class="line">                (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>CASE中的子查询</strong></p><div class="note success flat"><p>题目6：显式员工的employee_id,last_name和location。其中，若员工department_id与location_id为1800的department_id相同，则location为’Canada’，其余则为’USA’。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name,</span><br><span class="line">(<span class="keyword">CASE</span> department_id <span class="keyword">WHEN</span></span><br><span class="line">(<span class="keyword">SELECT</span> department_id </span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> location_id <span class="operator">=</span> <span class="number">1800</span>)</span><br><span class="line"><span class="keyword">THEN</span> <span class="string">&#x27;Canada&#x27;</span> <span class="keyword">ELSE</span> <span class="string">&#x27;USA&#x27;</span> <span class="keyword">END</span>) location</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></li><li><p><strong>子查询中的空值问题</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="operator">=</span></span><br><span class="line">            (<span class="keyword">SELECT</span> job_id</span><br><span class="line">            <span class="keyword">FROM</span> employees</span><br><span class="line">            <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Haas&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>非法使用子查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">=</span></span><br><span class="line">            (<span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary)</span><br><span class="line">            <span class="keyword">FROM</span> employees</span><br><span class="line">            <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id);</span><br></pre></td></tr></table></figure></li></ul><h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><p><strong>1. 也称为集合比较子查询</strong><br><strong>2. 内查询返回多行</strong><br><strong>3. 使用多行比较操作符</strong></p><ul><li><p><strong>多行比较操作符</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221115141059.png" alt=""></p></li><li><p><strong>代码示例</strong></p><div class="note success flat"><p>题目1：返回其它job_id中比job_id为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及salary</p></div><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221115141224.png" alt=""></p><div class="note success flat"><p>题目2：题目：查询平均工资最低的部门id</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e.department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">e.department_id</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="built_in">AVG</span>(e.salary) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">MIN</span>(avg_sal)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">AVG</span>(e.salary) <span class="keyword">AS</span> &quot;avg_sal&quot;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">e.department_id) <span class="keyword">AS</span> t_dept_avg_sal</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 方式二：</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e.department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">e.department_id</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="built_in">AVG</span>(e.salary) <span class="operator">&lt;=</span> <span class="keyword">ALL</span>(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">AVG</span>(e.salary) <span class="keyword">AS</span> &quot;avg_sal&quot;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">e.department_id);</span><br></pre></td></tr></table></figure></li><li><p><strong>空值问题</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">                        <span class="keyword">SELECT</span> manager_id</span><br><span class="line">                        <span class="keyword">FROM</span> employees</span><br><span class="line">                        );</span><br><span class="line"># 解决办法</span><br><span class="line"><span class="keyword">SELECT</span> last_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">                        <span class="keyword">SELECT</span> manager_id</span><br><span class="line">                        <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> manager_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">                        );</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><ul><li><p><strong>相关子查询执行流程</strong></p><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件<br>关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为<code>关联子查询</code>。<br>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221115160819.png" alt=""></p></li><li><p><strong>代码示例</strong></p><div class="note success flat"><p>题目1：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</p></div><p><code>方式一：相关子查询</code></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221115161955.png" alt=""></p><p><code>方式二：在 FROM 中使用子查询</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e1.last_name,</span><br><span class="line">e1.salary,</span><br><span class="line">e1.department_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> e1</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e1.salary<span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">AVG</span>(e2.salary)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e2.department_id <span class="operator">=</span> e1.department_id);</span><br></pre></td></tr></table></figure><blockquote><p>from型的子查询：子查询是作为from的一部分，子查询要用()引起来，并且要给这个子查询取别<br>名， 把它当成一张“临时的虚拟的表”来使用。</p></blockquote><ul><li><p><strong>在ORDER BY 中使用子查询：</strong></p><div class="note success flat"><p>题目2：查询员工的id,salary,按照department_name 排序</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e.employee_id,</span><br><span class="line">e.salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">d.department_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">DEPARTMENTS <span class="keyword">AS</span> D</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">d.department_id <span class="operator">=</span> e .department_id) ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>题目2：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同id的员工的employee_id,last_name和其job_id</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">e.employee_id,</span><br><span class="line">e.last_name,</span><br><span class="line">e.job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">EMPLOYEES <span class="keyword">AS</span> E</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e.employee_id <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">jh.employee_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">JOB_HISTORY <span class="keyword">AS</span> JH</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">jh.employee_id <span class="operator">=</span> e.employee_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">jh.employee_id</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="built_in">COUNT</span>(<span class="number">1</span>)<span class="operator">&gt;=</span> <span class="number">2</span>);</span><br><span class="line"># 方式二：</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">employee_id,</span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">employees e</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="number">2</span> <span class="operator">&lt;=</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">job_history j</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">e.`employee_id` <span class="operator">=</span> j.`employee_id`</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>EXISTS 与 NOT EXISTS关键字</strong></p><ul><li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li><li><p>如果在子查询中不存在满足条件的行：</p><ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li><p>如果在子查询中存在满足条件的行：</p><ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li></ul><div class="note success flat"><p>题目1：查询公司管理者的employee_id，last_name，job_id，department_id信息</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees e1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> ( </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">                <span class="keyword">FROM</span> employees e2</span><br><span class="line">                <span class="keyword">WHERE</span> e2.manager_id <span class="operator">=</span></span><br><span class="line">                e1.employee_id);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>题目2：查询departments表中，不存在于employees表中的部门的department_id和department_name</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, department_name</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">                <span class="keyword">FROM</span> employees</span><br><span class="line">                <span class="keyword">WHERE</span> department_id <span class="operator">=</span> d.department_id);</span><br></pre></td></tr></table></figure></li></ul><h1 id="第十章-创建和管理表"><a href="#第十章-创建和管理表" class="headerlink" title="第十章 创建和管理表"></a>第十章 创建和管理表</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>1. 一条数据存储的过程</strong></p><p>存储数据是处理数据的第一步。只有正确地把数据存储起来，我们才能进行有效的处理和分析。否则，只<br>能是一团乱麻，无从下手。<br>那么，怎样才能把用户各种经营相关的、纷繁复杂的数据，有序、高效地存储起来呢？ 在 MySQL 中，<br>一个完整的数据存储过程总共有 4 步，分别是创建数据库、确认字段、创建数据表、插入数据。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221116191912.png" alt=""></p><p>因为从系统架构的层次上看，MySQL 数据库系统从大到小依次是数据库服务器、数据库、数据表、数据表的行与列。</p><p><strong>2. 标识符命名规则</strong></p><ul><li>数据库名、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使<br>用`（着重号）引起来</li><li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据<br>类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><p><strong>3. MySQL中的数据类型</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221116192107.png" alt=""></p><p><strong>其中，常用的几类类型介绍如下：</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221116192143.png" alt=""></p><h2 id="创建和管理数据库"><a href="#创建和管理数据库" class="headerlink" title="创建和管理数据库"></a>创建和管理数据库</h2><p><strong>1. 创建数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方式<span class="number">1</span>：创建数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名;</span><br><span class="line"></span><br><span class="line">方式<span class="number">2</span>：创建数据库并指定字符集</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集;</span><br><span class="line"></span><br><span class="line">方式<span class="number">3</span>：判断数据库是否已经存在，不存在则创建数据库（ 推荐）</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删<br>旧库完成的。</p></blockquote><p><strong>2. 使用数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 查看当前所有的数据库</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES; #有一个S，代表多个数据库</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 查看当前正在使用的数据库</span><br><span class="line"><span class="keyword">SELECT</span> DATABASE(); #使用的一个 mysql 中的全局函数</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 查看指定库下所有的表</span><br><span class="line"><span class="keyword">SHOW</span> TABLES <span class="keyword">FROM</span> 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 查看数据库的创建信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名;</span><br><span class="line">或者：</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE 数据库名\G</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 使用<span class="operator">/</span>切换数据库</span><br><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><blockquote><p>注意：要操作表格和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上“数<br>据库名.”。</p></blockquote><p><strong>3. 修改数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 更改数据库字符集</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名 <span class="type">CHARACTER</span> <span class="keyword">SET</span> 字符集; #比如：gbk、utf8等</span><br></pre></td></tr></table></figure><p><strong>4. 删除数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式<span class="number">1</span>：删除指定的数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名;</span><br><span class="line"></span><br><span class="line">方式<span class="number">2</span>：删除指定的数据库（ 推荐）</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名;</span><br></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p><strong>1. 创建方式1</strong></p><ul><li><p><strong>必须具备：</strong>CREATE TABLE权限;存储空间</p></li><li><p><strong>语法格式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 表名(</span><br><span class="line">    字段<span class="number">1</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">    字段<span class="number">2</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">    字段<span class="number">3</span>, 数据类型 [约束条件] [默认值],</span><br><span class="line">……</span><br><span class="line">[表约束条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>加上了IF NOT EXISTS关键字，则表示：如果当前数据库中不存在要创建的数据表，则创建数据表；<br>如果当前数据库中已经存在要创建的数据表，则忽略建表语句，不再创建数据表。</p></blockquote></li><li><p><strong>必须指定：</strong>表名;列名(或字段名)，数据类型，长度</p></li><li><p><strong>可选指定：</strong>约束条件;默认值</p><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">    <span class="comment">-- int类型</span></span><br><span class="line">    emp_id <span class="type">INT</span>,</span><br><span class="line">    <span class="comment">-- 最多保存20个中英文字符</span></span><br><span class="line">    emp_name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 总位数不超过15位</span></span><br><span class="line">    salary <span class="keyword">DOUBLE</span>,</span><br><span class="line">    <span class="comment">-- 日期类型</span></span><br><span class="line">    birthday <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 创建方式2</strong></p><ul><li><p><strong>使用 AS subquery 选项，将创建表和插入数据结合起来</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221116193246.png" alt=""></p></li><li><p>指定的列和子查询中的列要一一对应</p></li><li><p>通过列名和默认值定义列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp1 <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2 <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span>; <span class="comment">-- 创建的emp2是空表</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary<span class="operator">*</span><span class="number">12</span> ANNSAL, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">80</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 查看数据表结构</strong></p><p>在MySQL中创建好数据表之后，可以查看数据表的结构。MySQL支持使用<code>DESCRIBE/DESC</code>语句查看数据表结构，也支持使用<code>SHOW CREATE TABLE</code>语句查看数据表结构。<br>语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名\G</span><br></pre></td></tr></table></figure><p>使用SHOW CREATE TABLE语句不仅可以查看表创建时的详细语句，还可以查看<code>存储引擎和字符编码</code>。</p><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><p>修改表指的是修改数据库中已经存在的数据表的结构。</p><p><strong>使用 ALTER TABLE 语句可以实现：</strong></p><ul><li>向已有的表中添加列</li><li>修改现有表中的列</li><li>删除现有表中的列</li><li>重命名现有表中的列</li></ul><p><strong>1. 追加一个列</strong></p><p><strong>语法格式如下：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 【<span class="keyword">COLUMN</span>】 字段名 字段类型 【<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名】;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line"><span class="keyword">ADD</span> job_id <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><strong>2. 修改一个列</strong></p><ul><li><p>可以修改列的数据类型，长度、默认值和位置</p></li><li><p>修改字段数据类型、长度、默认值、位置的语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 【<span class="keyword">COLUMN</span>】 字段名<span class="number">1</span> 字段类型 【<span class="keyword">DEFAULT</span> 默认值】【<span class="keyword">FIRST</span><span class="operator">|</span>AFTER 字段名</span><br><span class="line"><span class="number">2</span>】;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line">MODIFY last_name <span class="type">VARCHAR</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line">MODIFY salary <span class="keyword">double</span>(<span class="number">9</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure></li><li><p>对默认值的修改只影响今后对表的修改</p></li></ul><p><strong>3.  重命名一个列</strong></p><p>使用 CHANGE old_column new_column dataType子句重命名列。语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 【<span class="keyword">column</span>】 列名 新列名 新数据类型;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line">CHANGE department_name dept_name <span class="type">varchar</span>(<span class="number">15</span>);</span><br></pre></td></tr></table></figure><p><strong>4. 删除一个列</strong></p><p>删除表中某个字段的语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 【<span class="keyword">COLUMN</span>】字段名</span><br></pre></td></tr></table></figure><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dept80</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> job_id;</span><br></pre></td></tr></table></figure><h2 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方式一：使用RENAME</span><br><span class="line">RENAME <span class="keyword">TABLE</span> emp</span><br><span class="line"><span class="keyword">TO</span> myemp;</span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> dept</span><br><span class="line">RENAME [<span class="keyword">TO</span>] detail_dept; <span class="comment">-- [TO]可以省略</span></span><br></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><ul><li><p>在MySQL中，当一张数据表没有与其他任何数据表形成关联关系时，可以将当前数据表直接删除。</p></li><li><p>数据和结构都被删除</p></li><li><p>所有正在运行的相关事务被提交</p></li><li><p>所有相关索引被删除</p></li><li><p><strong>语法格式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 数据表<span class="number">1</span> [, 数据表<span class="number">2</span>, …, 数据表n];</span><br></pre></td></tr></table></figure><p><code>IF EXISTS</code>的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存<br>在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p><blockquote><p><code>DROP TABLE 语句不能回滚</code></p></blockquote></li></ul><h2 id="清空表"><a href="#清空表" class="headerlink" title="清空表"></a>清空表</h2><ul><li>TRUNCATE TABLE语句：<ul><li>删除表中所有的数据</li><li>释放表的存储空间</li></ul></li></ul><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> detail_dept;</span><br></pre></td></tr></table></figure><ul><li>TRUNCATE语句不能回滚，而使用 DELETE 语句删除数据，可以回滚</li></ul><blockquote><p>阿里开发规范：</p><p>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无<br>事务且不触发 TRIGGER，有可能造成事故，故不建议在开发代码中使用此语句。<br>说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></blockquote><h1 id="第十一章-数据处理之增删改"><a href="#第十一章-数据处理之增删改" class="headerlink" title="第十一章 数据处理之增删改"></a>第十一章 数据处理之增删改</h1><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul><li><p><strong>方式1：VALUES的方式添加</strong></p><p>使用这种语法一次只能向表中插入一条数据。<br><strong>情况1：为表的所有字段按默认顺序插入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,....);</span><br></pre></td></tr></table></figure><p>值列表中需要为表的每一个字段指定值，并且值的顺序必须和数据表中字段定义时的顺序相同。</p><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments <span class="keyword">VALUES</span> (<span class="number">70</span>, <span class="string">&#x27;Pub&#x27;</span>, <span class="number">100</span>, <span class="number">1700</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments <span class="keyword">VALUES</span> (<span class="number">100</span>, <span class="string">&#x27;Finance&#x27;</span>, <span class="keyword">NULL</span>, <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p><strong>情况2：为表的指定字段插入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(column1 [, column2, …, columnn])</span><br><span class="line"><span class="keyword">VALUES</span> (value1 [,value2, …, valuen]);</span><br></pre></td></tr></table></figure><p>为表的指定字段插入数据，就是在INSERT语句中只向部分字段中插入值，而其他字段的值为表定义时的默认值。<br>在 INSERT 子句中随意列出列名，但是一旦列出，VALUES中要插入的value1,….valuen需要与<br>column1,…columnn列一一对应。如果类型不同，将无法插入，并且MySQL会产生错误。</p><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments(department_id, department_name)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">80</span>, <span class="string">&#x27;IT&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>情况3：同时插入多条记录</strong></p><p>INSERT语句可以同时向数据表中插入多条记录，插入时指定多个值列表，每个值列表之间用逗号分隔开，基本语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">……</span><br><span class="line">(value1 [,value2, …, valuen]);</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1 [, column2, …, columnn])</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">(value1 [,value2, …, valuen]),</span><br><span class="line">……</span><br><span class="line">(value1 [,value2, …, valuen]);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(emp_id,emp_name) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1001</span>,<span class="string">&#x27;jermyn&#x27;</span>),</span><br><span class="line">(<span class="number">1002</span>,<span class="string">&#x27;Jermyn&#x27;</span>),</span><br><span class="line">(<span class="number">1003</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure><p>使用INSERT同时插入多条记录时，MySQL会返回一些在执行单行插入时没有的额外信息，这些信息的含<br>义如下：</p><ul><li><p>Records：表明插入的记录条数。 </p></li><li><p>Duplicates：表明插入时被忽略的记录，原因可能是这些记录包含了重复的主键值。</p></li><li><p>Warnings：表明有问题的数据值，例如发生数据类型转换。</p></li></ul><blockquote><p>一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是多行的INSERT语句<br>在处理过程中效率更高。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句<br>快，所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</p></blockquote></li><li><p><strong>方式2：将查询结果插入到表中</strong></p><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行。</p><p><strong>基本语法格式如下：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 目标表名 (tar_column1 [, tar_column2, …, tar_columnn])</span><br><span class="line"><span class="keyword">SELECT</span> (src_column1 [, src_column2, …, src_columnn])</span><br><span class="line"><span class="keyword">FROM</span> 源表名</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure><ul><li>在 INSERT 语句中加入子查询。</li><li>不必书写 VALUES 子句。</li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><div class="note success flat"><p>例子</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sales_reps(id, name, salary, commission_pct)</span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary, commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> <span class="string">&#x27;%REP%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><ul><li><p>使用 UPDATE 语句更新数据。<strong>语法如下：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1<span class="operator">=</span>value1, column2<span class="operator">=</span>value2, … , <span class="keyword">column</span><span class="operator">=</span>valuen</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>]</span><br></pre></td></tr></table></figure></li><li><p>可以一次更新多条数据。</p></li><li><p>如果需要回滚数据，需要保证在DML前，进行设置：SET AUTOCOMMIT = FALSE;</p></li><li><p>使用 WHERE 子句指定需要更新的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employees</span><br><span class="line"><span class="keyword">SET</span> department_id <span class="operator">=</span> <span class="number">70</span></span><br><span class="line"><span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">113</span>;</span><br></pre></td></tr></table></figure></li><li><p>如果省略 WHERE 子句，则表中的所有数据都将被更新。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> copy_emp</span><br><span class="line"><span class="keyword">SET</span> department_id <span class="operator">=</span> <span class="number">110</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ul><li><p><strong>使用 DELETE 语句从表中删除数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> <span class="operator">&lt;</span><span class="keyword">condition</span><span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure><p>table_name指定要执行删除操作的表；</p><p>“[WHERE ]”为可选参数，指定删除条件，如果没有WHERE子句，DELETE语句将删除表中的所有记录。</p></li><li><p>使用 WHERE 子句删除指定的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">WHERE</span> department_name <span class="operator">=</span> <span class="string">&#x27;Finance&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>如果省略 WHERE 子句，则表中的全部数据将被删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> copy_emp;</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL8新特性：计算列"><a href="#MySQL8新特性：计算列" class="headerlink" title="MySQL8新特性：计算列"></a>MySQL8新特性：计算列</h2><p>简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。</p><div class="note success flat"><p>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列用于计算a+b的值。 首先创建测试表tb1，语句如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb1(</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    a <span class="type">INT</span>,</span><br><span class="line">    b <span class="type">INT</span>,</span><br><span class="line">    c <span class="type">INT</span> GENERATED ALWAYS <span class="keyword">AS</span> (a <span class="operator">+</span> b) VIRTUAL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="第十二章-MySQL数据类型精讲"><a href="#第十二章-MySQL数据类型精讲" class="headerlink" title="第十二章 MySQL数据类型精讲"></a>第十二章 MySQL数据类型精讲</h1><h2 id="MySQL中的数据类型"><a href="#MySQL中的数据类型" class="headerlink" title="MySQL中的数据类型"></a>MySQL中的数据类型</h2><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117163943.png" alt=""></p><p>常见数据类型的属性，如下：</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117164229.png" alt=""></p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p><strong>1. 类型介绍</strong></p><p>整数类型一共有 5 种，包括 <strong>TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT</strong>。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117164355.png" alt=""></p><p><strong>2. 可选属性</strong></p><p><strong>整数类型的可选属性有三个：</strong></p><ul><li><p><strong>M</strong><br>M : 表示显示宽度，M的取值范围是(0, 255)。例如，int(5)：当数据宽度小于5位的时候在数字前面需要用字符填满宽度。该项功能需要配合“ ZEROFILL ”使用，表示用“0”填满宽度，否则指定显示宽度无效。<br>如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？<br>答案：不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存，即显示宽度与类型可以存储的值范围无关。从MySQL 8.0.17开始，整数数据类型不推荐使用显示宽度属性。<br>整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认的宽度值。</p><blockquote><p>TINYINT有符号数和无符号数的取值范围分别为-128~127和0~255，由于负号占了一个数字位，因此<br>TINYINT默认的显示宽度为4。同理，其他整数类型的默认显示宽度与其有符号数的最小值的宽度相同。</p></blockquote></li><li><p><strong>UNSIGNED</strong><br>UNSIGNED : 无符号类型（非负），所有的整数类型都有一个可选的属性UNSIGNED（无符号属性），无符号整数类型的最小取值为0。所以，如果需要在MySQL数据库中保存非负整数值时，可以将整数类型设置为无符号类型。<br>int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</p></li><li><p><strong>ZEROFILL</strong><br>ZEROFILL : 0填充,（如果某列是ZEROFILL，那么MySQL会自动为当前列添加UNSIGNED属性），如果指定了ZEROFILL只是表示不够M位时，用0在左边填充，如果超过M位，只要不超过数据存储范围即可。<br>原来，在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。 int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。也就是说，int(M)，必须和UNSIGNED ZEROFILL一起使用才有意义。如果整数值超过M位，就按照实际位数存储。只是无须再用字符 0 进行填充。</p></li></ul><p><strong>适用场景</strong></p><p><code>TINYINT ：</code>一般用于枚举数据，比如系统设定取值范围很小且固定的场景。<br><code>SMALLINT ：</code>可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。<br><code>MEDIUMINT ：</code>用于较大整数的计算，比如车站每日的客流量等。<br><code>INT、INTEGER ：</code>取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。<br><code>BIGINT ：</code>只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p><p><strong>如何选择？</strong><br>在评估用哪种整数类型的时候，你需要考虑存储空间和可靠性的平衡问题：一方面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间， 使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起系统错误，影响可靠性。<br>举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每天都有旧商品下架，新商品上架，这样不断迭代，日积月累。<br>如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围65535。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。<br>你要注意的是，在实际工作中，系统故障产生的成本远远超过增加几个字段存储空间所产生的成本。因此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p><strong>1. 类型介绍</strong></p><p>浮点数和定点数类型的特点是可以<code>处理小数</code>，你可以把整数看成小数的一个特例。因此，浮点数和定点数的使用场景，比整数大多了。 MySQL支持的浮点数类型，分别是<code>FLOAT、DOUBLE、REAL。</code></p><ul><li><p>FLOAT 表示单精度浮点数；</p></li><li><p>DOUBLE 表示双精度浮点数；</p></li><li><p>REAL默认就是 DOUBLE。如果你把 SQL 模式设定为启用“ REAL_AS_FLOAT ”，那 么，MySQL 就认为REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> sql_mode <span class="operator">=</span> “REAL_AS_FLOAT”;</span><br></pre></td></tr></table></figure></li></ul><p><code>问题1：</code>FLOAT 和 DOUBLE 这两种数据类型的区别是啥呢？</p><p>FLOAT 占用字节数少，取值范围小；DOUBLE 占用字节数多，取值范围也大。</p><p><code>问题2：</code>为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于<br>有符号数取值范围大于等于零的部分呢？</p><p><strong>MySQL 存储浮点数的格式为</strong>： <code>符号(S) 、尾数(M) 和 阶码(E) 。</code>因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p><p><strong>2. 数据精度说明</strong></p><p>对于浮点类型，在MySQL中单精度值使用<code>4 个字节</code>，双精度值使用<code>8 个字节</code>。</p><ul><li>MySQL允许使用非标准语法（其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么用）： FLOAT(M,D) 或DOUBLE(M,D) 。这里，<code>M称为精度，D称为标度。</code>(M,D)中 M=整数位+小数位，D=小数位。 D&lt;=M&lt;=255，0&lt;=D&lt;=30。<br>例如，定义为FLOAT(5,2)的一个列可以显示为-999.99-999.99。如果超过这个范围会报错。</li><li>FLOAT和DOUBLE类型在不指定(M,D)时，默认会按照实际的精度（由实际的硬件和操作系统决定）来显示。<br>说明：浮点类型，也可以加UNSIGNED ，但是不会改变数据范围，例如：FLOAT(3,2) UNSIGNED仍然只能表示0-9.99的范围。</li><li>不管是否显式设置了精度(M,D)，这里MySQL的处理方案如下：<ul><li>如果存储时，整数部分超出了范围，MySQL就会报错，不允许存这样的值</li><li>如果存储时，小数点部分若超出范围，就分以下情况：<ul><li>若四舍五入后，整数部分没有超出范围，则只警告，但能成功操作并四舍五入删除多余的小数位后保存。例如在FLOAT(5,2)列内插入999.009，近似结果是999.01。</li><li>若四舍五入后，整数部分超出范围，则MySQL报错，并拒绝处理。如FLOAT(5,2)列内插入999.995和-999.995都会报错</li></ul></li></ul></li><li>从MySQL 8.0.17开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确<code>不推荐使用，</code>将来可能被移除。另外，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了，将来也可能被移除。</li></ul><p><strong>3. 精度误差说明</strong></p><p>浮点数类型有个缺陷，就是<code>不精准</code>。下面我来重点解释一下为什么 MySQL 的浮点数不够精准。比如，我们设计一个表，有f1这个字段，插入值分别为0.47,0.44,0.19，我们期待的运行结果是：0.47 + 0.44 + 0.19 =1.1。而使用sum之后查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_double2(</span><br><span class="line">f1 <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_double2 <span class="keyword">VALUES</span>(<span class="number">0.47</span>),(<span class="number">0.44</span>),(<span class="number">0.19</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">SUM</span>(f1) <span class="keyword">FROM</span> test_double2;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">SUM</span>(f1) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1.0999999999999999</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>查询结果是 1.0999999999999999。虽然误差很小，但确实有误差。可以尝试把数据类型改成 FLOAT，然后运行求和查询，得到的是， 1.0999999940395355。显然，误差更大了。<br>那么，为什么会存在这样的误差呢？问题还是出在 MySQL 对浮点类型数据的存储方式上。<br>MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用<code>二进制</code>的方式来进行存储的。比如 9.625，用二进制来表达，就是 1001.101，或者表达成 1.001101×2^3。如果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范围内进行四舍五入。<br>在编程中，如果用到浮点数，要特别注意误差问题，因为浮点数是不准确的，所以我们要避免使用“=”来判断两个数是否相等。同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结果错误，甚至是造成不可挽回的损失。那么，MySQL 有没有精准的数据类型呢？当然有，这就是定点数类型： <code>DECIMAL 。</code></p><h2 id="定点数类型"><a href="#定点数类型" class="headerlink" title="定点数类型"></a>定点数类型</h2><p><strong>1. 类型介绍</strong></p><ul><li><p>MySQL中的定点数类型只有 DECIMAL 一种类型。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117172806.png" alt=""></p><p>使用 DECIMAL(M,D) 的方式表示高精度小数。其中<code>M被称为精度，D被称为标度。</code>0&lt;=M&lt;=65，0&lt;=D&lt;=30，D&lt;M。例如，定义DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。</p></li><li><p>DECIMAL(M,D)的<code>最大取值范围与DOUBLE类型一样</code>，但是<code>有效的数据范围</code>是由M和D决定的。DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。也就是说，在一些对精度要求不高的场景下，比起占用同样字节长度的定点数，浮点数表达的数值范围可以更大一些。</p></li><li><p>定点数在MySQL内部是以字符串的形式进行存储，这就决定了它一定是精准的。</p></li><li><p>当DECIMAL类型不指定精度和标度时，其默认为DECIMAL(10,0)。当数据的精度超出了定点数类型的精度范围时，则MySQL同样会进行<code>四舍五入</code>处理。</p></li><li><p><strong>浮点数 vs 定点数</strong></p><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，<code>浮点类型取值范围大，但是不精准</code>，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）</li><li>定点数类型<code>取值范围相对小，但是精准，没有误差，</code>适合于对<code>精度要求极高</code>的场景 （比如涉及金额计算的场景）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_decimal1(</span><br><span class="line">    f1 <span class="type">DECIMAL</span>,</span><br><span class="line">    f2 <span class="type">DECIMAL</span>(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> test_decimal1;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_decimal1(f1,f2) <span class="keyword">VALUES</span>(<span class="number">123.123</span>,<span class="number">123.456</span>);</span><br><span class="line"></span><br><span class="line">#<span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;f2&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_decimal1(f2) <span class="keyword">VALUES</span>(<span class="number">1234.34</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_decimal1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> f1 <span class="operator">|</span> f2 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123</span> <span class="operator">|</span> <span class="number">123.46</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p><code>开发中经验:</code>由于 DECIMAL 数据类型的精准性，在我们的项目中，除了极少数（比如商品编号）用到整数类型外，其他的数值都用的是 DECIMAL，原因就是这个项目所处的零售行业，要求精准，一分钱也不能差。</p></blockquote></li></ul><h2 id="位类型：BIT"><a href="#位类型：BIT" class="headerlink" title="位类型：BIT"></a>位类型：BIT</h2><p>BIT类型中存储的是二进制值，类似010110。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117174936.png" alt=""></p><p>BIT类型，如果没有指定(M)，默认是1位。这个1位，表示只能存1位的二进制值。这里(M)是表示二进制的位数，位数最小值为1，最大值为64。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_bit1(</span><br><span class="line">    f1 BIT,</span><br><span class="line">    f2 BIT(<span class="number">5</span>),</span><br><span class="line">    f3 BIT(<span class="number">64</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_bit1(f1) <span class="keyword">VALUES</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">#Data too long <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;f1&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_bit1(f1) <span class="keyword">VALUES</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_bit1(f2) <span class="keyword">VALUES</span>(<span class="number">23</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：在向BIT类型的字段中插入数据时，一定要确保插入的数据在BIT类型支持的范围内。</p></blockquote><p>使用SELECT命令查询位字段时，可以用BIN() 或HEX() 函数进行读取。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_bit1;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> f1 <span class="operator">|</span> f2 <span class="operator">|</span> f3 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">0x01</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">0x17</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h2><p>日期与时间是重要的信息，在我们的系统中，几乎所有的数据表都用得到。原因是客户需要知道数据的时间标签，从而进行数据查询、统计和处理。<br>MySQL有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL8.0版本支持的日期和时间类型主要有：<code>YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。</code></p><ul><li>YEAR 类型通常用来表示年</li><li>DATE 类型通常用来表示年、月、日</li><li>TIME 类型通常用来表示时、分、秒</li><li>DATETIME 类型通常用来表示年、月、日、时、分、秒</li><li>TIMESTAMP 类型通常用来表示带时区的年、月、日、时、分、秒</li></ul><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117185523.png" alt=""></p><p>不同数据类型表示的时间内容不同、取值范围不同，而且占用的字节数也不一样，你要根据实际需要灵活选取。<br>为什么时间类型 TIME 的取值范围不是 -23:59:59～23:59:59 呢？原因是 MySQL 设计的 TIME 类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过 24 小时。</p><p><strong>1. YEAR类型</strong></p><p>YEAR类型用来表示年份，在所有的日期时间类型中所占用的存储空间最小，只需要<code>1个字节</code>的存储空间。<br>在MySQL中，YEAR有以下几种<strong>存储格式：</strong></p><ul><li>以<code>4位字符串或数字格式表示YEAR类型</code>，其格式为YYYY，最小值为<code>1901</code>，最大值为<code>2155</code>。</li><li>以<code>2位字符串格式表示YEAR类型</code>，最小值为<code>00</code>，最大值为<code>99。</code><ul><li>当取值为01到69时，表示2001到2069；</li><li>当取值为70到99时，表示1970到1999；</li><li>当取值整数的0或00添加的话，那么是0000年；</li><li>当取值是日期/字符串的’0’添加的话，是2000年。</li></ul></li></ul><p>从MySQL5.5.27开始，2位格式的YEAR已经不推荐使用。YEAR默认格式就是“YYYY”，没必要写成YEAR(4)，从MySQL 8.0.19开始，不推荐使用指定显示宽度的YEAR(4)数据类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_year(</span><br><span class="line">    f1 <span class="keyword">YEAR</span>,</span><br><span class="line">    f2 <span class="keyword">YEAR</span>(<span class="number">4</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DESC</span> test_year;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> f1 <span class="operator">|</span> <span class="keyword">year</span>(<span class="number">4</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> f2 <span class="operator">|</span> <span class="keyword">year</span>(<span class="number">4</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+---------+------+</span></span><br></pre></td></tr></table></figure><p><strong>2. DATE类型</strong></p><p>DATE类型表示日期，<code>没有时间部分</code>，格式为<code>YYYY-MM-DD</code> ，其中，YYYY表示年份，MM表示月份，DD表示日期。需要<code>3个字节</code>的存储空间。在向DATE类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以YYYY-MM-DD 格式或者YYYYMMDD 格式表示的字符串日期，其最小取值为1000-01-01，最大取值为9999-12-03。YYYYMMDD 格式会被转化为YYYY-MM-DD格式。</li><li>以YY-MM-DD 格式或者YYMMDD 格式表示的字符串日期，此格式中，年份为两位数值或字符串满足YEAR类型的格式条件为：当年份取值为00到69时，会被转化为2000到2069；当年份取值为70到99时，会被转化为1970到1999。</li><li>使用CURRENT_DATE() 或者NOW() 函数，会插入当前系统的日期。</li></ul><div class="note success flat"><p>举例：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据表，表中只包含一个<span class="type">DATE</span>类型的字段f1。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_date1(</span><br><span class="line">    f1 <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.13</span> sec)</span><br><span class="line"></span><br><span class="line"># 插入数据：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date1</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">    (<span class="string">&#x27;2020-10-01&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;20201001&#x27;</span>),</span><br><span class="line">    (<span class="number">20201001</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_date1</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;00-01-01&#x27;</span>), </span><br><span class="line">        (<span class="string">&#x27;000101&#x27;</span>), </span><br><span class="line">        (<span class="string">&#x27;69-10-01&#x27;</span>), </span><br><span class="line">        (<span class="string">&#x27;691001&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;70-01-01&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;700101&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;99-01-01&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;990101&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>3. TIME类型</strong></p><p>TIME类型用来表示时间，不包含日期部分。在MySQL中，需要3个字节的存储空间来存储TIME类型的数据，可以使用“HH:MM:SS”格式来表示TIME类型，其中，HH表示小时，MM表示分钟，SS表示秒。<br>在MySQL中，向TIME类型的字段插入数据时，也可以使用几种<strong>不同的格式。</strong> </p><ol><li><p>可以使用带有冒号的字符串，比如’ D HH:MM:SS’ 、’ HH:MM:SS ‘、’ HH:MM ‘、’ D HH:MM ‘、’ D HH ‘或’ SS ‘格式，都能被正确地插入TIME类型的字段中。其中D表示天，其最小值为0，最大值为34。如果使用带有D格式的字符串插入TIME类型的字段时，D会被转化为小时，计算格式为D*24+HH。当使用带有冒号并且不带D的字符串表示时间时，表示当天的时间，比如12:10表示12:10:00，而不是00:12:10。 </p></li><li><p>可以使用不带有冒号的字符串或者数字，格式为’ HHMMSS ‘或者HHMMSS 。如果插入一个不合法的字符串或者数字，MySQL在存储数据时，会将其自动转化为00:00:00进行存储。比如1210，MySQL会将最右边的两位解析成秒，表示00:12:10，而不是12:10:00。 </p></li><li><p>使用CURRENT_TIME() 或者NOW() ，会插入当前系统的时间。</p></li></ol><div class="note success flat"><p>举例：创建数据表，表中包含一个TIME类型的字段f1。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_time1(</span><br><span class="line">    f1 <span class="type">TIME</span></span><br><span class="line">);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time1 <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;2 12:30:29&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;12:35:29&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;12:40&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2 12:40&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;1 05&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;45&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time1 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;123520&#x27;</span>), </span><br><span class="line">(<span class="number">124011</span>),</span><br><span class="line">(<span class="number">1210</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_time1 <span class="keyword">VALUES</span> </span><br><span class="line">(NOW()), </span><br><span class="line">(<span class="built_in">CURRENT_TIME</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_time1;</span><br></pre></td></tr></table></figure><p><strong>4. DATETIME类型</strong></p><p>DATETIME类型在所有的日期时间类型中占用的<code>存储空间最大，</code>总共需要<code>8 个字节</code>的存储空间。在格式上为DATE类型和TIME类型的组合，可以表示为YYYY-MM-DD HH:MM:SS ，其中YYYY表示年份，MM表示月份，DD表示日期，HH表示小时，MM表示分钟，SS表示秒。<br><strong>在向DATETIME类型的字段插入数据时，同样需要满足一定的格式条件。</strong></p><ul><li>以YYYY-MM-DD HH:MM:SS 格式或者YYYYMMDDHHMMSS 格式的字符串插入DATETIME类型的字段时，最小值为1000-01-01 00:00:00，最大值为9999-12-03 23:59:59。<ul><li>以YYYYMMDDHHMMSS格式的数字插入DATETIME类型的字段时，会被转化为YYYY-MM-DDHH:MM:SS格式。</li></ul></li><li>以YY-MM-DD HH:MM:SS 格式或者YYMMDDHHMMSS 格式的字符串插入DATETIME类型的字段时，两位数的年份规则符合YEAR类型的规则，00到69表示2000到2069；70到99表示1970到1999。</li><li>使用函数CURRENT_TIMESTAMP() 和NOW() ，可以向DATETIME类型的字段插入系统的当前日期和时间。</li></ul><div class="note success flat"><p>举例：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据表，表中包含一个DATETIME类型的字段dt。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_datetime1(</span><br><span class="line">    dt DATETIME</span><br><span class="line">);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_datetime1 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;2021-01-01 06:50:30&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;20210101065030&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_datetime1 <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;99-01-01 00:00:00&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;990101000000&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;20-01-01 00:00:00&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;200101000000&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_datetime1 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">20200101000000</span>), </span><br><span class="line">(<span class="number">200101000000</span>),</span><br><span class="line">(<span class="number">19990101000000</span>),</span><br><span class="line">(<span class="number">990101000000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_datetime1 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="built_in">CURRENT_TIMESTAMP</span>()),</span><br><span class="line">(NOW());</span><br></pre></td></tr></table></figure><p><strong>5. TIMESTAMP类型</strong></p><p>TIMESTAMP类型也可以表示日期时间，其显示格式与DATETIME类型相同，都是YYYY-MM-DD HH:MM:SS ，需要·4个字节·的存储空间。但是TIMESTAMP存储的时间范围比DATETIME要小很多，只能存储“1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”之间的时间。其中，UTC表示世界统一时间，也叫作世界标准时间。</p><ul><li>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。</li></ul><p>向TIMESTAMP类型的字段插入数据时，当插入的数据格式满足YY-MM-DD HH:MM:SS和YYMMDDHHMMS时，两位数值的年份同样符合YEAR类型的规则条件，只不过表示的时间范围要小很多如果向TIMESTAMP类型的字段插入的时间超出了TIMESTAMP类型的范围，则MySQL会抛出错误信息。</p><div class="note success flat"><p>举例：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据表，表中包含一个<span class="type">TIMESTAMP</span>类型的字段ts。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_timestamp1(</span><br><span class="line">ts <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">插入数据：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_timestamp1 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;1999-01-01 03:04:50&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;19990101030405&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;99-01-01 03:04:05&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;990101030405&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_timestamp1 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;2020@01@01@00@00@00&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;20@01@01@00@00@00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_timestamp1 <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="built_in">CURRENT_TIMESTAMP</span>()),</span><br><span class="line">(NOW());</span><br><span class="line"></span><br><span class="line">#Incorrect datetime <span class="keyword">value</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_timestamp1 <span class="keyword">VALUES</span> (<span class="string">&#x27;2038-01-20 03:14:07&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated-hover"><p>TIMESTAMP和DATETIME的区别：</p></div><ul><li><p>TIMESTAMP存储空间比较小，表示的日期时间范围也比较小</p></li><li><p>底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离1970-1-1 0:0:0 0毫秒的毫秒值。</p></li><li><p>两个日期比较大小或日期计算时，TIMESTAMP更方便、更快。</p></li><li><p>TIMESTAMP和时区有关。TIMESTAMP会根据用户的时区不同，显示不同的结果。而DATETIME则只能反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> temp_time(</span><br><span class="line">    d1 DATETIME,</span><br><span class="line">    d2 <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_time <span class="keyword">VALUES</span>(</span><br><span class="line"><span class="string">&#x27;2022-11-17 14:45:52&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;2022-11-17  14:45:52&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> temp_time <span class="keyword">VALUES</span>(</span><br><span class="line">NOW(),</span><br><span class="line">NOW()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#修改当前的时区</span><br><span class="line"><span class="keyword">SET</span> time_zone <span class="operator">=</span> <span class="string">&#x27;+9:00&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> temp_time;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> d1                  <span class="operator">|</span> d2                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-11</span><span class="number">-17</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">52</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-11</span><span class="number">-17</span> <span class="number">15</span>:<span class="number">45</span>:<span class="number">52</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2022</span><span class="number">-11</span><span class="number">-17</span> <span class="number">19</span>:<span class="number">26</span>:<span class="number">22</span> <span class="operator">|</span> <span class="number">2022</span><span class="number">-11</span><span class="number">-17</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+---------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>6. 开发中经验</strong></p><p>用得最多的日期时间类型，就是 DATETIME 。虽然 MySQL 也支持 YEAR（年）、 TIME（时间）、DATE（日期），以及 TIMESTAMP 类型，但是在实际项目中，尽量用 DATETIME 类型。因为这个数据类型包括了完整的日期和时间信息，取值范围也最大，使用起来比较方便。毕竟，如果日期时间信息分散在好几个字段，很不容易记，而且查询的时候，SQL 语句也会更加复杂。<br>此外，一般存注册时间、商品发布时间等，不建议使用DATETIME存储，而是使用时间戳，因为DATETIME虽然直观，但不便于计算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> UNIX_TIMESTAMP();</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> UNIX_TIMESTAMP() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span>       <span class="number">1668684487</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></li></ul><h2 id="文本字符串类型"><a href="#文本字符串类型" class="headerlink" title="文本字符串类型"></a>文本字符串类型</h2><p>在实际的项目中，我们还经常遇到一种数据，就是字符串数据。<br>MySQL中，文本字符串总体上分为<strong>CHAR 、VARCHAR 、TINYTEXT 、TEXT 、MEDIUMTEXT 、LONGTEXT 、ENUM 、SET</strong> 等类型。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117202600.png" alt=""></p><p><strong>1. CHAR与VARCHAR类型</strong></p><p>CHAR和VARCHAR类型都可以存储比较短的字符串。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117202657.png" alt=""></p><p><strong>CHAR类型：</strong></p><ul><li>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度<code>默认</code>是<code>1个字符。</code></li><li>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在右侧<code>填充空格</code>以达到指定的长度。当MySQL检索CHAR类型的数据时，CHAR类型的字段会去除尾部的空格。</li><li>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li></ul><p><strong>VARCHAR类型：</strong></p><ul><li>VARCHAR(M) 定义时， <code>必须指定长度M</code>，否则报错。</li><li>MySQL4.0版本以下，varchar(20)：指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字节） ；MySQL5.0版本以上，varchar(20)：指的是20字符。</li><li>检索VARCHAR类型的字段数据时，会保留数据尾部的空格。VARCHAR类型的字段所占用的存储空间为字符串实际长度加1个字节。</li></ul><p><strong>哪些情况使用 CHAR 或 VARCHAR 更好</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117202931.png" alt=""></p><p><code>情况1：</code>存储很短的信息。比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个byte用于存储信息长度，本来打算节约存储的，结果得不偿失。</p><p><code>情况2：</code>固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据长度的特性就消失了，而且还要占个长度信息。<br><code>情况3：</code>十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。<br><code>情况4：</code>具体存储引擎中的情况：</p><ul><li><strong>MyISAM 数据存储引擎和数据列：</strong>MyISAM数据表，最好使用固定长度(CHAR)的数据列代替可变长度(VARCHAR)的数据列。这样使得整个表静态化，从而使数据检索更快，用空间换时间。</li><li><strong>MEMORY 存储引擎和数据列：</strong>MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用CHAR或VARCHAR列都没有关系，两者都是作为CHAR类型处理的。</li><li><strong>InnoDB 存储引擎:</strong>建议使用VARCHAR类型。因为对于InnoDB数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且主要影响性能的因素是数据行使用的存储总量，由于char平均占用的空间多于varchar，所以除了简短并且固定长度的，其他考虑varchar。这样节省空间，对磁盘I/O和数据存储总量比较好。</li></ul><p><strong>2. TEXT类型</strong></p><p>在MySQL中，TEXT用来保存文本类型的字符串，总共包含4种类型，分别为<code>TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT 类型。</code><br>在向TEXT类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。这一点和VARCHAR类型相同。<br>每种TEXT类型保存的数据长度和所占用的存储空间不同，<strong>如下：</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117203159.png" alt=""></p><p>由于实际存储的长度不确定，MySQL<code>不允许 TEXT 类型的字段做主键</code>。遇到这种情况，你只能采用CHAR(M)，或者 VARCHAR(M)。</p><blockquote><p><code>开发中经验：</code>TEXT文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用CHAR，VARCHAR来代替。还有TEXT类型不用加默认值，加了也没用。而且text和blob类型的数据删除后容易导致“空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含TEXT类型字段，建议单独分出去，单独用一个表。</p></blockquote><h2 id="ENUM类型"><a href="#ENUM类型" class="headerlink" title="ENUM类型"></a>ENUM类型</h2><p>ENUM类型也叫作枚举类型，ENUM类型的取值范围需要在<code>定义字段时</code>进行指定。设置字段值时，ENUM类型只允许从成员中选取单个值，<code>不能一次选取多个值</code>。<br>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117203440.png" alt=""></p><ul><li><p>当ENUM类型包含1～255个成员时，需要1个字节的存储空间；</p></li><li><p>当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。</p></li><li><p>ENUM类型的成员个数的上限为65535个。</p><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建表如下：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_enum (id <span class="type">int</span>, gender ENUM(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;未知&#x27;</span>));</span><br><span class="line"></span><br><span class="line"># 添加数据：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_enum <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="SET类型"><a href="#SET类型" class="headerlink" title="SET类型"></a>SET类型</h2><p>SET表示一个字符串对象，可以包含0个或多个成员，但成员个数的上限为64 。设置字段值时，可以取取值范围内的 0 个或多个值。<br>当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，<strong>具体如下：</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117203738.png" alt=""></p><p>SET类型在存储数据时成员个数越多，其占用的存储空间越大。注意：SET类型在选取成员时，可以<code>一次选择多个成员</code>，这一点与ENUM类型不同。</p><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 创建表：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_set(</span><br><span class="line">s <span class="keyword">SET</span> (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 向表中插入数据：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_set (s) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;A&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;A,B&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#插入重复的<span class="keyword">SET</span>类型成员时，MySQL会自动删除重复的成员</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_set (s) <span class="keyword">VALUES</span> (<span class="string">&#x27;A,B,C,A&#x27;</span>);</span><br><span class="line"></span><br><span class="line">#向<span class="keyword">SET</span>类型的字段插入<span class="keyword">SET</span>成员中不存在的值时，MySQL会抛出错误。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_set (s) <span class="keyword">VALUES</span> (<span class="string">&#x27;A,B,C,D&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_set;</span><br></pre></td></tr></table></figure><h2 id="二进制字符串类型"><a href="#二进制字符串类型" class="headerlink" title="二进制字符串类型"></a>二进制字符串类型</h2><p>MySQL中的二进制字符串类型主要存储一些二进制数据，比如可以存储图片、音频和视频等二进制数据。<br>MySQL中支持的二进制字符串类型主要包括BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和<br>LONGBLOB类型。<br><strong>1. BINARY与VARBINARY类型</strong><br>BINARY和VARBINARY类似于CHAR和VARCHAR，只是它们存储的是二进制字符串。</p><p>BINARY (M)为固定长度的二进制字符串，M表示最多能存储的字节数，取值范围是0~255个字符。如果未指定(M)，表示只能存储<code>1个字节</code>。例如BINARY (8)，表示最多能存储8个字节，如果字段值不足(M)个字节，将在右边填充’\0’以补齐指定长度。</p><p>VARBINARY (M)为可变长度的二进制字符串，M表示最多能存储的字节数，总字节数不能超过行的字节长度限制65535，另外还要考虑额外字节开销，VARBINARY类型的数据除了存储数据本身外，还需要1或2个字节来存储数据的字节数。VARBINARY类型<code>必须指定(M)</code>，否则报错。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117205331.png" alt=""></p><p><strong>2. BLOB类型</strong><br>BLOB是一个二进制大对象，可以容纳可变数量的数据。<br>MySQL中的BLOB类型包括TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB 4种类型，它们可容纳值的最大长度不同。可以存储一个二进制的大对象，比如图片、音频和视频等。<br>需要注意的是，在实际工作中，往往不会在MySQL数据库中使用BLOB类型存储大对象数据，通常会将图片、音频和视频文件存储到服务器的磁盘上，并将图片、音频和视频的访问路径存储到MySQL中。</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117205424.png" alt=""></p><p><strong>TEXT和BLOB的使用注意事项：</strong><br>在使用text和blob字段类型时要注意以下几点，以便更好的发挥数据库的性能。</p><p>① BLOB和TEXT值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。删除这种值会在数据表中留下很大的” 空洞”，以后填入这些”空洞”的记录可能长度不同。为了提高性能，建议定期使用 OPTIMIZE TABLE 功能对这类表进行碎片整理。</p><p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了前缀索引。但是仍然要在不必要的时候避免检索大型的BLOB或TEXT值。例如，SELECT * 查询就不是很好的想法，除非你能够确定作为约束条件的WHERE子句只会找到所需要的数据行。否则，你可能毫无目的地在网络上传输大量的值。</p><p>③ 把BLOB或TEXT列分离到单独的表中。在某些环境中，如果把这些数据列移动到第二张数据表中，可以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会减少主表中的碎片，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行 SELECT * 查询的时候不会通过网络传输大量的BLOB或TEXT值。</p><h2 id="JSON-类型"><a href="#JSON-类型" class="headerlink" title="JSON 类型"></a>JSON 类型</h2><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。它易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。<code>JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</code><br>在MySQL 5.7中，就已经支持JSON数据类型。在MySQL 8.x版本中，JSON类型提供了可以进行自动验证的JSON文档和优化的存储结构，使得在MySQL中存储和读取JSON类型的数据更加方便和高效。 创建数据表，表中包含一个JSON类型的字段 js 。</p><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_json(</span><br><span class="line">js json</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_json (js) <span class="keyword">VALUES</span> (</span><br><span class="line"><span class="string">&#x27;&#123;&quot;name&quot;:&quot;Jermyn&quot;, &quot;age&quot;:20, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;,&quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_json;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117211655.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.name&#x27;</span> <span class="keyword">AS</span> NAME,</span><br><span class="line">js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.age&#x27;</span> <span class="keyword">AS</span> age ,</span><br><span class="line">js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.address.province&#x27;</span> <span class="keyword">AS</span> province, </span><br><span class="line">js <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;$.address.city&#x27;</span> <span class="keyword">AS</span> city </span><br><span class="line"><span class="keyword">FROM</span> test_json;</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117211851.png" alt=""></p><blockquote><p>通过“-&gt;”和“-&gt;&gt;”符号，从JSON字段中正确查询出了指定的JSON数据的值。</p></blockquote><h2 id="空间类型"><a href="#空间类型" class="headerlink" title="空间类型"></a>空间类型</h2><p>MySQL 空间类型扩展支持地理特征的生成、存储和分析。这里的地理特征表示世界上具有位置的任何东西，可以是一个实体，例如一座山；可以是空间，例如一座办公楼；也可以是一个可定义的位置，例如一个十字路口等等。MySQL中使用Geometry（几何） 来表示所有地理特征。Geometry指一个点或点的集合，代表世界上任何具有位置的事物。</p><p>MySQL的空间数据类型（Spatial Data Type）对应于OpenGIS类，包括单值类型：GEOMETRY、POINT、LINESTRING、POLYGON以及集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION 。</p><ul><li>Geometry是所有空间集合类型的基类，其他类型如POINT、LINESTRING、POLYGON都是Geometry的子类。<ul><li>Point，顾名思义就是点，有一个坐标值。例如POINT(121.213342 31.234532)，POINT(30 10)，坐标值支持DECIMAL类型，经度（longitude）在前，维度（latitude）在后，用空格分隔。</li><li>LineString，线，由一系列点连接而成。如果线从头至尾没有交叉，那就是简单的（simple）；如果起点和终点重叠，那就是封闭的（closed）。例如LINESTRING(30 10,10 30,4040)，点与点之间用逗号分隔，一个点中的经纬度用空格分隔，与POINT格式一致。</li><li>Polygon，多边形。可以是一个实心平面形，即没有内部边界，也可以有空洞，类似纽扣。最简单的就是只有一个外边界的情况，例如POLYGON((0 0,10 0,10 10, 0 10))。</li></ul></li></ul><p>下面展示几种常见的几何图形元素：</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117212709.png" alt=""></p><ul><li>MultiPoint、MultiLineString、MultiPolygon、GeometryCollection 这4种类型都是集合类，是多个Point、LineString或Polygon组合而成。</li></ul><p>下面展示的是多个同类或异类几何图形元素的组合：</p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221117212755.png" alt=""></p><h1 id="第十三章-约束"><a href="#第十三章-约束" class="headerlink" title="第十三章 约束"></a>第十三章 约束</h1><h2 id="约束-constraint-概述"><a href="#约束-constraint-概述" class="headerlink" title="约束(constraint)概述"></a>约束(constraint)概述</h2><p><strong>1. 为什么需要约束</strong></p><p>数据完整性（Data Integrity）是指数据的<code>精确性（Accuracy）和可靠性（Reliability）</code>。它是防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p><p>为了保证数据的完整性，SQL规范以约束的方式对表数据进行额外的条件限制。从以下四个方面考虑：</p><ul><li><code>实体完整性（Entity Integrity）</code>：例如，同一个表中，不能存在两条完全相同无法区分的记录</li><li><code>域完整性（Domain Integrity）</code>：例如：年龄范围0-120，性别范围“男/女”</li><li><code>引用完整性（Referential Integrity）</code> ：例如：员工所在部门，在部门表中要能找到这个部门</li><li><code>用户自定义完整性（User-defined Integrity）</code> ：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的5倍。</li></ul><p><strong>2. 什么是约束</strong></p><ul><li>约束是表级的强制规定。</li><li>可以在<code>创建表</code>时规定约束（通过 CREATE TABLE 语句），或者在表创建之后通过<code>ALTER TABLE</code>语句规定约束。</li></ul><p><strong>3. 约束的分类</strong></p><ul><li><p>根据约束数据<code>列的限制</code>，约束可分为：</p><ul><li><code>单列约束</code>：每个约束只约束一列</li><li><code>多列约束</code>：每个约束可约束多列数据</li></ul></li><li><p>根据约束的<code>作用范围</code>，约束可分为：</p><ul><li><code>列级约束：</code>只能作用在一个列上，跟在列的定义后面</li><li><code>表级约束</code>可以作用在多个列上，不与列一起，而是单独定义</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">位置  支持的约束类型   是否可以起约束名</span><br><span class="line">列级约束： 列的后面 语法都支持，但外键没有效果  不可以</span><br><span class="line">表级约束： 所有列的下面    默认和非空不支持，其他支持 可以（主键没有效果）</span><br></pre></td></tr></table></figure></li><li><p><strong>根据约束起的作用，</strong>约束可分为：</p><ul><li><p>NOT NULL 非空约束，规定某个字段不能为空</p></li><li><p>UNIQUE 唯一约束，规定某个字段在整个表中是唯一的</p></li><li><p>PRIMARY KEY 主键(非空且唯一)约束</p></li><li><p>FOREIGN KEY 外键约束</p></li><li><p>CHECK 检查约束</p></li><li><p>DEFAULT 默认值约束</p><blockquote><p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果</p></blockquote></li></ul></li><li><p><strong>查看某个表已有的约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#information_schema数据库名（系统库）</span><br><span class="line">#table_constraints表名称（专门存储各个表的约束）</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：添加约束的方式有两种，一是在创建表的时候添加约束，二是通过 ALTER TABLE 来添加，要注意的是后者在添加的时候要注意，<code>例如添加非空约束，且表中已经有了数据，则需要保证添加约束的字段就不可以有空的值，否则添加不成功。在例如添加唯一约束的时候就得保证这个字段的内容就不可以有重复的，如果有的话就添加不成功</code></p></blockquote></li></ul><h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><p><strong>1. 作用</strong></p><p>限定某个字段/某列的值不允许为空</p><p><strong>2. 关键字</strong></p><p>NOT NULL</p><p><strong>3. 特点</strong></p><ul><li>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型</li><li>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</li><li>一个表可以有很多列都分别限定了非空</li><li>空字符串’’不等于NULL，0也不等于NULL</li></ul><p><strong>4. 添加非空约束</strong></p><p><strong>（1）建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    sex <span class="type">CHAR</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    sid <span class="type">int</span>,</span><br><span class="line">    sname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    tel <span class="type">char</span>(<span class="number">11</span>) ,</span><br><span class="line">    cardid <span class="type">char</span>(<span class="number">18</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;13710011002&#x27;</span>,<span class="string">&#x27;110222198912032545&#x27;</span>); #成功</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;13710011002&#x27;</span>,<span class="keyword">null</span>);#身份证号为空</span><br><span class="line">ERROR <span class="number">1048</span> (<span class="number">23000</span>): <span class="keyword">Column</span> <span class="string">&#x27;cardid&#x27;</span> cannot be <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;110222198912032546&#x27;</span>);#成功，tel允许为空</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">&#x27;110222198912032547&#x27;</span>);#失败</span><br><span class="line">ERROR <span class="number">1048</span> (<span class="number">23000</span>): <span class="keyword">Column</span> <span class="string">&#x27;sname&#x27;</span> cannot be <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p><strong>（2）建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">MODIFY sex <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student modify sname <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><strong>5. 删除非空约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">NULL</span>;#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允</span><br><span class="line">许为空</span><br><span class="line">或</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型;#去掉<span class="keyword">not</span> <span class="keyword">null</span>，相当于修改某个非注解字段，该字段允许为空</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">MODIFY sex <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">MODIFY NAME <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;abc&#x27;</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="唯一性约束"><a href="#唯一性约束" class="headerlink" title="唯一性约束"></a>唯一性约束</h2><p><strong>1. 作用</strong><br>用来限制某个字段/某列的值不能重复。</p><blockquote><p>可以出现多个空值：NULL</p></blockquote><p><strong>2. 关键字</strong><br>UNIQUE</p><p><strong>3. 特点</strong></p><ul><li>同一个表可以有多个唯一约束。</li><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li><li>唯一性约束允许列值为空。</li><li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li><li><code>MySQL会给唯一约束的列上默认创建一个唯一索引。</code></li></ul><p><strong>4. 添加唯一约束</strong></p><p><strong>（1）建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> key,</span><br><span class="line">    字段名 数据类型</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    [<span class="keyword">constraint</span> 约束名] <span class="keyword">unique</span> key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    sid <span class="type">int</span>,</span><br><span class="line">    sname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">unique</span>,</span><br><span class="line">    cardid <span class="type">char</span>(<span class="number">18</span>) <span class="keyword">unique</span> key</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_course(</span><br><span class="line">    cid <span class="type">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    cname <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">    description <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">25</span>),</span><br><span class="line">    PASSWORD <span class="type">VARCHAR</span>(<span class="number">16</span>),</span><br><span class="line">    <span class="comment">-- 使用表级约束语法</span></span><br><span class="line">    <span class="keyword">CONSTRAINT</span> uk_name_pwd <span class="keyword">UNIQUE</span>(NAME,PASSWORD)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>表示用户名和密码组合不能重复</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;13710011002&#x27;</span>,<span class="string">&#x27;101223199012015623&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;13710011003&#x27;</span>,<span class="string">&#x27;101223199012015624&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> sid <span class="operator">|</span> sname <span class="operator">|</span> tel <span class="operator">|</span> cardid <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span> <span class="number">13710011002</span> <span class="operator">|</span> <span class="number">101223199012015623</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四 <span class="operator">|</span> <span class="number">13710011003</span> <span class="operator">|</span> <span class="number">101223199012015624</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-------------+--------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;13710011004&#x27;</span>,<span class="string">&#x27;101223199012015624&#x27;</span>); #身份证号重复</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;101223199012015624&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;cardid&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;13710011003&#x27;</span>,<span class="string">&#x27;101223199012015625&#x27;</span>);</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;13710011003&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;tel&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（2）建表后指定唯一键约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的</span><br><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 <span class="keyword">add</span> <span class="keyword">unique</span> key(字段列表);</span><br><span class="line"></span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 字段类型 <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(NAME,PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uk_name_pwd <span class="keyword">UNIQUE</span>(NAME,PASSWORD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> MODIFY NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    sid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    sname <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    tel <span class="type">char</span>(<span class="number">11</span>) ,</span><br><span class="line">    cardid <span class="type">char</span>(<span class="number">18</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">unique</span> key(tel);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">unique</span> key(cardid);</span><br></pre></td></tr></table></figure><p><strong>5. 关于复合唯一约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    <span class="keyword">unique</span> key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多</span><br><span class="line">    个字段的组合是唯一的</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#学生表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    sid <span class="type">int</span>, #学号</span><br><span class="line">    sname <span class="type">varchar</span>(<span class="number">20</span>), #姓名</span><br><span class="line">    tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">unique</span> key, #电话</span><br><span class="line">    cardid <span class="type">char</span>(<span class="number">18</span>) <span class="keyword">unique</span> key #身份证号</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#课程表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(</span><br><span class="line">    cid <span class="type">int</span>, #课程编号</span><br><span class="line">    cname <span class="type">varchar</span>(<span class="number">20</span>) #课程名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#选课表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_course(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    sid <span class="type">int</span>,</span><br><span class="line">    cid <span class="type">int</span>,</span><br><span class="line">    score <span class="type">int</span>,</span><br><span class="line">    <span class="keyword">unique</span> key(sid,cid) #复合唯一</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;13710011002&#x27;</span>,<span class="string">&#x27;101223199012015623&#x27;</span>);#成功</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;13710011003&#x27;</span>,<span class="string">&#x27;101223199012015624&#x27;</span>);#成功</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;Java&#x27;</span>),(<span class="number">1002</span>,<span class="string">&#x27;MySQL&#x27;</span>);#成功</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> sid <span class="operator">|</span> sname <span class="operator">|</span> tel <span class="operator">|</span> cardid <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span> <span class="number">13710011002</span> <span class="operator">|</span> <span class="number">101223199012015623</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四 <span class="operator">|</span> <span class="number">13710011003</span> <span class="operator">|</span> <span class="number">101223199012015624</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+-------------+--------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="operator">|</span> cid <span class="operator">|</span> cname <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1001</span> <span class="operator">|</span> Java <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1002</span> <span class="operator">|</span> MySQL <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_course <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1001</span>, <span class="number">89</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1002</span>, <span class="number">90</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1001</span>, <span class="number">88</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">2</span>, <span class="number">1002</span>, <span class="number">56</span>);#成功</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student_course;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> sid <span class="operator">|</span> cid <span class="operator">|</span> score <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1001</span> <span class="operator">|</span> <span class="number">89</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1002</span> <span class="operator">|</span> <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">1001</span> <span class="operator">|</span> <span class="number">88</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">1002</span> <span class="operator">|</span> <span class="number">56</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_course <span class="keyword">values</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">1001</span>, <span class="number">88</span>);#失败</span><br><span class="line">#ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;1-1001&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;sid&#x27;</span> 违反sid<span class="operator">-</span>cid的复合唯一</span><br></pre></td></tr></table></figure><blockquote><p>只有复合的字段都一样的话才报错</p></blockquote><p><strong>6. 删除唯一约束</strong></p><ul><li>添加唯一性约束的列上也会自动创建唯一索引。</li><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> #查看都有哪些约束</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX uk_name_pwd;</span><br></pre></td></tr></table></figure><blockquote><p>注意：可以通过 show index from 表名称; 查看表的索引</p></blockquote><h2 id="PRIMARY-KEY-约束"><a href="#PRIMARY-KEY-约束" class="headerlink" title="PRIMARY KEY 约束"></a>PRIMARY KEY 约束</h2><p><strong>1. 作用</strong><br>用来唯一标识表中的一行记录。</p><p><strong>2. 关键字</strong><br>primary key</p><p><strong>3. 特点</strong></p><ul><li>主键约束相当于<code>唯一约束+非空约束的组合</code>，主键约束列<code>不允许重复</code>，也<code>不允许出现空值</code>。</li><li>一个表<code>最多只能有一个主键约束</code>，建立主键约束可以在<code>列级别创建</code>，也可以在<code>表级别上创建</code>。</li><li>主键约束对应着表中的<code>一列或者多列</code>（复合主键）</li><li>如果是多列组合的复合主键约束，那么这些列都<code>不允许为空值</code>，并且组合的值<code>不允许重复</code>。</li><li>MySQL的主键名<code>总是PRIMARY</code>，就算自己命名了主键约束名也没用。</li><li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的<code>主键索引</code>（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</li><li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li></ul><p><strong>4. 添加主键约束</strong></p><p>（1）建表时指定主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型 <span class="keyword">primary</span> key, #列级模式</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    [<span class="keyword">constraint</span> 约束名] <span class="keyword">primary</span> key(字段名) #表级模式</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> temp(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> temp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>);#成功</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>);#成功</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> temp;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>);#失败</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate（重复） entry（键入，输入） <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;王五&#x27;</span>);#失败</span><br><span class="line">ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;PRIMARY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;张三&#x27;</span>);#成功</span><br></pre></td></tr></table></figure><ul><li><p><strong>列级约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp4(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT ,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>表级约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp5(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    pwd <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> emp5_id_pk <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>（2）建表后增加主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名称 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多</span><br><span class="line">个字段的话，是复合主键</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (sid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp5 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(NAME,pwd);</span><br></pre></td></tr></table></figure><p><strong>5. 关于复合主键</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    <span class="keyword">primary</span> key(字段名<span class="number">1</span>,字段名<span class="number">2</span>) #表示字段<span class="number">1</span>和字段<span class="number">2</span>的组合是唯一的，也可以有更多个字段</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp6(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    pwd <span class="type">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> emp7_pk <span class="keyword">PRIMARY</span> KEY(NAME,pwd)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>6. 删除主键约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp5 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure><blockquote><p>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存<br>在。</p></blockquote><h2 id="自增列：AUTO-INCREMENT"><a href="#自增列：AUTO-INCREMENT" class="headerlink" title="自增列：AUTO_INCREMENT"></a>自增列：AUTO_INCREMENT</h2><p><strong>1. 作用</strong><br>某个字段的值自增</p><p><strong>2.关键字 </strong></p><p>AUTO_INCREMENT</p><p><strong>3. 特点和要求</strong></p><ul><li><p>一个表<code>最多只能有一个</code>自增长列</p></li><li><p>当需要产生唯一标识符或顺序值时，可设置<code>自增长</code></p></li><li><p>自增长列约束的列必须是<code>键列</code>（主键列，唯一键列）</p></li><li><p>自增约束的列的数据类型必须是<code>整数类型</code></p></li><li><p>如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</p><div class="note info flat"><p>错误示例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    eid <span class="type">int</span> auto_increment,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"># ERROR <span class="number">1075</span> (<span class="number">42000</span>): Incorrect <span class="keyword">table</span> definition; there can be <span class="keyword">only</span> <span class="keyword">one</span> auto <span class="keyword">column</span> <span class="keyword">and</span> it must be defined <span class="keyword">as</span> a key</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span> key auto_increment</span><br><span class="line">);</span><br><span class="line"># ERROR <span class="number">1063</span> (<span class="number">42000</span>): Incorrect <span class="keyword">column</span> specifier <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;ename&#x27;</span> 因为ename不是整数类</span><br><span class="line">型</span><br></pre></td></tr></table></figure></li></ul><p><strong>4. 如何指定自增约束</strong></p><p><strong>（1）建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型 <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> key <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> key,</span><br><span class="line">    字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型 <span class="keyword">default</span> 默认值 ,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> key auto_increment,</span><br><span class="line">    字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,</span><br><span class="line">    <span class="keyword">primary</span> key(字段名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>（2）建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify eid <span class="type">int</span> auto_increment;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>5. 如何删除自增约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify eid <span class="type">int</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>6. MySQL 8.0新特性—自增变量的持久化 </strong></p><p>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重置AUTO_INCREMENT=max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发现的题。</p><h2 id="FOREIGN-KEY-约束"><a href="#FOREIGN-KEY-约束" class="headerlink" title="FOREIGN KEY 约束"></a>FOREIGN KEY 约束</h2><p><strong>1. 作用</strong><br>限定某个表的某个字段的引用完整性。</p><p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分</p><p><strong>2. 关键字</strong><br>FOREIGN KEY</p><p><strong>3. 主表和从表/父表和子表</strong></p><p><strong>主表（父表）：</strong>被引用的表，被参考的表<br><strong>从表（子表）</strong>：引用别人的表，参考别人的表<br>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。<br>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是主表，选课表是从表。</p><p><strong>4. 特点</strong></p><ul><li>从表的外键列，必须引用/参考主表的主键或唯一约束的列</li><li>为什么？因为被依赖/被参考的值必须是唯一的</li><li>在创建外键约束时，如果不给外键约束命名，<strong>默认名不是列名，而是自动产生一个外键名</strong>（例如student_ibfk_1;），也可以指定外键约束名。</li><li>创建(CREATE)表时就指定外键约束的话，<code>先创建主表，再创建从表</code></li><li>删表时，<code>先删从表（或先删除外键约束），再删除主表</code></li><li>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据</li><li>在“从表”中指定外键约束，并且一个表可以建立多个外键约束</li><li><p>从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。</p></li><li><p>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引。但是索引名是外键的约束名。（根据外键查询效率很高）</p></li><li>删除外键约束后，<code>必须手动</code>删除对应的索引</li></ul><p><strong>5. 添加外键约束</strong></p><p><strong>（1）建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 主表名称(</span><br><span class="line">    字段<span class="number">1</span> 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">    字段<span class="number">2</span> 数据类型</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 从表名称(</span><br><span class="line">    字段<span class="number">1</span> 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">    字段<span class="number">2</span> 数据类型,</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>外键约束名称<span class="operator">&gt;</span>] <span class="keyword">FOREIGN</span> KEY（从表的某个字段) <span class="keyword">references</span> 主表名(被参考字段)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样</span><br><span class="line">#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样</span><br><span class="line"><span class="comment">-- FOREIGN KEY: 在表级指定子表中的列</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 主表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">    did <span class="type">int</span> <span class="keyword">primary</span> key, #部门编号</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">50</span>) #部门名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 从表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key, #员工编号</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">5</span>), #员工姓名</span><br><span class="line">    deptid <span class="type">int</span>, #员工所在的部门</span><br><span class="line">    <span class="keyword">foreign</span> key (deptid) <span class="keyword">references</span> dept(did) #在从表中指定外键约束</span><br><span class="line">    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号</span><br><span class="line">);</span><br><span class="line">说明：</span><br><span class="line">（<span class="number">1</span>）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。</span><br><span class="line">（<span class="number">2</span>）删除表时，先删除从表emp，再删除主表dept</span><br></pre></td></tr></table></figure><p><strong>（2）建表后</strong></p><p>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那么，就要用修改表的方式来补充定义。</p><p><strong>格式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 </span><br><span class="line"><span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> 约束名] <span class="keyword">FOREIGN</span> KEY (从表的字段) <span class="keyword">REFERENCES</span> 主表名(被引用字段) [<span class="keyword">on</span> <span class="keyword">update</span> xx][<span class="keyword">on</span> <span class="keyword">delete</span> xx];</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">    did <span class="type">int</span> <span class="keyword">primary</span> key, #部门编号</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">50</span>) #部门名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key, #员工编号</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">5</span>), #员工姓名</span><br><span class="line">    deptid <span class="type">int</span> #员工所在的部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#这两个表创建时，没有指定外键的话，那么创建顺序是随意</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">foreign</span> key (deptid) <span class="keyword">references</span> dept(did);</span><br></pre></td></tr></table></figure><blockquote><p><code>总结：</code></p><ol><li>约束关系是针对<code>双方的</code></li><li>添加了外键约束后，<code>主表的修改和删除</code>数据受约束</li><li>添加了外键约束后，<code>从表的添加和修改</code>数据受约束</li><li>在从表上建立外键，要求主表必须存在</li><li>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</li></ol></blockquote><p><strong>7. 约束等级</strong></p><ul><li><code>Cascade方式：</code>在父表上update/delete记录时，同步update/delete掉子表的匹配记录</li><li><code>Set null方式：</code>在父表上update/delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null</li><li><code>No action方式：</code>如果子表中有匹配的记录，则不允许对父表对应候选键进行update/delete操作</li><li><code>Restrict方式：</code>同no action， 都是立即检查外键约束</li><li><code>Set default方式（在可视化工具SQLyog中可能显示空白）：</code>父表有变更时，子表将外键列设置成一个默认的值，但Innodb不能识别</li></ul><p><strong>如果没有指定等级，就相当于Restrict方式。对于外键约束，最好是采用: <code>ON UPDATE CASCADE ON DELETE RESTRICT 的方式。</code></strong></p><div class="note success flat"><p>演示1：on update cascade on delete set null</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">    did <span class="type">int</span> <span class="keyword">primary</span> key, #部门编号</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">50</span>) #部门名称</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key, #员工编号</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">5</span>), #员工姓名</span><br><span class="line">    deptid <span class="type">int</span>, #员工所在的部门</span><br><span class="line">    <span class="keyword">foreign</span> key (deptid) <span class="keyword">references</span> dept(did) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span></span><br><span class="line">    #把修改操作设置为级联修改等级，把删除操作设置为<span class="keyword">set</span> <span class="keyword">null</span>等级</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;教学部&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1002</span>, <span class="string">&#x27;财务部&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">1003</span>, <span class="string">&#x27;咨询部&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1001</span>); #在添加这条记录时，要求部门表有<span class="number">1001</span>部门</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">1002</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line">#修改主表成功，从表也跟着修改，修改了主表被引用的字段<span class="number">1002</span>为<span class="number">1004</span>，从表的引用字段就跟着修改为<span class="number">1004</span>了</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> dept <span class="keyword">set</span> did <span class="operator">=</span> <span class="number">1004</span> <span class="keyword">where</span> did <span class="operator">=</span> <span class="number">1002</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span> Changed: <span class="number">1</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> did <span class="operator">|</span> dname <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1001</span> <span class="operator">|</span> 教学部 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1003</span> <span class="operator">|</span> 咨询部 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1004</span> <span class="operator">|</span> 财务部 <span class="operator">|</span> #原来是<span class="number">1002</span>，修改为<span class="number">1004</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> ename <span class="operator">|</span> deptid <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span> <span class="number">1001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四 <span class="operator">|</span> <span class="number">1001</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 王五 <span class="operator">|</span> <span class="number">1004</span> <span class="operator">|</span> #原来是<span class="number">1002</span>，跟着修改为<span class="number">1004</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">#删除主表的记录成功，从表对应的字段的值被修改为<span class="keyword">null</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> did <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> did <span class="operator">|</span> dname <span class="operator">|</span> #记录<span class="number">1001</span>部门被删除了</span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1003</span> <span class="operator">|</span> 咨询部 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1004</span> <span class="operator">|</span> 财务部 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> ename <span class="operator">|</span> deptid <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br></pre></td></tr></table></figure><p><strong>8. 删除外键约束</strong></p><p><strong>流程如下：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)第一步先查看约束名和删除外键约束</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;表名称&#x27;</span>;#查看某个表的约束名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键约束名;</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）第二步查看索引名和删除索引。（注意，只能手动删除）</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名称; #查看某个表的索引名 <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.table_constraints <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;emp&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key emp_ibfk_1;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> emp;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> index deptid;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">0</span> Duplicates: <span class="number">0</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> index <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><strong>9. 开发场景</strong></p><p><code>问题1：</code>如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否一定要建外键约束？<br>答：不是的<br><code>问题2：</code>建和不建外键约束有什么区别？<br>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</p><p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的引用完整性，只能依靠程序员的自觉，或者是在Java程序中进行限定。例如：在员工表中，可以添加一个员工的信息，它的部门指定为一个完全不存在的部门。<br><code>问题3：</code>那么建和不建外键约束和查询有没有关系？<br>答：没有</p><blockquote><p>在 MySQL 里，外键约束是有成本的，需要消<code>耗系统资源</code>对于大并发的 SQL 操作，有可能会不适合。比如大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢。所以， MySQL 允许你不使用系统自带的外键约束，在应用层面完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p><p><code>【强制】</code>不得使用外键与级联，一切外键概念必须在应用层解决。<br>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。</p></blockquote><h2 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h2><p><strong>1. 作用</strong><br>检查某个字段的值是否符号xx要求，一般指的是值的范围</p><p><strong>2. 关键字</strong></p><p>CHECK</p><p><strong>3. 说明：MySQL 5.7 不支持</strong><br>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告,但是MySQL 8.0中可以使用check约束了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line">    gender <span class="type">char</span> <span class="keyword">check</span> (<span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;妖&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> ename <span class="operator">|</span> gender <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span> 妖 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> temp(</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    age <span class="type">INT</span> <span class="keyword">CHECK</span>(age <span class="operator">&gt;</span> <span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="DEFAULT约束"><a href="#DEFAULT约束" class="headerlink" title="DEFAULT约束"></a>DEFAULT约束</h2><p><strong>1. 作用</strong></p><p>给某个字段/某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p><p><strong>2. 关键字</strong></p><p>DEFAULT</p><p><strong>3. 如何给字段加默认值</strong></p><p><strong>（1）建表时</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型 <span class="keyword">primary</span> key,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> key <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span> key,</span><br><span class="line">    字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">    字段名 数据类型 <span class="keyword">default</span> 默认值 ,</span><br><span class="line">    字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,</span><br><span class="line">    字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> 默认值,</span><br><span class="line">    <span class="keyword">primary</span> key(字段名),</span><br><span class="line">    <span class="keyword">unique</span> key(字段名)</span><br><span class="line">);</span><br><span class="line">说明：默认值约束一般不在唯一键和主键列上加</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    gender <span class="type">char</span> <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> #默认是空字符串</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> 男 <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tel <span class="operator">|</span> <span class="type">char</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;汪飞&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;13700102535&#x27;</span>); #成功</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> ename <span class="operator">|</span> gender <span class="operator">|</span> tel <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 汪飞 <span class="operator">|</span> 男 <span class="operator">|</span> <span class="number">13700102535</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(eid,ename) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;天琪&#x27;</span>); #成功</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> ename <span class="operator">|</span> gender <span class="operator">|</span> tel <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 汪飞 <span class="operator">|</span> 男 <span class="operator">|</span> <span class="number">13700102535</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 天琪 <span class="operator">|</span> 男 <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-------+--------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(eid,ename) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;二虎&#x27;</span>);</span><br><span class="line">#ERROR <span class="number">1062</span> (<span class="number">23000</span>): Duplicate entry <span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;tel&#x27;</span></span><br><span class="line">#如果tel有唯一性约束的话会报错，如果tel没有唯一性约束，可以添加成功</span><br></pre></td></tr></table></figure><p><strong>（2）建表后</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">default</span> 默认值;</span><br><span class="line">#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了</span><br><span class="line">#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">default</span> 默认值 <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">    eid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    gender <span class="type">char</span>,</span><br><span class="line">    tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tel <span class="operator">|</span> <span class="type">char</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify gender <span class="type">char</span> <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>; #给gender字段增加默认值约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>; #给tel字段增加默认值约束</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> 男 <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tel <span class="operator">|</span> <span class="type">char</span>(<span class="number">11</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">not</span> <span class="keyword">null</span>;#给tel字段增加默认值约束，并保留非空约束</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> 男 <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tel <span class="operator">|</span> <span class="type">char</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>4. 如何删除默认值约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名称 modify 字段名 数据类型 <span class="keyword">not</span> <span class="keyword">null</span>; #删除默认值约束，保留非空约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify gender <span class="type">char</span>; #删除gender字段默认值约束，如果有非空约束，也一并删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee modify tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span>;#删除tel字段默认值约束，保留非空约束</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> employee;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> eid <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">20</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">char</span>(<span class="number">1</span>) <span class="operator">|</span> YES <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tel <span class="operator">|</span> <span class="type">char</span>(<span class="number">11</span>) <span class="operator">|</span> <span class="keyword">NO</span> <span class="operator">|</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p><code>面试1:</code>为什么建表时，加 not null default ‘’ 或 default 0<br><code>答：</code>不想让表中出现null值。<br><code>面试2:</code>为什么不想要 null 的值<br><code>答:</code>（1）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通常返回null。（2）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0</p><p><code>面试3:</code>带AUTO_INCREMENT约束的字段值是从1开始的吗？</p><p> 在MySQL中，默认AUTO_INCREMENT的初始值是1，每新增一条记录，字段值自动加1。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一条记录，同时指定id值为5，则以后插入的记录的id值就会从6开始往上增加。添加主键约束时，往往需要设置字段自动增加属性。<br><code>面试4:</code>并不是每个表都可以任意选择存储引擎？ 外键约束（FOREIGN KEY）不能跨引擎使用。<br>MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来保证数的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不能创建外键约束的所以说，存储引擎的选择也不完全是随意的。</p><h1 id="第十四章-视图"><a href="#第十四章-视图" class="headerlink" title="第十四章 视图"></a>第十四章 视图</h1><h2 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h2><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221118224607.png" alt=""></p><p><strong>1. 视图的理解</strong></p><ul><li>视图是一种虚拟表，本身是<code>不具有数据的</code>，<code>占用很少的内存空间</code>，它是 SQL 中的一个重要概念。</li><li>视图建立在已有表的基础上, 视图赖以建立的这些表称为<code>基表。</code></li><li>视图的创建和删除<code>只影响视图本身</code>，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化，反之亦然。</li><li>向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为存储起来的 SELECT 语句<ul><li>在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。</li></ul></li><li>视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来都非常方便。</li></ul><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a><strong>创建视图</strong></h2><ul><li><p><strong>在 CREATE VIEW 语句中嵌入子查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE]</span><br><span class="line">[ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line"><span class="keyword">VIEW</span> 视图名称 [(字段列表)]</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br><span class="line">[<span class="keyword">WITH</span> [<span class="keyword">CASCADED</span><span class="operator">|</span><span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> OPTION]</span><br></pre></td></tr></table></figure></li><li><p><strong>精简版</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line"><span class="keyword">AS</span> 查询语句</span><br></pre></td></tr></table></figure></li></ul><p><strong>1. 创建单表视图</strong></p><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> empvu80</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"># 查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salvu80;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_year_salary (ename,year_salary)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,salary<span class="operator">*</span><span class="number">12</span><span class="operator">*</span>(<span class="number">1</span><span class="operator">+</span>IFNULL(commission_pct,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> t_employee;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> salvu50</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id ID_NUMBER, last_name NAME,salary<span class="operator">*</span><span class="number">12</span> ANN_SALARY</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>说明1</code>：实际上就是我们在 SQL 查询语句的基础上封装了视图 VIEW，这样就会基于 SQL 语句的结果形成一张虚拟表。<br><code>说明2：</code>在创建视图时，没有在视图名后面指定字段列表，则视图中字段列表默认和SELECT语句中的字段列表一致。如果SELECT语句中给字段取了别名，那么视图中的字段名和别名相同。</p></blockquote><p><strong>2. 创建多表联合视图</strong></p><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> empview</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id emp_id,last_name NAME,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_dept</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,dname</span><br><span class="line"><span class="keyword">FROM</span> t_employee <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_department</span><br><span class="line"><span class="keyword">ON</span> t_employee.did <span class="operator">=</span> t_department.did;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> dept_sum_vu</span><br><span class="line">(name, minsal, maxsal, avgsal)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> d.department_name, <span class="built_in">MIN</span>(e.salary), <span class="built_in">MAX</span>(e.salary),<span class="built_in">AVG</span>(e.salary)</span><br><span class="line"><span class="keyword">FROM</span> employees e, departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> d.department_name;</span><br></pre></td></tr></table></figure><ul><li><p><strong>利用视图对数据进行格式化</strong></p><p>我们经常需要输出某个格式的内容，比如我们想输出员工姓名和对应的部门名，对应格式为<br>emp_name(department_name)，就可以使用视图来完成数据格式化的操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_depart</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(last_name,<span class="string">&#x27;(&#x27;</span>,department_name,<span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> emp_dept</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 基于视图创建视图</strong></p><p>当我们创建好一张视图之后，还可以在它的基础上继续创建视图。</p><p>举例：联合“emp_dept”视图和“emp_year_salary”视图查询员工姓名、部门名称、年薪信息创建“emp_dept_ysalary”视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_dept_ysalary</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> emp_dept.ename,dname,year_salary</span><br><span class="line"><span class="keyword">FROM</span> emp_dept <span class="keyword">INNER</span> <span class="keyword">JOIN</span> emp_year_salary</span><br><span class="line"><span class="keyword">ON</span> emp_dept.ename <span class="operator">=</span> emp_year_salary.ename;</span><br></pre></td></tr></table></figure><h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p><code>语法1：</code>查看数据库的表对象、视图对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p><code>语法2：</code>查看视图的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> <span class="operator">/</span> <span class="keyword">DESCRIBE</span> 视图名称;</span><br></pre></td></tr></table></figure><p><code>语法3：</code>查看视图的属性信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;视图名称&#x27;</span>\G</span><br></pre></td></tr></table></figure><p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个<code>虚表</code>。</p><p><code>语法4：</code>查看视图的详细定义信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称;</span><br></pre></td></tr></table></figure><h2 id="更新视图的数据"><a href="#更新视图的数据" class="headerlink" title="更新视图的数据"></a>更新视图的数据</h2><p><strong>1. 一般情况</strong></p><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p><div class="note success flat"><p>举例：UPDATE操作</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ename,tel <span class="keyword">FROM</span> emp_tel <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> tel <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> 孙洪亮 <span class="operator">|</span> <span class="number">13789098765</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> emp_tel <span class="keyword">SET</span> tel <span class="operator">=</span> <span class="string">&#x27;13789091234&#x27;</span> <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span> Changed: <span class="number">1</span> Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ename,tel <span class="keyword">FROM</span> emp_tel <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> tel <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> 孙洪亮 <span class="operator">|</span> <span class="number">13789091234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ename,tel <span class="keyword">FROM</span> t_employee <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> tel <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> 孙洪亮 <span class="operator">|</span> <span class="number">13789091234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例：DELETE操作</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ename,tel <span class="keyword">FROM</span> emp_tel <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> ename <span class="operator">|</span> tel <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="operator">|</span> 孙洪亮 <span class="operator">|</span> <span class="number">13789091234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> emp_tel <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ename,tel <span class="keyword">FROM</span> emp_tel <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> ename,tel <span class="keyword">FROM</span> t_employee <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;孙洪亮&#x27;</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>2. 不可更新的视图</strong></p><p>要使视图可更新，视图中的行和底层基本表中的行之间必须存在一对一的关系。另外当视图定义出现如下情况时，视图不支持更新操作：</p><ul><li>在定义视图的时候指定了“ALGORITHM = TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li><li>在定义视图的SELECT语句中使用了JOIN联合查询，视图将不支持INSERT和DELETE操作；</li><li>在定义视图的SELECT语句后的字段列表中使用了数学表达式或子查询，视图将不支持INSERT，也</li><li>不支持UPDATE使用了数学表达式、子查询的字段值；</li><li>在定义视图的SELECT语句后的字段列表中使用DISTINCT 、聚合函数、GROUP BY 、HAVING 、</li><li>UNION 等，视图将不支持INSERT、UPDATE、DELETE；</li><li>在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持INSERT、UPDATE、DELETE；</li><li>视图定义基于一个不可更新视图；</li><li>常量视图。</li></ul><blockquote><p>虽然可以更新视图数据，但总的来说，视图作为虚拟表，主要用于方便查询，不建议更新视图的数据。对视图数据的更改，都是通过对实际数据表里数据的操作来完成的。</p></blockquote><h2 id="修改、删除视图"><a href="#修改、删除视图" class="headerlink" title="修改、删除视图"></a>修改、删除视图</h2><p><strong>1. 修改视图</strong></p><p><code>方式1：</code>使用CREATE OR REPLACE VIEW 子句修改视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> empvu80</span><br><span class="line">(id_number, name, sal, department_id)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, first_name <span class="operator">||</span> <span class="string">&#x27; &#x27;</span> <span class="operator">||</span> last_name, salary, department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">80</span>;</span><br></pre></td></tr></table></figure><blockquote><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><p><code>方式2：</code>ALTER VIEW</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名称</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句</span><br></pre></td></tr></table></figure><p><strong>2. 删除视图</strong></p><ul><li><p>删除视图只是删除视图的定义，并不会删除基表的数据。</p></li><li><p>删除视图的语法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> 视图名称;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> 视图名称<span class="number">1</span>,视图名称<span class="number">2</span>,视图名称<span class="number">3</span>,...;</span><br></pre></td></tr></table></figure></li><li><p><code>说明</code>：基于视图a、b创建了新的视图c，如果将视图a或者视图b删除，会导致视图c的查询失败。这样的视图c需要手动删除或修改，否则影响使用。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>1. 视图优点</strong></p><ol><li><p><code>操作简单</code><br>将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简化了开发人员对数据库的操作。</p></li><li><p><code>减少数据冗余</code><br>视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语句来获取结果集。而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p></li><li><p><code>数据安全</code><br>MySQL将用户对数据的访问限制在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。用<br>户不必直接查询或操作数据表。这也可以理解为视图具有隔离性。视图相当于在用户和实际的数据表之<br>间加了一层虚拟表。同时，MySQL可以根据权限将用户对数据的访问限制在某些视图上，用户不需要查询数据表，可以直接通过视图获取数据表中的信息。这在一定程度上保障了数据表中数据的安全性。</p></li><li><p><code>适应灵活多变的需求</code> </p><p>当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p></li><li><p><code>能够分解复杂的查询逻辑</code></p><p>数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视图获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑</p></li></ol><p><strong>2. 视图不足</strong></p><p>如果我们在实际数据表的基础上创建了视图，那么，如果实际数据表的结构变更了，我们就需要及时对相关的视图进行相应的维护。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂， 可读性不好，易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。<br>实际项目中，如果视图过多，会导致数据库维护成本的问题。<br>所以，在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视图，使系统整体达到最优。</p><h1 id="第十五章-存储过程与函数"><a href="#第十五章-存储过程与函数" class="headerlink" title="第十五章 存储过程与函数"></a>第十五章 存储过程与函数</h1><h2 id="存储过程概述"><a href="#存储过程概述" class="headerlink" title="存储过程概述"></a>存储过程概述</h2><p><strong>1. 理解</strong></p><p><code>含义：</code>存储过程的英文是 Stored Procedure 。它的思想很简单，就是一组经过预先编译的 SQL 语句的封装。<br><code>执行过程</code>：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。<br><code>好处：</code></p><p>1、简化操作，提高了sql语句的重用性，减少了开发程序员的压力 </p><p>2、减少操作过程中的失误，提高效率</p><p>3、减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器</p><p>4、减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性<br><code>和视图、函数的对比：</code><br>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是虚拟表，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以直接操作底层数据表，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是没有返回值的。</p><p><strong>2. 分类</strong></p><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：<br>1、没有参数（无参数无返回） </p><p>2、仅仅带 IN 类型（有参数无返回） </p><p>3、仅仅带 OUT 类型（无参数有返回） </p><p>4、既带 IN 又带 OUT（有参数有返回） </p><p>5、带 INOUT（有参数有返回）</p><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><p><strong>1. 语法分析</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>说明：<br>1、参数前面的符号的意思</p><ul><li><code>IN ：</code>当前参数为输入参数，也就是表示入参；存储过程只是读取这个参数的值。如果没有定义参数种类， 默认就是 IN ，表示输入参数。</li><li><code>OUT ：</code>当前参数为输出参数，也就是表示出参；执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</li><li><code>INOUT ：</code>当前参数既可以为输入参数，也可以为输出参数。</li></ul><p>2、形参类型可以是 MySQL数据库中的任意类型。<br>3、<code>characteristics</code>表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line"><span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>LANGUAGE SQL ：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</li><li>[NOT] DETERMINISTIC ：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</li><li>{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } ：指明子程序使用SQL语句的限制。<ul><li>CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li><li>NO SQL表示当前存储过程的子程序中不包含任何SQL语句；</li><li>READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句；</li><li>MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。</li><li>默认情况下，系统会指定为CONTAINS SQL。</li></ul></li><li>SQL SECURITY { DEFINER | INVOKER } ：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。<ul><li>DEFINER 表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li><li>INVOKER 表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li><li>如果没有设置相关的值，则MySQL默认指定值为DEFINER。</li></ul></li><li>COMMENT ‘string’ ：注释信息，可以用来描述存储过程。</li></ul><p>4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">BEGIN</span>…<span class="keyword">END</span>：<span class="keyword">BEGIN</span>…<span class="keyword">END</span> 中间包含了多个语句，每个语句都以（;）号为结束符。</span><br><span class="line"><span class="number">2.</span> <span class="keyword">DECLARE</span>：<span class="keyword">DECLARE</span> 用来声明变量，使用的位置在于 <span class="keyword">BEGIN</span>…<span class="keyword">END</span> 语句中间，而且需要在其他语句使用之前进行变量的声明。</span><br><span class="line"><span class="number">3.</span> <span class="keyword">SET</span>：赋值语句，用于对变量进行赋值。</span><br><span class="line"><span class="number">4.</span> <span class="keyword">SELECT</span>… <span class="keyword">INTO</span>：把从数据表中查询的结果存放到变量中，也就是为变量赋值。</span><br></pre></td></tr></table></figure><p>5、需要设置新的结束标记</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER 新的结束标记</span><br></pre></td></tr></table></figure><p>因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用DELIMITER改变存储过程的结束符。<br>比如：“DELIMITER //”语句的作用是将MySQL的结束符设置为//，并以“END //”结束存储过程。存储过程定义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。<br>当使用DELIMITER命令时，应该避免使用反斜杠（‘\’）字符，因为反斜线是MySQL的转义字符。</p><div class="note success flat"><p>举例：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(<span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 参数类型,...)</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">sql</span>语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">sql</span>语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例1：创建存储过程select_all_data()，查看 emps 表的所有数据</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> select_all_data()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> avg_employee_salary ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_salary <span class="keyword">FROM</span> emps;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例3：创建存储过程show_max_salary()，用来查看“emps”表的最高薪资值。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_max_salary()</span><br><span class="line">    <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line">    <span class="keyword">NOT</span> <span class="keyword">DETERMINISTIC</span></span><br><span class="line">    <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span></span><br><span class="line">    <span class="keyword">SQL</span> SECURITY DEFINER</span><br><span class="line">    COMMENT <span class="string">&#x27;查看最高薪资&#x27;</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> emps;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例4：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过OUT参数“ms”输出</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_min_salary(<span class="keyword">OUT</span> ms <span class="keyword">DOUBLE</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">INTO</span> ms <span class="keyword">FROM</span> emps;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例5：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_someone_salary(<span class="keyword">IN</span> empname <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> emps <span class="keyword">WHERE</span> ename <span class="operator">=</span> empname;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例6：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名，用OUT参数empsalary输出员工薪资。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_someone_salary2(<span class="keyword">IN</span> empname <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="keyword">OUT</span> empsalary <span class="keyword">DOUBLE</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> empsalary <span class="keyword">FROM</span> emps <span class="keyword">WHERE</span> ename <span class="operator">=</span> empname;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例7：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用INOUT参数“empname”输入员工姓名，输出领导的姓名。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> show_mgr_name(<span class="keyword">INOUT</span> empname <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">SELECT</span> ename <span class="keyword">INTO</span> empname <span class="keyword">FROM</span> emps</span><br><span class="line">        <span class="keyword">WHERE</span> eid <span class="operator">=</span> (<span class="keyword">SELECT</span> MID <span class="keyword">FROM</span> emps <span class="keyword">WHERE</span> ename<span class="operator">=</span>empname);</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h2 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h2><p><strong>1. 调用格式</strong></p><p>存储过程有多种调用方法。存储过程必须使用CALL语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> 存储过程名(实参列表)</span><br></pre></td></tr></table></figure><p><strong>格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、调用<span class="keyword">in</span>模式的参数：</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="string">&#x27;值&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、调用<span class="keyword">out</span>模式的参数：</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、调用<span class="keyword">inout</span>模式的参数：</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@name</span><span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">CALL</span> sp1(<span class="variable">@name</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@name</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 代码举例</strong></p><div class="note success flat"><p>举例1：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> CountProc(<span class="keyword">IN</span> sid <span class="type">INT</span>,<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> num <span class="keyword">FROM</span> fruits</span><br><span class="line">        <span class="keyword">WHERE</span> s_id <span class="operator">=</span> sid;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">调用存储过程：</span><br><span class="line">mysql&gt; CALL CountProc (101, @num);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">查看返回结果：</span><br><span class="line">mysql&gt; SELECT @num;</span><br></pre></td></tr></table></figure><p>该存储过程返回了指定 s_id=101 的水果商提供的水果种类，返回值存储在num变量中，使用SELECT查看，返回结果为3。</p><div class="note success flat"><p>举例2：创建存储过程，实现累加运算，计算 1+2+…+n 等于多少。具体的代码如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> `add_num`(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> i <span class="type">INT</span>;</span><br><span class="line">        <span class="keyword">DECLARE</span> sum <span class="type">INT</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">SET</span> sum <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        WHILE i <span class="operator">&lt;=</span> n DO</span><br><span class="line">            <span class="keyword">SET</span> sum <span class="operator">=</span> sum <span class="operator">+</span> i;</span><br><span class="line">            <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> WHILE;</span><br><span class="line">        <span class="keyword">SELECT</span> sum;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>如果你用的是 Navicat 工具，那么在编写存储过程的时候，Navicat 会自动设置 DELIMITER 为其他符号，我们不需要再进行 DELIMITER 的操作。<br><strong>3. 如何调试</strong><br>在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。调试成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样逐步推进，就可以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独调试。</p><h2 id="存储函数的使用"><a href="#存储函数的使用" class="headerlink" title="存储函数的使用"></a>存储函数的使用</h2><p>前面学习了很多函数，使用这些函数可以对数据进行的各种处理操作，极大地提高用户对数据库的管理效率。MySQL支持自定义函数，定义好之后，调用方式与调用MySQL预定义的系统函数一样。</p><p><strong>1. 语法分析</strong></p><p>学过的函数：LENGTH、SUBSTR、CONCAT等</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数名 参数类型,...)</span><br><span class="line"><span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">[characteristics ...]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体 #函数体中肯定有 <span class="keyword">RETURN</span> 语句</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><code>说明：</code><br>1、参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。<br>2、RETURNS type 语句表示函数返回数据的类型；<br>RETURNS子句只能对FUNCTION做指定，对函数而言这是强制的。它用来指定函数的返回类型，而且函数体必须包含一个RETURN value 语句。<br>3、characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。<br>4、函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略BEGIN…END。</p><p><strong>2. 调用存储函数</strong></p><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是用户自己定义的，而内部函数是MySQL的开发者定义的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数名(实参列表)</span><br></pre></td></tr></table></figure><p><strong>3. 代码举例</strong></p><div class="note success flat"><p>举例1：创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_name()</span><br><span class="line">    <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line">    <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>);</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 调用：</span><br><span class="line"><span class="keyword">SELECT</span> email_by_name();</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型为字符串型。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> email_by_id(emp_id <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">25</span>)</span><br><span class="line">    <span class="keyword">DETERMINISTIC</span></span><br><span class="line">    <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> email <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id);</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@emp</span>_id <span class="operator">=</span> <span class="number">102</span>;</span><br><span class="line"><span class="keyword">SELECT</span> email_by_id(<span class="number">102</span>);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例3：创建存储函数count_by_id()，参数传入dept_id，该函数查询dept_id部门的员工人数，并返回，数据类型为整型。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> count_by_id(dept_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line">    <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line">    <span class="keyword">NOT</span> <span class="keyword">DETERMINISTIC</span></span><br><span class="line">    <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line">    <span class="keyword">SQL</span> SECURITY DEFINER</span><br><span class="line">    COMMENT <span class="string">&#x27;查询部门平均工资&#x27;</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id <span class="operator">=</span> dept_id);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@dept</span>_id <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"><span class="keyword">SELECT</span> count_by_id(<span class="variable">@dept</span>_id);</span><br></pre></td></tr></table></figure><p><code>注意：</code><br>若在创建存储函数中报错“ you might want to use the less safe log_bin_trust_function_creators variable ”，有两种处理方法：</p><ul><li><p>方式1：加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA |<br>MODIFIES SQL DATA}”</p></li><li><p>方式2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_bin_trust_function_creators <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>4. 对比存储函数和存储过程</strong></p><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221121155125.png" alt=""></p><p>此外，存储函数可以放在查询语句中使用，存储过程不行。反之，存储过程的功能更加强大，包括能够执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p><h2 id="存储过程和函数的查看、修改、删除"><a href="#存储过程和函数的查看、修改、删除" class="headerlink" title="存储过程和函数的查看、修改、删除"></a>存储过程和函数的查看、修改、删除</h2><p><strong>1. 查看</strong></p><p>创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p><p>MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查看，也可直接从系统的information_schema数据库中查询。这里介绍3种方法。</p><p><code>1. 使用SHOW CREATE语句查看存储过程和函数的创建信息</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程名或函数名</span><br></pre></td></tr></table></figure><p><code>2. 使用SHOW STATUS语句查看存储过程和函数的状态信息</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; STATUS [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这个语句返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。</p><p>[LIKE ‘pattern’]：匹配存储过程或函数的名称，可以省略。当省略不写时，会列出MySQL数据库中存在的所有存储过程或函数的信息。 举例：SHOW STATUS语句示例，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;SELECT%&#x27;</span> \G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">Db: test_db</span><br><span class="line">Name: SelectAllData</span><br><span class="line">Type: <span class="keyword">PROCEDURE</span></span><br><span class="line">Definer: root<span class="variable">@localhost</span></span><br><span class="line">Modified: <span class="number">2021</span><span class="number">-10</span><span class="number">-16</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">07</span></span><br><span class="line">Created: <span class="number">2021</span><span class="number">-10</span><span class="number">-16</span> <span class="number">15</span>:<span class="number">55</span>:<span class="number">07</span></span><br><span class="line">Security_type: DEFINER</span><br><span class="line">Comment:</span><br><span class="line">character_set_client: utf8mb4</span><br><span class="line">collation_connection: utf8mb4_general_ci</span><br><span class="line">Database <span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>3. 从information_schema.Routines表中查看存储过程和函数的信息</code></p><p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。其基本语法形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.Routines</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_NAME<span class="operator">=</span><span class="string">&#x27;存储过程或函数的名&#x27;</span> [<span class="keyword">AND</span> ROUTINE_TYPE <span class="operator">=</span> &#123;<span class="string">&#x27;PROCEDURE|FUNCTION&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure><p>说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来指明查询的是存储过程还是函数。</p><div class="note success flat"><p>举例：从Routines表中查询名称为CountProc的存储函数的信息，代码如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.Routines</span><br><span class="line"><span class="keyword">WHERE</span> ROUTINE_NAME<span class="operator">=</span><span class="string">&#x27;count_by_id&#x27;</span>　<span class="keyword">AND</span>　ROUTINE_TYPE <span class="operator">=</span> <span class="string">&#x27;FUNCTION&#x27;</span> \G</span><br></pre></td></tr></table></figure><p><strong>2. 修改</strong></p><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; 存储过程或函数的名 [characteristic ...]</span><br></pre></td></tr></table></figure><p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> <span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA <span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125;</span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"><span class="operator">|</span> COMMENT <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>CONTAINS SQL</code>，表示子程序包含SQL语句，但不包含读或写数据的语句。</p></li><li><p><code>NO SQL</code> ，表示子程序中不包含SQL语句。\</p></li><li><p><code>READS SQL DATA</code> ，表示子程序中包含读数据的语句。</p></li><li><p><code>MODIFIES SQL DATA</code> ，表示子程序中包含写数据的语句。</p></li><li><p><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code>，指明谁有权限来执行。</p><ul><li><code>DEFINER</code>，表示只有定义者自己才能够执行。</li><li><code>INVOKER</code>，表示调用者可以执行。</li></ul></li><li><p><code>COMMENT &#39;string&#39;</code>，表示注释信息。</p><blockquote><p>修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两个语句的结构是一样的，语句中的所有参数也是一样的。</p></blockquote></li></ul><div class="note success flat"><p>举例1：修改存储过程CountProc的定义。将读写权限改为MODIFIES SQL DATA，并指明调用者可以执行，代码如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>　<span class="keyword">PROCEDURE</span>　CountProc</span><br><span class="line"><span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA</span><br><span class="line"><span class="keyword">SQL</span> SECURITY INVOKER ;</span><br><span class="line"></span><br><span class="line"># 查询修改后的信息：</span><br><span class="line"><span class="keyword">SELECT</span> specific_name,sql_data_access,security_type</span><br><span class="line"><span class="keyword">FROM</span> information_schema.`ROUTINES`</span><br><span class="line"><span class="keyword">WHERE</span> routine_name <span class="operator">=</span> <span class="string">&#x27;CountProc&#x27;</span> <span class="keyword">AND</span> routine_type <span class="operator">=</span> <span class="string">&#x27;PROCEDURE&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果显示，存储过程修改成功。从查询的结果可以看出，访问数据的权限（SQL<em>DATA</em> ACCESS）已经变成MODIFIES SQL DATA，安全类型（SECURITY_TYPE）已经变成INVOKER。</p><div class="note success flat"><p>举例2：修改存储函数CountProc的定义。将读写权限改为READS SQL DATA，并加上注释信息“FIND NAME”，代码如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>　<span class="keyword">FUNCTION</span>　CountProc</span><br><span class="line"><span class="keyword">READS</span> <span class="keyword">SQL</span> DATA</span><br><span class="line">COMMENT <span class="string">&#x27;FIND NAME&#x27;</span> ;</span><br></pre></td></tr></table></figure><p>存储函数修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ACCESS）已经变成READS SQL DATA，函数注释（ROUTINE_COMMENT）已经变成FIND NAME。</p><p><strong>3. 删除</strong></p><p>删除存储过程和函数，可以使用DROP语句，其语法结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> &#123;<span class="keyword">PROCEDURE</span> <span class="operator">|</span> <span class="keyword">FUNCTION</span>&#125; [IF <span class="keyword">EXISTS</span>] 存储过程或函数的名</span><br></pre></td></tr></table></figure><p>IF EXISTS：如果程序或函数不存储，它可以防止发生错误，产生一个用SHOW WARNINGS查看的警告。<br><div class="note success flat"><p>举例：</p></div></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> CountProc;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> CountProc;</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点</strong></p><p>1、<code>存储过程可以一次编译多次使用。</code>存储过程只在创建时进行编译，之后的使用都不需要重新编译，这就提升了 SQL 的执行效率。<br>2、<code>可以减少开发工作量。</code>将代码封装成模块，实际上是编程的核心思想之一，这样可以把复杂的问题拆解成不同的模块，然后模块之间可以重复使用，在减少开发工作量的同时，还能保证代码的结构清晰。<br>3、<code>存储过程的安全性强。</code>我们在设定存储过程的时候可以设置对用户的使用权限，这样就和视图一样具有较强的安全性。<br>4、<code>可以减少网络传输量。</code>因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。<br>5、<code>良好的封装性。</code>在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接多次数据库才能完成的操作，现在变成了一次存储过程，只需要连接一次即可。</p><p><strong>缺点</strong></p><p>1、<code>可移植性差。</code>存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过程，在换成其他数据库时都需要重新编写。<br>2、<code>调试困难。</code>只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。<br>3、<code>存储过程的版本管理很困难。</code>比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。<br>4、<code>它不适合高并发的场景</code>。高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护， 增加数据库的压力，显然就不适用了。</p><h1 id="第十六章-变量、流程控制与游标"><a href="#第十六章-变量、流程控制与游标" class="headerlink" title="第十六章 变量、流程控制与游标"></a>第十六章 变量、流程控制与游标</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。<br>在 MySQL 数据库中，变量分为<code>系统变量</code>以及<code>用户自定义变量</code>。</p><p><strong>1. 系统变量分类</strong></p><p>变量由系统定义，不是用户定义，属于服务器层面。启动MySQL服务，生成MySQL服务实例期间，MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是编译MySQL时参数的默认值，要么是配置文件（例如my.ini等）中的参数值。大家可以通过网址 <a href="https://dev.mysql.com/doc/refman/8.0/en/server-systemvariables.html">https://dev.mysql.com/doc/refman/8.0/en/server-systemvariables.html</a> 查看MySQL文档的系统变量。</p><p>系统变量分为<code>全局系统变量</code>（需要添加global 关键字）以及<code>会话系统变量</code>（需要添加 session 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。<code>如果不写，默认会话级别</code>。静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量</p><p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。</p><ul><li>全局系统变量针对于所有会话（连接）有效，但不能跨重启</li><li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。</li><li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</li></ul><p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p><p><strong>2. 查看系统变量</strong></p><ul><li><p><strong>查看所有或部分系统变量</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查看所有全局变量</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES;</span><br><span class="line"></span><br><span class="line">#查看所有会话变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看满足条件的部分系统变量。</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%标识符%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#查看满足条件的部分会话变量</span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%标识符%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>查看指定系统变量</strong></p><p>作为 MySQL 编码规范，MySQL 中的系统变量以两个“@” 开头，其中“@@global”仅用于标记全局系统变<br>量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#查看指定的系统变量的值</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.变量名;</span><br><span class="line"></span><br><span class="line">#查看指定的会话变量的值</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.变量名;</span><br><span class="line">#或者</span><br><span class="line"><span class="keyword">SELECT</span> @@变量名;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改系统变量的值</strong></p><p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、特征。具体方法：<br><code>方式1</code>：修改MySQL 配置文件，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）<br><code>方式2</code>：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#为某个系统变量赋值</span><br><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@global</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> 变量名<span class="operator">=</span>变量值;</span><br><span class="line"></span><br><span class="line">#为某个会话变量赋值</span><br><span class="line">#方式<span class="number">1</span>：</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.变量名<span class="operator">=</span>变量值;</span><br><span class="line">#方式<span class="number">2</span>：</span><br><span class="line"><span class="keyword">SET</span> SESSION 变量名<span class="operator">=</span>变量值;</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 用户变量分类</strong></p><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以一个“@” 开头。根据作用范围不同，又分为会话用户变量和局部变量。</p><ul><li>会话用户变量：作用域和会话变量一样，只对当前连接会话有效。</li><li>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在存储过程和函数中使用。</li></ul><p><strong>4. 会话用户变量</strong></p><ul><li><p><strong>变量的定义</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#方式<span class="number">1</span>：“<span class="operator">=</span>”或“:<span class="operator">=</span>”</span><br><span class="line"><span class="keyword">SET</span> @用户变量 <span class="operator">=</span> 值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量 :<span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line">#方式<span class="number">2</span>：“:<span class="operator">=</span>” 或 <span class="keyword">INTO</span>关键字</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量 :<span class="operator">=</span> 表达式 [<span class="keyword">FROM</span> 等子句];</span><br><span class="line"><span class="keyword">SELECT</span> 表达式 <span class="keyword">INTO</span> @用户变量 [<span class="keyword">FROM</span> 等子句];</span><br></pre></td></tr></table></figure></li><li><p><strong>查看用户变量的值 （查看、比较、运算等）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @用户变量</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@a</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span> :<span class="operator">=</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> <span class="variable">@avgsalary</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@avgsalary</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@big</span>; #查看某个未声明的变量时，将得到<span class="keyword">NULL</span>值</span><br></pre></td></tr></table></figure></li></ul><p><strong>5. 局部变量</strong></p><p><code>定义：</code>可以使用DECLARE 语句定义一个局部变量<br><code>作用域：</code>仅仅在定义它的 BEGIN … END 中有效<br><code>位置：</code>只能放在 BEGIN … END 中，而且只能放在第一句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    #声明局部变量</span><br><span class="line">    <span class="keyword">DECLARE</span> 变量名<span class="number">1</span> 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line">    <span class="keyword">DECLARE</span> 变量名<span class="number">2</span>,变量名<span class="number">3</span>,... 变量数据类型 [<span class="keyword">DEFAULT</span> 变量默认值];</span><br><span class="line">    #为局部变量赋值</span><br><span class="line">    <span class="keyword">SET</span> 变量名<span class="number">1</span> <span class="operator">=</span> 值;</span><br><span class="line">    <span class="keyword">SELECT</span> 值 <span class="keyword">INTO</span> 变量名<span class="number">2</span> [<span class="keyword">FROM</span> 子句];</span><br><span class="line">    #查看局部变量的值</span><br><span class="line">    <span class="keyword">SELECT</span> 变量<span class="number">1</span>,变量<span class="number">2</span>,变量<span class="number">3</span>;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>定义变量</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 [<span class="keyword">default</span> 值]; # 如果没有<span class="keyword">DEFAULT</span>子句，初始值为<span class="keyword">NULL</span></span><br></pre></td></tr></table></figure></li><li><p><strong>变量的赋值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方式<span class="number">1</span>：一般用于赋简单的值</span><br><span class="line"><span class="keyword">SET</span> 变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> 变量名:<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line">方式<span class="number">2</span>：一般用于赋表中的字段值</span><br><span class="line"><span class="keyword">SELECT</span> 字段名或表达式 <span class="keyword">INTO</span> 变量名 <span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用变量（查看、比较、运算等）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 局部变量名;</span><br></pre></td></tr></table></figure></li></ul><div class="note success flat"><p>举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> set_value()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> emp_name <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line">    <span class="keyword">DECLARE</span> sal <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">SELECT</span> last_name,salary <span class="keyword">INTO</span> emp_name,sal</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> <span class="number">102</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> emp_name,sal;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#方式<span class="number">1</span>：使用用户变量</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@m</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@n</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sum</span><span class="operator">=</span><span class="variable">@m</span><span class="operator">+</span><span class="variable">@n</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@sum</span>;</span><br><span class="line"></span><br><span class="line">#方式<span class="number">2</span>：使用局部变量</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> add_value()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    #局部变量</span><br><span class="line">    <span class="keyword">DECLARE</span> m <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> n <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> SUM <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">SET</span> SUM <span class="operator">=</span> m<span class="operator">+</span>n;</span><br><span class="line">    <span class="keyword">SELECT</span> SUM;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例3：创建存储过程“different_salary”查询某员工和他领导的薪资差距，并用IN参数emp_id接收员工id，用OUT参数dif_salary输出薪资差距结果。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#声明</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> different_salary(<span class="keyword">IN</span> emp_id <span class="type">INT</span>,<span class="keyword">OUT</span> dif_salary <span class="keyword">DOUBLE</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    #声明局部变量</span><br><span class="line">    <span class="keyword">DECLARE</span> emp_sal,mgr_sal <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> mgr_id <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> emp_sal <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">    <span class="keyword">SELECT</span> manager_id <span class="keyword">INTO</span> mgr_id <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">    <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> mgr_sal <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> mgr_id;</span><br><span class="line">    <span class="keyword">SET</span> dif_salary <span class="operator">=</span> mgr_sal <span class="operator">-</span> emp_sal;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@emp</span>_id <span class="operator">=</span> <span class="number">102</span>;</span><br><span class="line"><span class="keyword">CALL</span> different_salary(<span class="variable">@emp</span>_id,<span class="variable">@diff</span>_sal);</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@diff</span>_sal;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>会话用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table></div><h2 id="定义条件与处理程序"><a href="#定义条件与处理程序" class="headerlink" title="定义条件与处理程序"></a>定义条件与处理程序</h2><p>定义条件是事先定义程序执行过程中可能遇到的问题， 处理程序定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。<br>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p><p><strong>1. 案例分析</strong></p><div class="note success flat"><p>案例分析：创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> UpdateDataNoCondition()</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;aabbel&#x27;</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 调用存储过程</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> UpdateDataNoCondition();</span><br><span class="line">ERROR <span class="number">1048</span> (<span class="number">23000</span>): <span class="keyword">Column</span> <span class="string">&#x27;email&#x27;</span> cannot be <span class="keyword">null</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@x</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@x</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑，不再向下继续执行。</p><p><strong>2. 定义条件</strong></p><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个错误名字和指定的错误条件关联起来。这个名字可以随后被用在定义处理程序的DECLARE HANDLER 语句中。</p><p>定义条件使用DECLARE语句，语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 错误名称 <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> 错误码（或错误条件）</span><br></pre></td></tr></table></figure><p>错误码的说明：</p><ul><li>MySQL_error_code 和sqlstate_value 都可以表示MySQL的错误。<ul><li>MySQL_error_code是数值类型错误代码。</li><li>sqlstate_value是长度为5的字符串类型错误代码。</li></ul></li><li>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。</li><li>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value。</li></ul><div class="note success flat"><p>举例1：定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#使用MySQL_error_code</span><br><span class="line"><span class="keyword">DECLARE</span> Field_Not_Be_NULL <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1048</span>;</span><br><span class="line"></span><br><span class="line">#使用sqlstate_value</span><br><span class="line"><span class="keyword">DECLARE</span> Field_Not_Be_NULL <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;23000&#x27;</span>;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：定义”ERROR 1148(42000)”错误，名称为command_not_allowed。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#使用MySQL_error_code</span><br><span class="line"><span class="keyword">DECLARE</span> command_not_allowed <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1148</span>;</span><br><span class="line"></span><br><span class="line">#使用sqlstate_value</span><br><span class="line"><span class="keyword">DECLARE</span> command_not_allowed <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;42000&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>3. 定义处理程序</strong></p><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 处理方式 HANDLER <span class="keyword">FOR</span> 错误类型 处理语句</span><br></pre></td></tr></table></figure><ul><li><code>处理方式</code>：处理方式有3个取值：CONTINUE、EXIT、UNDO。<ul><li><code>CONTINUE</code>：表示遇到错误不处理，继续执行。</li><li><code>EXIT</code>：表示遇到错误马上退出。</li><li><code>UNDO</code> ：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li></ul></li><li><code>错误类型（即条件）</code>可以有如下取值：<ul><li><code>SQLSTATE</code>‘字符串错误码’ ：表示长度为5的sqlstate_value类型的错误代码；</li><li><code>MySQL_error_code</code>：匹配数值类型错误代码；</li><li>错误名称：表示DECLARE … CONDITION定义的错误条件名称。</li><li><code>SQLWARNING</code>：匹配所有以01开头的SQLSTATE错误代码；</li><li><code>NOT FOUND</code> ：匹配所有以02开头的SQLSTATE错误代码；</li><li><code>SQLEXCEPTION</code> ：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li></ul></li><li>处理语句：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“ SET 变量 = 值”这样的简单语句，也可以是使用BEGIN … END 编写的复合语句。</li></ul><p>定义处理程序的几种方式，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#方法<span class="number">1</span>：捕获sqlstate_value</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;42S02&#x27;</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#方法<span class="number">2</span>：捕获mysql_error_value</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="number">1146</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#方法<span class="number">3</span>：先定义条件，再调用</span><br><span class="line"><span class="keyword">DECLARE</span> no_such_table <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1146</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> NO_SUCH_TABLE <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#方法<span class="number">4</span>：使用<span class="keyword">SQLWARNING</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#方法<span class="number">5</span>：使用<span class="keyword">NOT</span> FOUND</span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;NO_SUCH_TABLE&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#方法<span class="number">6</span>：使用<span class="keyword">SQLEXCEPTION</span></span><br><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLEXCEPTION</span> <span class="keyword">SET</span> <span class="variable">@info</span> <span class="operator">=</span> <span class="string">&#x27;ERROR&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>4. 案例解决</strong></p><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行CONTINUE操作，并且将@proc_value的值设置为-1。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> UpdateDataNoCondition()</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        #定义处理程序</span><br><span class="line">        <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="number">1048</span> <span class="keyword">SET</span> <span class="variable">@proc</span>_value <span class="operator">=</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;aabbel&#x27;</span> <span class="keyword">WHERE</span> last_name <span class="operator">=</span> <span class="string">&#x27;Abel&#x27;</span>;</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">调用过程：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> UpdateDataWithCondition();</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@x</span>,<span class="variable">@proc</span>_value;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@x</span> <span class="operator">|</span> <span class="variable">@proc</span>_value <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例：创建一个名称为“InsertDataWithCondition”的存储过程，代码如下。在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到sqlstate_value值为23000时，执行EXIT操作，并且将@proc_value的值设置为-1。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#准备工作</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> departments</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> atguigudb.`departments`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> departments</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uk_dept_name <span class="keyword">UNIQUE</span>(department_id);</span><br><span class="line"></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> InsertDataWithCondition()</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> duplicate_entry <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;23000&#x27;</span> ;</span><br><span class="line">        <span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> duplicate_entry <span class="keyword">SET</span> <span class="variable">@proc</span>_value <span class="operator">=</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments(department_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments(department_name) <span class="keyword">VALUES</span>(<span class="string">&#x27;测试&#x27;</span>);</span><br><span class="line">        <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 调用存储过程：</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> InsertDataWithCondition();</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@x</span>,<span class="variable">@proc</span>_value;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@x</span> <span class="operator">|</span> <span class="variable">@proc</span>_value <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">-1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：</p><ul><li><code>顺序结构：</code>程序从上往下依次执行</li><li><code>分支结构：</code>程序按条件进行选择执行，从两条或多条路径中选择一条执行</li><li><code>循环结构：</code>程序满足一定条件下，重复执行一组语句针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。</li><li><code>条件判断语句：</code>IF 语句和 CASE 语句</li><li><code>循环语句：</code>LOOP、WHILE 和 REPEAT 语句</li><li><code>跳转语句：</code>ITERATE 和 LEAVE 语句</li></ul><p><strong>1. 分支结构之 IF</strong></p><ul><li><p><strong>IF 语句的语法结构是：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF 表达式<span class="number">1</span> <span class="keyword">THEN</span> 操作<span class="number">1</span></span><br><span class="line">[ELSEIF 表达式<span class="number">2</span> <span class="keyword">THEN</span> 操作<span class="number">2</span>]……</span><br><span class="line">[<span class="keyword">ELSE</span> 操作N]</span><br><span class="line"><span class="keyword">END</span> IF</span><br></pre></td></tr></table></figure></li></ul><p>根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。</p><p>特点：<code>① 不同的表达式对应不同的操作 ② 使用在begin end中</code></p><div class="note success flat"><p>举例1</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF val <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is null&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is not null&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid1(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> emp_salary <span class="keyword">DOUBLE</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> hire_year <span class="keyword">DOUBLE</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> emp_salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date)<span class="operator">/</span><span class="number">365</span> <span class="keyword">INTO</span> hire_year</span><br><span class="line">    <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">    </span><br><span class="line">    IF emp_salary <span class="operator">&lt;</span> <span class="number">8000</span> <span class="keyword">AND</span> hire_year <span class="operator">&gt;</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例3：声明存储过程“update_salary_by_eid2”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元并且入职时间超过5年，就涨薪500元；否则就涨薪100元。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid2(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> emp_salary <span class="keyword">DOUBLE</span>;</span><br><span class="line">        <span class="keyword">DECLARE</span> hire_year <span class="keyword">DOUBLE</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> emp_salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        <span class="keyword">SELECT</span> DATEDIFF(CURDATE(),hire_date)<span class="operator">/</span><span class="number">365</span> <span class="keyword">INTO</span> hire_year</span><br><span class="line">        <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        </span><br><span class="line">        IF emp_salary <span class="operator">&lt;</span> <span class="number">8000</span> <span class="keyword">AND</span> hire_year <span class="operator">&gt;</span> <span class="number">5</span></span><br><span class="line">        <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span></span><br><span class="line">        emp_id;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例4：声明存储过程“update_salary_by_eid3”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资如果大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid3(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> emp_salary <span class="keyword">DOUBLE</span>;</span><br><span class="line">        <span class="keyword">DECLARE</span> bonus <span class="type">DECIMAL</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> emp_salary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        <span class="keyword">SELECT</span> commission_pct <span class="keyword">INTO</span> bonus <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        IF emp_salary <span class="operator">&lt;</span> <span class="number">9000</span></span><br><span class="line">        <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> <span class="number">9000</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        ELSEIF emp_salary <span class="operator">&lt;</span> <span class="number">10000</span> <span class="keyword">AND</span> bonus <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> commission_pct <span class="operator">=</span> <span class="number">0.01</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>2. 分支结构之 CASE</strong></p><p>CASE 语句的语法结构1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#情况一：类似于switch</span><br><span class="line"><span class="keyword">CASE</span> 表达式</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">WHEN</span> 值<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">case</span>]（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br></pre></td></tr></table></figure><p>CASE 语句的语法结构2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#情况二：类似于多重if</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">1</span> <span class="keyword">THEN</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">WHEN</span> 条件<span class="number">2</span> <span class="keyword">THEN</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">END</span> [<span class="keyword">case</span>]（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例1：使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> val</span><br><span class="line">　　　<span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 1&#x27;</span>;</span><br><span class="line">　　　<span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 2&#x27;</span>;</span><br><span class="line">　　　<span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is not 1 or 2&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：使用CASE流程控制语句的第2种格式，判断val是否为空、小于0、大于0或者等于0。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> val <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is null&#x27;</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> val <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is less than 0&#x27;</span>;</span><br><span class="line">    <span class="keyword">WHEN</span> val <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is greater than 0&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">&#x27;val is 0&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例3：声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</p></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)</span><br><span class="line">        BEGIN</span><br><span class="line">            DECLARE emp_sal DOUBLE;</span><br><span class="line">            DECLARE bonus DECIMAL(3,2);</span><br><span class="line">            SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;</span><br><span class="line">            SELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;</span><br><span class="line">            </span><br><span class="line">            CASE</span><br><span class="line">            WHEN emp_sal&lt;9000</span><br><span class="line">            THEN UPDATE employees SET salary=9000 WHERE employee_id = emp_id;</span><br><span class="line">            WHEN emp_sal&lt;10000 AND bonus IS NULL</span><br><span class="line">            THEN UPDATE employees SET commission_pct=0.01 WHERE employee_id = emp_id;</span><br><span class="line">            ELSE</span><br><span class="line">            UPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;</span><br><span class="line">            END CASE;</span><br><span class="line">    END //</span><br><span class="line">    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例4：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年，薪资涨300；如果是4年，薪资涨400；其他的涨薪500。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_by_eid5(<span class="keyword">IN</span> emp_id <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> emp_sal <span class="keyword">DOUBLE</span>;</span><br><span class="line">        <span class="keyword">DECLARE</span> hire_year <span class="keyword">DOUBLE</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> emp_sal <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SELECT</span> ROUND(DATEDIFF(CURDATE(),hire_date)<span class="operator">/</span><span class="number">365</span>) <span class="keyword">INTO</span> hire_year <span class="keyword">FROM</span> employees</span><br><span class="line">        <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">CASE</span> hire_year</span><br><span class="line">            <span class="keyword">WHEN</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">50</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">            <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">100</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">            <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">200</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">            <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">300</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">            <span class="keyword">WHEN</span> <span class="number">4</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">400</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        <span class="keyword">ELSE</span> <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary<span class="operator">=</span>salary<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> emp_id;</span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>3. 循环结构之LOOP</strong></p><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子句），跳出循环过程。<br>LOOP语句的基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[loop_label:] LOOP</span><br><span class="line">循环执行的语句</span><br><span class="line"><span class="keyword">END</span> LOOP [loop_label]</span><br></pre></td></tr></table></figure><blockquote><p>其中，loop_label表示LOOP语句的标注名称，该参数可以省略。</p></blockquote><div class="note success flat"><p>举例1：使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> id <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">add_loop:LOOP</span><br><span class="line">    <span class="keyword">SET</span> id <span class="operator">=</span> id <span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">    IF id <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">THEN</span> LEAVE add_loop;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">END</span> LOOP add_loop;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_loop(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> avg_salary <span class="keyword">DOUBLE</span>;</span><br><span class="line">        <span class="keyword">DECLARE</span> loop_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_salary <span class="keyword">FROM</span> employees;</span><br><span class="line">        label_loop:LOOP</span><br><span class="line">        IF avg_salary <span class="operator">&gt;=</span> <span class="number">12000</span> <span class="keyword">THEN</span> LEAVE label_loop;</span><br><span class="line">       <span class="keyword">END</span> IF;</span><br><span class="line">       </span><br><span class="line">            <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">1.1</span>;</span><br><span class="line">            <span class="keyword">SET</span> loop_count <span class="operator">=</span> loop_count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_salary <span class="keyword">FROM</span> employees;</span><br><span class="line">        <span class="keyword">END</span> LOOP label_loop;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SET</span> num <span class="operator">=</span> loop_count;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>4. 循环结构之WHILE</strong></p><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[while_label:] WHILE 循环条件 DO</span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">END</span> WHILE [while_label];</span><br></pre></td></tr></table></figure><p>while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。</p><div class="note success flat"><p>举例1：WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_while()</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        WHILE i <span class="operator">&lt;</span> <span class="number">10</span> DO</span><br><span class="line">            <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> WHILE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SELECT</span> i;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line"><span class="keyword">CALL</span> test_while();</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_while(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> avg_sal <span class="keyword">DOUBLE</span> ;</span><br><span class="line">    <span class="keyword">DECLARE</span> while_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_sal <span class="keyword">FROM</span> employees;</span><br><span class="line">    </span><br><span class="line">    WHILE avg_sal <span class="operator">&gt;</span> <span class="number">5000</span> DO</span><br><span class="line">        <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">0.9</span>;</span><br><span class="line">        <span class="keyword">SET</span> while_count <span class="operator">=</span> while_count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_sal <span class="keyword">FROM</span> employees;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SET</span> num <span class="operator">=</span> while_count;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>5. 循环结构之REPEAT</strong></p><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。<br>REPEAT语句的基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[repeat_label:] REPEAT</span><br><span class="line">　　　　循环体的语句</span><br><span class="line">UNTIL 结束循环的条件表达式</span><br><span class="line"><span class="keyword">END</span> REPEAT [repeat_label]</span><br></pre></td></tr></table></figure><p>repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直expr_condition为真。</p><div class="note success flat"><p>举例1：</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_repeat()</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    REPEAT</span><br><span class="line">            <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">   UNTIL i <span class="operator">&gt;=</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> i;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程<br>“update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> update_salary_repeat(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> avg_sal <span class="keyword">DOUBLE</span> ;</span><br><span class="line">        <span class="keyword">DECLARE</span> repeat_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_sal <span class="keyword">FROM</span> employees;</span><br><span class="line">    REPEAT</span><br><span class="line">    <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">1.15</span>;</span><br><span class="line">    <span class="keyword">SET</span> repeat_count <span class="operator">=</span> repeat_count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_sal <span class="keyword">FROM</span> employees;</span><br><span class="line">    UNTIL avg_sal <span class="operator">&gt;=</span> <span class="number">13000</span></span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    <span class="keyword">SET</span> num <span class="operator">=</span> repeat_count;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>6. 跳转语句之LEAVE语句</strong></p><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p><p>基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LEAVE 标记名</span><br></pre></td></tr></table></figure><p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p><div class="note success flat"><p>举例1：创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在<br>BEGIN…END中使用IF语句判断num参数的值。<br>如果num&lt;=0，则使用LEAVE语句退出BEGIN…END；<br>如果num=1，则查询“employees”表的平均薪资；<br>如果num=2，则查询“employees”表的最低薪资；<br>如果num&gt;2，则查询“employees”表的最高薪资。</p><p>IF语句结束后查询“employees”表的总人数。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> leave_begin(<span class="keyword">IN</span> num <span class="type">INT</span>)</span><br><span class="line">    begin_label: <span class="keyword">BEGIN</span></span><br><span class="line">        IF num<span class="operator">&lt;=</span><span class="number">0</span></span><br><span class="line">        <span class="keyword">THEN</span> LEAVE begin_label;</span><br><span class="line">        ELSEIF num<span class="operator">=</span><span class="number">1</span></span><br><span class="line">       <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line">        ELSEIF num<span class="operator">=</span><span class="number">2</span></span><br><span class="line">        <span class="keyword">THEN</span> <span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例2：当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于10000，并统计循环次数。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> leave_while(<span class="keyword">OUT</span> num <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">DECLARE</span> avg_sal <span class="keyword">DOUBLE</span>;#记录平均工资</span><br><span class="line"></span><br><span class="line">        <span class="keyword">DECLARE</span> while_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; #记录循环次数</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_sal <span class="keyword">FROM</span> employees; #① 初始化条件</span><br><span class="line">        </span><br><span class="line">        while_label:WHILE <span class="literal">TRUE</span> DO #② 循环条件</span><br><span class="line">            #③ 循环体</span><br><span class="line">            IF avg_sal <span class="operator">&lt;=</span> <span class="number">10000</span> <span class="keyword">THEN</span></span><br><span class="line">            LEAVE while_label;</span><br><span class="line">            <span class="keyword">END</span> IF;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">UPDATE</span> employees <span class="keyword">SET</span> salary <span class="operator">=</span> salary <span class="operator">*</span> <span class="number">0.9</span>;</span><br><span class="line">            <span class="keyword">SET</span> while_count <span class="operator">=</span> while_count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            #④ 迭代条件</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">INTO</span> avg_sal <span class="keyword">FROM</span> employees;</span><br><span class="line">            <span class="keyword">END</span> WHILE;</span><br><span class="line">            #赋值</span><br><span class="line">        <span class="keyword">SET</span> num <span class="operator">=</span> while_count;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>7. 跳转语句之ITERATE语句</strong></p><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。</p><p>语句基本格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ITERATE label</span><br></pre></td></tr></table></figure><p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p><div class="note success flat"><p>举例： 定义局部变量num，初始值为0。循环结构中执行num + 1操作。<br>如果num &lt; 10，则继续执行循环；<br>如果num &gt; 15，则退出循环结构；</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> test_iterate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    my_loop:LOOP</span><br><span class="line">    <span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    IF num <span class="operator">&lt;</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">THEN</span> ITERATE my_loop;</span><br><span class="line">    ELSEIF num <span class="operator">&gt;</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">THEN</span> LEAVE my_loop;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;https://jermyn.cn/&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> LOOP my_loop;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;  </span><br></pre></td></tr></table></figure><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录，但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是<code>随意定位到某一条记录</code>，并对记录的数据进行处理。<br>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。游标让 SQL 这种面向集合的语言有了面向过程开发的能力。<br>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标<code>充当了指针的作用</code>，我们可以通过操作游标来对数据行进行操作。<br>MySQL中游标可以在存储过程和函数中使用。<br>比如，我们查询了 employees 数据表中工资高于15000的员工都有哪些：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,salary <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">15000</span>;</span><br></pre></td></tr></table></figure><p>这里我们就可以通过游标来操作数据行，如图所示此时游标所在的行是“108”的记录，我们也可以在结果集上滚动游标，指向结果集中的任意一行。</p><p><strong>1. 使用游标步骤</strong></p><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p><p><code>第一步，声明游标</code></p><p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement;</span><br></pre></td></tr></table></figure><p>这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">IS</span> select_statement;</span><br></pre></td></tr></table></figure><p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是SELECT 语句，返回一个用于创建游标的结果集。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cur_emp <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,salary <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> cursor_fruit <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> f_name, f_price <span class="keyword">FROM</span> fruits ;</span><br></pre></td></tr></table></figure><p><code>第二步，打开游标</code></p><p>打开游标的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> cursor_name</span><br></pre></td></tr></table></figure><p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的逐条读取结果集中的记录做准备。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPEN</span>　cur_emp ;</span><br></pre></td></tr></table></figure><p><code>第三步，使用游标（从游标中取得数据）</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FETCH</span> cursor_name <span class="keyword">INTO</span> var_name [, var_name] ...</span><br></pre></td></tr></table></figure><p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。</p><blockquote><p>注意：var_name必须在声明游标之前就定义好。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FETCH</span>　cur_emp <span class="keyword">INTO</span> emp_id, emp_sal ;</span><br></pre></td></tr></table></figure><blockquote><p>注意：游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致，否则，在存储过程执行的时候，MySQL 会提示错误。</p></blockquote><p><code>第四步，关闭游标</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> cursor_name</span><br></pre></td></tr></table></figure><p>有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会占用系统资源，如果不及时关闭，游标会一直保持到存储过程结束，影响系统运行的效率。而关闭游标的操作，会释放游标占用的系统资源。</p><p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span>　cur_emp;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>举例:创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_count_by_limit_total_salary(<span class="keyword">IN</span> limit_total_salary <span class="keyword">DOUBLE</span>,<span class="keyword">OUT</span></span><br><span class="line">total_count <span class="type">INT</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> sum_salary <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; #记录累加的总工资</span><br><span class="line">        <span class="keyword">DECLARE</span> cursor_salary <span class="keyword">DOUBLE</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; #记录某一个工资值</span><br><span class="line">        <span class="keyword">DECLARE</span> emp_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; #记录循环个数</span><br><span class="line">       </span><br><span class="line">        #定义游标</span><br><span class="line">        <span class="keyword">DECLARE</span> emp_cursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line">        </span><br><span class="line">        #打开游标</span><br><span class="line">        <span class="keyword">OPEN</span> emp_cursor;</span><br><span class="line">        </span><br><span class="line">        REPEAT</span><br><span class="line">            #使用游标（从游标中获取数据）</span><br><span class="line">            <span class="keyword">FETCH</span> emp_cursor <span class="keyword">INTO</span> cursor_salary;</span><br><span class="line">            <span class="keyword">SET</span> sum_salary <span class="operator">=</span> sum_salary <span class="operator">+</span> cursor_salary;</span><br><span class="line">            <span class="keyword">SET</span> emp_count <span class="operator">=</span> emp_count <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        UNTIL sum_salary <span class="operator">&gt;=</span> limit_total_salary</span><br><span class="line">        <span class="keyword">END</span> REPEAT;</span><br><span class="line">        <span class="keyword">SET</span> total_count <span class="operator">=</span> emp_count;</span><br><span class="line">        #关闭游标</span><br><span class="line">        <span class="keyword">CLOSE</span> emp_cursor;</span><br><span class="line">    <span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><p>游标是 MySQL 的一个重要的功能，为逐条读取结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行加锁，这样在业务并发量大的时候，不仅会影响业务之间的效率，还会消耗系统资源，造成内存不足，这是因为游标是在内存中进行的处理。<br>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p><h1 id="第十七章-触发器"><a href="#第十七章-触发器" class="headerlink" title="第十七章 触发器"></a>第十七章 触发器</h1><p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如商品信息和库存信息分别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时在库存表中添加一条库存记录。</p><p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用事务包裹起来，确保这两个操作成为一个原子操作，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很容易忘记其中的一步，导致数据缺失。</p><p>这个时候，咱们可以使用触发器。你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作。这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p><h2 id="触发器概述"><a href="#触发器概述" class="headerlink" title="触发器概述"></a>触发器概述</h2><p>MySQL从5.0.2 版本开始支持触发器。MySQL的触发器和存储过程一样，都是嵌入到MySQL服务器的一段程序。</p><p>触发器是由事件来触发某个操作，这些事件包括INSERT 、UPDATE 、DELETE 事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生了，就会自动激发触发器执行相应的操作。</p><p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p><h2 id="触发器的创建"><a href="#触发器的创建" class="headerlink" title="触发器的创建"></a>触发器的创建</h2><p><strong>1. 创建触发器语法</strong><br>创建触发器的语法结构是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名称</span><br><span class="line">&#123;BEFORE<span class="operator">|</span>AFTER&#125; &#123;<span class="keyword">INSERT</span><span class="operator">|</span><span class="keyword">UPDATE</span><span class="operator">|</span><span class="keyword">DELETE</span>&#125; <span class="keyword">ON</span> 表名</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">触发器执行的语句块;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ul><li>表名：表示触发器监控的对象。</li><li><code>BEFORE|AFTER</code>：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。</li><li><code>INSERT|UPDATE|DELETE</code>：表示触发的事件。<ul><li>INSERT 表示插入记录时触发；</li><li>UPDATE 表示更新记录时触发；</li><li>DELETE 表示删除记录时触发。</li></ul></li><li><code>触发器执行的语句块</code>：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。</li></ul><p><strong>2. 代码举例</strong><br><div class="note success flat"><p>举例1</p></div><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1</span>、创建数据表：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_trigger (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  t_note <span class="type">VARCHAR</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_trigger_log (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  t_log <span class="type">VARCHAR</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、创建触发器：创建名称为before_insert的触发器，向test_trigger数据表插入数据之前，向test_trigger_log数据表中插入before_insert的日志信息。</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_insert</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> test_trigger</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger_log (t_log)</span><br><span class="line">  <span class="keyword">VALUES</span>(<span class="string">&#x27;before_insert&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、向test_trigger数据表中插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger (t_note) <span class="keyword">VALUES</span> (<span class="string">&#x27;测试 BEFORE INSERT 触发器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>、查看test_trigger_log数据表中的数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger_log;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> t_log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> before_insert <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><br><div class="note success flat"><p>举例2</p></div><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1</span>、创建名称为after_insert的触发器，向test_trigger数据表插入数据之后，向test_trigger_log数据表中插</span><br><span class="line">入after_insert的日志信息。</span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> after_insert</span><br><span class="line">AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> test_trigger</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger_log (t_log)</span><br><span class="line">  <span class="keyword">VALUES</span>(<span class="string">&#x27;after_insert&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、向test_trigger数据表中插入数据。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_trigger (t_note) <span class="keyword">VALUES</span> (<span class="string">&#x27;测试 AFTER INSERT 触发器&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="number">3.</span> 查看test_trigger_log数据表中的数据</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_trigger_log;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> t_log <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> before_insert <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> before_insert <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> after_insert <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><div class="note success flat"><p>举例3：定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，在INSERT之前检查将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，则报sqlstate_value为’HY000’的错误，从而使得添加失败。</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> salary_check_trigger</span><br><span class="line">BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> employees <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> mgrsalary <span class="keyword">DOUBLE</span>;</span><br><span class="line">  <span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> mgrsalary <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> employee_id <span class="operator">=</span> NEW.manager_id;</span><br><span class="line">  IF NEW.salary <span class="operator">&gt;</span> mgrsalary <span class="keyword">THEN</span></span><br><span class="line">    SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;HY000&#x27;</span> <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;薪资高于领导薪资错误&#x27;</span>;</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><blockquote><p>上面触发器声明过程中的NEW关键字代表INSERT添加语句的新记录。</p></blockquote><h2 id="查看、删除触发器"><a href="#查看、删除触发器" class="headerlink" title="查看、删除触发器"></a>查看、删除触发器</h2><p><strong>1. 查看触发器</strong><br>查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。<br><code>方式1：</code>查看当前数据库的所有触发器的定义<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS\G</span><br></pre></td></tr></table></figure><br><code>方式2：</code>查看当前数据库中某个触发器的定义<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名</span><br></pre></td></tr></table></figure><br><code>方式3：</code>从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.TRIGGERS;</span><br></pre></td></tr></table></figure></p><p><strong>2. 删除触发器</strong><br>触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> 触发器名称;</span><br></pre></td></tr></table></figure></p><h2 id="触发器的优缺点"><a href="#触发器的优缺点" class="headerlink" title="触发器的优缺点"></a>触发器的优缺点</h2><p><strong>优点</strong><br><code>1、触发器可以确保数据的完整性。</code><br>假设我们用进货单头表（demo.importhead）来保存进货单的总体信息，包括进货单编号、供货商编号、仓库编号、总计进货数量、总计进货金额和验收日期。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221121184424.png" alt=""><br>用进货单明细表（demo.importdetails）来保存进货商品的明细，包括进货单编号、商品编号、进货数<br>量、进货价格和进货金额。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/fac6/20221121184451.png" alt=""><br>每当我们录入、删除和修改一条进货单明细数据的时候，进货单明细表里的数据就会发生变动。这个时候，在进货单头表中的总计数量和总计金额就必须重新计算，否则，进货单头表中的总计数量和总计金额就不等于进货单明细表中数量合计和金额合计了，这就是数据不一致。<br>为了解决这个问题，我们就可以使用触发器，<code>规定每当进货单明细表有数据插入、修改和删除的操作时，自动触发 2 步操作：</code><br>1）重新计算进货单明细表中的数量合计和金额合计；<br>2）用第一步中计算出来的值更新进货单头表中的合计数量与合计金额。<br>这样一来，进货单头表中的合计数量与合计金额的值，就始终与进货单明细表中计算出来的合计数量与合计金额的值相同，数据就是一致的，不会互相矛盾。</p><p><code>2、触发器可以帮助我们记录操作日志。</code><br>利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。<br><code>3、触发器还可以用在操作数据前，对数据进行合法性检查。</code><br>比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏……这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。</p><p><strong>缺点</strong><br><code>1、触发器最大的一个问题就是可读性差。</code><br>因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能不受应用层的控制。这对系统维护是非常有挑战的。<br>比如，创建触发器用于修改会员储值操作。如果触发器中的操作出了问题，会导致会员储值金额更新失败。我用下面的代码演示一下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> demo.membermaster <span class="keyword">set</span> memberdeposit<span class="operator">=</span><span class="number">20</span> <span class="keyword">where</span> memberid <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">ERROR <span class="number">1054</span> (<span class="number">42</span>S22): <span class="literal">Unknown</span> <span class="keyword">column</span> <span class="string">&#x27;aa&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;field list&#x27;</span></span><br></pre></td></tr></table></figure><br>结果显示，系统提示错误，字段“aa”不存在。<br>这是因为，触发器中的数据插入操作多了一个字段，系统提示错误。可是，如果你不了解这个触发器，很可能会认为是更新语句本身的问题，或者是会员信息表的结构出了问题。说不定你还会给会员信息表添加一个叫“aa”的字段，试图解决这个问题，结果只能是白费力。</p><p><code>2、相关数据的变更，可能会导致触发器出错。</code><br>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。</p><p><strong>注意点</strong><br>注意，如果在子表中定义了外键约束，并且外键指定了ON UPDATE/DELETE CASCADE/SET NULL子句，此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子表的UPDATE和DELETE语句定义的触发器并不会被激活。<br>例如：基于子表员工表（t_employee）的DELETE语句定义了触发器t1，而子表的部门编号（did）字段定义了外键约束引用了父表部门表（t_department）的主键列部门编号（did），并且该外键加了“ON DELETE SET NULL”子句，那么如果此时删除父表部门表（t_department）在子表员工表（t_employee）有匹配记录的部门记录时，会引起子表员工表（t_employee）匹配记录的部门编号（did）修改为NULL，但是此时不会激活触发器t1。只有直接对子表员工表（t_employee）执行DELETE语句时才会激活触发器t1。</p>]]></content>
    
    
    <summary type="html">本文为Mysql的基础学习笔记，仅作为学习的参考，文档资源来自尚硅谷，整理为博主，加入部分自己的理解，在此感谢尚硅谷无私分享大量的学习资源。</summary>
    
    
    
    <category term="Mysql" scheme="https://www.jermyn.cn/categories/Mysql/"/>
    
    
    <category term="Mysql" scheme="https://www.jermyn.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java高级编程</title>
    <link href="https://www.jermyn.cn/posts/9a8a.html"/>
    <id>https://www.jermyn.cn/posts/9a8a.html</id>
    <published>2022-10-02T14:38:36.000Z</published>
    <updated>2023-05-28T15:04:33.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-多线程"><a href="#第一章-多线程" class="headerlink" title="第一章 多线程"></a>第一章 多线程</h1><h2 id="基本概念-程序、进程、线程"><a href="#基本概念-程序、进程、线程" class="headerlink" title="基本概念:程序、进程、线程"></a>基本概念:程序、进程、线程</h2><ol><li><p><strong>程序(program)：</strong>程序是为完成<strong>特定任务</strong>、用<strong>某种语言</strong>编写的一组指令的<strong>集合</strong>。即指一段静态的代码，静态对象。</p></li><li><p><strong>进程(process)：</strong>进程是程序的<strong>一次</strong>执行过程，或是正在运行的一个程序。是一个<strong>动态</strong>的过程：有它自身的<strong>产生、存在和消亡</strong>的过程。——生命周期如：</p><ul><li>运行中的QQ，运行中的MP3播放器</li><li>程序是静态的，进程是动态的</li><li>进程作为资源分配的单位，<strong>系统在运行时会为<em>每个进程</em>分配<em>不同</em>的内存区域</strong></li></ul></li><li><p><strong>线程(thread):</strong>，进程可进一步细化为线程，是一个程序内部的<strong>一条</strong>执行路径。</p><ul><li>若一个进程<strong>同一时间</strong>并行执行<strong>多个线程</strong>，就是支持<strong>多线程的</strong></li><li>线程作为调度和执行的单位，每个线程拥有<strong>独立</strong>的运行栈和程序计数器(pc)，线程切换的开销小</li><li>一个进程中的多个线程<strong>共享相同的内存单元/内存地址空间</strong>它们从同一<strong>堆</strong>中分配对象，可以访问相同的<strong>变量和对象</strong>。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来<strong>安全的隐患</strong>。</li></ul></li></ol><ul><li><p><strong>单核CPU和多核CPU的理解</strong></p><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程 的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费 才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以 把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费）。但是因为CPU时 间单元特别短，因此感觉不出来。</li><li>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</li><li>一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc() 垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。<blockquote><p>个人理解为：单核就是一个cpu在一段时间可以处理多个线程，在一个单位的时间只能处理一个事情，它把多个线程按照某种顺序来执行，所以在一段时间内就是处理了多个线程，所以说是假的多线程。<br>第三点可以理解为：一个main主线程里面可以有其他的线程，例如main方法里面调用别的方法，当内部这个方法执行完毕后就会有gc() 来回收，当然不可以让main主线程来做这个事情，应为main主线程还有其他的线程要做。在main内部的方法执行的时候可能出现异常，这个异常当然不可让main以及main内部产生这个异常的方法来处理，这时就有一个异常处理的线程来工作，所以一个java.exe 至少会有3个线程工作。</p></blockquote></li></ul></li><li><p><strong>并行与并发</strong></p><ul><li>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li><li>并发：一个CPU(采用时间片)<strong>同时</strong>执行多个任务。比如：秒杀、多个人做同一件事</li></ul></li></ul><ul><li><strong>使用多线程的优点</strong></li></ul><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li><li>提高计算机系统CPU的利用率</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li></ol><h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><ol><li><p>Java语言的JVM允许程序运行<strong>多个</strong>线程，它通过java.lang.Thread类来体现。</p></li><li><p>Thread类的特性:</p><ul><li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常 把run()方法的主体称为线程体</li><li>通过该Thread对象的<strong>start()方法来启动</strong>这个线程，而非直接调用run()</li></ul></li><li><p>Thread类的构造器</p><ul><li>Thread()：创建新的Thread对象</li><li>Thread(String threadname)：创建线程并指定线程实例名</li><li>Thread(Runnable target)：指定创建线程的目标对象，它实现了Runnable接口中的run方法</li><li>Thread(Runnable target, String name)：创建新的Thread对象</li></ul></li></ol><ul><li><strong>API中创建线程的两种方式</strong><br>JDK1.5之前创建新执行线程有两种方法：①继承Thread类的方式；②实现Runnable接口的方式；</li></ul><div class="tabs" id="方式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#方式-1">方式一：继承Thread类</button></li><li class="tab"><button type="button" data-href="#方式-2">方式二：实现Runnable接口</button></li><li class="tab"><button type="button" data-href="#方式-3">选择</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="方式-1"><ol><li>定义子类继承Thread类。</li><li>子类中重写Thread类中的run方法。</li><li>创建Thread子类对象，即创建了线程对象。</li><li>调用线程对象start方法：启动线程，调用run方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Declare a class to be a subclass of Thread</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvenNumber</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvenNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Override the run method of class Thread.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; number; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i + <span class="string">&quot; is a even number&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.Build an instance of the subclass</span></span><br><span class="line">        <span class="type">EvenNumber</span> <span class="variable">n</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvenNumber</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. This instance can  be allocated and started</span></span><br><span class="line">        n.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// This code will be executed in the main method</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n.number; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i + <span class="string">&quot; is a even number&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>           <div class='content'>           <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">main:<span class="number">0</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">0</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">2</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">4</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">6</span> is a even number</span><br><span class="line">Thread-<span class="number">0</span>:<span class="number">8</span> is a even number</span><br><span class="line">main:<span class="number">2</span> is a even number</span><br><span class="line">main:<span class="number">4</span> is a even number</span><br><span class="line">main:<span class="number">6</span> is a even number</span><br><span class="line">main:<span class="number">8</span> is a even number</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>           </div>         </details></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方式-2"><ol><li>定义子类，实现Runnable接口。</li><li>子类中重写Runnable接口中的run方法。</li><li>通过Thread类含参构造器创建线程对象。</li><li>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。</li><li>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Create a thread is to declare a class that implements the Runnable interface.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeRun</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="type">long</span> minPrime;</span><br><span class="line"></span><br><span class="line">    PrimeRun(<span class="type">long</span> minPrime) &#123;</span><br><span class="line">        <span class="built_in">this</span>.minPrime = minPrime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.This class then implements the run method.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Compute primes larger than minPrime</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3. Create an instance of PrimeRun class</span></span><br><span class="line">        <span class="type">PrimeRun</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrimeRun</span>(<span class="number">143</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// When you create a thread put the instance as arguments and start it</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(p).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="方式-3"><ol><li>避免了单继承的局限性</li><li>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ul><li><strong>Thread类的有关方法</strong></li></ul><ol><li>start():启动当前线程；调用当前线程的run()</li><li>run(): 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</li><li>currentThread():静态方法，返回执行当前代码的线程</li><li>getName():获取当前线程的名字</li><li>setName():设置当前线程的名字</li><li>yield():释放当前cpu的执行权。(通俗讲就是：停止后重新分配)</li><li>join():在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。(通俗讲就是：插队)</li><li>stop():已过时。当执行此方法时，强制结束当前线程。</li><li>sleep(long millitime):让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。(通俗讲就是：暂停多少毫秒)</li><li>isAlive():判断当前线程是否存活</li></ol><ul><li><strong>线程的优先级</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAX_PRIORITY：<span class="number">10</span></span><br><span class="line">MIN _PRIORITY：<span class="number">1</span></span><br><span class="line">NORM_PRIORITY：<span class="number">5</span></span><br></pre></td></tr></table></figure></li></ul><ol><li>涉及的方法<br>getPriority() ：返回线程优先值<br>setPriority(int newPriority) ：改变线程的优先级</li><li>说明<ul><li>线程创建时继承父线程的优先级</li><li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</li></ul></li></ol><ul><li><strong>Java中的线程分为两类</strong></li></ul><ol><li>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。</li><li>守护线程是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。</li><li>Java垃圾回收就是一个典型的守护线程。</li><li>若JVM中都是守护线程，当前JVM将退出。</li></ol><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ul><li><strong>JDK中用Thread.State类定义了线程的几种状态</strong><br>要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类 及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态：<ul><li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源</li><li>运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线 程的操作和功能</li><li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</li><li>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束<div class="tip "><p><strong>点击下方图片查看Thread.State源码，Ctrl+F 搜索”public enum State”查看状态</strong></p></div></li></ul></li></ul><blockquote><p>注意：只有处于NEW状态的线程可以调用start()方法，处于其他状态的线程都不可以调用start()方法，否则将触发IllegalThreadStateException异常</p></blockquote><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><p>通过Java可以创建多个线程，用户在处理多线程问题时，必须注意这样一个问题:当两个或多个线程同时访问同一个变量，并且一个线程需要修改这个变量时，应对这样的问题做出处理，否则可能发生混乱。例如，一个工资管理负责人正在修改雇员的工资表，而一些雇员正在领取工资，如果允许这样做,必然会出现混乱。因此，工资管理负责人正在修改工资表时(包括他喝杯茶休息一会儿(),不允许任何雇员领取工资，也就是说，这些雇员必须等待。</p><ul><li><strong>Java对于多线程的安全问题提供了专业的解决方式：同步机制</strong></li></ul><ol><li>同步代码块<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">// 需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>synchronized还可以放在方法声明中，表示整个方法为同步方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span> <span class="params">(String name)</span>&#123;</span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>共享数据：多个线程<strong>共同</strong>操作的变量。<br>同步监视器:俗称”锁”。任何一个类的<strong>对象</strong>，都可以充当锁。<br>要求：多个线程必须要共用同一把锁。</p></blockquote></li></ol><div class="note success flat"><p>模拟火车站售票程序，开启三个窗口售票。</p></div><div class="tabs" id="windows"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#windows-1">继承的方式处理此问题</button></li><li class="tab"><button type="button" data-href="#windows-2">实现的方式处理此问题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="windows-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line">        <span class="type">Window</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line">        <span class="type">Window</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="windows-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Window1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowTest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window1</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note success flat"><p>问题：卖票过程中，出现了重票、错票 —&gt; 出现了线程的安全问题<br>问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。<br>如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他<br>线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</p></div><div class="tabs" id="synchronized"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#synchronized-1">1.使用同步代码块处理上方实现产生的线程不安全问题</button></li><li class="tab"><button type="button" data-href="#synchronized-2">2.使用同步代码块处理上方继承产生的线程不安全问题</button></li><li class="tab"><button type="button" data-href="#synchronized-3">3.使用同步方法处理上方实现产生的线程不安全问题</button></li><li class="tab"><button type="button" data-href="#synchronized-4">4.使用同步方法处理上方继承产生的线程不安全问题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="synchronized-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Windows01Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TicketWindows</span> <span class="variable">tw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tw);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tw);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tw);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketWindows</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot; 售票票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="synchronized-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TicketWindows02</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows02</span>();</span><br><span class="line">        <span class="type">TicketWindows02</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows02</span>();</span><br><span class="line">        <span class="type">TicketWindows02</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows02</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketWindows02</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (TicketWindows02.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName()</span><br><span class="line">                            + <span class="string">&quot; 售票票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="synchronized-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Windows03Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TicketWindows</span> <span class="variable">tw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tw);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tw);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(tw);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketWindows03</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">&quot; 售票票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="synchronized-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsTest04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TicketWindows04</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows04</span>();</span><br><span class="line">        <span class="type">TicketWindows04</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows04</span>();</span><br><span class="line">        <span class="type">TicketWindows04</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindows04</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketWindows04</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">&quot; 售票票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><strong>由于每次执行的结果都不一样，但是从执行结果来看已经解决了可能发生的重票和错票问题</strong><br><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">窗口<span class="number">1</span> 售票票号为：<span class="number">100</span></span><br><span class="line">窗口<span class="number">1</span> 售票票号为：<span class="number">99</span></span><br><span class="line">窗口<span class="number">1</span> 售票票号为：<span class="number">98</span></span><br><span class="line">窗口<span class="number">1</span> 售票票号为：<span class="number">97</span></span><br><span class="line">窗口<span class="number">1</span> 售票票号为：<span class="number">96</span></span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">窗口<span class="number">3</span> 售票票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span> 售票票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span> 售票票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span> 售票票号为：<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><blockquote><p><strong>针对于线程的同步个人理解：</strong>线程同步解决了线程安全的问题，线程安全问题的产生就是可能多个线程同时处理了线程们共用的属性。解决的思路也就是让线程们公用的属性在某一时间只能被一个线程使用。用一个“锁”来形容就是，当某个线程处理公共的属性时，给这个属性添加“锁”，处理完了在打开，所以只有当某个线程处理完了，下一个线程才可以接手。当然刚处理完的线程和其他线程享有平等的处理属性的权力。</p><p><strong>针对于上方售票例子个人理解：</strong>我们把线程们公用的操作叫做共享数据，同步监视器可以是任意的对象，但有一个要求就是，多个线程公用一个锁即同一个对象，对于实现的方式来说，我们只做了一次的 TicketWindows tw = new TicketWindows(); 操作，所以synchronized(this),就指的是 tw。但是对于继承的方式来说我们做了三次的TicketWindows02 t1 = new TicketWindows02();<br>TicketWindows02 t2 = new TicketWindows02();TicketWindows02 t3 = new TicketWindows02();操作，每一次new都是一个新的对象。所以此时的 this 就分别是t1,t2,t3,不是同一个对象，所以不可以用 this ，这是就引入了，Class.class,我们目前没有学过这个东西，只需要知道类也是对象。且Class.class只生成一次。另外对于synchronized大括号包裹的范围不可以多包，也不可以少包裹，少包很好解释就是没有包裹的就不会被同步，这对于我们来说是肯定不可以发生的，多包的话有时候很难发现，例如上方1.使用同步代码块处理上方实现产生的线程不安全问题第29行代码while(true)，如果第30行在第29行上面。这就会产生问题。运行会发现，一直只是一个窗口在处理票，不会有其他的窗口参与。这其实也很好解释，如果synchronized同步了while(true),就说明，开始时某一个线程抢得执行权，然后一直都是这个线程内部在死循环，直接这个线程内部把票给处理完了，其他得线程根本进不来，所以就产生了这种的现象。</p></blockquote><hr><ul><li><strong>解决单例设计模式懒汉式线程不安全问题</strong><div class="tabs" id="singleton"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#singleton-1">同步代码块</button></li><li class="tab"><button type="button" data-href="#singleton-2">同步方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="singleton-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="singleton-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>个人理解：上面的同步代码块实现解决懒汉式方式一效率相较方式二稍差些，可以举例：例如很多人都想去商店买商品，如果此时商品只有一个，但很多人都要买，就需要每个人都去商店询问是否还有商品，如果此时在门口放个牌子说明东西售罄，则后来者就不需要每个人都进店询问了。方式二就是类似，如果new过一次实例则instance一定 != null,故里面的就不需要每次都new都分配内存空间。如果某个线程第一次判断instance==null，就需要进去new，则方式二对于后来的线程则可以不用进去new。</p></blockquote></li></ul><hr><ul><li><p><strong>同步机制中的锁</strong></p><ul><li><strong>同步锁机制：</strong>对于并发工作，你需要某种方式来防止两个任务访问相同的资源（其实就是共享资源竞争）。 防止这种冲突的方法 就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须 锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁 之时，另一个任务就可以锁定并使用它了。</li><li><strong>synchronized的锁是什么？</strong></li></ul><ol><li><strong>任意对象</strong>都可以作为同步锁。所有对象都自动含有单一的锁（监视器）。</li><li>同步方法的锁：静态方法（类名.class）、非静态方法（this）</li><li>同步代码块：自己指定，很多时候也是指定为<strong>this或类名.class</strong></li></ol><ul><li><strong>注意：</strong></li></ul><ol><li>必须确保使用<strong>同一个资源的多个线程</strong>共用一把锁，这个非常重要，否则就无法保证共享资源的安全</li><li>一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方 法共用同一把锁（this），同步代码块（指定需谨慎）</li></ol></li><li><p><strong>同步的范围</strong></p></li></ul><ol><li>如何找问题，即代码是否存在线程安全？（非常重要）<br>明确哪些代码是多线程运行的代码<br>明确多个线程是否有共享数据<br>明确多线程运行代码中是否有多条语句操作共享数据</li><li>如何解决呢？（非常重要）<br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其 他线程不可以参与执行。即所有操作共享数据的这些语句都要放在同步范围中</li><li>切记：<br>范围太小：没锁住所有有安全问题的代码<br>范围太大：没发挥多线程的功能。</li></ol><ul><li><strong>释放锁的操作</strong></li></ul><ol><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、 该方法的继续执行。</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束。</li><li>当前线程在同步代码块、同步方法中执行了线程对象的wait()方法，当前线 程暂停，并释放锁。</li></ol><ul><li><strong>不会释放锁的操作</strong></li></ul><ol><li>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。应尽量避免使用suspend()和resume()来控制线程</li></ol><hr><ul><li><p><strong>线程的死锁问题</strong></p><ul><li><p><strong>死锁：</strong></p><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li></ul></li><li><p><strong>解决办法：</strong></p><ul><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步<div class="note success flat"><p>死锁的示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul></li></ul><hr><ul><li><p><strong>锁</strong></p><ul><li>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过<strong>显式定义同步锁对象</strong>来实现同步。同步锁使用Lock对象充当。</li><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的 工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象 加锁，线程开始访问共享资源之前应<strong>先获得Lock对象</strong>。</li><li>ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以 <strong>显式加锁、释放锁</strong>。<div class="note success flat"><p>使用锁来解决线程安全问题</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(lock);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(lock);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(lock);</span><br><span class="line"></span><br><span class="line">        thread1.setName(<span class="string">&quot;线程一&quot;</span>);</span><br><span class="line">        thread2.setName(<span class="string">&quot;线程二&quot;</span>);</span><br><span class="line">        thread3.setName(<span class="string">&quot;线程三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + num);</span><br><span class="line">                    num--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">线程二:<span class="number">200</span></span><br><span class="line">线程二:<span class="number">199</span></span><br><span class="line">线程二:<span class="number">198</span></span><br><span class="line">线程二:<span class="number">197</span></span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">线程一:<span class="number">5</span></span><br><span class="line">线程一:<span class="number">4</span></span><br><span class="line">线程一:<span class="number">3</span></span><br><span class="line">线程一:<span class="number">2</span></span><br><span class="line">线程一:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li><li><p><strong>synchronized与Lock的对比</strong></p></li></ul><ol><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是 隐式锁，出了作用域<strong>自动释放</strong></li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li></ol><h2 id="线程间的通信问题"><a href="#线程间的通信问题" class="headerlink" title="线程间的通信问题"></a>线程间的通信问题</h2><div class="note success flat"><p>问题引入：使用两个线程打印 1-100。线程1, 线程2 交替打印</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommunicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Communication</span> <span class="variable">communication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Communication</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(communication);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(communication);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程一:&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程二:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Communication</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">                notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (number &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    number++;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + number);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">线程一:<span class="number">1</span></span><br><span class="line">线程二:<span class="number">2</span></span><br><span class="line">线程一:<span class="number">3</span></span><br><span class="line">线程二:<span class="number">4</span></span><br><span class="line">线程一:<span class="number">5</span></span><br><span class="line">线程二:<span class="number">6</span></span><br><span class="line">线程一:<span class="number">7</span></span><br><span class="line">线程二:<span class="number">8</span></span><br><span class="line">线程一:<span class="number">9</span></span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">线程二:<span class="number">94</span></span><br><span class="line">线程一:<span class="number">95</span></span><br><span class="line">线程二:<span class="number">96</span></span><br><span class="line">线程一:<span class="number">97</span></span><br><span class="line">线程二:<span class="number">98</span></span><br><span class="line">线程一:<span class="number">99</span></span><br><span class="line">线程二:<span class="number">100</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p>这样理解:刚开始两个线程某个抢得执行权,进来后查看没有wait的线程,所以执行下面代码.当执行到wait()后这个线程等待,释放锁,则另一个线程,也只有另外这个线程获得执行权.这个线程进来后发现有一个线程在wait,就执行notify代码,前一个线程就被释放了.这时前一个线程进入RUNABLE状态等待重新分配.此时已经进入的线程就执行run.到达wait后等待,且释放锁,这时被在RUNABLE的线程捕获进入,依次循环</p></blockquote><ul><li><p><strong>wait() 与 notify() 和 notifyAll()</strong></p><ul><li><strong>wait()：</strong>令当前线程<strong>挂起并放弃CPU、同步资源并等待</strong>，使别的线程可访问并修改共享资源，而当前线程<strong>排队</strong>等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后<strong>等待重新获得</strong>对监视器的所有权后才能继续执行。</li><li><strong>notify()：</strong>唤醒正在排队等待同步资源的线程中<strong>优先级最高者结束等待</strong></li><li><strong>notifyAll ()：</strong>唤醒正在排队等待资源的<strong>所有线程</strong>结束等待.<blockquote><p>注意：这三个方法只有在<strong>synchronized方法或synchronized代码块</strong>中才能使用，否则会报java.lang.IllegalMonitorStateException异常。因为这三个方法必须<strong>有锁对象调用</strong>，而任意对象都可以作为synchronized的同步锁，因此这三个方法只能在Object类中声明。</p></blockquote></li></ul></li><li><p><strong>wait()方法特点</strong></p></li></ul><ol><li>在当前线程中调用方法： 对象名.wait()</li><li>使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。</li><li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li><li>调用此方法后，当前线程将释放对象监控权    ，然后进入等待</li><li>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</li></ol><ul><li><strong>notify()/notifyAll()特点</strong></li></ul><ol><li>在当前线程中调用方法： 对象名.notify()</li><li>功能：唤醒等待该对象监控权的一个/所有线程。</li><li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li></ol><ul><li><strong>综合问题</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Clerk</span> <span class="variable">clerk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clerk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Producer</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(clerk);</span><br><span class="line">        p1.setName(<span class="string">&quot;生产者一:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(clerk);</span><br><span class="line">        c1.setName(<span class="string">&quot;消费者一:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clerk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">productCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produceProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            productCount++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">&quot;开始生产第:&quot;</span> + productCount + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            notify();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">consumeProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">&quot;开始消费第:&quot;</span> + productCount + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            productCount--;</span><br><span class="line">            notify();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot;开始生产....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">&quot;开始消费....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.consumeProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">生产者一:开始生产....</span><br><span class="line">消费者一:开始消费....</span><br><span class="line">生产者一:开始生产第:<span class="number">1</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">1</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">1</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">2</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">2</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">2</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">3</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">3</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">3</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">3</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">3</span>个产品</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">生产者一:开始生产第:<span class="number">20</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">20</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">20</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">20</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">20</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">20</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">20</span>个产品</span><br><span class="line">消费者一:开始消费第:<span class="number">20</span>个产品</span><br><span class="line">生产者一:开始生产第:<span class="number">20</span>个产品</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">130</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h2 id="JDK5-0新增线程创建方式"><a href="#JDK5-0新增线程创建方式" class="headerlink" title="JDK5.0新增线程创建方式"></a>JDK5.0新增线程创建方式</h2><ul><li><p><strong>新增方式一：实现Callable接口</strong></p><ul><li><p>与使用Runnable相比， Callable功能更强大些</p><ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ul></li><li><p>Future接口</p><ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是 否完成、获取结果等。</li><li>FutrueTask是Futrue接口的唯一的实现类</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul></li><li><p>创建的步骤：</p></li></ul><ol><li>创建一个实现Callable的实现类</li><li>实现call方法，将此线程需要执行的操作声明在call()中</li><li>创建Callable接口实现类的对象</li><li>将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</li><li>将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</li><li>获取Callable中call方法的返回值get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadCallable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3.创建Callable接口实现类的对象</span></span><br><span class="line">        <span class="type">SumOfEvenNumber</span> <span class="variable">sumOfEvenNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SumOfEvenNumber</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(sumOfEvenNumber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 6.获取Callable中call方法的返回值get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            System.out.println(<span class="string">&quot;sum=&quot;</span> + futureTask.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SumOfEvenNumber</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">sum=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><hr><ul><li><p><strong>新增方式二：使用线程池</strong><br><strong>背景：</strong>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程， 对性能影响很大。<br><strong>思路：</strong>提前创建好多个线程，放入线程池中，使用时直接获取，使用完 放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交 通工具。<br><strong>好处：</strong></p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li><li>…</li></ul></li></ul></li><li><p><strong>线程池相关API</strong></p></li><li>JDK 5.0起提供了线程池相关API：ExecutorService 和 Executors</li><li><p>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor</p><ul><li>void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable</li><li><T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般又来执行Callable</li><li>void shutdown() ：关闭连接池</li></ul></li><li><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><ul><li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</li><li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</li><li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li><li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ul></li><li><p>步骤</p></li></ul><ol><li>提供指定线程数量的线程池<br>设置线程池的属性</li><li>执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</li><li>关闭连接池<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 提供指定线程数量的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">EvenNum</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">OddNumber</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"><span class="comment">//        service.submit();</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvenNum</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                        <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OddNumber</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() +</span><br><span class="line">                        <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>:<span class="number">8</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">5</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">7</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>:<span class="number">9</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><h1 id="第二章-Java常用类"><a href="#第二章-Java常用类" class="headerlink" title="第二章 Java常用类"></a>第二章 Java常用类</h1><h2 id="字符串相关的类"><a href="#字符串相关的类" class="headerlink" title="字符串相关的类"></a>字符串相关的类</h2><ul><li><p><strong>String的特性</strong></p><ul><li>String类：代表字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。</li><li>String是一个<strong>final类</strong>，代表<strong>不可变</strong>的字符序列。</li><li>字符串是常量，用双引号引起来表示。它们的值在创建之后<strong>不能</strong>更改。</li><li>String对象的字符内容是存储在一个<strong>字符数组value[]</strong>中的。</li></ul></li><li><p><strong>String str1    = “abc”;与String str2 = new String(“abc”);的区别？</strong></p></li></ul><ol><li>字符串常量存储在 字符串常量池，目的是共享</li><li>字符串非常量对象存储在堆中。</li></ol><div class="note success flat"><p>例子</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*********************test01 start*********************&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string01</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string02</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        System.out.println(string01 == string02);</span><br><span class="line"></span><br><span class="line">        string01 = <span class="string">&quot;JERMYN&quot;</span>;</span><br><span class="line">        System.out.println(string01 == string02);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string03</span> <span class="operator">=</span> <span class="string">&quot;www.&quot;</span> + string02 + <span class="string">&quot;.cn&quot;</span>;</span><br><span class="line">        System.out.println(string03);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string04</span> <span class="operator">=</span> string03.replace(<span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;j&#x27;</span>);</span><br><span class="line">        System.out.println(string04);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************test01 end**********************&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n*********************test02 start*********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string03</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string04</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(string01 == string02);</span><br><span class="line">        System.out.println(string03 == string04);</span><br><span class="line"></span><br><span class="line">        System.out.println(string01 == string03);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************test02 end**********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n*********************test03 start*********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;.cn&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;Jermyn.cn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span> + <span class="string">&quot;.cn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> s1 + <span class="string">&quot;.cn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span> + s2;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s7</span> <span class="operator">=</span> s1 + s2;</span><br><span class="line"></span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">        System.out.println(s3 == s5);</span><br><span class="line">        System.out.println(s3 == s6);</span><br><span class="line">        System.out.println(s3 == s7);</span><br><span class="line">        System.out.println(s5 == s6);</span><br><span class="line">        System.out.println(s5 == s7);</span><br><span class="line">        System.out.println(s6 == s7);</span><br><span class="line"></span><br><span class="line">        System.out.println(s3 == s6.intern());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;**********************test03 end**********************&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">*********************test01 start*********************</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">www.Jermyn.cn</span><br><span class="line">www.jermyn.cn</span><br><span class="line">**********************test01 end**********************</span><br><span class="line"></span><br><span class="line">*********************test02 start*********************</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">**********************test02 end**********************</span><br><span class="line"></span><br><span class="line">*********************test03 start*********************</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">**********************test03 end**********************</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">3</span>, Passes: <span class="number">3</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p><strong>test01个人理解：</strong>字符串有一个特点就是不可变性，所以根据这个特性可以知道，只要时需要变化的字符串都是在方法区的字符串常量池里面重新生成一个新的目的字符串，例如 s1 = “abc” +123,其实不是改变 abc ，而是生成一个新的字符串”abc123”然后新的字符串的地址指向s1。严格按照字符串的不可变性可类比其他的字符串操作。且需要注意的是，字符串常量池是不会存储相同的字符串的。<br><strong>test02个人理解：</strong>我们可以知道，只要new一次就是一个新的对象。且new出来的对象都是存储在堆里面的。那么<br>像new String(“Jermyn”)的特点就是，一个new的对象，但是括号里面的Jermyn字符串是存储在字符串常量池里面，类比，如果new了两次，显然是两个对象，但是他们的内容都是指向常量池里面的数据。所以可以知道，如果是new了两个相同的对象，他们显然是不相等的，虽然面的数据都是指向常量池里里面的同一个数据。<br><strong>test03个人理解：</strong>只需要记住如果变量参与计算如：s1 += “abc”,此种都是在堆中生成的，相当于new。调用inten()方法返回的值在常量池</p></blockquote><h2 id="字符串相关的方法"><a href="#字符串相关的方法" class="headerlink" title="字符串相关的方法"></a>字符串相关的方法</h2><ul><li><strong>字符串相关的类：String常用方法1</strong></li></ul><ol><li>int length()：返回字符串的长度： return value.length</li><li>char charAt(int index)： 返回某索引处的字符return value[index]</li><li>boolean isEmpty()：判断是否是空字符串：return value.length == 0</li><li>String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</li><li>String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写</li><li>String trim()：返回字符串的副本，忽略前导空白和尾部空白</li><li>boolean equals(Object obj)：比较字符串的内容是否相同</li><li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</li><li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li><li>int compareTo(String anotherString)：比较两个字符串的大小</li><li>String    substring(int    beginIndex)： 返回一个新的字符串， 它是此字符串的从</li><li>beginIndex开始截取到最后的一个子字符串。</li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字 符串从beginIndex开始截取endIndex(不包含)的一个子字符串。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringMethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">string01</span> <span class="operator">=</span> <span class="string">&quot; Jermyn . cn &quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">string02</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 1. int length()：返回字符串的长度return value.length</span></span><br><span class="line">        System.out.println(string01.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//2.char charAt(int index)： 返回某索引处的字符return value[index]</span></span><br><span class="line">        System.out.println(string01.charAt(<span class="number">1</span>));</span><br><span class="line">        System.out.println(string01.charAt(<span class="number">11</span>));</span><br><span class="line"><span class="comment">//        System.out.println(string01.charAt(13));</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//3. boolean isEmpty()：判断是否是空字符串：return value.length == 0</span></span><br><span class="line">        System.out.println(string01.isEmpty());</span><br><span class="line">        System.out.println(string02.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//4.1 String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</span></span><br><span class="line">        <span class="comment">//4.2 String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写</span></span><br><span class="line">        System.out.println(string01.toLowerCase(Locale.ROOT));</span><br><span class="line">        System.out.println(string01.toUpperCase(Locale.ROOT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 5.String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line">        System.out.println(string01.trim());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//6.boolean equals(Object obj)：比较字符串的内容是否相同</span></span><br><span class="line">        System.out.println(string01.equals(string02));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 7.boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;JERMYN&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 8.String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;.cn&quot;</span>;</span><br><span class="line">        System.out.println(s1.concat(s2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 9.int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class="line">        <span class="comment">// 负数当前对象小，零对象相等，整数当前对象大</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Jermyn_&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;Jermy&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.compareTo(s2));</span><br><span class="line">        System.out.println(s1.compareTo(s3));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 10. String substring(intbeginIndex)： 返回一个新的字符串， 它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1.substring(<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 11.String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字 符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.substring(<span class="number">12</span>,<span class="number">18</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">13</span></span><br><span class="line">J</span><br><span class="line">n</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"> jermyn . cn </span><br><span class="line"> JERMYN . CN </span><br><span class="line">Jermyn . cn</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">Jermyn.cn</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">www.jermyn.cn</span><br><span class="line">jermyn</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">11</span>, Passes: <span class="number">11</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>字符串相关的类：String常用方法2</strong></li></ul><ol><li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</li><li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</li><li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li><li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列 时，返回 true</li><li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出 现处的索引，从指定的索引开始</li><li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后 一次出现处的索引，从指定的索引开始反向搜索注：indexOf和lastIndexOf方法如果未找到都是返回-1<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringMethodTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.endsWith(<span class="string">&quot;.cn&quot;</span>));</span><br><span class="line">        System.out.println(s1.endsWith(<span class="string">&quot;.com&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.startsWith(<span class="string">&quot;https://&quot;</span>));</span><br><span class="line">        System.out.println(s1.startsWith(<span class="string">&quot;http://&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.startsWith(<span class="string">&quot;www&quot;</span>, <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.boolean contains(CharSequence s)：当且仅当此字符串包含指定的char值序列时，返回true</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.contains(<span class="string">&quot;www.&quot;</span>));</span><br><span class="line">        System.out.println(s1.contains(<span class="string">&quot;Jermyn&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.1 int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.indexOf(<span class="string">&quot;www&quot;</span>));</span><br><span class="line">        System.out.println(s1.indexOf(<span class="string">&quot;wws&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.2 int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span></span><br><span class="line">        System.out.println(s1.indexOf(<span class="string">&quot;www&quot;</span>,<span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.lastIndexOf(<span class="string">&quot;.cn&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后 一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class="line">        <span class="comment">//注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://www.jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(s1.lastIndexOf(<span class="string">&quot;www&quot;</span>, <span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">7</span>, Passes: <span class="number">7</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>字符串相关的类：String常用方法3</strong></li></ul><ol><li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</li><li>String replace(CharSequence target, CharSequence replacement)： 使 用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</li><li>String    replaceAll(String    regex,    String    replacement) ： 使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</li><li>String    replaceFirst(String    regex,    String    replacement) ： 使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此 字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringMethodTest03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;https://jermyn.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有的 char 都替换</span></span><br><span class="line">        System.out.println(s1.replace(<span class="string">&quot;j&quot;</span>, <span class="string">&quot;J&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.1 String replace(CharSequence target, CharSequence replacement)： 使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line">        <span class="comment">// 所有的 char[] 都替换</span></span><br><span class="line">        System.out.println(s1.replace(<span class="string">&quot;jermyn&quot;</span>, <span class="string">&quot;JERMYN&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. String replaceAll(String regex, String replacement) ：使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;12hello34world5java7891mysql456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其实正则的表达大同小异，此处不在详细说明，如果需要的话可以查看博客《shell学习笔记》第14，15章</span></span><br><span class="line">        <span class="comment">// https://www.jermyn.cn/posts/d746.html 会有一定启发</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;,&quot;</span>).replaceAll(<span class="string">&quot;^,|,$&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">        <span class="comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成  boolean matches = str.matches(&quot;\\d+&quot;);  System.out.println(matches);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tel</span> <span class="operator">=</span> <span class="string">&quot;0571-4534289&quot;</span>;</span><br><span class="line">        <span class="comment">//判断这是否是一个杭州的固定电话</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> tel.matches(<span class="string">&quot;0571-\\d&#123;7,8&#125;&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello|world|java&quot;</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此 字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;hello.world.java&quot;</span>;</span><br><span class="line">        String[] strs2 = str2.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs2.length; i++) &#123;</span><br><span class="line">            System.out.println(strs2[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">https:<span class="comment">//Jermyn.cn</span></span><br><span class="line">https:<span class="comment">//JERMYN.cn</span></span><br><span class="line">hello,world,java,mysql</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">java</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">java</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">9</span>, Passes: <span class="number">9</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><hr><ul><li><p><strong>字符串相关的类：String与基本数据类型转换</strong></p><ul><li><p>字符串—&gt;基本数据类型、包装类</p><ul><li>Integer包装类的public static int parseInt(String s)：可以将由“数字”字 符组成的字符串转换为整型。</li><li>类似地,使用java.lang包中的Byte、Short、Long、Float、Double类调相应的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型</li></ul></li><li><p>基本数据类型、包装类—&gt;字符串</p><ul><li>调用String类的public String valueOf(int n)可将int型转换为字符串</li><li>相应的valueOf(byte b)、valueOf(long l)、valueOf(float f)、valueOf(doubled)、valueOf(boolean b)可由参数的相应类型到字符串的转换<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String --&gt; char[]调用String的toCharArray()</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Jermyn.cn&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            System.out.println(chars[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// char[] --&gt; String 调用String的构造器</span></span><br><span class="line">        <span class="type">char</span>[] arr = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;n&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">J</span><br><span class="line">e</span><br><span class="line">r</span><br><span class="line">m</span><br><span class="line">y</span><br><span class="line">n</span><br><span class="line">.</span><br><span class="line">c</span><br><span class="line">n</span><br><span class="line">jermyn</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">1</span>, Passes: <span class="number">1</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul></li></ul><hr><ul><li><p><strong>字符串相关的类：String与字节数组转换</strong></p><ul><li><p>字节数组—&gt;字符串</p><ul><li>String(byte[])：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</li><li>String(byte[]，int offset，int length) ：用指定的字节数组的一部分，即从数组起始位置offset开始取length个字节构造一个字符串对象。</li></ul></li><li><p>字符串—&gt;字节数组</p><ul><li>public byte[] getBytes() ：使用平台的默认字符集将此 String 编码为byte 序列，并将结果存储到一个新的 byte 数组中。</li><li>public byte[] getBytes(String charsetName) ：使用指定的字符集将 此 String 编码到 byte 序列，并将结果存储到新的 byte 数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String --&gt; byte[]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;域名：Jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用默认的字符集进行编码，跟自己的设置有关，这个是UTF-8</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定使用 GBK 进行编码</span></span><br><span class="line">        <span class="type">byte</span>[] gbks = str.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(gbks));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// byte[]--&gt;String</span></span><br><span class="line">        <span class="comment">// 编解码的字符类型一致</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(gbks, <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">[-<span class="number">27</span>, -<span class="number">97</span>, -<span class="number">97</span>, -<span class="number">27</span>, -<span class="number">112</span>, -<span class="number">115</span>, -<span class="number">17</span>, -<span class="number">68</span>, -<span class="number">102</span>, <span class="number">74</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">121</span>, <span class="number">110</span>]</span><br><span class="line">[-<span class="number">45</span>, -<span class="number">14</span>, -<span class="number">61</span>, -<span class="number">5</span>, -<span class="number">93</span>, -<span class="number">70</span>, <span class="number">74</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">121</span>, <span class="number">110</span>]</span><br><span class="line">域名：Jermyn</span><br><span class="line">域名：Jermyn</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">1</span>, Passes: <span class="number">1</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul></li></ul><hr><ul><li><p><strong>字符串相关的类：StringBuffer</strong></p><ul><li>java.lang.StringBuffer代表可变的字符序列，JDK1.0中声明，可以对字符串内容进行增删，此时<strong>不会产生新的对象</strong>。</li><li>很多方法与String相同。</li><li>作为参数传递时，方法内部可以改变值（可变）。</li><li>StringBuffer类不同于String，其对象必须使用构造器生成。有三个构造器：<ul><li>StringBuffer()：初始容量为<strong>16</strong>的字符串缓冲区</li><li>StringBuffer(int size)：构造指定容量的字符串缓冲区</li><li>StringBuffer(String str)：将内容初始化为指定字符串内容</li></ul></li></ul></li><li><p><strong>字符串相关的类：StringBuilder</strong><br>StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且 提供相关功能的方法也一样</p></li><li><p><strong>StringBuffer类的常用方法</strong></p></li></ul><ol><li>StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</li><li>StringBuffer delete(int start,int end)：删除指定位置的内容</li><li>StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</li><li>StringBuffer insert(int offset, xxx)：在指定位置插入xxx  StringBuffer reverse() ：把当前字符序列逆转</li><li>public int indexOf(String str)<br>public String substring(int start,int end)<br>public int length()<br>public char charAt(int n )<br>public void setCharAt(int n ,char ch)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferAndBuilderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer01</span> <span class="operator">=</span> stringBuffer.append(<span class="string">&quot;.cn&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer01);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. StringBuffer delete(int start,int end)：删除指定位置的内容</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;https://jermyn.cn&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer03</span> <span class="operator">=</span> stringBuffer02.delete(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(stringBuffer03);</span><br><span class="line">        System.out.println(stringBuffer02);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;https://jermyn.cn&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer05</span> <span class="operator">=</span> stringBuffer04.replace(<span class="number">8</span>, <span class="number">14</span>, <span class="string">&quot;JERMYN&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer05);</span><br><span class="line">        System.out.println(stringBuffer04);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;http://jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer01</span> <span class="operator">=</span> stringBuffer.insert(<span class="number">4</span>, <span class="string">&quot;s&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer01);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.StringBuffer reverse() ：把当前字符序列逆转</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;https://jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer.reverse());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;https://jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(stringBuffer.indexOf(<span class="string">&quot;jer&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(stringBuffer.substring(<span class="number">8</span>, <span class="number">14</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(stringBuffer.length());</span><br><span class="line"></span><br><span class="line">        System.out.println(stringBuffer.charAt(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        stringBuffer.setCharAt(<span class="number">16</span>,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        System.out.println(stringBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Jermyn.cn</span><br><span class="line">jermyn.cn</span><br><span class="line">jermyn.cn</span><br><span class="line">https:<span class="comment">//JERMYN.cn</span></span><br><span class="line">https:<span class="comment">//JERMYN.cn</span></span><br><span class="line">http:<span class="comment">//jermyn.cn</span></span><br><span class="line">https:<span class="comment">//jermyn.cn</span></span><br><span class="line">nc.nymrej<span class="comment">//:sptth</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">jermyn</span><br><span class="line"><span class="number">17</span></span><br><span class="line">:</span><br><span class="line">https:<span class="comment">//jermyn.c/</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">6</span>, Passes: <span class="number">6</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p>个人理解：关于String，StringBuffer，StringBuilder，开发中建议选择StringBuffer(int capacity),capacity为数组的长度，后两者较前者是可变的 string ，底层源码显示，他们都是初始定义一个长度为16字符的数组，长度增加时就扩容，每次扩容的长度为16+(value.leng&lt;&lt;1)+2,就是，原来长度的二倍再加2，同时将原来的数组copy到新扩容的数组中，由于有了copy的操作，所以才有了前面说的，选择StringBuffer指定String的长度，这个长度自己预估总共的append的次数，且预估最终的长度，这样就避免了多次扩容时的copy操作导致性能的下降。是否选择StringBuilder就看处理的数据是否需要线程的安全。需要则选择后者。</p></blockquote></li></ol><ul><li><strong>对比String、StringBuffer、StringBuilder</strong></li></ul><ol><li>String(JDK1.0)：不可变字符序列</li><li>StringBuffer(JDK1.0)：可变字符序列、效率低、线程安全</li><li>StringBuilder(JDK 5.0)：可变字符序列、效率高、线程不安全<br>注意：作为参数传递的话，方法内部String不会改变其值，StringBuffer和StringBuilder会改变其值。<br>三者之间的转化就调用目的类型的构造器。</li></ol><p><strong>运行效率测试</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationEfficiencyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始设置</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始对比</span></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">            buffer.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuffer的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">            builder.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuilder的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20000</span>; i++) &#123;</span><br><span class="line">            text = text + i;</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;String的执行时间：&quot;</span> + (endTime - startTime));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">StringBuffer的执行时间：<span class="number">4</span></span><br><span class="line">StringBuilder的执行时间：<span class="number">3</span></span><br><span class="line">String的执行时间：<span class="number">1257</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><blockquote><p>从高到低排列：StringBuilder &gt; StringBuffer &gt; String</p></blockquote><h2 id="JDK8之前日期时间API"><a href="#JDK8之前日期时间API" class="headerlink" title="JDK8之前日期时间API"></a>JDK8之前日期时间API</h2><ol><li>java.lang.System类<br>System类提供的public static long currentTimeMillis()用来返回当前时 间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</li><li><p>java.util.Date类<br>表示特定的瞬间，精确到毫秒</p><ul><li><p>构造器：</p><ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间。</li><li>Date(long date)</li></ul></li><li><p>常用方法</p><ul><li>getTime():返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li><li>toString():把此 Date 对象转换为以下形式的 String： dow mon dd  hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天(Sun, Mon, Tue,  Wed, Thu, Fri, Sat)，zzz是时间标准。</li><li>其它很多方法都过时了。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(date.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(date.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">14564116416L</span>);</span><br><span class="line">        System.out.println(date1.toString());</span><br><span class="line">        System.out.println(date1.getTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">35235325L</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">        <span class="comment">//情况一：强转</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(<span class="number">2343243242323L</span>);</span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">date5</span> <span class="operator">=</span> (java.sql.Date) date1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//情况二：</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">date3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(date2.getTime());</span><br><span class="line">        System.out.println(date3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">1665548341186</span></span><br><span class="line">Wed Oct <span class="number">12</span> <span class="number">12</span>:<span class="number">19</span>:<span class="number">01</span> CST <span class="number">2022</span></span><br><span class="line"><span class="number">1665548341188</span></span><br><span class="line">Thu Jun <span class="number">18</span> <span class="number">21</span>:<span class="number">35</span>:<span class="number">16</span> CST <span class="number">1970</span></span><br><span class="line"><span class="number">14564116416</span></span><br><span class="line"><span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">12</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">3</span>, Passes: <span class="number">3</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul></li></ol><hr><ul><li><p><strong>3. java.text.SimpleDateFormat类</strong></p><ul><li>Date类的API不易于国际化，大部分被废弃了，java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</li><li>它允许进行格式化：日期—&gt;文本、解析：文本—&gt;日期</li><li><p>格式化：</p><ul><li>SimpleDateFormat() ：默认的模式和语言环境创建对象</li><li>public SimpleDateFormat(String pattern)：该构造方法可以用参数pattern指定的格式创建一个对象，该对象调用：</li><li>public String format(Date date)：方法格式化时间对象date</li></ul></li><li><p>解析：</p><ul><li>public Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.格式化 日期 --&gt; 字符串</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// date 输出相当于调用了 toString 方法</span></span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认的格式化输出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> simpleDateFormat.format(date);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 解析 字符串 --&gt; 日期</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;22-10-12 下午5:12&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显然解析的过程，会与格式有关，所以避免报错，必须异常处理。</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> simpleDateFormat.parse(str);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 错误</span></span><br><span class="line"><span class="comment">//        String s = &quot;22-10-12 17:18&quot;;</span></span><br><span class="line"><span class="comment">//        Date parse1 = simpleDateFormat.parse(s);</span></span><br><span class="line"><span class="comment">//        System.out.println(parse1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> simpleDateFormat1.format(date);</span><br><span class="line">        System.out.println(format1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse1</span> <span class="operator">=</span> simpleDateFormat1.parse(format1);</span><br><span class="line">        System.out.println(parse1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse2</span> <span class="operator">=</span> simpleDateFormat1.parse(<span class="string">&quot;1999-11-15 00:00:00&quot;</span>);</span><br><span class="line">        System.out.println(parse2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Wed Oct <span class="number">12</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">27</span> CST <span class="number">2022</span></span><br><span class="line"><span class="number">22</span>-<span class="number">10</span>-<span class="number">12</span> 下午<span class="number">5</span>:<span class="number">48</span></span><br><span class="line">Wed Oct <span class="number">12</span> <span class="number">17</span>:<span class="number">12</span>:<span class="number">00</span> CST <span class="number">2022</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">05</span>:<span class="number">48</span>:<span class="number">27</span></span><br><span class="line">Wed Oct <span class="number">12</span> <span class="number">05</span>:<span class="number">48</span>:<span class="number">27</span> CST <span class="number">2022</span></span><br><span class="line">Mon Nov <span class="number">15</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1999</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p>个人理解：格式化过程：①调用SimpleDateFormat的构造器，生成实例，构造器的内容时格式。②调用SimpleDateFormat的format方法，格式化时间date。解析过程：调用parse方法。</p></blockquote></li></ul></li></ul></li></ul><div class="note success flat"><p>习题：字符串”2000-03-05”,转换为java.sql.Date</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthStr</span> <span class="operator">=</span> <span class="string">&quot;2000-03-05&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> simpleDateFormat.parse(birthStr);</span><br><span class="line"></span><br><span class="line">        java.sql.<span class="type">Date</span> <span class="variable">sqlDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.sql.Date(parse.getTime());</span><br><span class="line">        System.out.println(sqlDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">2000</span>-<span class="number">03</span>-<span class="number">05</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><ul><li><p><strong>4. java.util.Calendar(日历)类</strong></p><ul><li>Calendar是一个抽象基类，主用用于完成日期字段之间相互操作的功能。</li><li><p>获取Calendar实例的方法</p><ul><li>使用Calendar.getInstance()方法</li><li>调用它的子类GregorianCalendar的构造器。</li></ul></li><li><p>一个Calendar的实例是系统时间的抽象表示，通过get(int field)方法来取得想 要的时间信息。比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、 MINUTE、SECOND</p><ul><li>public void set(int field,int value)</li><li>public void add(int field,int amount)</li><li>public final Date getTime()</li><li>public final void setTime(Date date)<blockquote><p>注意:</p><ul><li>获取月份时：一月是0，二月是1，以此类推，12月是11</li><li>获取星期时：周日是1，周二是2 ， 。。。。周六是7</li></ul></blockquote></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.GregorianCalendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalenderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法一：Calendar 抽象类可以new，但有 getInstance() 方法</span></span><br><span class="line">    <span class="type">Calendar</span> <span class="variable">instanceCal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法二：子类GregorianCalendar</span></span><br><span class="line">    <span class="type">GregorianCalendar</span> <span class="variable">gregorianCalendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalender</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> instanceCal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(<span class="string">&quot;今天是这个月的第:&quot;</span> + days + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;今天是这年的第:&quot;</span> + instanceCal.get(Calendar.DAY_OF_YEAR) + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalender01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        instanceCal.set(Calendar.DAY_OF_MONTH, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是这个月的第:&quot;</span></span><br><span class="line">                + instanceCal.get(Calendar.DAY_OF_MONTH) + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalender02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是这个月的第：&quot;</span></span><br><span class="line">                + gregorianCalendar.get(Calendar.DAY_OF_MONTH) + <span class="string">&quot;天&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 今天加5天是这个月的第几天</span></span><br><span class="line">        gregorianCalendar.add(Calendar.DAY_OF_MONTH, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是这个月的第：&quot;</span></span><br><span class="line">                + gregorianCalendar.get(Calendar.DAY_OF_MONTH) + <span class="string">&quot;天&quot;</span>);</span><br><span class="line"></span><br><span class="line">        gregorianCalendar.add(Calendar.DAY_OF_MONTH, -<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是这个月的第：&quot;</span></span><br><span class="line">                + gregorianCalendar.get(Calendar.DAY_OF_MONTH) + <span class="string">&quot;天&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalender03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> instanceCal.getTime();</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        instanceCal.setTime(time);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是这个月的第：&quot;</span></span><br><span class="line">                + gregorianCalendar.get(Calendar.DAY_OF_MONTH) + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">今天是这个月的第:<span class="number">12</span>天</span><br><span class="line">今天是这年的第:<span class="number">285</span>天</span><br><span class="line">今天是这个月的第:<span class="number">15</span>天</span><br><span class="line">今天是这个月的第：<span class="number">12</span>天</span><br><span class="line">今天是这个月的第：<span class="number">17</span>天</span><br><span class="line">今天是这个月的第：<span class="number">2</span>天</span><br><span class="line">Sat Oct <span class="number">15</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">16</span> CST <span class="number">2022</span></span><br><span class="line">今天是这个月的第：<span class="number">2</span>天</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">4</span>, Passes: <span class="number">4</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="JDK8中新日期时间API"><a href="#JDK8中新日期时间API" class="headerlink" title="JDK8中新日期时间API"></a>JDK8中新日期时间API</h2><ul><li><p><strong>新日期时间API出现的背景</strong><br>JDK 1.0中包含了 一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：<br>可变性：像日期和时间这样的类应该是不可变的。<br>偏移性：Date中的年份是从1900开始的，而月份都从0开始。 格式化：格式化只对Date有用，Calendar则不行。<br>此外，它们也不是线程安全的；不能处理闰秒等。</p></li><li><p><strong>新时间日期API</strong></p><ul><li>第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。</li><li>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为Java创建优秀的API。 新的java.time 中包含了所有关于本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，  用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了日期时间和本地化的管理。</li></ul></li><li><p><strong>新时间日期API</strong><br>java.time – 包含值对象的基础包<br>java.time.chrono – 提供对不同的日历系统的访问<br>java.time.format – 格式化和解析时间和日期<br>java.time.temporal – 包括底层框架和扩展特性<br>java.time.zone – 包含时区支持的类</p></li></ul><ul><li><p><strong>LocalDate、LocalTime、LocalDateTime</strong><br>LocalDate、LocalTime、LocalDateTime 类是其中较重要的几个类，它们的实例 是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。 它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区 相关的信息。</p><ul><li>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。</li><li>LocalTime表示一个时间，而不是日期。</li><li>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.DayOfWeek;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Jdk8DateTimeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2000</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(date1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 偏移量</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2000</span> - <span class="number">1900</span>, <span class="number">3</span> - <span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now()/*now(ZoneId zone):静态方法，根据当前时间创建对象/指定时区的对象。</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">now1</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        System.out.println(now1);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalTime</span> <span class="variable">now2</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">        System.out.println(now2);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// of():静态方法，根据指定日期/时间创建对象</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">of</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2000</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        System.out.println(of);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getDayOfMonth()/getDayOfYear():获得月份天数(1-31) /获得年份天数(1-366)</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfMonth</span> <span class="operator">=</span> now.getDayOfMonth();</span><br><span class="line">        <span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> now.getDayOfWeek();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dayOfYear</span> <span class="operator">=</span> now.getDayOfYear();</span><br><span class="line">        <span class="type">int</span> <span class="variable">monthValue</span> <span class="operator">=</span> now.getMonthValue();</span><br><span class="line"></span><br><span class="line">        System.out.println(dayOfMonth);</span><br><span class="line">        System.out.println(dayOfYear);</span><br><span class="line">        System.out.println(dayOfWeek);</span><br><span class="line">        System.out.println(monthValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//withDayOfMonth()/withDayOfYear()/withMonth()/withYear():将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">now</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不可变性，修改不改变原来的数据</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate</span> <span class="operator">=</span> now.withMonth(<span class="number">5</span>);</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置年份</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">localDate1</span> <span class="operator">=</span> now.withYear(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(localDate1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// plusDays(), plusWeeks(),plusMonths(),plusYears(),plusHours()：</span></span><br><span class="line">        <span class="comment">// 向当前对象添加几天、几周、几个月、几年、几小时</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> now.plusDays(<span class="number">5</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// minusMonths() / minusWeeks()/minusDays()/minusYears()/minusHours()</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> now.minusDays(<span class="number">2</span>);</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Thu Apr <span class="number">05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">3900</span></span><br><span class="line">Sun Mar <span class="number">05</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2000</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span></span><br><span class="line"><span class="number">12</span>:<span class="number">32</span>:<span class="number">53.852</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-13T12:<span class="number">32</span>:<span class="number">53.852</span></span><br><span class="line"><span class="number">2000</span>-<span class="number">03</span>-05T00:<span class="number">00</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">286</span></span><br><span class="line">THURSDAY</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">05</span>-<span class="number">13</span></span><br><span class="line"><span class="number">2000</span>-<span class="number">10</span>-<span class="number">13</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-13T12:<span class="number">32</span>:<span class="number">53.855</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-18T12:<span class="number">32</span>:<span class="number">53.855</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-13T12:<span class="number">32</span>:<span class="number">53.856</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-11T12:<span class="number">32</span>:<span class="number">53.856</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">7</span>, Passes: <span class="number">7</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li><li><p><strong>瞬时：Instant</strong></p><ul><li>Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。</li><li>在处理时间和日期的时候，我们通常会想到年,月,日,时,分,秒。然而，这只是 时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连 续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机 处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中， 也是从1970年开始，但以毫秒为单位。</li><li>java.time包通过值类型Instant提供机器视图，不提供处理人类意义上的时间 单位。Instant表示时间线上的一点，而不需要任何上下文信息，例如，时区。 概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒 数。因为java.time包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。</li><li>(1ns =10-9s)    1秒=1000毫秒 =10^6微秒=10^9纳秒</li></ul></li><li><p><strong>相关方法</strong></p><ul><li>now()：静态方法，返回默认UTC时区的Instant类的对象</li><li>ofEpochMilli(long epochMilli)：静态方法，返回在1970-01-01 00:00:00基础上加上指定毫秒 数之后的Instant类的对象</li><li>atOffset(ZoneOffset offset)：结合即时的偏移来创建一个 OffsetDateTime</li><li>toEpochMilli()：返回1970-01-01 00:00:00到当前时间的毫秒数，即为时间戳<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.OffsetDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstantTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法，返回默认UTC时区的Instant类的对象</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结合即时的偏移来创建一个 OffsetDateTime</span></span><br><span class="line">        <span class="type">OffsetDateTime</span> <span class="variable">offsetDateTime</span> <span class="operator">=</span> now.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(offsetDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法，返回在1970-01-01 00:00:00基础上加上指定毫秒数之后的Instant类的对象</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> now.toEpochMilli();</span><br><span class="line">        System.out.println(l);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态方法，返回在1970-01-01 00:00:00基础上加上指定毫秒 数之后的Instant类的对象静态方法，返回在1970-01-01 00:00:00基础上加上指定毫秒 数之后的Instant类的对象</span></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.ofEpochMilli(<span class="number">1502643933071L</span>);</span><br><span class="line">        System.out.println(instant);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-13T05:<span class="number">13</span>:<span class="number">35.</span>378Z</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-13T13:<span class="number">13</span>:<span class="number">35.378</span>+08:<span class="number">00</span></span><br><span class="line"><span class="number">1665638015378</span></span><br><span class="line"><span class="number">2017</span>-08-13T17:<span class="number">05</span>:<span class="number">33.</span>071Z</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li><li><p><strong>格式化与解析日期或时间</strong><br>java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法：</p><ul><li>预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</li><li>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)</li><li>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</li></ul></li><li><p><strong>相关方法</strong><br>ofPattern(String pattern)：静态方法 ， 返回一个指定字符串格式的DateTimeFormatter<br>format(TemporalAccessor t)：格式化一个日期、时间，返回字符串<br>parse(CharSequence text)：将指定格式的字符序列解析为一个日期、时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.format.FormatStyle;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalAccessor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTimeFormatterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">instance</span> <span class="operator">=</span> DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">instance01</span> <span class="operator">=</span> DateTimeFormatter.ISO_LOCAL_DATE;</span><br><span class="line">    <span class="type">DateTimeFormatter</span> <span class="variable">instance02</span> <span class="operator">=</span> DateTimeFormatter.ISO_LOCAL_TIME;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式化：日期--&gt;字符串</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> instance.format(now);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析：字符串--&gt;日期</span></span><br><span class="line">        <span class="comment">// 方式一：</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;2022-10-13T13:35:33.634&quot;</span>);</span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse</span> <span class="operator">=</span> instance.parse(s);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地化相关的格式。如：ofLocalizedDateTime()</span></span><br><span class="line">        <span class="comment">// FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :</span></span><br><span class="line">        <span class="comment">// 适用于LocalDateTime</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(now);</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter01</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedTime(FormatStyle.LONG);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format1</span> <span class="operator">=</span> dateTimeFormatter01.format(now);</span><br><span class="line">        System.out.println(format1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line">        <span class="comment">// FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :</span></span><br><span class="line">        <span class="comment">// 适用于LocalDate</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter1</span> <span class="operator">=</span> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        <span class="type">String</span> <span class="variable">format2</span> <span class="operator">=</span> dateTimeFormatter1.format(now);</span><br><span class="line">        System.out.println(format2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式三：</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> dateTimeFormatter.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(format);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析</span></span><br><span class="line">        <span class="type">TemporalAccessor</span> <span class="variable">parse</span> <span class="operator">=</span> dateTimeFormatter.parse(format);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-13T16:<span class="number">04</span>:<span class="number">59.066</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-13T16:<span class="number">04</span>:<span class="number">59.066</span></span><br><span class="line">&#123;&#125;,ISO resolved to <span class="number">2022</span>-<span class="number">10</span>-13T13:<span class="number">35</span>:<span class="number">33.634</span></span><br><span class="line">下午<span class="number">4</span>:<span class="number">04</span></span><br><span class="line">下午<span class="number">04</span>时<span class="number">04</span>分<span class="number">59</span>秒</span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span> <span class="number">04</span>:<span class="number">04</span>:<span class="number">59</span></span><br><span class="line">&#123;NanoOfSecond=<span class="number">0</span>, MilliOfSecond=<span class="number">0</span>, MinuteOfHour=<span class="number">4</span>, SecondOfMinute=<span class="number">59</span>, HourOfAmPm=<span class="number">4</span>, MicroOfSecond=<span class="number">0</span>&#125;,ISO resolved to <span class="number">2022</span>-<span class="number">10</span>-<span class="number">13</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">3</span>, Passes: <span class="number">3</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h2 id="Java比较器"><a href="#Java比较器" class="headerlink" title="Java比较器"></a>Java比较器</h2><p>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。<br>Java实现对象排序的方式有两种：</p><ol><li>自然排序：java.lang.Comparable</li><li>定制排序：java.util.Comparator</li></ol><ul><li><strong>方式一：自然排序：java.lang.Comparable</strong><ul><li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称 为类的自然排序。</li><li>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即 通过 compareTo(Object obj) 方法的返回值来比较大小。如果当前对象this大 于形参对象obj，则返回正整数，如果当前对象this小于形参对象obj，则返回 负整数，如果当前对象this等于形参对象obj，则返回零。</li><li>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或 Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有 序集合中的元素，无需指定比较器。</li><li>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) == 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals  一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。</li><li>Comparable 的典型实现：(默认都是从小到大排列的)<ul><li>String：按照字符串中字符的Unicode值进行比较</li><li>Character：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Goods[] all = <span class="keyword">new</span> <span class="title class_">Goods</span>[<span class="number">4</span>];</span><br><span class="line">        all[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;《红楼梦》&quot;</span>, <span class="number">120</span>);</span><br><span class="line">        all[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;《水浒传》&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        all[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;《西游记》&quot;</span>, <span class="number">150</span>);</span><br><span class="line">        all[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&quot;《三国演义》&quot;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(all);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Goods</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Goods&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Goods) &#123;</span><br><span class="line">            <span class="type">Goods</span> <span class="variable">other</span> <span class="operator">=</span> (Goods) o;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.price &gt; other.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.price &lt; other.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">[Goods&#123;name=<span class="string">&#x27;《三国演义》&#x27;</span>, price=<span class="number">80.0</span>&#125;</span><br><span class="line">, Goods&#123;name=<span class="string">&#x27;《水浒传》&#x27;</span>, price=<span class="number">100.0</span>&#125;</span><br><span class="line">, Goods&#123;name=<span class="string">&#x27;《红楼梦》&#x27;</span>, price=<span class="number">120.0</span>&#125;</span><br><span class="line">, Goods&#123;name=<span class="string">&#x27;《西游记》&#x27;</span>, price=<span class="number">150.0</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul></li></ul><hr><ul><li><strong>方式二：定制排序：java.util.Comparator</strong><ul><li>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码， 或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排 序的比较。</li><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返 回正整数，则表示o1大于o2；如果返回0，表示等；返回负整数，表示 o1小于o2。</li><li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），  从而允许在排序顺序上实现精确控制。</li><li>还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComparatorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Good[] all = <span class="keyword">new</span> <span class="title class_">Good</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        all[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;《红楼梦》&quot;</span>, <span class="number">120</span>);</span><br><span class="line">        all[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;《水浒传》&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        all[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;《西游记》&quot;</span>, <span class="number">150</span>);</span><br><span class="line">        all[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">Good</span>(<span class="string">&quot;《三国演义》&quot;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(all, <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="type">Good</span> <span class="variable">g1</span> <span class="operator">=</span> (Good) o1;</span><br><span class="line">                <span class="type">Good</span> <span class="variable">g2</span> <span class="operator">=</span> (Good) o2;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> g1.getName().compareTo(g2.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(all));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Good</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Good</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Goods&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Good) &#123;</span><br><span class="line">            <span class="type">Good</span> <span class="variable">other</span> <span class="operator">=</span> (Good) o;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.price &gt; other.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.price &lt; other.price) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的数据类型不一致&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">[Goods&#123;name=<span class="string">&#x27;《三国演义》&#x27;</span>, price=<span class="number">80.0</span>&#125;</span><br><span class="line">, Goods&#123;name=<span class="string">&#x27;《水浒传》&#x27;</span>, price=<span class="number">100.0</span>&#125;</span><br><span class="line">, Goods&#123;name=<span class="string">&#x27;《红楼梦》&#x27;</span>, price=<span class="number">120.0</span>&#125;</span><br><span class="line">, Goods&#123;name=<span class="string">&#x27;《西游记》&#x27;</span>, price=<span class="number">150.0</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><ul><li>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</li><li>由于该类的构造器是<strong>private</strong>的，所以无法创建该类的对象，也就是无法实 例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</li><li><p>成员变量</p><ul><li>System类内部包含<strong>in、out和err</strong>三个成员变量，分别代表标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</li></ul></li><li><p>成员方法</p><ul><li>native long currentTimeMillis()：该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。</li><li>void exit(int status)：该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</li><li>void gc()：该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则 取决于系统中垃圾回收算法的实现以及系统执行时的情况。</li><li>String getProperty(String key)：该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">javaVersion</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.version&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;java的version:&quot;</span> + javaVersion);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">javaHome</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.home&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;java的home:&quot;</span> + javaHome);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;os的name:&quot;</span> + osName);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">osVersion</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.version&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;os的version:&quot;</span> + osVersion);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user的name:&quot;</span> + userName);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userHome</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.home&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user的home:&quot;</span> + userHome);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userDir</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user的dir:&quot;</span> + userDir);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">java的version:<span class="number">1.8</span><span class="number">.0_321</span></span><br><span class="line">java的home:D:\PATH-EN\java-path\jre</span><br><span class="line">os的name:Windows <span class="number">11</span></span><br><span class="line">os的version:<span class="number">10.0</span></span><br><span class="line">user的name:Administrator</span><br><span class="line">user的home:C:\Users\Administrator</span><br><span class="line">user的dir:D:\学习\Study\java\JavaSenior</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><ul><li><p><strong>求最大值、最小值和绝对值</strong></p></li><li><p><strong>求整运算</strong></p></li><li><p><strong>三角函数运算</strong></p></li><li><p><strong>指数运算</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;10 和 20 的较大值：&quot;</span> + Math.max(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;15.6 和 15 的较小值：&quot;</span> + Math.min(<span class="number">15.6</span>, <span class="number">15</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;-12 的绝对值：&quot;</span> + Math.abs(-<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字：&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;大于或等于 &quot;</span> + num + <span class="string">&quot; 的最小整数：&quot;</span> + Math.ceil(num));</span><br><span class="line">        System.out.println(<span class="string">&quot;小于或等于 &quot;</span> + num + <span class="string">&quot; 的最大整数：&quot;</span> + Math.floor(num));</span><br><span class="line">        System.out.println(<span class="string">&quot;将 &quot;</span> + num + <span class="string">&quot; 加上 0.5 之后最接近的整数：&quot;</span> + Math.round(num));</span><br><span class="line">        System.out.println(<span class="string">&quot;最接近 &quot;</span> + num + <span class="string">&quot; 的整数：&quot;</span> + Math.rint(num));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI / <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;0 度的余弦值：&quot;</span> + Math.cos(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1 的反正切值：&quot;</span> + Math.atan(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;120 度的弧度值：&quot;</span> + Math.toRadians(<span class="number">120.0</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;4 的立方值：&quot;</span> + Math.pow(<span class="number">4</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;16 的平方根：&quot;</span> + Math.sqrt(<span class="number">16</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;10 为底 2 的对数：&quot;</span> + Math.log10(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">10</span> 和 <span class="number">20</span> 的较大值：<span class="number">20</span></span><br><span class="line"><span class="number">15.6</span> 和 <span class="number">15</span> 的较小值：<span class="number">15.0</span></span><br><span class="line">-<span class="number">12</span> 的绝对值：<span class="number">12</span></span><br><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">10</span></span><br><span class="line">大于或等于 <span class="number">10.0</span> 的最小整数：<span class="number">10.0</span></span><br><span class="line">小于或等于 <span class="number">10.0</span> 的最大整数：<span class="number">10.0</span></span><br><span class="line">将 <span class="number">10.0</span> 加上 <span class="number">0.5</span> 之后最接近的整数：<span class="number">10</span></span><br><span class="line">最接近 <span class="number">10.0</span> 的整数：<span class="number">10.0</span></span><br><span class="line"><span class="number">90</span> 度的正弦值：<span class="number">1.0</span></span><br><span class="line"><span class="number">0</span> 度的余弦值：<span class="number">1.0</span></span><br><span class="line"><span class="number">1</span> 的反正切值：<span class="number">0.7853981633974483</span></span><br><span class="line"><span class="number">120</span> 度的弧度值：<span class="number">2.0943951023931953</span></span><br><span class="line"><span class="number">4</span> 的立方值：<span class="number">64.0</span></span><br><span class="line"><span class="number">16</span> 的平方根：<span class="number">4.0</span></span><br><span class="line"><span class="number">10</span> 为底 <span class="number">2</span> 的对数：<span class="number">0.3010299956639812</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="BigInteger与BigDecimal"><a href="#BigInteger与BigDecimal" class="headerlink" title="BigInteger与BigDecimal"></a>BigInteger与BigDecimal</h2><ul><li><p><strong>BigInteger类</strong></p><ul><li>Integer类作为int的包装类，能存储的最大整型值为231-1，Long类也是有限的， 最大为263-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类 都无能为力，更不用说进行运算了。</li><li>java.math包的BigInteger可以表示不可变的任意精度的整数。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。 另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、 位操作以及一些其他操作。</li><li>构造器<ul><li>BigInteger(String val)：根据字符串构建BigInteger对象</li></ul></li></ul></li><li><p><strong>BigDecimal类</strong></p><ul><li>一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到java.math.BigDecimal类。</li><li><p>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</p></li><li><p>构造器</p><ul><li>public BigDecimal(double val)</li><li>public BigDecimal(String val)</li></ul></li><li>常用方法<ul><li>public BigDecimal add(BigDecimal augend)</li><li>public BigDecimal subtract(BigDecimal subtrahend)</li><li>public BigDecimal multiply(BigDecimal multiplicand)</li><li>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</li></ul></li></ul></li></ul><h1 id="第三章-枚举类与注解"><a href="#第三章-枚举类与注解" class="headerlink" title="第三章 枚举类与注解"></a>第三章 枚举类与注解</h1><h2 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h2><ul><li>枚举类的实现<ul><li>JDK1.5之前需要自定义枚举类</li><li>JDK 1.5 新增的 enum 关键字用于定义枚举类</li></ul></li><li>若枚举只有一个对象, 则可以作为一种单例模式的实现方式。</li><li><p>枚举类的属性</p><ul><li>枚举类对象的属性<strong>不应允许被改动</strong>, 所以应该使用 <strong>private final</strong> 修饰</li><li>枚举类的使用 private final 修饰的属性应该在<strong>构造器</strong>中为其赋值</li><li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数</li></ul></li><li><p><strong>自定义枚举类定义步骤：</strong></p></li></ul><ol><li>声明对象的属性:private final修饰</li><li>私有化类的构造器,并给对象属性赋值</li><li>提供当前枚举类的多个对象：public static final的</li><li>其他诉求1：获取枚举类对象的属性</li><li>其他诉求2：提供toString()<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">summer</span> <span class="operator">=</span> Season.SUMMER;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">autumn</span> <span class="operator">=</span> Season.AUTUMN;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">winter</span> <span class="operator">=</span> Season.WINTER;</span><br><span class="line"></span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(summer);</span><br><span class="line">        System.out.println(autumn);</span><br><span class="line">        System.out.println(winter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String seasonName, String seasonDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求2：提供toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Season&#123;seasonName=<span class="string">&#x27;春天&#x27;</span>, seasonDesc=<span class="string">&#x27;春暖花开&#x27;</span>&#125;</span><br><span class="line">Season&#123;seasonName=<span class="string">&#x27;夏天&#x27;</span>, seasonDesc=<span class="string">&#x27;夏日炎炎&#x27;</span>&#125;</span><br><span class="line">Season&#123;seasonName=<span class="string">&#x27;秋天&#x27;</span>, seasonDesc=<span class="string">&#x27;秋高气爽&#x27;</span>&#125;</span><br><span class="line">Season&#123;seasonName=<span class="string">&#x27;冬天&#x27;</span>, seasonDesc=<span class="string">&#x27;冰天雪地&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>使用enum定义枚举类</strong></li><li><p>使用说明</p><ul><li>使用 enum 定义的枚举类默认继承了<strong>java.lang.Enum类</strong>，因此<strong>不能再继承其他类</strong></li><li>枚举类的<strong>构造器</strong>只能使用<strong>private</strong>权限修饰符</li><li>枚举类的所有实例必须在枚举类中显式列出 ((, 分隔 ; 结尾 。列出的实例系统会自动添加 public static final 修饰</li><li>必须在枚举类的<strong>第一行</strong>声明枚举类对象</li></ul></li><li><p>JDK 1.5 中可以在 switch 表达式中使用 Enum 定义的枚举类的对象作为表达式 , case 子句可以直接使用枚举值的名字 , 无需添加枚举类作为限定。</p></li><li><strong>使用enum定义枚举类定义步骤：</strong></li></ul><ol><li>提供当前枚举类的对象，多个对象之间用”,”隔开，末尾对象”;”结束</li><li>声明对象的属性:private final修饰</li><li>私有化类的构造器,并给对象属性赋值</li><li>其他诉求1：获取枚举类对象的属性</li><li>其他诉求2.如果需要的重写toString()方法，默认返回常量的名<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> Season.SPRING;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">summer</span> <span class="operator">=</span> Season.SUMMER;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">autumn</span> <span class="operator">=</span> Season.AUTUMN;</span><br><span class="line">        <span class="type">Season</span> <span class="variable">winter</span> <span class="operator">=</span> Season.WINTER;</span><br><span class="line"></span><br><span class="line">        System.out.println(spring);</span><br><span class="line">        System.out.println(summer);</span><br><span class="line">        System.out.println(autumn);</span><br><span class="line">        System.out.println(winter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Season</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.提供当前枚举类的对象，多个对象之间用&quot;,&quot;隔开，末尾对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String seasonName, String seasonDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="built_in">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.其他诉求1：获取枚举类对象的属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeasonDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.其他诉求2.如果需要的重写toString()方法，默认返回常量的名</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSeasonName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">春天</span><br><span class="line">夏天</span><br><span class="line">秋天</span><br><span class="line">冬天</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>Enum类的主要方法</strong><table>  <tr>      <td>1</td>      <td><span class='p green'>name</span></td>       <td>返回此枚举常量的名称，在其枚举声明中对其进行声明。 与此方法相比，大多数程序员应该优先考虑使用 toString() 方法，因为 toString 方法返回更加用户友好的名称。该方法主要设计用于特殊情形，其正确性取决于获取正确的名称，其名称不会随版本的改变而改变。</td>   </tr>  <tr>      <td>2</td>      <td><span class='p green'>ordinal</span></td>       <td>返回枚举常量的序数（它在枚举声明中的位置，其中初始常量序数为零）。 大多数程序员不会使用此方法。它被设计用于复杂的基于枚举的数据结构，比如 EnumSet 和 EnumMap。</td>   </tr>  <tr>      <td>3</td>      <td><span class='p red'>toString</span></td>       <td>返回枚举常量的名称，它包含在声明中。可以重写此方法，虽然一般来说没有必要。当存在更加“程序员友好的”字符串形式时，应该使用枚举类型重写此方法。 </td>   </tr>  <tr>      <td>4</td>      <td><span class='p green'>equals</span></td>       <td>当指定对象等于此枚举常量时，返回 true。</td>   </tr>  <tr>      <td>5</td>      <td><span class='p green'>hashCode</span></td>       <td>返回枚举常量的哈希码。 </td>   </tr>  <tr>      <td>6</td>      <td><span class='p green'>clone</span></td>       <td>抛出 CloneNotSupportedException。这可保证永远不会复制枚举，这对于保留其“单元素”状态是必需的。 </td>   </tr>  <tr>      <td>7</td>      <td><span class='p green'>compareTo</span></td>       <td>比较此枚举与指定对象的顺序。在该对象小于、等于或大于指定对象时，分别返回负整数、零或正整数。 枚举常量只能与相同枚举类型的其他枚举常量进行比较。该方法实现的自然顺序就是声明常量的顺序。 </td>   </tr>  <tr>      <td>8</td>      <td><span class='p green'>getDeclaringClass</span></td>       <td>返回与此枚举常量的枚举类型相对应的 Class 对象。当且仅当 e1.getDeclaringClass() == e2.getDeclaringClass() 时，两个枚举常量 e1 和 e2 的枚举类型才相同。（由该方法返回的值不同于由 Object.getClass() 方法返回的值，Object.getClass() 方法用于带有特定常量的类主体的枚举常量。） </td>   </tr>      <td>9</td>      <td><span class='p red'>valueOf</span></td>       <td>返回带指定名称的指定枚举类型的枚举常量。名称必须与在此类型中声明枚举常量所用的标识符完全匹配。（不允许使用额外的空白字符。） </td>   </tr></table></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumMethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// values(),返回枚举对象构成的数组</span></span><br><span class="line">        Thread.State[] values = Thread.State.values();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// toString(),调用枚举类的方法，可以再类中重写</span></span><br><span class="line">        <span class="keyword">for</span> (Thread.State state : values) &#123;</span><br><span class="line">            System.out.print(state.toString() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看是否有相应对象名，有则返回，无则抛异常</span></span><br><span class="line">        Thread.<span class="type">State</span> <span class="variable">runnable</span> <span class="operator">=</span> Thread.State.valueOf(<span class="string">&quot;RUNNABLE&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span> + runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">NEW,RUNNABLE,BLOCKED,WAITING,TIMED_WAITING,TERMINATED,</span><br><span class="line">RUNNABLE</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><hr><ul><li><strong>实现接口的枚举类</strong><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumFlagTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Flag</span> <span class="variable">aTrue</span> <span class="operator">=</span> Flag.TRUE;</span><br><span class="line">        <span class="type">Flag</span> <span class="variable">aFalse</span> <span class="operator">=</span> Flag.FALSE;</span><br><span class="line"></span><br><span class="line">        System.out.println(aTrue);</span><br><span class="line">        System.out.println(aFalse);</span><br><span class="line"></span><br><span class="line">        Flag[] values = Flag.values();</span><br><span class="line">        <span class="keyword">for</span> (Flag flag:values) &#123;</span><br><span class="line">            flag.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Flag</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&#123;</span><br><span class="line"></span><br><span class="line">    TRUE(<span class="string">&quot;TRUE&quot;</span>, <span class="string">&quot;is true&quot;</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;That is true!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    FALSE(<span class="string">&quot;FALSE&quot;</span>, <span class="string">&quot;is false&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;That is false!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String flagName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String flagDesc;</span><br><span class="line"></span><br><span class="line">    Flag(String flagName, String flagDesc) &#123;</span><br><span class="line">        <span class="built_in">this</span>.flagName = flagName;</span><br><span class="line">        <span class="built_in">this</span>.flagDesc = flagDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFlagName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flagName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFlagDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flagDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flagName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">TRUE</span><br><span class="line">FALSE</span><br><span class="line">That is <span class="literal">true</span>!</span><br><span class="line">That is <span class="literal">false</span>!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul><li><p><strong>注解 (Annotation) 概述</strong></p><ul><li>从 JDK 5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是Annotation(注解)</li><li>Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加 载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员 可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代 码分析工具、开发工具和部署工具可以通过这些补充信息进行验证 或者进行部署。</li><li>Annotation 可以像修饰符一样被使用, 可用于修饰包,类, 构造器, 方 法, 成员变量, 参数, 局部变量的声明, 这些信息被保存在 Annotation  的 “name=value” 对中。</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE/Android中注解占据了更重要的角色，例如 用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗 代码和XML配置等。</li><li>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以 上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的 Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上 可以说：框架 = 注解 + 反射 + 设计模式。</li><li>使用 Annotation 时要在其前面增加 @ 符号, 并把该Annotation 当成一个修饰符使用。用于修饰它支持的程序元素</li></ul></li><li><p><strong>自定义Annotation</strong></p><ul><li>定义新的Annotation 类型使用 <strong>@interface</strong> 关键字</li><li>自定义注解自动<strong>继承</strong>了<strong>java.lang.annotation.Annotation接口</strong></li><li>Annotation 的成员变量在 Annotation 定义中以<strong>无参数方法</strong>的形式来声明。其方法名和返回值定义了该成员的名字和类型。我们称为<strong>配置参数</strong>。类型只能 是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、 以上所有类型的数组。</li><li>可以在定义 Annotation 的成员变量时为其指定<strong>初始值</strong>, 指定成员变量的初始值可使用 <strong>default</strong> 关键字</li><li>如果只有一个参数成员，建议使用参数名为<strong>value</strong></li><li>如果定义的注解含有<strong>配置参数</strong>，那么使用时必须指定参数值，除非它有默认 值。格式是“参数名 = 参数值”，如果只有一个参数成员，且名称为value，可以省略“value=”</li><li>没有成员定义的 Annotation 称为标记; 包含成员变量的 Annotation 称为元数据Annotation<br>注意：自定义注解必须配上注解的信息处理流程才有意义。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;Jermyn&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> AnnotationTest.class;</span><br><span class="line">        <span class="type">Annotation</span> <span class="variable">a</span> <span class="operator">=</span> clazz.getAnnotation(MyAnnotation.class);</span><br><span class="line">        <span class="type">MyAnnotation</span> <span class="variable">m</span> <span class="operator">=</span> (MyAnnotation) a;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> m.value();</span><br><span class="line">        System.out.println(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="comment">// 1.注解声明为：@interface</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.内部定义成员，通常使用value表示</span></span><br><span class="line">    <span class="comment">// 3.可以指定成员的默认值，使用default定义</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;JERMYN&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Jermyn</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul><hr><ul><li><strong>JDK 中的元注解</strong></li><li>JDK 的元Annotation 用于修饰其他Annotation 定义</li><li><p>JDK5.0提供了4个标准的meta-annotation类型，分别是：</p><ul><li>Retention</li><li>Target</li><li>Documented</li><li>Inherited<blockquote><p>个人理解：元注解就是对现有注解进行解释说明的注解，类比 String name = “Jermyn”;String 是数据类型，name是数据的名称，”Jermyn”就是数据，String和name就是元数据，”Jermyn”就是数据。</p></blockquote></li></ul></li><li><p><strong>@Retention</strong></p></li><li>@Retention: 只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命 周期, @Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用 @Rentention 时必须为该 value 成员变量指定值:<ul><li>RetentionPolicy.SOURCE:在源文件中有效（即源文件保留），编译器直接丢弃这种策略的注释</li><li>RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 这是默认值</li><li>RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM 会保留注释。程序可以通过反射获取该注释。<br><strong><em>点击图片可以跳转源码</em></strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation1 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人理解：RetentionPolicy修饰注解的生命周期就是什么时候”死”，RetentionPolicy的三种状态，SOURCE，ClASS，RUNTIME，简单理解为以此来修饰的注解的生命周期，在某种状态时可以被使用，即再某种状态后会被抛弃，还可以理解为，如果修饰的注解在运行时还会起作用就不能用前两种修饰。如果在编译的时候起作用，运行时无关紧要就可以用CLASS修饰，所以如果想要反射时可以检测到，就用RUNTIME。</p></blockquote><hr><ul><li><p><strong>@Target:</strong><br>@Target: 用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素。 @Target 也包含一个名为 value 的成员变量。<br><strong><em>点击图片可以跳转源码</em></strong></p><ul><li><strong>value的取值</strong><br><strong><em>点击图片可以跳转源码</em></strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个人理解：元注解Target就是解释注解可以修饰那些元素，即写在那些元素的上面</p></blockquote><hr><ul><li><p><strong>其余两个元注解用较少</strong></p><ul><li><p><strong>@Documented:</strong> 用于指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。定义为Documented的注解必须设置Retention值为RUNTIME。</p></li><li><p><strong>@Inherited:</strong> 被它修饰的 Annotation 将具有继承性。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。</p><ul><li>比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解</li><li>实际应用中，使用较少</li></ul></li></ul></li></ul><h1 id="第四章-Java集合"><a href="#第四章-Java集合" class="headerlink" title="第四章 Java集合"></a>第四章 Java集合</h1><h2 id="Java集合框架概述"><a href="#Java集合框架概述" class="headerlink" title="Java集合框架概述"></a>Java集合框架概述</h2><ul><li><p>一方面， 面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。另一方面，使用Array存储对象方面具有一些弊 端，而Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。</p><ul><li><p>数组在内存存储方面的特点：</p><ul><li>数组初始化以后，长度就确定了。</li><li>数组声明的类型，就决定了进行元素初始化时的类型</li></ul></li><li><p>数组在存储数据方面的弊端：</p><ul><li>数组初始化以后，长度就不可变了，不便于扩展</li><li>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。同时无法直接获取存储元素的个数</li><li>数组存储的数据是有序的、可以重复的。——&gt;存储数据的特点单一</li></ul></li></ul></li><li><p>Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的 关联数组。</p></li><li><p><strong>Java 集合可分为 Collection 和 Map 两种体系</strong></p><ul><li><p>Collection接口：单列数据，定义了存取一组对象的方法的集合</p><ul><li>List：元素有序、可重复的集合</li><li>Set：元素无序、不可重复的集合</li></ul></li><li><p>Map接口：双列数据，保存具有映射关系“key-value对”的集合</p></li></ul></li></ul><h2 id="Collection接口方法"><a href="#Collection接口方法" class="headerlink" title="Collection接口方法"></a>Collection接口方法</h2><ul><li><strong>Collection 接口</strong><ul><li>Collection接口是List、Set和Queue接口的父接口，该接口里定义的方法既可用于操作Set集合，也可用于操作List和Queue集合。</li><li>JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。</li><li>在Java5之前，Java集合会丢失容器中所有对象的数据类型，把所有对象都当成Object类型处理从JDK5.0增加了泛型以后，Java 集合可以记住容器中对象的数据类型。</li></ul></li></ul><ul><li><strong>接口方法</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">collection01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add(Object e),添加的数据可以时任何类型</span></span><br><span class="line">        collection.add(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line"></span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// addAll()</span></span><br><span class="line">        collection01.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        collection01.addAll(collection);</span><br><span class="line"></span><br><span class="line">        System.out.println(collection.size());</span><br><span class="line">        System.out.println(collection01.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(collection01.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isEmptyTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断集合是否为空</span></span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="string">&quot;jermyn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearTest</span><span class="params">()</span> &#123;</span><br><span class="line">        collection.add(<span class="string">&quot;jermyn&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;https://jermyn.cn/&quot;</span>);</span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空集合</span></span><br><span class="line">        collection.clear();</span><br><span class="line">        System.out.println(collection.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">containsTest</span><span class="params">()</span> &#123;</span><br><span class="line">        collection.add(<span class="string">&quot;jermyn&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;https://jermyn.cn/&quot;</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JERMYN&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否包含obj</span></span><br><span class="line">        System.out.println(collection.contains(<span class="string">&quot;Jermyn&quot;</span>));</span><br><span class="line">        System.out.println(collection.contains(<span class="string">&quot;jermyn&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 结果为true，则比较的是内容，显然地址值是不同，实际是上是调用 equals 方法</span></span><br><span class="line">        <span class="comment">// 如果自己定义的类，然后比较的实例是否包含，类比String可知是调用 equals 方法，</span></span><br><span class="line">        <span class="comment">// 但是如果自己定义的类没有重写equals方法，就是调用Object的equals方法，而Object的equals</span></span><br><span class="line">        <span class="comment">// 方法就是&quot;==&quot;比较的是地址值，所以是false，如果重写equals则是true</span></span><br><span class="line">        System.out.println(collection.contains(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JERMYN&quot;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection01</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;jermyn&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://jermyn.cn/&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JERMYN&quot;</span>),</span><br><span class="line">                <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// containsAll：判断collection中的数据是否都在collection01 中</span></span><br><span class="line">        System.out.println(collection01.containsAll(collection));</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="string">&quot;jer&quot;</span>);</span><br><span class="line">        System.out.println(collection01.containsAll(collection));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object obj): 找到需要移除的数据返回true，反之返回false</span></span><br><span class="line">        System.out.println(collection.remove(<span class="string">&quot;jer&quot;</span>));</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        System.out.println(collection.remove(<span class="string">&quot;Jermyn&quot;</span>));</span><br><span class="line">        System.out.println(collection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// removeAll(Collection c):从当前集合中移除 c 中所有的元素</span></span><br><span class="line">        <span class="comment">// 类比 containsAll，不演示</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retainAll</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="number">789</span>);</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>);</span><br><span class="line">        coll.retainAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">equalsTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="number">123</span>);</span><br><span class="line">        coll1.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll1.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.equals(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashCodeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hashCode():返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(coll.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&#x27;j&#x27;</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JERMYN&quot;</span>));</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// toArray():将集合转换为数组，因为集合都是Object 的实例，所以集合就是Object[]</span></span><br><span class="line">        <span class="comment">// 集合--&gt;数组</span></span><br><span class="line">        Object[] objects = collection.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : objects) &#123;</span><br><span class="line">            System.out.print(obj + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数组--&gt;集合</span></span><br><span class="line">        <span class="comment">// 调用Arrays类的静态方法asList()</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> Arrays.asList(<span class="string">&quot;Jermyn&quot;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;JERMYN&quot;</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">iteratorTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// iterator():返回Iterator接口的实例，用于遍历集合元素。放在IteratorTest.java中测试</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="number">123</span>,Jermyn,j,JERMYN,Fri Oct <span class="number">14</span> <span class="number">19</span>:<span class="number">42</span>:<span class="number">14</span> CST <span class="number">2022</span>,</span><br><span class="line">[Jermyn, j, Fri Oct <span class="number">14</span> <span class="number">19</span>:<span class="number">42</span>:<span class="number">14</span> CST <span class="number">2022</span>, JERMYN]</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>, <span class="number">789</span>]</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">[Fri Oct <span class="number">14</span> <span class="number">19</span>:<span class="number">42</span>:<span class="number">14</span> CST <span class="number">2022</span>, Jermyn, c, <span class="number">123</span>, java.lang.Object@61e717c2]</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">[Jermyn, c, <span class="number">123</span>, java.lang.Object@1b9e1916]</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">[c, <span class="number">123</span>, java.lang.Object@1b9e1916]</span><br><span class="line"><span class="number">7639761</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h2 id="Iterator迭代器接口"><a href="#Iterator迭代器接口" class="headerlink" title="Iterator迭代器接口"></a>Iterator迭代器接口</h2><ul><li><p><strong>使用 Iterator 接口遍历集合元素</strong></p><ul><li>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元 素，而又不需暴露该对象的内部细节。迭代器模式，就是为<strong>容器</strong>而生。类似于“公 交车上的售票员”、“火车上的乘务员”、“空姐”。</li><li>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所 有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了 Iterator接口的对象。</li><li>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合。</li><li>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合 的第一个元素之前。</li></ul></li><li><p><strong>Iterator方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorTest</span> &#123;</span><br><span class="line">    <span class="comment">// iterator():返回Iterator接口的实例，用于遍历集合元素。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hasNextTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="number">456</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        collection.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式一：</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*******************方式一*******************&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        System.out.println(iterator.next());</span><br><span class="line">        <span class="comment">// 报错</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方式二：</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*******************方式二*******************&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator02</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; collection.size(); i++) &#123;</span><br><span class="line">            System.out.println(iterator02.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*******************方式三*******************&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator03</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator03.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator03.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        collection.add(<span class="number">123</span>);</span><br><span class="line">        collection.add(<span class="number">456</span>);</span><br><span class="line">        collection.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        collection.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除集合中的&quot;Tom&quot;</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;Tom&quot;</span>.equals(obj)) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator01</span> <span class="operator">=</span> collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator01.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator01.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">*******************方式一*******************</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Tom</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">*******************方式二*******************</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Tom</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">*******************方式三*******************</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Tom</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">*******************removeTest*******************</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p><strong>使用 foreach 循环遍历集合元素</strong></p><ul><li>Java 5.0 提供了 foreach 循环迭代访问 Collection和数组。</li><li>遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。</li><li>遍历集合的底层调用Iterator完成操作。</li><li>foreach还可以用来遍历数组。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 示例一</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 示例二</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line">        <span class="comment">//内部仍然调用了迭代器。</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj : coll)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Tom</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul><h2 id="Collection子接口之一：List接口"><a href="#Collection子接口之一：List接口" class="headerlink" title="Collection子接口之一：List接口"></a>Collection子接口之一：List接口</h2><ul><li><p><strong>List接口概述</strong></p><ul><li>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组</li><li>List集合类中元素有序、且可重复，集合中的每个元素都有其对应的顺序索引。</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据 序号存取容器中的元素。</li><li>JDK API中List接口的实现类常用的有：ArrayList、LinkedList和Vector。</li></ul></li><li><p><strong>List接口方法</strong></p><ul><li>List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。<ul><li>void add(int index, Object ele):在index位置插入ele元素</li><li>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</li><li>Object get(int index):获取指定index位置的元素</li><li>int indexOf(Object obj):返回obj在集合中首次出现的位置</li><li>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</li><li>Object remove(int index):移除指定index位置的元素，并返回此元素</li><li>Object set(int index, Object ele):设置指定index位置的元素为ele</li><li>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(<span class="number">123</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;***************************************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// add(index,element):在index之后插入element</span></span><br><span class="line">        arrayList.add(<span class="number">1</span>, <span class="string">&quot;JERMYN&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">integers</span> <span class="operator">=</span> Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// addAll(int index,Collection c):从index位置开始将c中的所有元素添加进来</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> arrayList.addAll(<span class="number">1</span>, integers);</span><br><span class="line"></span><br><span class="line">        System.out.println(arrayList.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get(int index):获取指定index位置的元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> arrayList.get(<span class="number">6</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(<span class="number">123</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="number">123</span>);</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int indexOf(Object obj):返回obj在集合中首次出现的位置,有返回index</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arrayList.indexOf(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有返回-1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arrayList.indexOf(<span class="string">&quot;JERMYN&quot;</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置,没有返回-1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index1</span> <span class="operator">=</span> arrayList.lastIndexOf(<span class="number">123</span>);</span><br><span class="line">        System.out.println(index1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Object remove(int index):移除指定index位置的元素，并返回此元素（重载了Collection的remove方法）</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">remove</span> <span class="operator">=</span> arrayList.remove(<span class="number">4</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove(Object o):Collection的remove删除指定元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">remove1</span> <span class="operator">=</span> arrayList.remove(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">set</span> <span class="operator">=</span> arrayList.set(<span class="number">1</span>, <span class="string">&quot;https://jermyn.cn&quot;</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">        arrayList.add(<span class="number">1</span>);</span><br><span class="line">        arrayList.add(<span class="number">13</span>);</span><br><span class="line">        arrayList.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> arrayList.subList(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        arrayList.add(<span class="number">123</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="number">123</span>);</span><br><span class="line">        arrayList.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        arrayList.add(<span class="number">1</span>);</span><br><span class="line">        arrayList.add(<span class="number">13</span>);</span><br><span class="line">        arrayList.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历方式一:Iterator迭代器方式</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> arrayList.iterator();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;方式一:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.print(iterator.next() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历方式二:增强for循环</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;方式二:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : arrayList) &#123;</span><br><span class="line">            System.out.print(o + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历方式三：普通for循环</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;方式三:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">            System.out.print(arrayList.get(i) + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">[<span class="number">123</span>, , Jermyn, Sat Oct <span class="number">15</span> <span class="number">18</span>:<span class="number">13</span>:<span class="number">24</span> CST <span class="number">2022</span>]</span><br><span class="line">***************************************</span><br><span class="line">[<span class="number">123</span>, JERMYN, , Jermyn, Sat Oct <span class="number">15</span> <span class="number">18</span>:<span class="number">13</span>:<span class="number">24</span> CST <span class="number">2022</span>]</span><br><span class="line"><span class="number">8</span></span><br><span class="line">Jermyn</span><br><span class="line">[<span class="number">123</span>, , Jermyn, <span class="number">123</span>, Sat Oct <span class="number">15</span> <span class="number">18</span>:<span class="number">13</span>:<span class="number">24</span> CST <span class="number">2022</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">[<span class="number">123</span>, , Jermyn, <span class="number">123</span>]</span><br><span class="line">[<span class="number">123</span>, , <span class="number">123</span>]</span><br><span class="line">[<span class="number">123</span>, https:<span class="comment">//jermyn.cn, 123]</span></span><br><span class="line">[<span class="number">123</span>, https:<span class="comment">//jermyn.cn, 123, 1, 13, 12]</span></span><br><span class="line">[<span class="number">123</span>, <span class="number">1</span>, <span class="number">13</span>]</span><br><span class="line">方式一:<span class="number">123</span>,,Jermyn,<span class="number">123</span>,Sat Oct <span class="number">15</span> <span class="number">18</span>:<span class="number">13</span>:<span class="number">24</span> CST <span class="number">2022</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,</span><br><span class="line">方式二:<span class="number">123</span>,,Jermyn,<span class="number">123</span>,Sat Oct <span class="number">15</span> <span class="number">18</span>:<span class="number">13</span>:<span class="number">24</span> CST <span class="number">2022</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,</span><br><span class="line">方式三:<span class="number">123</span>,,Jermyn,<span class="number">123</span>,Sat Oct <span class="number">15</span> <span class="number">18</span>:<span class="number">13</span>:<span class="number">24</span> CST <span class="number">2022</span>,<span class="number">1</span>,<span class="number">13</span>,<span class="number">12</span>,</span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note success flat"><p>小练习</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListExer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListRemove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        updateList(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateList</span><span class="params">(List list)</span> &#123;</span><br><span class="line">        list.remove(<span class="number">2</span>);</span><br><span class="line">        list.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul></li><li><p><strong>List实现类之一：ArrayList</strong></p></li><li>ArrayList 是 List 接口的典型实现类、主要实现类本质上，ArrayList是对象引用的一个”变长”数组</li><li><p>ArrayList的JDK1.8之前与之后的实现区别？</p><ul><li>JDK1.7：ArrayList像饿汉式，直接创建一个初始容量为10的数组</li><li>JDK1.8：ArrayList像懒汉式，一开始创建一个长度为0的数组，当添加第一个元 素时再创建一个始容量为10的数组</li></ul></li><li><p>Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不Vector 实例。 Arrays.asList(…)    返回值是一个固定长度的 List 集合</p></li></ul><hr><p class='p center logo large'>JDK1.7和JDK1.8的扩容过程</p><span class='p center small'>个人理解，有错误的请指教</span><blockquote><p><span class='p red'>JDK1.7的ArrayList的扩容：</span>底层是用数组存储Object类型的数组，声明为Object[] elementDate,创建当前<br>ArrayList list = new ArrayList 对象，使用new + 类的构造器创建。初始化当前的底层的数组， 数组的容量即initialCapacity=10，然后进行添加操作调用 add() 方法，添加的内容就是Object类型的数据，添加之前先确定数组的容量是否够，即是否能加进去，源码显示ensureCapacityInternal(size + 1),第一次执行add的话size就是 0。size的取值就是调用size(),这个方法返回就是add几个。前面的确认容量机制会判断add的是否大于底层初始的容量就是默认的10。如果底层数组够的话就不用扩容。一直就可以add，如果总长度大于10的话，就进行扩容，源码显示：grew(minCapacity)。此时的minCapacity就是底层数组长度+add的数组长度。扩容的操作是：先把minCapacity.length赋值给oldCapacity。然后创建新的长度(newCapacity)。这个新的长度为原来的1.5倍，源码显示为：oldCapacity+(oldCapacity &gt;&gt; 1),此时会执行几个判断①新扩容的是否小于刚拿来的minCapacity长度，小的话就直接把minCapacity的长度给newCapacity。②如果发现扩容1.5背还不能存储add的下一个数组，数组的长度都快到数组能够存储的最大长度(MAX_ARRAY_SIZE)了,这是就new一个数组新的数组长度，这个数组的长度使用hugeCapacity(minCapacity)来赋值，在这个方法中会判断是否是整形的能够声明的最大值。如果还不够用，就报错，这个Error叫做OutOfMemoryError。总的来说①②这两个情况很少出现，可以说几乎不会出现。仔细想就是一般不会有比整形最大值还大的数组长度了。接前面，扩充完之后就是需要将原来数组的内容copy给扩充1.5倍后的数组了。源码显示就是elementDate = Arrays.copyOf(elementDate newCapacity),至此数组的扩容就完成了。</p></blockquote><hr><blockquote><p><span class='p red'>提示：</span>在开发中，大概可以确定数组存储多少个元素。或者可以基本确定会add多少次到达多少元素的话，我们定义的时候就不要使用空参的构造器了(空参构造器默认数组长度为10)，我们使用带参的构造器，例如我预估数组长度或达到100的话就new ArrayList(100),这个100就是initialCapacity。目的是频繁的扩容会频繁的复制数组造成效率低。</p></blockquote><hr><blockquote><p><span class='p red'>JDK1.8的ArrayList的扩容：</span>开始时我们通过空参的构造器创建对象，1.8中并没有像1.7中直接new一个长度为10的数组，而是elementDate指向一个常量即：DEFAULTCAPACITY_EMPTY_ELEMENTDATA,这个常量的特点就是它等于{},即为空，也就是，new的时候没有直接生成数组，而是指向{}。这种方式显然比1.7的好，不用直接占用内存创建数组。那么在什么时候创建呢，就是在第一次执行add操作的时候。执行add操作的时候首先也是ensureCapacityInternal(size + 1)，显然时不够，因为没有容量。进入这个方法后，首先的操作就是判断elementDate是否等于{}即DEFAULTCAPACITY_EMPTY_ELEMENTDATA，显然第一次的时候是等于的。这时会给minCapacity复制源码显示：minCapacity = Math.max(DEFAULT_CAPACITY,minCapacity),这个DEFAULT_CAPACITY就是10。minCapacity就是0，这都是对于第一次来说。此时的minCapacity取最大的就是DEFAULT_CAPACITY即为10。下一步执行ensureExplicitCacity()方法将minCapacity传入。进入这个方法后会判断minCapacity的大小，如果比elementDate.length大，就执行grew(minCapacity),显然是比elementDate.length大的，因为第一add的时候elementDate.length为0。然后就进行扩容操作，进入grew()后，首先将oldCapacity赋值为elementDate.length即为0。newCapacity为oldCapacity+(oldCapacity &gt;&gt; 1)，所以newCapacity也是0（0扩大1.5倍还是0）。然后执行判断，newCapacity和minCapacity的大小，newCapacity显然小于minCapacity，因为前者为0，后者为10。此时把minCapacity赋值给newCapacity，则newCapacity为10。然后就给elementDate进行copy的操作，elementDate就从原来的{}变为Arrays.copyOf(elementDate newCapacity)。成为一个数组长度为10的数组。此时数组创建完成。如果扩容的话就从前面的步骤在执行一遍，有相应的判断来跳转。</p></blockquote><hr><blockquote><p><span class='p red'>JDK1.7和JDK1.8的最大区别就就是：</span>前者的第一次扩容是在数组长度大于10的时候，后者是在第一次add操作时。前者的第一次扩容是10到15，后者是0到10。</p></blockquote><hr><span class='p red'>JDK1.8的ArrayList的注释没有修改，沿用JDK1.7的，所以呢，你提交了，你就是JDK的源码贡献者！！</span><p><strong><em>点击图片阅读ArrayList.java源码</em></strong></p><hr><ul><li><p><strong>List实现类之二：LinkedList</strong></p><ul><li>对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高</li><li><p>新增方法：</p><ul><li>void addFirst(Object obj)</li><li>void addLast(Object obj)</li><li>Object getFirst()</li><li>Object getLast()</li><li>Object removeFirst()</li><li>Object removeLast()</li></ul></li><li><p>LinkedList：双向链表，内部没有声明数组，而是定义了Node类型的first和last用于记录首末元素。同时，定义内部类Node，作为LinkedList中保存数据的基 本结构。Node除了保存数据，还定义了两个变量：</p><ul><li>prev变量记录前一个元素的位置</li><li>next变量记录下一个元素的位置</li></ul></li></ul></li></ul><hr><p class='p center logo large'>LinkedList源码分析</p><span class='p center small'>个人理解，有错误的请指教</span><blockquote><p><span class='p red'>个人理解:</span>JDK1.7和JDK1.8LinkedList源码一样，也不涉及到扩容，在次只做底层的源码分析。LinkedList为双向链表，顾名思义就是两个方向，这个方向分别指向前一个后一个元素的地址值。LinkedList不像ArrayList是Object[] 存储，而是以一种Node存储。Node在源码中封装为内部类，只供在内部使用。Node的核心结构分为三部分。Node(Node<E> prev, E element, Node<E> next)，我们添加的数据就是E element。当我们new LinkedList后。会有一个变量叫first它指向我们创建链条的头一个即第一个元素。另外一个变量叫last它指向我们创建链条的最后元素。正常的添加是在last后添加，查找的话就是从first往后查找。当我们添加元素时（即执行add操作）。调用add里面的linkLast方法并把需要添加的元素e作为参数放进去。linkLast方法中。把当前链表的最后一个元素即last给Node 变量名为l。如果第一次的话last就是null。下一步新建一个Node，新建的Node的prev指向last，element就是添加的元素值。next指向null。这时我们刚new的Node就成了整个链表的最后一个元素。接下来做一个判断。①判断l是否时null。如果为null则说明之前时没有添加过元素的。②否则也是就之前添加过元素。就把刚才新建的Node指向l.next。这个l是刚才没有添加元素前原链表的next属性。对于原链表的last元素的next属性原来是null的。现在new完新Node，新的Node的next就成了null。至此LinkedList的添加操作就完成了。对于插入和删除方式和添加操作类似。</p></blockquote><hr><blockquote><p><span class='p red'>小结：</span>理解了LinkedList源码后，就很容易推出LinkedList的优点，就是插入和删除会更方便。插入的话只需要知道插入位置和插入位置下一个元素就可以，对于之前和之后的链表都不影响。不用像ArrayList每次插入删除频繁的前移或者后移。</p></blockquote><hr><p><strong><em>点击图片可以跳转源码</em></strong></p><hr><ul><li><strong>List 实现类之三：Vector</strong><ul><li>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于Vector是<strong>线程安全</strong>的。</li><li>在各种list中，最好把ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList；Vector总是比ArrayList慢，所以尽量避免使用。</li><li>新增方法：<ul><li>void addElement(Object obj)</li><li>void insertElementAt(Object obj,int index)</li><li>void setElementAt(Object obj,int index)</li><li>void removeElement(Object obj)</li><li>void removeAllElements()</li></ul></li></ul></li></ul><p class='p center logo large'>Vector源码分析</p><span class='p center small'>个人理解，有错误的请指教</span><blockquote><p><span class='p red'>Vector特点：</span>作为List接口的古老实现类；线程安全的，效率低。Vector和ArrayList源码相似，因为古老所以不建议使用了，一般都是用ArrayList，但是ArrayList线程不安，如果遇到线程安全的情况，就使用Collection class的synchronizedList返回一个线程安全的ArrayList；jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。不作具体的分析了。</p></blockquote><hr><h2 id="Collection子接口之二：Set接口"><a href="#Collection子接口之二：Set接口" class="headerlink" title="Collection子接口之二：Set接口"></a>Collection子接口之二：Set接口</h2><ul><li><p><strong>Set 接口概述</strong></p><ul><li>Set接口是Collection的子接口，set接口没有提供额外的方法</li><li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。</li><li>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals() 方法</li></ul></li><li><p><strong>Set实现类之一：HashSet</strong></p><ul><li>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</li><li>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除<br>性能。</li><li>HashSet 具有以下特点：<ul><li>不能保证元素的排列顺序</li><li>HashSet 不是线程安全的</li></ul></li><li><p>集合元素可以是 null</p></li><li><p>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相 等，并且两个对象的 equals() 方法返回值也相等。</p></li><li>对于存放在Set容器中的对象，对应的类一定要重写equals()和hashCode(Object  obj)方法，以实现对象相等规则。即：“相等的对象必须具有相等的散列码”。</li></ul></li><li><p><strong>重写 hashCode() 方法的基本原则</strong></p></li><li>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。</li><li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode()方法的返回值也应相等。</li><li><p>对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</p></li><li><p><strong>重写 equals() 方法的基本原则</strong><br>以自定义的Customer类为例，何时需要重写equals()？</p></li><li>当一个类有自己特有的“逻辑相等”概念,当改写equals()的时候，总是要改写hashCode()，根据一个类的equals方法（改写后），两个截然不 同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode()方法， 它们仅仅是两个对象。</li><li>因此，违反了“相等的对象必须具有相等的散列码”。</li><li><p>结论：复写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode的对象的属性也应该参与到equals()中进行计算。</p></li><li><p><strong>问题：为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</strong></p><ul><li>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）</li><li>并且31只占用5bits,相乘造成数据溢出的概率较小。</li><li>31可以 由i*31== (i&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率）</li><li>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结 果只能被素数本身和被乘数还有1来整除！(减少冲突)<blockquote><p>个人理解：HashSet的无序性不等于随机性。HashSet开始时创建的底层数组长度为16源码：DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4。添加的过程并非按照数组的索引值存入，而是依据数据的哈希来存储。Set存储数据讲究无序性，存储的方式就是，每个数据生成一个哈希值，这个哈希值就决定了这个数据在数组中的存放位置。具体的存放位置也是通过某种散列函数或者称为某种算法来决定具体位置的。再进行add操作的时候也是类似的方法，算出哈希值，通过某种算法算出具体位置。这个时候就会出现两个个问题就是，①两个数据的哈希值可能相同，但是通过算法处理后的具体位置可能时相同的。这个时候就会判断这个位置上是否有元素。没有的话就直接放在这个位置，有的话这是就引入链表的结构了。JDK1.7和JDK1.8的区别是不同的，对于JDK1.7来说就是把后者相同具体存放位置的元素（即新元素）放在前者相同具体存放位置的元素的位置（旧元素），然后让新元素指向旧元素，。JDK1.8就是拿前者相同具体存放位置的元素指向后者相同具体存放位置的元素。（简记为：“七上八下”七是新的元素在上边，旧的在下边，八是新的元素在下边，旧的元素在上边）。挺难描述的，但是不难理解。②两个数据可能相同，经过某种算法算出具体存放位置相同。这个情况下开始时就会调用equals方法判断数据是否相同。相同的话就添加失败，不同的话就是上面的“七上八下”。好处就在于，添加的过程为保证不可重复性，就不同所有都遍历判断是否相同，只判断对应位置的数据是否相同，同就false，不同就True，添加成功。</p><span class='p green'>个人理解可能还是有偏差的，可以查看尚硅谷宋红康老师的详细的讲解总结：</span></blockquote></li></ul></li></ul><hr><ul><li><strong>Set实现类之二：LinkedHashSet</strong><ul><li>LinkedHashSet 是 HashSet 的子类</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，  但它同时使用双向链表维护元素的次序，这使得元素看起来是以插入 顺序保存的。</li><li>LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全 部元素时有很好的性能。</li><li>LinkedHashSet 不允许集合元素重复。<blockquote><p>个人理解：LinkedSet的有序是一种伪有序，存储的方式都是：数组+链表的结构。LinkedSet营造的有序简单理解就是固定的使双向链表的prev和next指向上一个add的数据和下一个add的数据。这就营造出了有序的状态</p></blockquote></li></ul></li></ul><hr><ul><li><p><strong>Set实现类之三：TreeSet</strong></p><ul><li>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</li><li>TreeSet底层使用红黑树结构存储数据</li><li>新增的方法如下： (了解)<ul><li>Comparator comparator()</li><li>Object first()</li><li>Object last()</li><li>Object lower(Object e)</li><li>Object higher(Object e)</li><li>SortedSet subSet(fromElement, toElement)</li><li>SortedSet headSet(toElement)</li><li>SortedSet tailSet(fromElement)<br>TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</li></ul></li></ul></li><li><p><strong>排序—自然排序</strong></p></li><li>自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元 素之间的大小关系，然后将集合元素按升序(默认情况)排列</li><li>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。<ul><li>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。</li></ul></li><li><p>Comparable 的典型实现：</p><ul><li>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小 进行比较</li><li>Character：按字符的 unicode值来进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>String：按字符串中字符的 unicode 值进行比较</li><li>Date、Time：后边的时间、日期比前面的时间、日期大</li></ul></li><li><p>向 TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添 加的所有元素都会调用compareTo()方法进行比较。</p></li><li>因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是同 一个类的对象。</li><li>对于 TreeSet 集合而言，它判断两个对象是否相等的唯一标准是：两个对象通 过 compareTo(Object obj) 方法比较返回值。</li><li><p>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保 证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过 equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。 否则，让人难以理解。</p></li><li><p><strong>排序—定制排序</strong></p><ul><li>TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没 有实现Comparable接口，或不希望按照升序(默认情况)的方式排列元素或希望按照 其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来 实现。需要重写compare(T o1,T o2)方法。</li><li>利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构 造器。</li><li>此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异 常。</li><li>使用定制排序判断两个元素相等的标准是：通过Comparator比较两个元素返回了0</li></ul></li></ul><div class="note success flat"><p>test01为自然排序，test02为定制排序</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TreeSet 添加的数据都是同一类型</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JERMYN&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JERRY&quot;</span>, <span class="number">21</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JACK&quot;</span>, <span class="number">14</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JACK&quot;</span>, <span class="number">26</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;MARY&quot;</span>, <span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;TOM&quot;</span>, <span class="number">14</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// 从小到大的顺序排序</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定制排序</span></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> (User) o1;</span><br><span class="line">                    <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> (User) o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.age, u2.age);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有参按参数重写 compare 来</span></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(comparator );</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JERMYN&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JERRY&quot;</span>, <span class="number">21</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JACK&quot;</span>, <span class="number">14</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;JACK&quot;</span>, <span class="number">26</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;MARY&quot;</span>, <span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;TOM&quot;</span>, <span class="number">14</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="comment">// 从小到大的顺序排序</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">            <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> -<span class="built_in">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span> (compare != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.age, user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, user.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">------------------test01--------------------</span><br><span class="line">User&#123;name=<span class="string">&#x27;TOM&#x27;</span>, age=<span class="number">14</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;MARY&#x27;</span>, age=<span class="number">32</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;JERRY&#x27;</span>, age=<span class="number">21</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;JERMYN&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;JACK&#x27;</span>, age=<span class="number">14</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;JACK&#x27;</span>, age=<span class="number">26</span>&#125;</span><br><span class="line">------------------test02--------------------</span><br><span class="line">User&#123;name=<span class="string">&#x27;JACK&#x27;</span>, age=<span class="number">14</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;JERMYN&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;JERRY&#x27;</span>, age=<span class="number">21</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;JACK&#x27;</span>, age=<span class="number">26</span>&#125;</span><br><span class="line">User&#123;name=<span class="string">&#x27;MARY&#x27;</span>, age=<span class="number">32</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><ul><li><p><strong>Map接口概述</strong></p><ul><li>Map与Collection并列存在。用于保存具有映射关系的数据:key-value</li><li>Map 中的 key 和 value 都可以是任何引用类型的数据</li><li>Map 中的 key 用Set来存放，不允许重复，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法</li><li>常用String类作为Map的“键”</li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value</li><li>Map接口的常用实现类：HashMap、TreeMap、LinkedHashMap和 Properties。其中，HashMap是 Map 接口使用频率最高的实现类</li></ul></li><li><p><strong>Map接口：常用方法</strong></p><ul><li>添加、删除、修改操作：<ul><li>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</li><li>void putAll(Map m):将m中的所有key-value对存放到当前map中</li><li>Object remove(Object key)：移除指定key的key-value对，并返回value</li><li>void clear()：清空当前map中的所有数据</li></ul></li><li>元素查询的操作：<ul><li>Object get(Object key)：获取指定key对应的value</li><li>boolean containsKey(Object key)：是否包含指定的key</li><li>boolean containsValue(Object value)：是否包含指定的value</li><li>int size()：返回map中key-value对的个数</li><li>boolean isEmpty()：判断当前map是否为空</li><li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li></ul></li><li>元视图操作的方法：<ul><li>Set keySet()：返回所有key构成的Set集合</li><li>Collection values()：返回所有value构成的Collection集合</li><li>Set entrySet()：返回所有key-value对构成的Set集合<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AddRemoveModifyTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;A&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;C&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;B&quot;</span>, <span class="number">13</span>);</span><br><span class="line">        <span class="comment">// 修改</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;A&quot;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>, <span class="number">26</span>);</span><br><span class="line">        map.put(<span class="string">&quot;e&quot;</span>, <span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">&quot;d&quot;</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        hashMap.putAll(map);</span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> hashMap.remove(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line">        <span class="comment">// 不存在返回null</span></span><br><span class="line">        System.out.println(hashMap.remove(<span class="string">&quot;D&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空</span></span><br><span class="line">        hashMap.clear();</span><br><span class="line">        System.out.println(hashMap);</span><br><span class="line">        System.out.println(hashMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InquireTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        hashMap.put(<span class="string">&quot;A&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;C&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;B&quot;</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有则key.value</span></span><br><span class="line">        System.out.println(hashMap.get(<span class="string">&quot;A&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有则null</span></span><br><span class="line">        System.out.println(hashMap.get(<span class="string">&quot;D&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否有key，有则true，反之则false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isExistKey</span> <span class="operator">=</span> hashMap.containsKey(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        System.out.println(isExistKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否有value，有则true，反之则false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isExistValue</span> <span class="operator">=</span> hashMap.containsValue(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(isExistValue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否是空</span></span><br><span class="line">        hashMap.clear();</span><br><span class="line">        System.out.println(hashMap.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MetaViewTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        hashMap.put(<span class="string">&quot;A&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;C&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;B&quot;</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历key</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> hashMap.keySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 遍历value</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> hashMap.values();</span><br><span class="line">        <span class="keyword">for</span> (Object o : values) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有的key-value</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> hashMap.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; entrySet.size(); i++) &#123;</span><br><span class="line">            System.out.println(iterator1.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line"></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"></span><br><span class="line">A=<span class="number">18</span></span><br><span class="line">B=<span class="number">13</span></span><br><span class="line">C=<span class="number">15</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">1</span>, Passes: <span class="number">1</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul></li></ul><hr><ul><li><p><strong>Map实现类之一：HashMap</strong></p><ul><li>HashMap是 Map 接口使用频率最高的实现类。</li><li>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</li><li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()</li><li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()</li><li>一个key-value构成一个entry</li><li>所有的entry构成的集合是Set:无序的、不可重复的</li><li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li><li>HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</li></ul></li><li><p><strong>HashMap的存储结构</strong><br>JDK 7及以前版本：HashMap是数组+链表结构(即为链地址法)<br>JDK 8版本发布以后：HashMap是数组+链表+红黑树实现。</p></li><li><p><strong>HashMap源码中的重要常量</strong></p><div class="tip warning faa-horizontal animated-hover"><p>HashMap源码解析</p></div><ul><li>DEFAULT_INITIAL_CAPACITY : HashMap 的 默 认 容 量 ，16  </li><li>MAXIMUM_CAPACITY ： HashMap 的 最 大 支 持 容 量 ，2^30  </li><li>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子 </li><li>TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树</li><li>UNTREEIFY_THRESHOLD：Bucket中红黑树存储的Node小于该默认值，转化为链表 </li><li>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量。（当桶中Node的 数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行 resize扩容操作这个MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4  倍。）</li><li>table：存储元素的数组，总是2的n次幂  </li><li>entrySet：存储具体元素的集 </li><li>size：HashMap中存储的键值对的数量</li><li>modCount：HashMap扩容和结构改变的次数。  </li><li>threshold：扩容的临界值，=容量*填充因子 </li><li>loadFactor：填充因子</li></ul></li></ul><hr><ul><li>HashMap的内部存储结构其实是数组和链表的结合。当实例化一个HashMap时， 系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量 (Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个 bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</li><li>每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引 用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。 而且新添加的元素作为链表的head。</li><li><p><strong>添加元素的过程：</strong><br>向HashMap中添加entry1(key，value)，需要首先计算entry1中key的哈希值(根据 key所在类的hashCode()计算得到)，此哈希值经过处理以后，得到在底层Entry[]数 组中要存储的位置i。如果位置i上没有元素，则entry1直接添加成功。如果位置i上 已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次 比较entry1中key和其他的entry。如果彼此hash值不同，则直接添加成功。如果 hash值不同，继续比较二者是否equals。如果返回值为true，则使用entry1的value  去替换equals为true的entry的value。如果遍历一遍以后，发现所有的equals返回都 为false,则entry1仍可添加成功。entry1指向原有的entry元素。</p></li><li><p><strong>HashMap的扩容</strong><br>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的 长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在 HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算 其在新数组中的位置，并放进去，这就是resize。</p></li><li><p><strong>那么HashMap什么时候进行扩容呢？</strong><br>当HashMap 中的元素个数超过数组大小( 数组总大小length, 不是数组中个数 size)<em> loadFactor    时 ， 就 会 进 行 数 组 扩 容 ， loadFactor    的 默 认 值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况 下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数 超过16</em> 0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把 数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，  而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，  那么预设元素的个数能够有效的提高HashMap的性能。</p></li><li><p>HashMap的内部存储结构其实是数组+链表+树的结合。当实例化一个 HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系 时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表 中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为 “桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查 找bucket中的元素。</p></li><li><p>每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带 一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能 生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象 可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个 TreeNode树。而新添加的元素作为链表的last，或树的叶子结点。</p></li><li><p><strong>那么HashMap什么时候进行扩容和树形化呢？</strong></p><ul><li>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数 size)<em> loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的 默 认 值 (DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认 情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中 元素个数超过16</em> 0.75=12（这个值就是代码中的threshold值，也叫做临界值）  的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元 素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知 HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</li><li>当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有 达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成 树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，  下次resize方法时判断树的结点个数低于6个，也会把树再转为链表。</li></ul></li><li><p><strong>关于映射关系的key是否可以修改？answer：不要修改</strong><br>映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算 每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关 系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</p></li><li><p><strong>总结：JDK1.8相较于之前的变化：</strong></p></li></ul><ol><li>HashMap map = new HashMap();//默认情况下，先不创建长度为16的数组</li><li>当首次调用map.put()时，再创建长度为16的数组</li><li>数组为Node类型，在jdk7中称为Entry类型</li><li>形成链表结构时，新添加的key-value对在链表的尾部（七上八下）</li><li>当数组指定索引位置的链表长度&gt;8时，且map中的数组的长度&gt; 64时，此索引位置 上的所有key-value对使用红黑树进行存储。</li></ol><p class='p center logo large'>HashMap源码理解JDK1.7</p><span class='p center small'>个人理解，有错误的请指教</span><blockquote><p><span class='p red'>HashMap实例化：</span>new + 类的构造器。源码显示this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);这两个常量分别是16，和0.75f，前者是初始化的数组长度。后者叫默认加载因子，可以理解为如果数组填充的长度到达默认长度的3/4就进行扩容。查看带参的构造器，一个叫initialCapacity，一个叫loadFactor。上来①先判断initialCapacity是否小于零，如果你new的时候写的initialCapacity非法就会报 IllegalArgumentException 异常。②判断initialCapacity是否大于系统可以创建的最大值MAXIMUM_CAPACITY这个值叫做最大支持容量为（2^30）如果比这个数还大就给initialCapacity赋值为2^30.③判断loadFactor是否小于等于零，或者Float.isNaN(loadFactor)，这个isNaN(loadFactor)方法的作用就是判断loadFactor是否是非数字的值(NAN)，NAN 是Not a Number的缩写。是数字的话返回flase，不是数字则返回ture，这两个条件是或的关系，有一个不成立就报IllegalArgumentException异常。如果上面的①②③都不满足的话就给initialCapacity和loadFactor赋new的值。赋值成功后的下一步就有意思了，你new的HashMap(15, 0.75f)，实际上是initialCapacity是16，原因就是，在这步会定义一个int  capacity=1;人后让while(capacity &lt; initialCapacity){capacity&lt;&lt;=1 }即只要capacity &lt; initialCapacity，capacity就一直乘以2，15的话就是16，25的话就是32依次类似，所以 initialCapacity都是2的多少次幂，且最小为16。而在这个死循环中就直接刚才new的loadFactor赋值给this.loadFactor。下一步给threshold（临界值）赋值，依据就是在capacity*loadFactor和MAXIMUM_CAPACITY+1中取最小值，一般情况下都是前者。下一步就new Entry([capacity ])叫table的数组。HashMap的底层就是一个Entry&lt; k,v &gt;类型的数组。至此数组就造好了。</p></blockquote><hr><blockquote><p><span class='p red'>添加元素的过程:</span>调用put(K key,V value)方法。查看put(K key,V value)源码。上来首先判断key是否是null，如果是的话return putForNullKey(value)此方法专门处理null的value。下一步进行计算key的哈希值，得到哈希值后，下一步就是确定put的元素在数组的位置，调用indexOf方法将key的哈希值和table的length作为参数传入。这个方法return h &amp; (length-1);得到的就是在数组的位置。解释一下，h就是哈希值，length-1就是数组的长度减一。可以理解为某个随机的数与15取模得到的可能是0-15的任何数，只是这个方法中使用的是 &amp; 即与符号，这种方式效率更高。在此举例，如果这个数据key1得到的哈希值值是15（二进制与计算同一为一，否则为0），15（1111）&amp;15（1111）得0000十进制就是0，则这个数据存在table[ 0 ]位置,如果key2得哈希值为31即31（11111） &amp; 15（1111）得1111十进制就是15，则这个数据存储在table[ 15 ]位置。本质与15取模一致，就是通过位运算符计算得话效率高。得到具体的存放位置后，下面进行for循环源码显示for (Entry&lt; K,V &gt; e = table[ i ];e !=null ;e = e.next),这段代码解释就是首先看索引位置时候否已经有元素，没有得话就可以直接赋值，把元素放在这个位置上源码显示：addEntry(hash,key,value,i)。有元素的话进入for循环，当然有元素的话可能也不只一个（因为存的是链表），for循环内部做的工作是①判断已经在这个位置上的元素的哈希值是否与新添加的元素的哈希值相同。②判断old的key与new的key是否相等。如果相等循环内部做一个覆盖的操作。也就是，用新的key的value替换old的key的value（此部分不好解释。但看源码的话可以理解）。下面解释添加元素的操作即addEntry(hash,key,value,i)。这个i就是要存放的位置。这个方法内部源码显示做判断，看size?&gt;threshold(12)&amp;&amp;null ！=table[i = bucketIndex],这段解释就是，看现在数组已有的元素的长度是否大于临界值了，和看这个元素的位置是否为空。在理解为：就是看这个位置是不是空，如果用有元素就会形成链表就需要扩容了。没有元素就放在这里。所以扩容的条件可以说是，数组的现有元素数量比临界值还大且这个位置已经有元素。满足扩容条件的话就会resize数组的长度，源码显示：resize(2*table.length)即是扩容为原来的2倍。前面的if判断主要就是判断是否扩容，如果不需要扩容。做createEntry（hash，key，value，bucketIndex）操作。对于这个方法，源码显示上来首先把原有位置上的元素取出定义为e，源码显示：Entry &lt; K,V &gt; e = table [ bucketIndex ]。新的元素放在数组的这个位置上，原来的元素作为新元素的next属性出现。源码显示：table[ bucketIndex ] =new Entry&lt;&gt;(hash,key,value,e);简单理解为：旧元素指向新元素的next。下一步进行size++。至此添加元素的操作完成。</p></blockquote><span class='p green'>个人理解可能还是有偏差的，可以查看尚硅谷宋红康老师的详细的讲解总结：</span><p class='p center logo large'>HashMap源码理解JDK1.8</p><span class='p center small'>个人理解，有错误的请指教</span><blockquote><p><span class='p red'>个人理解：</span>如果理解了JDK1.8的ArrayList源码，HashMap的理解会更加透彻些，实例化的方式都是new+构造器。调用空参的构造器，上来只做一个操作：this.loadFactor = DEFAULT_LOAD_FACTOR;把加载因子赋值为默认的即为0.75f，加载因子的作用前面已经讲到了。我们发现在空参的构造器中并没有像1.7里面那样给一个默认的数组长度16。在jdk1.8中底层的元素不叫Entry了，叫做Node，本质基本没有区别。在1.8里面Node实现了Map.Entry。本质上还是Entry。至此实例化就完成了。</p></blockquote><hr><blockquote><p><span class='p red'>添加元素的过程:</span>调用put(K key,V value)方法，这个方法return putVal(hash(key), key, value, false, true);hash(key)本质就是获取key的哈希值。后两者：onlyIfAbsent – if true, don’t change existing value;evict – if false, the table is in creation mode.putVal内部：①判断table是否是null，是的话进入，把table给resize。首次调用会进入。resize内部上来首先把table给oldTable，然后判断oldTable是否是null，是的话把0赋值给oldCap，把临界值给oldThr，临界值这里暂时是0。下一步定义两个变量，newCap，newThr都是0.下一步两个判断oldCap &gt; 0和oldThr &gt; 0,显然都不满足。执行else内部：newCap = DEFAULT_INITIAL_CAPACITY（注：把初始化的数组长度给newCap）;newThr = (int)(DEFAULT_LOAD_FACTOR <em> DEFAULT_INITIAL_CAPACITY)（注：求出临界值，即0.75</em>16=12）;下一步继续进行判断newThr == 0显然不是不进去。下一步threshold = newThr（注：给临界值赋值）;下一步就是new一个 newTable=Node[ newCap ]，newCap=16，把new的数组给table即table=newTable，返回newTable。至此数组的创建就完成了②判断put的元素在数组的位置。把这个位置的值赋值给p，看p是不是null，是的话就直接存。不是null的话就进入else，else其中的步骤比较复杂。这里大概说在else里面都做了什么。首先做的就是判断新添加的元素与原位置的元素的key的哈希值是否相等。当然原位置可能是一个元素也可能是一个链表。也可能是一个红黑树。所以新添加的元素就不能只和一个元素比，在这个位置的所有元素的哈希值都需要比较。这个时候如果第一次比完就发现新添加的元素的哈希值和旧元素的哈希值一样就做替换（这里的替换其实还没有替换，只是做了赋值。下一步才是替换）。把新的元素放在旧的位置上。反应到实际中就是如果你往数组put相同的key但是value不同的值的时候，后者会覆盖前者。下一步会做判断if (e != null)，这一步才是真正的替换。前面说了和一个元素，和一个链表，一个红黑数比较吗（if（一个）…else if（红黑树）…else（链表））。所以每个内部的方式都不一样，都需要写不同的判断逻辑。这里有个特点，就是，如果链表的长度=8的时候就会把这个链表变为红黑树，也不是等于8就变红黑树，在这个里面还会判断，当前数组的长度的是否大于64，如果大于则转为红黑树，小于64的话去做扩容（resize），不做转为树。下面一步就是转为树的操作了。</p></blockquote><span class='p green'>个人理解可能还是有偏差的，可以查看尚硅谷宋红康老师的详细的讲解总结：</span><p><strong><em>点击图片可以跳转宋老师讲解</em></strong></p><hr><ul><li><p><strong>Map实现类之二：LinkedHashMap</strong></p><ul><li>LinkedHashMap 是 HashMap 的子类</li><li>在HashMap存储结构的基础上，使用了一对双向链表来记录添加 元素的顺序</li><li>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代 顺序：迭代顺序与 Key-Value 对的插入顺序一致</li></ul></li><li><p><strong>Map接口</strong></p></li></ul><blockquote><p>LinkedHashMap是HashMap的子类，看是来是有序的。通过某种手段展出出有序的状态，可以和，put的时候是调用父类的put方法。LinkedHashMap里面重写了newHashMap方法。这个方法内部new了一个LinkedHashMap.Entry,这里的Entry继承了HashMap.Node,继承的同时又多定义了两个变量，分别是before和after,记录前一个和后一个。所以就可以按照顺序来遍历。Set里面是一个个的元素，这一个一个元素相当于Map里面的Key。value是PRESENT源码显示是new Object().其实没有实际的意义。</p></blockquote><hr><ul><li><strong>Map实现类之三：TreeMap</strong><ul><li>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。</li><li>TreeMap 可以保证所有的 Key-Value 对处于有序状态。</li><li>TreeSet底层使用红黑树结构存储数据</li><li>TreeMap 的 Key 的排序：<ul><li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有 的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</li></ul></li><li>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">NaturalOrderTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jermyn&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">17</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jackson&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        treeMap.put(p1, <span class="number">90</span>);</span><br><span class="line">        treeMap.put(p2, <span class="number">85</span>);</span><br><span class="line">        treeMap.put(p3, <span class="number">85</span>);</span><br><span class="line">        treeMap.put(p4, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> treeMap.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CustomSortingTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Person &amp;&amp; o2 <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">                    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> (Person) o1;</span><br><span class="line">                    <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> (Person) o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(p1.getAge(), p2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入类型不一致&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jermyn&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">17</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jackson&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        treeMap.put(p1, <span class="number">90</span>);</span><br><span class="line">        treeMap.put(p2, <span class="number">85</span>);</span><br><span class="line">        treeMap.put(p3, <span class="number">85</span>);</span><br><span class="line">        treeMap.put(p4, <span class="number">95</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> treeMap.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Key：&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;\tValue：&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">            <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> <span class="built_in">this</span>.name.compareTo(p.name);</span><br><span class="line">            <span class="keyword">if</span> (compare != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.age, p.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入类型不一致&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Key：name=<span class="string">&#x27;Jerry&#x27;</span>, age=<span class="number">17</span>Value：=<span class="number">85</span></span><br><span class="line">Key：name=<span class="string">&#x27;Jermyn&#x27;</span>, age=<span class="number">18</span>Value：=<span class="number">90</span></span><br><span class="line">Key：name=<span class="string">&#x27;Jack&#x27;</span>, age=<span class="number">20</span>Value：=<span class="number">85</span></span><br><span class="line">Key：name=<span class="string">&#x27;Jackson&#x27;</span>, age=<span class="number">23</span>Value：=<span class="number">95</span></span><br><span class="line">Key：name=<span class="string">&#x27;Jack&#x27;</span>, age=<span class="number">20</span>Value：=<span class="number">85</span></span><br><span class="line">Key：name=<span class="string">&#x27;Jackson&#x27;</span>, age=<span class="number">23</span>Value：=<span class="number">95</span></span><br><span class="line">Key：name=<span class="string">&#x27;Jermyn&#x27;</span>, age=<span class="number">18</span>Value：=<span class="number">90</span></span><br><span class="line">Key：name=<span class="string">&#x27;Jerry&#x27;</span>, age=<span class="number">17</span>Value：=<span class="number">85</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul><hr><ul><li><strong>Map实现类之四：Hashtable</strong><ul><li>Hashtable是个古老的 Map 实现类，JDK1.0就提供了。不同于HashMap，</li><li>Hashtable是线程安全的。</li><li>Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询 速度快，很多情况下可以互用。</li><li>与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value</li><li>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</li><li>Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。</li></ul></li></ul><hr><ul><li><strong>Map实现类之五：Properties</strong><ul><li>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</li><li>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key和 value 都是字符串类型</li><li>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法<div class="tabs" id="properties"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#properties-1">PropretiesTest.java</button></li><li class="tab"><button type="button" data-href="#properties-2">jdbc.propreties</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="properties-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// key和value都是String</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">            properties.load(fis);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">name = admin管理员, password = <span class="number">123456789</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="properties-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=admin管理员</span><br><span class="line">password=<span class="number">123456789</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul></li></ul><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><ul><li>Collections 是一个操作 Set、List 和 Map 等集合的工具类</li><li>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</li><li><p><strong>排序操作：（均为static方法）</strong></p><ul><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 List 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li></ul></li><li><p><strong>查找、替换</strong></p><ul><li>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection，Comparator)</li><li>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src)：将src中的内容复制到dest中</li><li>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</li></ul></li><li><p><strong>Collections常用方法：同步控制</strong><br>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集 合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SortRelatedTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">26</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">70</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">65</span>);</span><br><span class="line">        list.add(<span class="number">54</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;original:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;shuffle:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;reverse:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;sort:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        Collections.swap(list, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;swap[index,index]:&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FindModifyTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">26</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">21</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;original:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="type">Comparable</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;maxOfList:&quot;</span> + max);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">frequency</span> <span class="operator">=</span> Collections.frequency(list, <span class="number">12</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;frequencyOfElement(12)InList:&quot;</span> + frequency);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CopyTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">26</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">21</span>);</span><br><span class="line">        list.add(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;originalList:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">destination</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Object</span>[list.size()]);</span><br><span class="line"></span><br><span class="line">        Collections.copy(destination, list);</span><br><span class="line">        System.out.println(<span class="string">&quot;CopyListAsDest:&quot;</span> + destination);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SyncTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Collections.synchronizedList(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;经Collections.synchronizedList返回的list1是线程安全的&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> Collections.synchronizedMap(hashMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;经Collections.synchronizedMap返回的map是线程安全的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">originalList:[<span class="number">26</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">12</span>]</span><br><span class="line">CopyListAsDest:[<span class="number">26</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">12</span>]</span><br><span class="line">original:[<span class="number">26</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">12</span>]</span><br><span class="line">maxOfList:<span class="number">26</span></span><br><span class="line">frequencyOfElement(<span class="number">12</span>)InList:<span class="number">2</span></span><br><span class="line">original:[<span class="number">26</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">70</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">65</span>, <span class="number">54</span>, <span class="number">12</span>]</span><br><span class="line">shuffle:[<span class="number">65</span>, <span class="number">54</span>, <span class="number">20</span>, <span class="number">26</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">70</span>, <span class="number">12</span>, <span class="number">20</span>]</span><br><span class="line">reverse:[<span class="number">20</span>, <span class="number">12</span>, <span class="number">70</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">26</span>, <span class="number">20</span>, <span class="number">54</span>, <span class="number">65</span>]</span><br><span class="line">sort:[<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">26</span>, <span class="number">54</span>, <span class="number">65</span>, <span class="number">70</span>]</span><br><span class="line">swap[index,index]:[<span class="number">12</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">26</span>, <span class="number">54</span>, <span class="number">65</span>, <span class="number">70</span>]</span><br><span class="line">经Collections.synchronizedList返回的list1是线程安全的</span><br><span class="line">经Collections.synchronizedMap返回的map是线程安全的</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">4</span>, Passes: <span class="number">4</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h1 id="第五章-泛型"><a href="#第五章-泛型" class="headerlink" title="第五章 泛型"></a>第五章 泛型</h1><h2 id="为什么要有泛型"><a href="#为什么要有泛型" class="headerlink" title="为什么要有泛型"></a>为什么要有泛型</h2><ul><li><strong>泛型的设计背景</strong><br>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的 对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来 解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于 这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个 参数，这个类型参数叫做泛型。Collection<E>，List<E>，ArrayList<E> 这个<E>就 是类型参数，即泛型。</li><li><strong>泛型的概念</strong><ul><li>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类 型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如， 继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实 际的类型参数，也称为类型实参）。</li><li>从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，  允许我们在创建集合时再指定集合元素的类型，正如：List<String>，这表明 该List只能保存字符串类型的对象。</li><li>JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持， 从而可以在声明集合变量、创建集合对象时传入类型实参。</li></ul></li></ul><h2 id="在集合中使用泛型"><a href="#在集合中使用泛型" class="headerlink" title="在集合中使用泛型"></a>在集合中使用泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">GenericTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        arrayList.add(<span class="number">12</span>);</span><br><span class="line">        arrayList.add(<span class="number">20</span>);</span><br><span class="line">        arrayList.add(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历一：</span></span><br><span class="line">        <span class="keyword">for</span> (Integer integer : arrayList) &#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历二：</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HashMapTest</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; HashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap.put(<span class="string">&quot;Jermyn&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        HashMap.put(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        HashMap.put(<span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = HashMap.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entries.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; entry = iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;--&gt;&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">Jermyn--&gt;<span class="number">18</span></span><br><span class="line">Jack--&gt;<span class="number">20</span></span><br><span class="line">Jerry--&gt;<span class="number">23</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">2</span>, Passes: <span class="number">2</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="自定义泛型结构"><a href="#自定义泛型结构" class="headerlink" title="自定义泛型结构"></a>自定义泛型结构</h2><ul><li><p><strong>泛型的声明</strong><br>interface List<T> 和 class GenTest<K,V>:其中，T,K,V<strong>不代表值</strong>，而是表示<strong>类型</strong>。这里使用任意字母都可以。常用T表示，是Type的缩写。</p></li><li><p><strong>泛型的实例化：</strong></p><ul><li>一定要在类名后面指定类型参数的值（类型）。如：  <ul><li>List<String> strList = new ArrayList<String>();  </li><li>Iterator<Customer> iterator = customers.iterator();</li></ul></li><li>T只能是类，不能用基本数据类型填充。但可以使用<strong>包装类</strong>填充</li><li>把一个集合中的内容限制为一个特定的数据类型，这就是generics背后的核心思想</li></ul></li><li><p><strong>自定义泛型结构：泛型类、泛型接口</strong></p></li></ul><ol><li>泛型类可能有<strong>多个参数</strong>，此时应将多个参数一起放在<strong>尖括号内</strong>。比如：<E1,E2,E3></li><li>泛型类的构造器如下：public GenericClass(){}。 错误的：public GenericClass<E>(){}</li><li>实例化后，操作原来泛型位置的结构<strong>必须</strong>与指定的泛型类型一致。</li><li>泛型不同的引用不能相互赋值。&gt;尽管在编译时ArrayList<String>和ArrayList<Integer>是两种类型，但是，在运行时只有一个ArrayList被加载到JVM中。</li><li>泛型如果不指定，将被擦除，泛型对应的类型均按照<strong>Object</strong>处理，但不等价 于Object。经验：泛型要使用一路都用。要不用，一路都不要用。</li><li>如果泛型结构是一个<strong>接口或抽象类</strong>，则<strong>不可创建</strong>泛型类的对象。</li><li>jdk1.7，泛型的简化操作：ArrayList<Fruit> flist = new ArrayList&lt;&gt;();</li><li>泛型的指定中<strong>不能</strong>使用基本数据类型，可以使用包装类替换。</li><li>在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在静态方法中不能使用类的泛型。</li><li>异常类不能是泛型的</li><li>不能使用new E[]。但是可以：E[] elements = (E[])new Object[capacity];参考：ArrayList源码中声明：Object[] elementData，而非泛型参数类型数组。</li><li><p>父类有泛型，子类可以选择保留泛型<strong>也可以</strong>选择指定泛型类型：</p><ul><li><p>子类不保留父类的泛型：按需实现</p><ul><li>没有类型 擦除</li><li>具体类型</li></ul></li><li><p>子类保留父类的泛型：泛型子类</p><ul><li>全部保留</li><li>部分保留</li></ul></li></ul></li><li><p>结论：子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型</p></li></ol><ul><li><strong>自定义泛型结构：泛型方法</strong><ul><li>方法，也可以被泛型化，不管此时定义在其中的类是不是泛型类。在泛型 方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型。<br>泛型方法的格式：</li><li><strong>格式</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[访问权限] &lt;泛型&gt; 返回类型 方法名([泛型标识 参数名称]) 抛出的异常</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; List <span class="title function_">copyFromArrayToList</span><span class="params">(E[] arr)</span> <span class="keyword">throws</span> RuntimeException</span><br></pre></td></tr></table></figure><div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericMethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 泛型类的类型跟泛型方法的类型无关</span></span><br><span class="line">        Generic&lt;String&gt; stringGeneric = <span class="keyword">new</span> <span class="title class_">Generic</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Integer[] intArr = &#123;<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = stringGeneric.copyFromArrayToList(intArr);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Generic</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List <span class="title function_">copyFromArrayToList</span><span class="params">(E[] arr)</span> <span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (E e : arr) &#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul><h2 id="通配符的使用"><a href="#通配符的使用" class="headerlink" title="通配符的使用"></a>通配符的使用</h2><ol><li>使用类型通配符：？<ul><li>比如：List&lt;?&gt;，Map&lt;?,?&gt;</li><li>List&lt;?&gt;是List&lt; String &gt;、List&lt; Object &gt;等各种泛型List的父类。</li></ul></li><li>读取List&lt;?&gt;的对象list中的元素时，永远是安全的，因为不管list的真实类型 是什么，它包含的都是Object。</li><li>写入list中的元素时，不行。因为我们不知道c的元素类型，我们不能向其中添加对象。<ul><li>唯一的例外是null，它是所有类型的成员。</li></ul></li></ol><ul><li>因为我们不知道c的元素类型，我们不能向其中添加对象。add方法有类型参数E作为集 合的元素类型。我们传给add的任何参数都必须是一个未知类型的子类。因为我们不知道那是什么类型，所以我们无法传任何东西进去。</li><li>唯一的例外的是null，它是所有类型的成员。</li><li><p>另一方面，我们可以调用get()方法并使用其返回值。返回值是一个未知的类型，但是我们知道，它总是一个Object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;?&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br><span class="line">c.add(<span class="keyword">new</span> <span class="title class_">Object</span>()); <span class="comment">// 编译时错误</span></span><br></pre></td></tr></table></figure><div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WildcardTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(<span class="number">1</span>);</span><br><span class="line">        list1.add(<span class="number">2</span>);</span><br><span class="line">        list1.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;Jer&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;Jac&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 泛型不一样，不可赋值</span></span><br><span class="line"><span class="comment">//        list1=list2;</span></span><br><span class="line">        <span class="comment">// ? 指的是list1和list2的公共的父类</span></span><br><span class="line">        List&lt;?&gt; list = <span class="literal">null</span>;</span><br><span class="line">        list = list2;</span><br><span class="line">        Iterator&lt;?&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list = list1;</span><br><span class="line">        Iterator&lt;?&gt; iterator1 = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Jer</span><br><span class="line">Jac</span><br><span class="line">Jerry</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p><strong>通配符的使用：有限制的通配符</strong></p></li></ul><ol><li>&lt;?&gt;</li><li>允许所有泛型的引用调用</li><li>通配符指定上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;=</li><li>通配符指定下限super：使用时指定的类型不能小于操作的类，即&gt;=</li><li>举例：<ul><li>&lt;? extends Number&gt;(无穷小 , Number]只允许泛型为Number及Number子类的引用调用</li><li>&lt;? super Number&gt;    [Number , 无穷大)只允许泛型为Number及Number父类的引用调用</li><li>&lt;? extends Comparable&gt;只允许泛型为实现Comparable接口的实现类的引用调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; list1 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;? <span class="built_in">super</span> Person&gt; list2 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; list3 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;Student&gt; list4 = <span class="literal">null</span>;</span><br><span class="line">        List&lt;Object&gt; list5 = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        list1 = list3;</span><br><span class="line">        list1 = list4;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处不可以，extends可以理解为 &lt;= Person 的类或者子类</span></span><br><span class="line"><span class="comment">//        list1 = list5;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        list2 = list3;</span><br><span class="line">        <span class="comment">// 此处不可以，super可以理解为 &gt;= Person 的类或者父类</span></span><br><span class="line"><span class="comment">//        list2 = list4;</span></span><br><span class="line">        list2 = list5;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="第六章-IO流"><a href="#第六章-IO流" class="headerlink" title="第六章 IO流"></a>第六章 IO流</h1><h2 id="File类的使用"><a href="#File类的使用" class="headerlink" title="File类的使用"></a>File类的使用</h2><ul><li>java.io.File类：文件和文件目录路径的抽象表示形式，与平台无关</li><li>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。如果需要访问文件内容本身，则需要使用输入/输出流。</li><li>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对 象，但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录。</li><li><p>File对象可以作为参数传递给流的构造器<br><strong><em>点击图片可以跳转源码</em></strong><br><a href="https://nowjava.com/readcode/jdk8/3565"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221022220136.png" alt=""></a></p><ul><li><strong>File 类的使用：常用构造器</strong></li><li>public File(String pathname)—&gt;以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。</li><li>绝对路径：是一个固定的路径,从盘符开始</li><li><p>相对路径：是相对于某个位置开始</p></li><li><p>public File(String parent,String child)—&gt;以parent为父路径，child为子路径创建File对象。</p></li><li>public File(File parent,String child)—&gt;根据一个父File对象和子文件路径创建File对象</li></ul></li></ul><ul><li><p><strong>File 类的使用：路径分隔符</strong></p><ul><li>路径中的每级目录之间用一个路径分隔符隔开。</li><li><p>路径分隔符和系统有关：</p><ul><li>windows和DOS系统默认使用“\”来表示</li><li>UNIX和URL使用“/”来表示</li></ul></li><li><p>Java程序支持跨平台运行，因此路径分隔符要慎用。</p></li><li>为了解决这个隐患，File类提供了一个常量：public static final String separator。根据操作系统，动态的提供分隔符。</li><li>举例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\jermyn\\info.txt&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:&quot;</span> + File.separator + <span class="string">&quot;jermyn&quot;</span> + File.separator + <span class="string">&quot;demo.txt&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">file3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/jermyn&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>File 类的使用：常用方法</strong></p><ul><li><p><strong>File类的获取功能</strong></p><ul><li>public String getAbsolutePath()：获取绝对路径</li><li>public String getPath() ：获取路径</li><li>public String getName() ：获取名称</li><li>public String getParent()：获取上层文件目录路径。若无，返回null</li><li>public long length() ：获取文件长度（即：字节数）。不能获取目录的长度。</li><li><p>public long lastModified() ：获取最后一次的修改时间，毫秒值</p></li><li><p>public String[] list() ：获取指定目录下的所有文件或者文件目录的名称数组</p></li><li>public File[] listFiles() ：获取指定目录下的所有文件或者文件目录的File数组</li></ul></li><li><p><strong>File类的重命名功能</strong></p><ul><li>public boolean renameTo(File dest):把文件重命名为指定的文件路径File类的判断功能</li><li>public boolean isDirectory()：判断是否是文件目录</li><li>public boolean isFile() ：判断是否是文件</li><li>public boolean exists() ：判断是否存在</li><li>public boolean canRead() ：判断是否可读</li><li>public boolean canWrite() ：判断是否可写</li><li>public boolean isHidden() ：判断是否隐藏</li></ul></li><li><p><strong>File类的创建功能</strong></p><ul><li>public boolean createNewFile() ：创建文件。若文件存在，则不创建，返回false</li><li>public boolean mkdir() ：创建文件目录。如果此文件目录存在，就不创建了。 如果此文件目录的上层目录不存在，也不创建。</li><li>public boolean mkdirs() ：创建文件目录。如果上层文件目录不存在，一并创建<br>注意事项：如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目 路径下。</li></ul></li><li><p><strong>File类的删除功能</strong></p></li><li><p>public boolean delete()：删除文件或者文件夹</p></li><li><p><strong>删除注意事项：</strong></p><ul><li>Java中的删除不走回收站。</li><li>要删除一个文件目录，请注意该文件目录内不能包含文件或者文件目录</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FileTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\学习\\Study\\java\\JavaSenior\\day25\\src\\cn\\jermyn\\test06\\hello.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;文件的绝对路径：&quot;</span> + file1.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的路径：&quot;</span> + file1.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的名称：&quot;</span> + file1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的上层文件目录路径：&quot;</span> + file1.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度:&quot;</span> + file1.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;最后一次的修改时间:&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(file1.lastModified()));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------分割线-----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;文件的绝对路径：&quot;</span> + file2.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的路径：&quot;</span> + file2.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的名称：&quot;</span> + file2.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件的上层文件目录路径：&quot;</span> + file2.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件长度:&quot;</span> + file2.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;最后一次的修改时间:&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(file2.lastModified()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FolderTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\学习\\Study\\java\\JavaSenior&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] list = file.list();</span><br><span class="line">        <span class="comment">// 不存在文件抛异常</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------分割线-----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">RenameTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\dest.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回true,需要file在硬盘中是存在的，且destFile不能在硬盘中存在</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> file.renameTo(destFile);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">EstimateTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\dest.txt&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;file是一个文件夹:&quot;</span> + file.isDirectory() + <span class="string">&quot;\tfile1是一个文件夹:&quot;</span> + file1.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;file是一个文件:&quot;</span> + file.isFile() + <span class="string">&quot;\tfile1是一个文件:&quot;</span> + file1.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;file存在:&quot;</span> + file.exists() + <span class="string">&quot;\tfile1存在:&quot;</span> + file1.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;file是否可读:&quot;</span> + file.canRead() + <span class="string">&quot;\tfile1是否可读:&quot;</span> + file1.canRead());</span><br><span class="line">        System.out.println(<span class="string">&quot;file是否可写:&quot;</span> + file.canWrite() + <span class="string">&quot;\tfile1是否可写:&quot;</span> + file1.canWrite());</span><br><span class="line">        System.out.println(<span class="string">&quot;file是否是隐藏文件:&quot;</span> + file.isHidden() + <span class="string">&quot;\tfile1是否是隐藏文件:&quot;</span> + file1.isHidden());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreateFileTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">newFile</span> <span class="operator">=</span> file.createNewFile();</span><br><span class="line">            <span class="keyword">if</span> (newFile == <span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已经存在&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">delete</span> <span class="operator">=</span> file.delete();</span><br><span class="line">            System.out.println(<span class="string">&quot;文件已经删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreateDirectoryTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\SUBIO1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一级目录</span></span><br><span class="line">        <span class="keyword">if</span> (file.mkdir() == <span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\SUBIO1\\SUBIO2\\SUBIO3&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建多级目录</span></span><br><span class="line">        <span class="keyword">if</span> (file1.mkdirs() == <span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">创建成功</span><br><span class="line">创建成功</span><br><span class="line">文件已经存在</span><br><span class="line">文件已经删除</span><br><span class="line">file是一个文件夹:<span class="literal">false</span>file1是一个文件夹:<span class="literal">true</span></span><br><span class="line">file是一个文件:<span class="literal">false</span>file1是一个文件:<span class="literal">false</span></span><br><span class="line">file存在:<span class="literal">false</span>file1存在:<span class="literal">true</span></span><br><span class="line">file是否可读:<span class="literal">false</span>file1是否可读:<span class="literal">true</span></span><br><span class="line">file是否可写:<span class="literal">false</span>file1是否可写:<span class="literal">true</span></span><br><span class="line">file是否是隐藏文件:<span class="literal">false</span>file1是否是隐藏文件:<span class="literal">false</span></span><br><span class="line">文件的绝对路径：D:\学习\Study\java\JavaSenior\day25\hello.txt</span><br><span class="line">文件的路径：hello.txt</span><br><span class="line">文件的名称：hello.txt</span><br><span class="line">文件的上层文件目录路径：<span class="literal">null</span></span><br><span class="line">文件长度:<span class="number">0</span></span><br><span class="line">最后一次的修改时间:Thu Jan <span class="number">01</span> 08:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1970</span></span><br><span class="line">-----------------分割线-----------------</span><br><span class="line">文件的绝对路径：D:\学习\Study\java\JavaSenior\day25\src\cn\jermyn\test06\hello.txt</span><br><span class="line">文件的路径：D:\学习\Study\java\JavaSenior\day25\src\cn\jermyn\test06\hello.txt</span><br><span class="line">文件的名称：hello.txt</span><br><span class="line">文件的上层文件目录路径：D:\学习\Study\java\JavaSenior\day25\src\cn\jermyn\test06</span><br><span class="line">文件长度:<span class="number">26</span></span><br><span class="line">最后一次的修改时间:Sat Oct <span class="number">22</span> <span class="number">20</span>:<span class="number">42</span>:<span class="number">45</span> CST <span class="number">2022</span></span><br><span class="line">.idea</span><br><span class="line">day18</span><br><span class="line">day19</span><br><span class="line">day20</span><br><span class="line">day21</span><br><span class="line">day22</span><br><span class="line">day23</span><br><span class="line">day24</span><br><span class="line">day25</span><br><span class="line">JavaSenior.iml</span><br><span class="line">jdbc.properties</span><br><span class="line">out</span><br><span class="line">src</span><br><span class="line">-----------------分割线-----------------</span><br><span class="line">D:\学习\Study\java\JavaSenior\.idea</span><br><span class="line">D:\学习\Study\java\JavaSenior\day18</span><br><span class="line">D:\学习\Study\java\JavaSenior\day19</span><br><span class="line">D:\学习\Study\java\JavaSenior\day20</span><br><span class="line">D:\学习\Study\java\JavaSenior\day21</span><br><span class="line">D:\学习\Study\java\JavaSenior\day22</span><br><span class="line">D:\学习\Study\java\JavaSenior\day23</span><br><span class="line">D:\学习\Study\java\JavaSenior\day24</span><br><span class="line">D:\学习\Study\java\JavaSenior\day25</span><br><span class="line">D:\学习\Study\java\JavaSenior\JavaSenior.iml</span><br><span class="line">D:\学习\Study\java\JavaSenior\jdbc.properties</span><br><span class="line">D:\学习\Study\java\JavaSenior\out</span><br><span class="line">D:\学习\Study\java\JavaSenior\src</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">6</span>, Passes: <span class="number">6</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="IO流原理及流的分类"><a href="#IO流原理及流的分类" class="headerlink" title="IO流原理及流的分类"></a>IO流原理及流的分类</h2><ul><li><p><strong>Java IO原理</strong></p><ul><li>I/O是Input/Output的缩写， I/O技术是非常实用的技术，用于处理设备之间的数据传输。如读/写文件，网络通讯等。</li><li>Java程序中，对于数据的输入/输出操作以“流(stream)” 的方式进行。</li><li>java.io包下提供了各种“流”类和接口，用以获取不同种类的 数据，并通过标准的方法输入或输出数据。</li><li><strong>输入input：</strong>读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li><strong>输出output：</strong>将程序（内存）数据输出到磁盘、光盘等存储设备中。</li></ul></li><li><p><strong>流的分类</strong></p><ul><li>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)</li><li>按数据流的流向不同分为：输入流，输出流</li><li>按流的角色的不同分为：节点流，处理流<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221023221442.png" alt=""><table><tr>    <td><span class='p green'>抽象基类</span></td>    <td><span class='p green'>节点流（文件流）</span></td>     <td><span class='p green'>缓冲流</span></td> </tr><tr>    <td>InputStream</td>    <td>FileInputStream (read(byte[] buffer))</td>     <td>BufferedInputStream (read(byte[] buffer))</td> </tr><tr>    <td>OutputStream </td>    <td>FileOutputStream (write(byte[] buffer,0,len)</td>     <td>BufferedOutputStream (write(byte[] buffer,0,len) / flush()</td> </tr><tr>    <td>Reader </td>    <td>FileReader (read(char[] cbuf))</td>     <td>BufferedReader (read(char[] cbuf) / readLine())</td> </tr><tr>    <td>Writer </td>    <td>FileWriter (write(char[] cbuf,0,len)</td>     <td>BufferedWriter (write(char[] cbuf,0,len) / flush()</td> </tr></table></li></ul></li><li><p><strong>InputStream &amp; Reader</strong></p><ul><li>InputStream 和 Reader 是所有输入流的基类。</li><li><p>InputStream（典型实现：FileInputStream）</p><ul><li>int read()</li><li>int read(byte[] b)</li><li>int read(byte[] b, int off, int len)</li></ul></li><li><p>Reader（典型实现：FileReader）</p><ul><li>int read()</li><li>int read(char [] c)</li><li>int read(char [] c, int off, int len)</li></ul></li><li><p>程序中打开的文件 IO 资源不属于内存里的资源，垃圾回收机制无法回收该资 源，所以应该显式关闭文件 IO 资源。</p></li><li>FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream用于读取非文本数据之类的原始字节流。要读取字符流，需要使用 FileReader</li></ul></li><li><p><strong>InputStream</strong></p><ul><li>int read()：从输入流中读取数据的下一个字节。返回 0 到 255 范围内的int 字节值。如果因 为已经到达流末尾而没有可用的字节，则返回值-1。</li><li>int read(byte[] b)：从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已 经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取 的字节数。</li><li>int read(byte[] b, int off,int len)：将输入流中最多 len 个数据字节读入 byte 数组。尝试读取 len 个字节，但读取<br>的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于 文件末尾而没有可用的字节，则返回值-1。</li><li>public void close() throws IOException“关闭此输入流并释放与该流关联的所有系统资源。</li></ul></li><li><p><strong>Reader</strong></p><ul><li>int read()：读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个</li><li>字节的Unicode码），如果已到达流的末尾，则返回 -1</li><li>int read(char[] cbuf)：将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</li><li>int read(char[] cbuf,int off,int len)：将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字 符。如果已到达流的末尾，则返回-1。否则返回本次读取的字符数。</li><li>public void close() throws IOException：关闭此输入流并释放与该流关联的所有系统资源。<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">fileR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\demo.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(fileR);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入</span></span><br><span class="line">            <span class="type">int</span> date;</span><br><span class="line">            <span class="keyword">while</span> ((date = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) date);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//4.流的关闭操作</span></span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReader01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.实例化File类的对象，指明要操作的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">fileR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\demo.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供具体的流</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(fileR);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.读入操作</span></span><br><span class="line">            <span class="type">char</span>[] charBuffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(charBuffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 方式一：</span></span><br><span class="line">                System.out.println();</span><br><span class="line">                System.out.println(<span class="string">&quot;----------------方式一----------------&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= len; i++) &#123;</span><br><span class="line">                    System.out.print(charBuffer[i]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println();</span><br><span class="line">                System.out.println(<span class="string">&quot;----------------方式二----------------&quot;</span>);</span><br><span class="line">                <span class="comment">// 方式二:</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charBuffer, <span class="number">0</span>, len);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//4.流的关闭操作</span></span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">abcdefghiklmnopqrstuvwxyz</span><br><span class="line">----------------方式一----------------</span><br><span class="line">abcdefghiklmnopqrstuvwxyz </span><br><span class="line">----------------方式二----------------</span><br><span class="line">abcdefghiklmnopqrstuvwxyz</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">2</span>, Passes: <span class="number">2</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li><li><p><strong>OutputStream &amp; Writer</strong></p><ul><li><p>OutputStream 和 Writer 也非常相似：</p><ul><li>void write(int b/int c);</li><li>void write(byte[] b/char[] cbuf);</li><li>void write(byte[] b/char[] buff, int off, int len);</li><li>void flush();</li><li>void close(); 需要先刷新，再关闭此流</li></ul></li><li><p>因为字符流直接以字符作为操作单位，所以 Writer 可以用字符串来替换字符数组，  即以 String 对象作为参数</p><ul><li>void write(String str);</li><li>void write(String str, int off, int len);</li></ul></li><li><p>FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream  用于写出非文本数据之类的原始字节流。要写出字符流，需要使用 FileWriter</p></li></ul></li><li><p><strong>OutputStream</strong></p><ul><li>void write(int b)：将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写 入的字节是参数b 的八个低位。b 的 24 个高位将被忽略。 即写入0~255范围的。</li><li>void write(byte[] b)：将b.length 个字节从指定的byte 数组写入此输出流。write(b) 的常规协定是：应该 与调用write(b, 0, b.length) 的效果完全相同。</li><li>void write(byte[] b,int off,int len)：将指定byte 数组中从偏移量 off 开始的len 个字节写入此输出流。</li><li>public void flush()throws IOException：刷新此输出流并强制写出所有缓冲的输出字节，调用此方法指示应将这些字节立<br>即写入它们预期的目标。</li><li>public void close() throws IOException：关闭此输出流并释放与该流关联的所有系统资源。</li></ul></li><li><p><strong>Writer</strong></p><ul><li>void write(int c)：写入单个字符。要写入的字符包含在给定整数值的 16 个低位中，16 高位被忽略。 即<br>写入0 到 65535 之间的Unicode码。</li><li>void write(char[] cbuf)：写入字符数组。</li><li>void write(char[] cbuf,int off,int len)：写入字符数组的某一部分。从off开始，写入len个字符</li><li>void write(String str)：写入字符串。</li><li>void write(String str,int off,int len)：写入字符串的某一部分。</li><li>void flush()：刷新该流的缓冲，则立即将它们写入预期目标。</li><li>public void close() throws IOException：关闭此输出流并释放与该流关联的所有系统资源。<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileWriter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.提供File类的对象，指明写出到的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">fileW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\dest.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提供FileWriter的对象，用于数据的写出</span></span><br><span class="line">            <span class="comment">// append:true 理解为追加，false理解为覆盖</span></span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(fileW, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.写出的操作</span></span><br><span class="line">            fw.write(<span class="string">&quot;I have a dream!\n&quot;</span>);</span><br><span class="line">            fw.write(<span class="string">&quot;you need to have a dream!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.流资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fw != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReaderWriter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.提供File类的对象，指明读入的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">fileR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\this.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.1提供File类的对象，指明写出到的文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">fileW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\IO\\dest.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输入流和输出流的对象</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(fileR);</span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(fileW);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.数据的读入和写出操作</span></span><br><span class="line">            <span class="type">char</span>[] charsBuffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(charsBuffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//每次写出len个字符</span></span><br><span class="line">                fw.write(charsBuffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关闭流资源</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fr != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">2</span>, Passes: <span class="number">2</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221023222806.png" alt=""></p>              </div>            </details></li></ul></li></ul><h2 id="节点流-或文件流"><a href="#节点流-或文件流" class="headerlink" title="节点流(或文件流)"></a>节点流(或文件流)</h2><ul><li><p><strong>节点流(或文件流)：注意点</strong></p><ul><li>定义文件路径时，注意：可以用“/”或者“\”。</li><li>在写入一个文件时，如果使用构造器FileOutputStream(file)，则目录下有同名文件将被覆盖。</li><li>如果使用构造器FileOutputStream(file,true)，则目录下的同名文件不会被覆盖，  在文件内容末尾追加内容。</li><li>在读取文件时，必须保证该文件已存在，否则报异常。</li><li>字节流操作字节，比如：.mp3，.avi，.rmvb，mp4，.jpg，.doc，.ppt</li><li>字符流操作字符，只能操作普通文本文件。最常见的文本文件：.txt，.java，.c，.cpp 等语言的源代码。尤其注意.doc,excel,ppt这些不是文 本文件。</li></ul></li><li><p><strong>步骤</strong></p></li></ul><ol><li>处理对象</li><li>创建流</li><li>具体处理流程</li><li>关闭流<div class="note success flat"><p>示例，创建处理文件的方法</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        copyFile(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.mp4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\dest.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;花费的时间为：&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">(String thisPath, String destPath)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">fileR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(thisPath);</span><br><span class="line">            <span class="type">File</span> <span class="variable">fileW</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destPath);</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileR);</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileW);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">复制成功</span><br><span class="line">花费的时间为：42ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/演示.gif" alt=""></p>              </div>            </details><blockquote><p>注：处理文本文件，例如txt,.java,.py等的使用FileReader，FileWriter，处理字节流的如.mp3,mp4等的，使用FileOutputStream，FileInputStream，处理文件。文本文件也可以用字节流处理，但是字节流不可以用文本处理方式。</p></blockquote></li></ol><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><ul><li><p>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类 时，会创建一个内部缓冲区数组，缺省使用8192个字节(8Kb)的缓冲区。</p></li><li><p>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：</p><ul><li>BufferedInputStream 和 BufferedOutputStream</li><li>BufferedReader 和 BufferedWriter</li></ul></li><li><p>当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区</p></li><li>当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从 文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中 读取下一个8192个字节数组。</li><li>向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，  BufferedOutputStream才会把缓冲区中的数据一次性- 写到文件里。使用方法 flush()可以强制将缓冲区的内容全部写入输出流</li><li>关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也 会相应关闭内层节点流</li><li>flush()方法的使用：手动将buffer中内容写入文件</li><li>如果是带缓冲区的流对象的close()方法，不但会关闭流，还会在关闭流之前刷 新缓冲区，关闭后不能再写出<div class="note success flat"><p>示例：BufferedReader和BufferedWriter</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderBufferedWriterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileReader</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>)));</span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileWriter</span>(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\dest.txt&quot;</span>)));</span><br><span class="line">            </span><br><span class="line">            String date;</span><br><span class="line">            <span class="keyword">while</span> ((date = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                bw.write(date);</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note success flat"><p>练习：获取文本上每个字符出现的次数</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCountTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testWordCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWordCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Map集合</span></span><br><span class="line">            Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.遍历每一个字符,每一个字符出现的次数放到map中</span></span><br><span class="line">            fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//int 还原 char</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> (<span class="type">char</span>) c;</span><br><span class="line">                <span class="comment">// 判断char是否在map中第一次出现</span></span><br><span class="line">                <span class="keyword">if</span> (map.get(ch) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    map.put(ch, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(ch, map.get(ch) + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.把map中数据存在文件count.txt</span></span><br><span class="line">            <span class="comment">//3.1 创建Writer</span></span><br><span class="line">            bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\wordcount.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.2 遍历map,再写入数据</span></span><br><span class="line">            Set&lt;Map.Entry&lt;Character, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (entry.getKey()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                        bw.write(<span class="string">&quot;空格=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:<span class="comment">//\t表示tab 键字符</span></span><br><span class="line">                        bw.write(<span class="string">&quot;tab键=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">&quot;回车=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:<span class="comment">//</span></span><br><span class="line">                        bw.write(<span class="string">&quot;换行=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        bw.write(entry.getKey() + <span class="string">&quot;=&quot;</span> + entry.getValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.关流</span></span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221024181240.png" alt=""></p>              </div>            </details></li></ul><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><ul><li>转换流提供了在字节流和字符流之间的转换</li><li>Java API提供了两个转换流：<ul><li>InputStreamReader：将InputStream转换为Reader</li><li>OutputStreamWriter：将Writer转换为OutputStream</li></ul></li><li>字节流中的数据都是字符时，转成字符流操作更高效。</li><li>很多时候我们使用转换流来处理文件乱码问题。实现编码和 解码的功能。</li></ul><ul><li><p><strong>InputStreamReader</strong></p><ul><li>实现将字节的输入流按指定字符集转换为字符的输入流。</li><li>需要和InputStream“套接”。</li><li>构造器<ul><li>public InputStreamReader(InputStream in)</li><li>public InputSreamReader(InputStream in,String charsetName)</li><li>如： Reader isr = new InputStreamReader(System.in,”gbk”);</li></ul></li></ul></li><li><p><strong>OutputStreamWriter</strong></p><ul><li>实现将字符的输出流按指定字符集转换为字节的输出流。</li><li>需要和OutputStream“套接”。</li><li>构造器<ul><li>public OutputStreamWriter(OutputStream out)</li><li>public OutputSreamWriter(OutputStream out,String charsetName)<div class="note success flat"><p>示例：UTF-8转GBK</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        testOutputStreamWriter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testOutputStreamWriter</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isrU</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">oswG</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fisU</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(</span><br><span class="line">                    <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fosG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(</span><br><span class="line">                    <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\dest.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            isrU = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fisU, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            oswG = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fosG, <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = isrU.read(chars)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                oswG.write(chars, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;操作成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isrU != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    isrU.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (oswG != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oswG.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">操作成功</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221024204227.png" alt=""></p>              </div>            </details></li></ul></li></ul></li><li><p><strong>字符编码</strong></p></li><li><p>编码表的由来</p><ul><li>计算机只能识别二进制数据，早期由来是电信号。为了方便应用计算机，让它可以识 别各个国家的文字。就将各个国家的文字用数字来表示，并一一对应，形成一张表。 这就是编码表。</li></ul></li><li><p>常见的编码表</p><ul><li>ASCII：美国标准信息交换码。用一个字节的7位可以表示。</li><li>ISO8859-1：拉丁码表。欧洲码表。用一个字节的8位表示。</li><li>GB2312：中国的中文编码表。最多两个字节编码所有字符</li><li>GBK：中国的中文编码表升级，融合了更多的中文文字符号。最多两个字节编码</li><li>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的 字符码。所有的文字都用两个字节来表示。</li><li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li></ul></li><li><p>Unicode不完美，这里就有三个问题，一个是，我们已经知道，英文字母只用 一个字节表示就够了，第二个问题是如何才能区别Unicode和ASCII？计算机 怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？第三个，如果 和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，  就少了很多值无法用于表示字符，不够表示所有字符。Unicode在很长一段时 间内无法推广，直到互联网的出现。</p></li><li>面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-  8就是每次8个位传输数据，而UTF-16就是每次16个位。这是为传输而设计的 编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</li><li>Unicode只是定义了一个庞大的、全球通用的字符集，并为每个字符规定了唯 一确定的编号，具体存储成什么样的字节流，取决于字符编码方案。推荐的 Unicode编码是UTF-8和UTF-16。</li></ul><h2 id="标准输入、输出流"><a href="#标准输入、输出流" class="headerlink" title="标准输入、输出流"></a>标准输入、输出流</h2><ul><li>System.in和System.out分别代表了系统标准的输入和输出设备</li><li>默认输入设备是：键盘，输出设备是：显示器</li><li>System.in的类型是InputStream</li><li>System.out的类型是PrintStream，其是OutputStream的子类 FilterOutputStream 的子类</li><li>重定向：通过System类的setIn，setOut方法对默认设备进行改变。<ul><li>public static void setIn(InputStream in)</li><li>public static void setOut(PrintStream out)<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemInOutTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;e&quot;</span>.equalsIgnoreCase(data) || <span class="string">&quot;exit&quot;</span>.equalsIgnoreCase(data)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">upperCase</span> <span class="operator">=</span> data.toUpperCase();</span><br><span class="line">                System.out.println(upperCase);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">请输入字符串：</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">请输入字符串：</span><br><span class="line">jermyn</span><br><span class="line">JERMYN</span><br><span class="line">请输入字符串：</span><br><span class="line">e</span><br><span class="line">程序结束</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ul><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><ul><li>实现将基本数据类型的数据格式转化为字符串输出</li><li>打印流：PrintStream和PrintWriter<ul><li>提供了一系列重载的print()和println()方法，用于多种数据类型的输出</li><li>PrintStream和PrintWriter的输出不会抛出IOException异常<br>PrintStream和PrintWriter有自动flush功能</li><li>PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。</li><li>在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。</li><li>System.out返回的是PrintStream的实例<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamWriter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>));</span><br><span class="line">            <span class="comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 &#x27;\n&#x27; 时都会刷新输出缓冲区)</span></span><br><span class="line">            ps = <span class="keyword">new</span> <span class="title class_">PrintStream</span>(fos, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;<span class="comment">// 把标准输出流(控制台输出)改成文件</span></span><br><span class="line">                System.setOut(ps);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">255</span>; i++) &#123; <span class="comment">// 输出ASCII字符</span></span><br><span class="line">                System.out.print((<span class="type">char</span>) i);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">50</span> == <span class="number">0</span>) &#123; <span class="comment">// 每50个数据一行</span></span><br><span class="line">                    System.out.println(); <span class="comment">// 换行</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221024212753.png" alt=""></p>              </div>            </details></li></ul></li></ul><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><ul><li>为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。</li><li>数据流有两个类：(用于读取和写出基本数据类型、String类的数据）<ul><li>DataInputStream 和 DataOutputStream</li><li>分别“套接”在 InputStream 和 OutputStream 子类的流上</li></ul></li></ul><ul><li><p><strong>DataInputStream中的方法</strong></p><ul><li>boolean readBoolean()  </li><li>char readChar()  </li><li>double readDouble()  </li><li>long readLong()</li><li>String readUTF()</li><li>byte readByte()  </li><li>float readFloat()  </li><li>short readShort()  </li><li>int readInt()</li><li>void readFully(byte[] b)</li></ul></li><li><p><strong>DataOutputStream中的方法</strong></p><ul><li>将上述的方法的read改为相应的write即可。<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateStreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dos = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\data.txt&quot;</span>));</span><br><span class="line">            dis = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\data.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            dos.writeUTF(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeInt(<span class="number">23</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            dos.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">            dos.flush();</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isMale</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">            System.out.println(<span class="string">&quot;age = &quot;</span> + age);</span><br><span class="line">            System.out.println(<span class="string">&quot;isMale = &quot;</span> + isMale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    dis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">name = <span class="type">Jermyn</span></span><br><span class="line"><span class="variable">age</span> <span class="operator">=</span> <span class="number">23</span></span><br><span class="line">isMale = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221024213953.png" alt=""></p>              </div>            </details></li></ul></li></ul><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><ul><li><p>ObjectInputStream和OjbectOutputSteam</p><ul><li>用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可 以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</li></ul></li><li><p><strong>序列化：</strong>用ObjectOutputStream类保存基本类型数据或对象的机制</p></li><li><strong>反序列化：</strong>用ObjectInputStream类读取基本类型数据或对象的机制</li><li>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</li></ul><ul><li><p><strong>对象的序列化</strong></p><ul><li>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从 而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传 输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原 来的Java对象</li><li>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据， 使其在保存和传输时可被还原</li><li>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返 回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是 JavaEE 平台的基础</li><li>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可 序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一。 否则，会抛出NotSerializableException异常<ul><li>Serializable</li><li>Externalizable</li></ul></li></ul></li><li><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p><ul><li>private static final long serialVersionUID;</li><li>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象 进行版本控制，有关各版本反序列化时是否兼容。</li><li>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自 动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明。</li></ul></li><li><p>简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验 证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的 serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同 就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异 常。(InvalidCastException)</p></li><li><p><strong>使用对象流序列化对象</strong></p></li><li>若某个类实现了 Serializable 接口，该类的对象就是可序列化的：<ol><li>创建一个 ObjectOutputStream</li><li>调用 ObjectOutputStream 对象的 writeObject(对象) 方法输出可序列化对象</li><li>注意写出一次，操作flush()一次</li></ol></li><li><p>反序列化</p><ol><li>创建一个 ObjectInputStream</li><li>调用 readObject() 方法读取流中的对象</li></ol></li><li><p>强调：如果某个类的属性不是基本数据类型或 String 类型，而是另一个 引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的 Field 的类也不能序列化</p><div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectInputOutputStreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化(Serialization)</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\file.dat&quot;</span>);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"><span class="comment">//            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;C:\\Users\\Administrator\\Desktop\\file.dat&quot;));</span></span><br><span class="line">            oos.writeObject(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jermyn&quot;</span>, <span class="number">18</span>));</span><br><span class="line">            oos.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化(Deserialization)</span></span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\file.dat&quot;</span>));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">            System.out.println(p);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (oos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ois != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">475463534532L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Person&#123;name=<span class="string">&#x27;Jermyn&#x27;</span>, age=<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h2 id="随机存取文件流"><a href="#随机存取文件流" class="headerlink" title="随机存取文件流"></a>随机存取文件流</h2><ul><li><p><strong>RandomAccessFile 类</strong></p><ul><li>RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类。并 且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也 可以写。</li><li><p>RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意<br>地方来读、写文件</p><ul><li>支持只访问文件的部分内容</li><li>可以向已存在的文件后追加内容</li></ul></li><li><p>RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针：</p><ul><li>long getFilePointer()：获取文件记录指针的当前位置</li><li>void seek(long pos)：将文件记录指针定位到 pos 位置</li></ul></li></ul></li><li><p><strong>RandomAccessFile 类</strong></p><ul><li><p>构造器</p><ul><li>public RandomAccessFile(File file, String mode)</li><li>public RandomAccessFile(String name, String mode)</li></ul></li><li><p>创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指 定 RandomAccessFile 的访问模式：</p><ul><li>r: 以只读方式打开</li><li>rw：打开以便读取和写入</li><li>rwd:打开以便读取和写入；同步文件内容的更新</li><li>rws:打开以便读取和写入；同步文件内容和元数据的更新<br><strong><em>点击图片可以跳转源码</em></strong><br><a href="https://nowjava.com/readcode/jdk8/3611"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221025194733.png" alt=""></a></li></ul></li><li><p>如果模式为只读r。则不会创建文件，而是会去读取一个已经存在的文件， 如果读取的文件不存在则会出现异常。 如果模式为rw读写。如果文件不 存在则会去创建文件，如果存在则不会创建。</p><div class="note success flat"><p>关于RandomAccessFile的三种使用方法 </p></div><div class="tabs" id="randomaccessfile"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#randomaccessfile-1">RandomAccessFileTest.java</button></li><li class="tab"><button type="button" data-href="#randomaccessfile-2">RandomAccessFileCoverTest.java</button></li><li class="tab"><button type="button" data-href="#randomaccessfile-3">RandomAccessFileInsertTest</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="randomaccessfile-1"><p><span class='p green'>常规方式</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessFileTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">rafR</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">rafW</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rafR = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.mp4&quot;</span>), <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">            rafW = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\dest.mp4&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = rafR.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                rafW.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rafR != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rafW.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rafW != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rafR.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221025195526.png" alt=""></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="randomaccessfile-2"><p><span class='p green'>覆盖文件的内容</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessFileCoverTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">rafRW</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rafRW = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">            rafRW.write(<span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">            rafRW.seek(<span class="number">2</span>);</span><br><span class="line">            rafRW.write(<span class="string">&quot;CDEF&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">            rafRW.seek(rafRW.length());</span><br><span class="line">            rafRW.write(<span class="string">&quot;123456789&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rafRW != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rafRW.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221025200703.png" alt=""></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="randomaccessfile-3"><p><span class='p green'>实现插入操作</span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Package: cn.jermyn.test02</span></span><br><span class="line"><span class="comment"> * Description：seek位置插入数据dataD思路：（讲究一个字拼）</span></span><br><span class="line"><span class="comment">记录seek到File.length的数据dataB，在seek位置插入需要插入的数据dataD，在dataD后面插入dataB</span></span><br><span class="line"><span class="comment"> * Author: Jermyn</span></span><br><span class="line"><span class="comment"> * Version: 0.0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessFileInsertTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">rafRW</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\this.txt&quot;</span>);</span><br><span class="line">            rafRW = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line">            rafRW.write(<span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">            rafRW.seek(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>((<span class="type">int</span>) file.length());</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = rafRW.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                builder.append(<span class="keyword">new</span> <span class="title class_">String</span>(bytes), <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rafRW.seek(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            rafRW.write(<span class="string">&quot;CEDF&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">            rafRW.write(builder.toString().getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rafRW != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rafRW.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221025201110.png" alt=""></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul></li></ul><h1 id="第七章-网络编程"><a href="#第七章-网络编程" class="headerlink" title="第七章 网络编程"></a>第七章 网络编程</h1><h2 id="通信要素1：IP和端口号"><a href="#通信要素1：IP和端口号" class="headerlink" title="通信要素1：IP和端口号"></a>通信要素1：IP和端口号</h2><ul><li><p><strong>IP 地址：InetAddress</strong></p><ul><li>唯一的标识 Internet 上的计算机（通信实体）</li><li>本地回环地址(hostAddress)：127.0.0.1    主机名(hostName)：localhost</li><li>IP地址分类方式1：IPV4 和 IPV6</li><li>IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1</li><li>IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示， 数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li><li>IP地址分类方式2：公网地址(万维网使用)和私有地址(局域网使用)。192.168.  开头的就是私有址址，范围即为192.168.0.0—192.168.255.255，专门为组织机 构内部使用</li><li>特点：不易记忆</li></ul></li><li><p><strong>端口号标识正在计算机上运行的进程（程序）</strong></p></li><li>不同的进程有不同的端口号</li><li>被规定为一个 16 位的整数 0~65535。</li><li><p>端口分类：</p><ul><li>公认端口：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）</li><li>注册端口：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）。</li><li>动态/私有端口：49152~65535。</li></ul></li><li><p>端口号与IP地址的组合得出一个网络套接字：Socket。</p></li><li><p><strong>InetAddress类</strong></p><ul><li><p>Internet上的主机有两种方式表示地址：</p><ul><li>域名(hostName)：www.jermyn.cn</li><li>IP 地址(hostAddress)：76.76.21.123</li></ul></li><li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p></li><li>InetAddress    类对象含有一个Internet主机地址的域名和 IP 地址</li><li>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化成IP地址，这样才能和主机建立连接。 ———-域名解析</li><li><p>InetAddress类没有提供公共的构造器，而是提供了如下几个静态方法来获取InetAddress实例</p><ul><li>public static InetAddress getLocalHost()</li><li>public static InetAddress getByName(String host)</li></ul></li><li><p>InetAddress提供了如下几个常用的方法</p><ul><li>public String getHostAddress()：返回 IP 地址字符串（以文本表现形式）。</li><li>public String getHostName()：获取此 IP 地址的主机名</li><li>public boolean isReachable(int timeout)：测试是否可以达到该地址</li></ul></li></ul></li></ul><h2 id="通信要素2：网络协议"><a href="#通信要素2：网络协议" class="headerlink" title="通信要素2：网络协议"></a>通信要素2：网络协议</h2><ul><li><p><strong>TCP/IP协议簇</strong></p><ul><li><p>传输层协议中有两个非常重要的协议：</p><ul><li>传输控制协议TCP(Transmission Control Protocol)</li><li>用户数据报协议UDP(User Datagram Protocol)。</li></ul></li><li><p>TCP/IP 以其两个主要协议：传输控制协议(TCP)和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</p><ul><li>IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。</li><li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层。</li></ul></li></ul></li><li><p><strong>TCP 和 UDP</strong></p><ul><li><p><strong>TCP协议：</strong></p><ul><li>使用TCP协议前，须先建立TCP连接，形成传输数据通道</li><li>传输前，采用“三次握手”方式，点对点通信，是可靠的</li><li>TCP协议进行通信的两个应用进程：客户端、服务端。</li><li>在连接中可进行大数据量的传输</li><li>传输完毕，需释放已建立的连接，效率低</li></ul></li><li><p><strong>UDP协议：</strong></p><ul><li>将数据、源、目的封装成数据包，不需要建立连接</li><li>每个数据报的大小限制在64K内</li><li>发送不管对方是否准备好，接收方收到也不确认，故是不可靠的</li><li>可以广播发送</li><li>发送数据结束时无需释放资源，开销小，速度快</li></ul></li></ul></li><li><p><strong>Socket</strong></p><ul><li>利用套接字(Socket)开发网络应用程序早已被广泛的采用，以至于成为事实 上的标准。</li><li>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标 识符套接字。</li><li>通信的两端都要有Socket，是两台机器间通信的端点。</li><li>网络通信其实就是Socket间的通信。</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li><li>一般主动发起通信的应用程序属客户端，等待通信请求的为服务端。</li><li>Socket分类：<ul><li>流套接字（stream socket）：使用TCP提供可依赖的字节流服务</li><li>数据报套接字（datagram socket）：使用UDP提供“尽力而为”的数据报服务</li></ul></li></ul></li><li><p><strong>Socket类的常用构造器：</strong></p><ul><li>public Socket(InetAddress address,int port)创建一个流套接字并将其连接到指定IP 地址的指定端口号。</li><li>public Socket(String host,int port)创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ul></li><li><p><strong>Socket类的常用方法：</strong></p><ul><li>public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息</li><li>public OutputStream getOutputStream()返回此套接字的输出流。可以用于发送网络消息</li><li>public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</li><li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址</li><li>public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回 0。</li><li>public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回 -1。即本端的 端口号。</li><li>public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接 或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和 OutputStream。</li><li>public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将 返回EOF（文件结束符）。 即不能在从此套接字的输入流中接收任何数据。</li><li>public void shutdownOutput()禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发 送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，  则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</li></ul></li></ul><h2 id="TCP网络编程"><a href="#TCP网络编程" class="headerlink" title="TCP网络编程"></a>TCP网络编程</h2><ul><li><strong>基于Socket的TCP编程</strong></li><li><p>Java语言的基于套接字编程分为服务端编程和客户端编程<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221025225920.png" alt=""></p></li><li><p><strong>客户端Socket的工作过程包含以下四个基本的步骤：</strong></p><ol><li>创建 Socket：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到Socket 的输入/出流： 使用 getInputStream()方法获得输入流，使用 getOutputStream()方法获得输出流，进行数据传输</li><li>按照一定的协议对Socket 进行读/写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li><li>关闭 Socket：断开客户端到服务器的连接，释放线路</li></ol></li><li><p><strong>客户端创建Socket对象</strong></p><ul><li>客户端程序可以使用Socket类创建对象，创建的同时会自动向服务器方发起连 接。Socket的构造器是：</li><li>Socket(String host,int port)throws UnknownHostException,IOException：向服务器(域名是host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。</li><li>Socket(InetAddress address,int port)throws IOException：根据InetAddress对象所表示的 IP地址以及端口号port发起连接。</li></ul></li><li><p>客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求</p></li></ul><ul><li><strong>服务器程序的工作过程包含以下四个基本的步骤：</strong></li></ul><ol><li>调用 ServerSocket(int port) ：创建一个服务器端套接字，并绑定到指定端口 上。用于监听客户端的请求。</li><li>调用 accept()：监听连接请求，如果客户端请求连接，则接受连接，返回通信 套接字对象。</li><li>调用 该Socket类对象的 getOutputStream() 和 getInputStream ()：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭ServerSocket和Socket对象：客户端访问结束，关闭通信套接字。</li></ol><ul><li><strong>服务器建立 ServerSocket 对象</strong><ul><li>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口 中的业务员。也就是说，服务器必须事先建立一个等待客户请求建立套接字 连接的ServerSocket对象。</li><li>所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象</li></ul></li></ul><div class="tabs" id="练习"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#练习-1">练习一</button></li><li class="tab"><button type="button" data-href="#练习-2">练习二</button></li><li class="tab"><button type="button" data-href="#练习-3">练习三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="练习-1"><p><div class="note success flat"><p>示例：客户端发送内容给服务端，服务端将内容打印到控制台上。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description：客户端发送内容给服务端，服务端将内容打印到控制台上。</span></span><br><span class="line"><span class="comment"> * Author: Jermyn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClient</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Socket对象，指明服务器端的ip和端口号</span></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">byName</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(byName, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.获取一个输出流，用于输出数据</span></span><br><span class="line">            outputStream = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.写出数据的操作</span></span><br><span class="line">            outputStream.write(<span class="string">&quot;你好我是客户端&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//4.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testServer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建服务器端的ServerSocket，指明自己的端口号</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.调用accept()表示接收来自于客户端的socket</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.获取输入流</span></span><br><span class="line">            inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.读取输入流中的数据</span></span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">5</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;收到了来自于：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;的数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;内容为：&quot;</span> + baos.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221026101150.png" alt=""></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-2"><p><div class="note success flat"><p>示例二：客户端发送文件给服务端，服务端将文件保存在本地。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description：客户端发送文件给服务端，服务端将文件保存在本地。</span></span><br><span class="line"><span class="comment"> * Author: Jermyn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 造socket</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取输出流</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(</span><br><span class="line">                    <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\Socket\\client\\this.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读写过程</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//资源关闭</span></span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 造客户端socket</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 造socket</span></span><br><span class="line">            accept = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输入流</span></span><br><span class="line">            is = accept.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理流</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(</span><br><span class="line">                    <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\Socket\\server\\dest.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 缓冲流</span></span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理过程</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 资源关闭</span></span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (accept != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    accept.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221026105942.png" alt=""></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="练习-3"><p><div class="note success flat"><p>练习3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给 客户端。并关闭相应的连接。</p></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给 客户端。并关闭相应的连接。</span></span><br><span class="line"><span class="comment"> * Author: Jermyn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TcpTest03</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.造socket</span></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.获取输出流</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.处理流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(</span><br><span class="line">                    <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\Socket\\client\\this.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.缓冲流</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5.读写过程</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.关闭数据的输出，表示停止数据传输</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7.客户端接收服务端反馈信息</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="type">int</span> length;</span><br><span class="line">            <span class="keyword">while</span> ((length = is.read(bytes2)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(bytes2, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到了来自于服务端：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;的反馈信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;内容为：\&quot;&quot;</span> + baos.toString() + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 8.资源关闭</span></span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.造客户端socket</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.造socket</span></span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.输入流</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.处理流</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(</span><br><span class="line">                    <span class="string">&quot;C:\\Users\\Administrator\\Desktop\\Socket\\server\\dest.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5.缓冲流</span></span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6.处理过程</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;收到了来自于服务端：&quot;</span> + socket.getInetAddress().getHostAddress() + <span class="string">&quot;的反馈数据&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;传输数据成功&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;发送反馈信息&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7.服务端给予客户端反馈</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;你好客户端，数据我已收到&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 资源关闭</span></span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (os != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221026130804.png" alt=""><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/演示5.gif" alt=""></p>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="UDP网络编程"><a href="#UDP网络编程" class="headerlink" title="UDP网络编程"></a>UDP网络编程</h2><ul><li><p><strong>UDP网络通信</strong></p><ul><li>类 DatagramSocket 和 DatagramPacket 实现了基于 UDP 协议网络程序。</li><li>UDP数据报通过数据报套接字 DatagramSocket 发送和接收，系统不保证</li><li>UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li><li>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP  地址和端口号以及接收端的IP地址和端口号。</li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和 接收方的连接。如同发快递包裹一样。</li></ul></li><li><p><strong>DatagramSocket 类的常用方法</strong></p><ul><li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。</li><li>public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。 本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地 址，IP 地址由内核选择。</li><li>public void close()关闭此数据报套接字。</li><li>public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的 IP 地址和远程主机的端口号。</li><li>public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket  的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法 在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的 长度长，该信息将被截短。</li><li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。</li><li>public int getLocalPort()返回此套接字绑定的本地主机上的端口号。</li><li>public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回null。</li><li>public int getPort()返回此套接字的端口。如果套接字未连接，则返回 -1。</li><li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为length 的数据包。 length 参数必须小于等于 buf.length。</li><li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数 据报包，用来将长度为 length的包发送到指定主机上的指定端口号。length  参数必须小于等于buf.length。</li><li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该<br>机器或者是从该机器接收到的。</li><li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或 者是从该主机接收到的。</li><li>public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续length 长度。</li><li>public int getLength()返回将要发送或接收到的数据的长度。</li></ul></li><li><p><strong>流 程：</strong></p><ol><li>DatagramSocket与DatagramPacket</li><li>建立发送端，接收端</li><li>建立数据包</li><li>调用Socket的发送、接收方法</li><li>关闭Socket<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UdpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSender</span><span class="params">()</span>  &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;UDP发送数据&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] data = str.getBytes();</span><br><span class="line"></span><br><span class="line">            <span class="type">InetAddress</span> <span class="variable">inet</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line"></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, <span class="number">0</span>, data.length, inet, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            socket.send(packet);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReceiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, <span class="number">0</span>, data.length);</span><br><span class="line"></span><br><span class="line">            socket.receive(packet);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221026172842.png" alt=""></p>              </div>            </details></li></ol></li></ul><h2 id="URL编程"><a href="#URL编程" class="headerlink" title="URL编程"></a>URL编程</h2><ul><li><p><strong>URL类</strong></p><ul><li>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上某一资源的地址。</li><li>它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</li><li>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</li><li><p>URL的基本结构由5部分组成：</p><ul><li>&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;#片段名?参数列表</li><li>例 如 :  <a href="http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123</a></li><li>片段名：即锚点，例如看小说，直接定位到章节</li><li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li></ul></li><li><p>为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初 始化一个 URL 对象：</p><ul><li>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。例 如：URL url = new URL (“<a href="http://www">http://www</a>. jermyn.cn/“);</li><li>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。例如：URL downloadUrl = new URL(url, “download.html”)</li><li>public URL(String protocol, String host, String file); 例如：new URL(“http”,  “www.jermyn.cn”, “download. html”);</li><li>public URL(String protocol, String host, int port, String file); 例如: URL gamelan = new<br>URL(“http”, “www.jermyn.cn”, 80, “download.html”);</li></ul></li><li><p>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通 常是用 try-catch 语句进行捕获。</p></li><li><p>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的 方法来获取这些属性：</p><ul><li>public String getProtocol ( ) 获取该 URL 的协议名</li><li>public String getHost ( ) 获取该URL的主机名</li><li>public String getPort ( ) 获取该URL的端口号</li><li>public String getPath ( ) 获取该URL的文件路径</li><li>public String getFile ( ) 获取该URL的文件名</li><li>public String getQuery ( ) 获取该URL的查询名</li></ul></li></ul></li><li><p><strong>针对HTTP协议的URLConnection类</strong></p><ul><li>URL的方法 openStream()：能从网络上读取数据</li><li>若希望输出数据，例如向服务器端的 CGI （公共网关接口-Common Gateway  Interface-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一 些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用 URLConnection 。</li><li><p>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，  首先要在一个 URL 对象上通过方法 openConnection() 生成对应的 URLConnection  对象。如果连接过程失败，将产生IOException.</p><ul><li>URL netchinaren = new URL (“<a href="http://www.jermyn.cn/index.shtml">http://www.jermyn.cn/index.shtml</a>“);</li><li>URLConnectonn u = netchinaren.openConnection( );</li></ul></li><li><p>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。</p><ul><li>public Object getContent( ) throws IOException</li><li>public int getContentLength( )</li><li>public String getContentType( )</li><li>public long getDate( )</li><li>public long getLastModified( )</li><li>public InputStream getInputStream( )throws IOException</li><li>public OutputSteram getOutputStream( )throws IOException<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;$URL&quot;</span>);</span><br><span class="line"></span><br><span class="line">            urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">            urlConnection.connect();</span><br><span class="line"></span><br><span class="line">            is = urlConnection.getInputStream();</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;$DEST_PATH&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(is != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(urlConnection != <span class="literal">null</span>)&#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>小结</strong></p><ul><li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li><li>客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定 服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号 是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户 端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实 现面向连接的会话。</li><li>Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li><li>类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端 和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输 通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络 拥挤等问题，它保证数据可靠的传送。</li><li>类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示 Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之 间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li></ul></li></ul><h1 id="第八章-Java反射机制"><a href="#第八章-Java反射机制" class="headerlink" title="第八章 Java反射机制"></a>第八章 Java反射机制</h1><h2 id="Java反射机制概述"><a href="#Java反射机制概述" class="headerlink" title="Java反射机制概述"></a>Java反射机制概述</h2><ul><li><p><strong>Java Reflection</strong></p><ul><li>Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期 借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内 部属性及方法。</li><li>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个 类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可 以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看 到类的结构，所以，我们形象的称之为：反射。</li></ul></li><li><p><strong>Java反射机制提供的功能</strong></p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul></li></ul><h2 id="理解Class类并获取Class的实例"><a href="#理解Class类并获取Class的实例" class="headerlink" title="理解Class类并获取Class的实例"></a>理解Class类并获取Class的实例</h2><ul><li><p><strong>Class 类</strong></p><ul><li><p>在Object类中定义了以下的方法，此方法将被所有子类继承：</p><ul><li>public final Class getClass()</li></ul></li><li><p>以上的方法返回值的类型是一个Class类， 此类是Java反射的源头，实际上所谓反射 从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p></li><li>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构(class/interface/enum/annotation/primitive type/void/[])的有关信息。<ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的</li><li>Class对象</li></ul></li></ul></li><li><p><strong>获取Class类的实例(四种方法)</strong></p></li></ul><ol><li>前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠， 程序性能最高<br>实例：Class clazz = String.class;</li><li>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象<br>实例：Class clazz = “www.atguigu.com”.getClass();</li><li>前提：已知一个类的全类名，且该类在类路径下，可通过Class类的静态方 法forName()获取，可能抛ClassNotFoundException<br>实例：Class clazz = Class.forName(“java.lang.String”);</li><li>其他方式(不做要求)<br>ClassLoader cl = this.getClass().getClassLoader();<br>Class clazz4 = cl.loadClass(“类的全类名”);<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetClassInstance</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：通过运行时类的对象,调用getClass()</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> p1.getClass();</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：调用Class的静态方法：forName(String classPath)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;cn.jermyn.test01.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：使用类的加载器：ClassLoader  (了解)</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ReflectionTest.class.getClassLoader();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz4</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;cn.jermyn.test01.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cn</span>.jermyn.test01.Person</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cn</span>.jermyn.test01.Person</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cn</span>.jermyn.test01.Person</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">1</span>, Passes: <span class="number">1</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>哪些类型可以有Class对象？</strong><ol><li>class：外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ol></li></ul><h2 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h2><ul><li><strong>类的加载过程</strong><br>  当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过 如下三个步骤来对该类进行初始化。<ol><li>类的加载(Load)：将类的class文件读入内存，并为之创建一 个java.lang.Class对象。此过程由类加载器完成</li><li>类的链接(Link)：将类的二进制数 据合并到JRE中</li><li>类的初始化(Initialize)：JVM负责对类 进行初始化</li></ol></li><li><strong>加载：</strong>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时 数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问 入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的 过程需要类加载器参与。</li><li><p><strong>链接：</strong>将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存 都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul></li><li><p><strong>初始化：</strong></p><ul><li>执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中 所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信 息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</li></ul></li><li><p><strong>什么时候会发生类初始化？</strong></p><ul><li><p><em>类的主动引用（一定会发生类的初始化）</em></p><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></li><li><p><em>类的被动引用（不会发生类的初始化）</em></p></li><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化<ul><li>当通过子类引用父类的静态变量，不会导致子类初始化</li></ul></li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常 量池中了）</li></ul></li><li><p><strong>类加载器的作用：</strong></p><ul><li>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方 法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为 方法区中类数据的访问入口。</li><li>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器 中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</li></ul></li></ul><h2 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h2><ul><li><p><strong>有了Class对象，能做什么？</strong></p><ul><li>创建类的对象：调用Class对象的newInstance()方法</li><li>要 求：    <ol><li>类必须有一个无参数的构造器。</li><li>类的构造器的访问权限需要足够。</li></ol></li></ul></li><li><p><strong>难道没有无参的构造器就不能创建对象了吗？</strong><br>不是！只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。<br>步骤如下：</p><ol><li>通过Class类的getDeclaredConstructor(Class … parameterTypes)取得本类的指定形参类 型的构造器 </li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需的各个参数。 </li><li>通过Constructor实例化对象。<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewInstanceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3</span>);<span class="comment">//0,1,2</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span> (num) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;cn.jermyn.test01.Person&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> getInstance(classPath);</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(classPath);</span><br><span class="line">        <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; aClass = (Class&lt;Person&gt;) Class.forName(<span class="string">&quot;cn.jermyn.test01.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> aClass.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">----------------分割线----------------</span><br><span class="line">Thu Oct <span class="number">27</span> <span class="number">20</span>:<span class="number">31</span>:<span class="number">57</span> CST <span class="number">2022</span></span><br><span class="line">java.lang.Object@3abbfa04</span><br><span class="line"><span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">Person&#123;name=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">0</span>&#125;</span><br><span class="line">Person()</span><br><span class="line">Person&#123;name=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">0</span>&#125;</span><br><span class="line">Thu Oct <span class="number">27</span> <span class="number">20</span>:<span class="number">31</span>:<span class="number">57</span> CST <span class="number">2022</span></span><br><span class="line">java.lang.Object@57fffcd7</span><br><span class="line">Thu Oct <span class="number">27</span> <span class="number">20</span>:<span class="number">31</span>:<span class="number">57</span> CST <span class="number">2022</span></span><br><span class="line">Thu Oct <span class="number">27</span> <span class="number">20</span>:<span class="number">31</span>:<span class="number">57</span> CST <span class="number">2022</span></span><br><span class="line">Thu Oct <span class="number">27</span> <span class="number">20</span>:<span class="number">31</span>:<span class="number">57</span> CST <span class="number">2022</span></span><br><span class="line">Thu Oct <span class="number">27</span> <span class="number">20</span>:<span class="number">31</span>:<span class="number">57</span> CST <span class="number">2022</span></span><br><span class="line">----------------分割线----------------</span><br><span class="line">Person()</span><br><span class="line">Person&#123;name=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">2</span>, Passes: <span class="number">2</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol></li></ul><h2 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h2><p><strong>通过反射获取运行时类的完整结构Field、Method、Constructor、Superclass、Interface、Annotation</strong><br><strong>实现的全部接口;所继承的父类;全部的构造器;全部的方法;全部的Field;</strong></p><ul><li><p><strong>使用反射可以取得：</strong></p><ol><li><p>实现的全部接口</p><ul><li>public Class&lt;?&gt;[] getInterfaces()<br>确定此对象所表示的类或接口实现的接口。</li></ul></li><li><p>所继承的父类</p><ul><li>public Class&lt;? Super T&gt; getSuperclass()<br>返回表示此 Class 所表示的实体（类、接口、基本类型）的父类的Class。</li></ul></li><li><p>全部的构造器</p><ul><li>public Constructor<T>[] getConstructors()<br>返回此 Class 对象所表示的类的所有public构造方法。</li><li><p>public Constructor<T>[] getDeclaredConstructors()<br>此 Class 对象表示的类声明的所有构造方法。</p></li><li><p>Constructor类中：</p><ul><li>取得修饰符: public int getModifiers();</li><li>取得方法名称: public String getName();</li><li>取得参数的类型：public Class&lt;?&gt;[] getParameterTypes();</li></ul></li></ul></li><li><p>全部的方法</p><ul><li>public Method[] getDeclaredMethods()<br>返回此Class对象所表示的类或接口的全部方法</li><li><p>public Method[] getMethods()<br>返回此Class对象所表示的类或接口的public的方法</p></li><li><p>Method类中：</p><ul><li>public Class&lt;?&gt; getReturnType()取得全部的返回值</li><li>public Class&lt;?&gt;[] getParameterTypes()取得全部的参数</li><li>public int getModifiers()取得修饰符</li><li>public Class&lt;?&gt;[] getExceptionTypes()取得异常信息</li></ul></li></ul></li><li><p>全部的Field</p><ul><li>public Field[] getFields()<br>返回此Class对象所表示的类或接口的public的Field。</li><li><p>public Field[] getDeclaredFields()<br>返回此Class对象所表示的类或接口的全部Field。</p></li><li><p>Field方法中：</p><ul><li>public int getModifiers()<br>以整数形式返回此Field的修饰符</li><li>public Class&lt;?&gt; getType()<br>得到Field的属性类型</li><li>public String getName()<br>返回Field的名称。</li></ul></li></ul></li><li><p>Annotation相关</p><ul><li>get Annotation(Class<T> annotationClass)</li><li>getDeclaredAnnotations()</li></ul></li><li><p>泛型相关</p><ul><li>获取父类泛型类型：Type getGenericSuperclass()</li><li>泛型类型：ParameterizedType</li><li>获取实际的泛型类型参数数组：getActualTypeArguments()</li></ul></li><li><p>类所在的包    </p><ul><li>Package getPackage()</li></ul></li></ol></li></ul><div class="note success flat"><p>示例</p></div><div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">1.Creature.Java</button></li><li class="tab"><button type="button" data-href="#示例-2">2.Person.java</button></li><li class="tab"><button type="button" data-href="#示例-3">3.MyAnnotation.java</button></li><li class="tab"><button type="button" data-href="#示例-4">4.MyInterface.java</button></li><li class="tab"><button type="button" data-href="#示例-5">5.FieldTest.java</button></li><li class="tab"><button type="button" data-href="#示例-6">6.MethodTest.java</button></li><li class="tab"><button type="button" data-href="#示例-7">7.OtherTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Creature</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">breath</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生物呼吸&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.test02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;hi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Creature</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;String&gt;, MyInterface &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation(value = &quot;abc&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">show</span><span class="params">(String nation)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的国籍是：&quot;</span> + nation);</span><br><span class="line">        <span class="keyword">return</span> nation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">display</span><span class="params">(String interests, <span class="type">int</span> age)</span> <span class="keyword">throws</span> NullPointerException, ClassCastException &#123;</span><br><span class="line">        <span class="keyword">return</span> interests + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个可爱的人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.test02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = (Class&lt;Person&gt;) Class.forName(<span class="string">&quot;cn.jermyn.test02.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取属性结构</span></span><br><span class="line">        <span class="comment">//getFields():获取当前运行时类及其父类中声明为public访问权限的属性</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredFields():获取当前运行时类中声明的所有属性。（不包含父类中声明的属性）</span></span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : declaredFields) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限修饰符  数据类型 变量名</span></span><br><span class="line">        <span class="keyword">for</span> (Field f : declaredFields) &#123;</span><br><span class="line">            <span class="comment">//1.权限修饰符</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">modifier</span> <span class="operator">=</span> f.getModifiers();</span><br><span class="line">            System.out.print(modifier + <span class="string">&quot;:&quot;</span> + Modifier.toString(modifier) + <span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.数据类型</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> f.getType();</span><br><span class="line">            System.out.print(type.getName() + <span class="string">&quot;\t\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.变量名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fName</span> <span class="operator">=</span> f.getName();</span><br><span class="line">            System.out.print(fName);</span><br><span class="line"></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-6"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = (Class&lt;Person&gt;) Class.forName(<span class="string">&quot;cn.jermyn.test02.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getMethods():获取当前运行时类及其所有父类中声明为public权限的方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//getDeclaredMethods():获取当前运行时类中声明的所有方法。（不包含父类中声明的方法）</span></span><br><span class="line">        Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : declaredMethods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOthers</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : declaredMethods) &#123;</span><br><span class="line">            <span class="comment">//1.获取方法声明的注解</span></span><br><span class="line">            Annotation[] annos = m.getAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (Annotation a : annos) &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.权限修饰符</span></span><br><span class="line">            System.out.print(Modifier.toString(m.getModifiers()) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.返回值类型</span></span><br><span class="line">            System.out.print(m.getReturnType().getName() + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.方法名</span></span><br><span class="line">            System.out.print(m.getName());</span><br><span class="line">            System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.形参列表</span></span><br><span class="line">            Class[] parameterTypes = m.getParameterTypes();</span><br><span class="line">            <span class="keyword">if</span> (!(parameterTypes == <span class="literal">null</span> &amp;&amp; parameterTypes.length == <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i == parameterTypes.length - <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.print(parameterTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.print(parameterTypes[i].getName() + <span class="string">&quot; args_&quot;</span> + i + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-7"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.jermyn.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取构造器结构</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line">        <span class="comment">//getConstructors():获取当前运行时类中声明为public的构造器</span></span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c : constructors) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//getDeclaredConstructors():获取当前运行时类中声明的所有的构造器</span></span><br><span class="line">        Constructor[] declaredConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的父类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">superclass</span> <span class="operator">=</span> clazz.getSuperclass();</span><br><span class="line">        System.out.println(superclass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的带泛型的父类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        System.out.println(genericSuperclass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类的带泛型的父类的泛型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        <span class="type">ParameterizedType</span> <span class="variable">paramType</span> <span class="operator">=</span> (ParameterizedType) genericSuperclass;</span><br><span class="line">        <span class="comment">//获取泛型类型</span></span><br><span class="line">        Type[] actualTypeArguments = paramType.getActualTypeArguments();</span><br><span class="line"><span class="comment">//        System.out.println(actualTypeArguments[0].getTypeName());</span></span><br><span class="line">        System.out.println(((Class) actualTypeArguments[<span class="number">0</span>]).getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类实现的接口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        Class[] interfaces = clazz.getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class c : interfaces) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//获取运行时类的父类实现的接口</span></span><br><span class="line">        Class[] interfaces1 = clazz.getSuperclass().getInterfaces();</span><br><span class="line">        <span class="keyword">for</span> (Class c : interfaces1) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类所在的包</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Package</span> <span class="variable">pack</span> <span class="operator">=</span> clazz.getPackage();</span><br><span class="line">        System.out.println(pack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取运行时类声明的注解</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        Annotation[] annotations = clazz.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annos : annotations) &#123;</span><br><span class="line">            System.out.println(annos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="调用运行时类的指定结构"><a href="#调用运行时类的指定结构" class="headerlink" title="调用运行时类的指定结构"></a>调用运行时类的指定结构</h2><ul><li><strong>调用指定方法</strong><br>通过反射，调用类中的方法，通过Method类完成。步骤：</li></ul><ol><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li></ol><ul><li><p><strong>Object invoke(Object obj, Object …    args)说明：</strong></p><ol><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null</li><li>若原方法若为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为private,则需要在调用此invoke()方法前，显式调用 方法对象的setAccessible(true)方法，将可访问private的方法。</li></ol></li><li><p><strong>调用指定属性</strong></p><ul><li><p>在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。</p><ul><li>public Field getField(String name) 返回此Class对象表示的类或接口的指定的public的Field。</li><li>public Field getDeclaredField(String name)返回此Class对象表示的类或接口的 指定的Field。</li></ul></li><li><p>在Field中：</p><ul><li>public Object get(Object obj) 取得指定对象obj上此Field的属性内容</li><li>public void set(Object obj,Object value) 设置指定对象obj上此Field的属性内容</li></ul></li></ul></li><li><p><strong>关于setAccessible方法的使用</strong></p><ul><li>Method和Field、Constructor对象都有setAccessible()方法。</li><li>setAccessible启动和禁用访问安全检查的开关。</li><li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。<ul><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li><li>使得原本无法访问的私有成员也可以访问</li></ul></li><li>参数值为false则指示反射的对象应该实施Java语言访问检查。</li></ul></li></ul><div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.jermyn.test01.Person;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, NoSuchFieldException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的属性：要求运行时类中属性声明为public</span></span><br><span class="line">        <span class="comment">//通常不采用此方法</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置当前属性的值 set(参数1,参数2):参数1：指明设置哪个对象的属性 参数2：将此属性值设置为多少</span></span><br><span class="line">        id.set(p, <span class="number">1001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前属性的值get():参数1：获取哪个对象的当前属性值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pId</span> <span class="operator">=</span> (<span class="type">int</span>) id.get(p);</span><br><span class="line">        System.out.println(pId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调属性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = (Class&lt;Person&gt;) Class.forName(<span class="string">&quot;cn.jermyn.test01.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. getDeclaredField(String fieldName):获取运行时类中指定变量名的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证当前属性是可访问的</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取、设置指定对象的此属性值</span></span><br><span class="line">        name.set(person, <span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        System.out.println(name.get(person));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = (Class&lt;Person&gt;) Class.forName(<span class="string">&quot;cn.jermyn.test01.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建运行时类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取指定的某个方法 getDeclaredMethod():参数1 ：指明获取的方法的名称  参数2：指明获取的方法的形参列表</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;showNation&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证当前方法是可访问的</span></span><br><span class="line">        show.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 调用方法的invoke(参数1,参数2):参数1：方法的调用者 参数2：给方法形参赋值的实参invoke()的返回值即为对应类中调用的方法的返回值。</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> show.invoke(person, <span class="string">&quot;CHN&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) o;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调静态方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;Person&gt; clazz = (Class&lt;Person&gt;) Class.forName(<span class="string">&quot;cn.jermyn.test01.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">showDesc</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;showDesc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        showDesc.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果调用的运行时类中的方法没有返回值，则此invoke()返回null</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnVal</span> <span class="operator">=</span> showDesc.invoke(Person.class);</span><br><span class="line">        System.out.println(returnVal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调构造器</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;Person&gt; clazz = (Class&lt;Person&gt;) Class.forName(<span class="string">&quot;cn.jermyn.test01.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取指定的构造器getDeclaredConstructor():参数：指明构造器的参数列表</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.保证此构造器是可访问的</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用此构造器创建运行时类的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> (Person) constructor.newInstance(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        System.out.println(per);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Person()</span><br><span class="line"><span class="number">1001</span></span><br><span class="line">Person()</span><br><span class="line">Jermyn</span><br><span class="line"><span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">我的国籍是：CHN</span><br><span class="line">CHN</span><br><span class="line">Person&#123;name=<span class="string">&#x27;Jermyn&#x27;</span>, age=<span class="number">0</span>&#125;</span><br><span class="line">I am superman!</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: <span class="number">5</span>, Passes: <span class="number">5</span>, Failures: <span class="number">0</span>, Skips: <span class="number">0</span></span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="反射的应用：动态代理"><a href="#反射的应用：动态代理" class="headerlink" title="反射的应用：动态代理"></a>反射的应用：动态代理</h2><div class="note success flat"><p>静态代理</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClothFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyClothFactory</span><span class="params">(ClothFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂准备工作&quot;</span>);</span><br><span class="line"></span><br><span class="line">        factory.produceCloth();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂做收尾工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AntaClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;安踏工厂生产产品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AntaClothFactory</span> <span class="variable">anta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntaClothFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ProxyClothFactory</span> <span class="variable">pcf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyClothFactory</span>(anta);</span><br><span class="line"></span><br><span class="line">        pcf.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">代理工厂准备工作</span><br><span class="line">安踏工厂生产产品</span><br><span class="line">代理工厂做收尾工作</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><ul><li>代理设计模式的原理:使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原 始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原 始对象上。</li><li>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时 根据需要动态创建目标类的代理对象。</li><li><p>动态代理使用场合:</p><ul><li>调试</li><li>远程方法调用</li></ul></li><li><p>动态代理相比于静态代理的优点：抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中 处理，这样，我们可以更加灵活和统一的处理众多的方法。</p></li><li><p><strong>Java动态代理相关API</strong></p><ul><li>Proxy ：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。</li><li>提供用于创建动态代理类和动态代理对象的静态方法<ul><li>static Class&lt;?&gt;getProxyClass(ClassLoader loader, Class&lt;?&gt;… interfaces) 创建一个动态代理类所对应的Class对象</li><li>static Object    newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h) 直接创建一个动态代理对象</li></ul></li></ul></li><li><p><strong>动态代理步骤</strong></p></li></ul><ol><li>创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</li><li>创建被代理的类以及接口</li><li>通过Proxy的静态方法newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建一个Subject接口代理</li><li>通过 Subject代理调用RealSubject实现类的方法<div class="note success flat"><p>动态代理</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getBelief</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建被代理的类以及接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">implements</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBelief</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Peace and love!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getProxyInstance</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>();</span><br><span class="line"></span><br><span class="line">        handler.bind(obj);</span><br><span class="line">        <span class="comment">// 3.通过Proxy的静态方法newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建一个Subject接口代理</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method:即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span></span><br><span class="line">        <span class="comment">//obj:被代理类的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span></span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SuperMan</span> <span class="variable">superMan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>();</span><br><span class="line">        <span class="comment">//4. 通过ProxyFactory代理调用getProxyInstance实现类的方法</span></span><br><span class="line">        <span class="type">Human</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Human) ProxyFactory.getProxyInstance(superMan);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">belief</span> <span class="operator">=</span> proxyInstance.getBelief();</span><br><span class="line">        System.out.println(belief);</span><br><span class="line"></span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;KFC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Peace and love!</span><br><span class="line">我喜欢吃KFC</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><h1 id="第九章-Java8的其它新特性"><a href="#第九章-Java8的其它新特性" class="headerlink" title="第九章 Java8的其它新特性"></a>第九章 Java8的其它新特性</h1><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda 是一个匿名函数，我们可以把 Lambda 表达式理解为是一段可以 传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更 灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p><ul><li><p><strong>Lambda 表达式：</strong><br>在Java 8 语言中引入的一种新的语法元素和操 作符。这个操作符为 “-&gt;” ， 该操作符被称为 Lambda 操作符 或箭头操作符。它将 Lambda 分为两个部分：<br><strong>左侧：</strong>指定了 Lambda 表达式需要的参数列表<br><strong>右侧：</strong>指定了 Lambda 体，是抽象方法的实现逻辑，也即Lambda 表达式要执行的功能。</p></li><li><p><strong>格式</strong><br>语法格式一：无参，无返回值<br>语法格式二：Lambda 需要一个参数，但是没有返回值。<br>语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”<br>语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略<br>语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值<br>语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</p><div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description：</span></span><br><span class="line"><span class="comment"> * -&gt; :lambda操作符 或 箭头操作符</span></span><br><span class="line"><span class="comment"> * -&gt;左边：lambda形参列表 （其实就是接口中的抽象方法的形参列表）</span></span><br><span class="line"><span class="comment"> * -&gt;右边：lambda体 （其实就是重写的抽象方法的方法体）</span></span><br><span class="line"><span class="comment"> * Author: Jermyn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语法格式一：无参，无返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无参数，无返回值&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r1.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左边为形参列表，无则为(),右边方法体</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无参数，无返回值&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式二：Lambda 需要一个参数，但是没有返回值。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        consumer.accept(<span class="string">&quot;To be,or not to be, that is the Question&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con = (String s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;生存即毁灭，死亡即永恒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语法格式三：数据类型可以省略，因为可由编译器推断得出，称为“类型推断”</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 类型推断</span></span><br><span class="line">        Consumer&lt;String&gt; con = (str) -&gt; &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;生存即毁灭，死亡即永恒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语法格式四：Lambda 若只需要一个参数时，参数的小括号可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 省去str的小括号</span></span><br><span class="line">        Consumer&lt;String&gt; con = str -&gt; &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;生存即毁灭，死亡即永恒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语法格式五：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = (x, y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x.compareTo(y);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(comparator.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 语法格式六：当 Lambda 体只有一条语句时，return 与大括号若有，都可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Comparator&lt;Integer&gt; comparator = (x, y) -&gt; x.compareTo(y);</span><br><span class="line">        System.out.println(comparator.compare(<span class="number">21</span>, <span class="number">12</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">无参数，无返回值</span><br><span class="line">无参数，无返回值</span><br><span class="line">To be,or not to be, that is the Question</span><br><span class="line">生存即毁灭，死亡即永恒</span><br><span class="line">生存即毁灭，死亡即永恒</span><br><span class="line">生存即毁灭，死亡即永恒</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p>总结：<br>-&gt;左边：lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也可以省略<br>-&gt;右边：lambda体应该使用一对{}包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一对{}和return关键字</p></blockquote></li><li><p><strong>类型推断</strong><br>上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda  表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序 的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于 上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。</p></li></ul><h2 id="函数式-Functional-接口"><a href="#函数式-Functional-接口" class="headerlink" title="函数式(Functional)接口"></a>函数式(Functional)接口</h2><ul><li><p><strong>什么是函数式(Functional)接口</strong></p><ul><li>只包含一个抽象方法的接口，称为函数式接口。</li><li>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式 抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽 象方法上进行声明）。</li><li>我们可以在一个接口上使用 @FunctionalInterface 注解，这样做可以检 查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个 接口是一个函数式接口。</li><li>在java.util.function包下定义了Java 8 的丰富的函数式接口</li></ul></li><li><p><strong>如何理解函数式接口</strong></p><ul><li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP) 编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不 得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还 可以支持OOF（面向函数编程）</li><li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的 编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在 Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的 对象类型——函数式接口。</li><li>简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是 Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口 的实例，那么该对象就可以用Lambda表达式来表示。</li><li>所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。<br><strong><em>点击图片可以跳转源码</em></strong><br><a href="https://nowjava.com/readcode/jdk8/3840"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221029175512.png" alt=""></a></li></ul></li><li><p><strong>Java 内置四大核心函数式接口</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221029175740.png" alt=""></p></li><li><p><strong>其他接口</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221029175843.png" alt=""></p></li></ul><h2 id="方法引用与构造器引用"><a href="#方法引用与构造器引用" class="headerlink" title="方法引用与构造器引用"></a>方法引用与构造器引用</h2><ul><li><p><strong>方法引用(Method References)</strong></p><ul><li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</li><li>方法引用可以看做是Lambda表达式深层次的表达。换句话说，方法引用就 是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向 一个方法，可以认为是Lambda表达式的一个语法糖。</li><li>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的 方法的参数列表和返回值类型保持一致！</li><li>格式：使用操作符 “::” 将类(或对象)与方法名分隔开来。</li><li>如下三种主要使用情况：<ul><li>对象::实例方法名</li><li>类::静态方法名</li><li>类::实例方法名<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodRefTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况一：对象 :: 实例方法</span></span><br><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">Consumer&lt;String&gt; con1 = str -&gt; System.out.println(str);</span><br><span class="line">con1.accept(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">Consumer&lt;String&gt; con2 = ps::println;</span><br><span class="line">con2.accept(<span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Supplier中的T get()</span></span><br><span class="line"><span class="comment">//Employee中的String getName()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>,<span class="number">23</span>,<span class="number">5600</span>);</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class="line">System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">System.out.println(sup2.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：类 :: 静态方法</span></span><br><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class="line">System.out.println(com1.compare(<span class="number">12</span>,<span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">System.out.println(com2.compare(<span class="number">12</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">Function&lt;Double,Long&gt; func = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Double, Long&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Double d)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.round(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class="line">System.out.println(func1.apply(<span class="number">12.3</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Function&lt;Double,Long&gt; func2 = Math::round;</span><br><span class="line">System.out.println(func2.apply(<span class="number">12.6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三：类 :: 实例方法  (有难度)</span></span><br><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">Comparator&lt;String&gt; com1 = (s1,s2) -&gt; s1.compareTo(s2);</span><br><span class="line">System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class="line">System.out.println(com2.compare(<span class="string">&quot;abd&quot;</span>,<span class="string">&quot;abm&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt; s1.equals(s2);</span><br><span class="line">System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abc&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line">BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;abd&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String getName();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">23</span>, <span class="number">6000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function&lt;Employee,String&gt; func1 = e -&gt; e.getName();</span><br><span class="line">System.out.println(func1.apply(employee));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Function&lt;Employee,String&gt; func2 = Employee::getName;</span><br><span class="line">System.out.println(func2.apply(employee));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构造器引用</strong><br><strong>格式：ClassName::new</strong></p><ul><li>与函数式接口相结合，自动与函数式接口中方法兼容。</li><li>可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象</li><li>方法的参数列表一致！且方法的返回值即为构造器对应类的对象。</li></ul></li><li><p><strong>数组引用</strong><br><strong>格式： type[] :: new</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstructorRefTest</span> &#123;</span><br><span class="line"><span class="comment">//构造器引用</span></span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Employee&gt;  sup1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Supplier&lt;Employee&gt;  sup2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">        System.out.println(sup2.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(id);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> func1.apply(<span class="number">1001</span>);</span><br><span class="line">        System.out.println(employee);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee1</span> <span class="operator">=</span> func2.apply(<span class="number">1002</span>);</span><br><span class="line">        System.out.println(employee1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(id,name);</span><br><span class="line">        System.out.println(func1.apply(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BiFunction&lt;Integer,String,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">        System.out.println(func2.apply(<span class="number">1002</span>,<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组引用</span></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">        String[] arr1 = func1.apply(<span class="number">5</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;*******************&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">        String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="强大的Stream-API"><a href="#强大的Stream-API" class="headerlink" title="强大的Stream API"></a>强大的Stream API</h2><ul><li><p><strong>Stream API说明</strong></p><ul><li>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则 是 Stream API。</li><li>Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这 是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程 序员的生产力，让程序员写出高效率、干净、简洁的代码。</li><li>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进 行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。 也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种 高效且易于使用的处理数据的方式。</li></ul></li><li><p><strong>注意：</strong></p><ol><li>Stream 自己不会存储元素。</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ol></li><li><p><strong>Stream 的操作三个步骤</strong></p><ol><li>创建 Stream:一个数据源（如：集合、数组），获取一个流</li><li>中间操作:一个中间操作链，对数据源的数据进行处理</li><li>终止操作(终端操作):一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221029203436.png" alt=""></li></ol></li><li><p><strong>创建 Stream</strong><br>方式一：通过集合Java8 中的 Collection 接口被扩展，提供了两个获取流 的方法：</p><ul><li>default Stream<E> stream() : 返回一个顺序流</li><li>default Stream<E> parallelStream() : 返回一个并行流</li></ul></li></ul><p>方式二：通过数组Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：<br>static <T> Stream<T> stream(T[] array): 返回一个流 重载形式，能够处理对应基本类型的数组：</p><ul><li>public static IntStream stream(int[] array)</li><li>public static LongStream stream(long[] array)</li><li>public static DoubleStream stream(double[] array)</li></ul><p>方式三：通过Stream的of()可以调用Stream类静态方法 of(), 通过显示值创建一个 流。它可以接收任意数量的参数。</p><ul><li>public static<T> Stream<T> of(T… values) : 返回一个流</li></ul><p>方式四：创建无限流可以使用静态方法 Stream.iterate() 和 Stream.generate(),<br>创建无限流。</p><ol><li>迭代public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)</li><li>生成public static<T> Stream<T> generate(Supplier<T> s)<div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamAPITest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Stream方式一：通过集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// default Stream&lt;E&gt; stream() : 返回一个顺序流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// default Stream&lt;E&gt; parallelStream() : 返回一个并行流</span></span><br><span class="line">        Stream&lt;Employee&gt; employeeStream = employees.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Stream方式二：通过数组</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        <span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">12</span>, <span class="string">&quot;Jermyn&quot;</span>, <span class="number">6000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">113</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">3000</span>);</span><br><span class="line">        Employee[] employees = <span class="keyword">new</span> <span class="title class_">Employee</span>[]&#123;e1, e2&#125;;</span><br><span class="line">        Stream&lt;Employee&gt; stream1 = Arrays.stream(employees);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Stream方式三：通过Stream的of()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">        Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 Stream方式四：创建无限流</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代:public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">        <span class="comment">//遍历前10个偶数</span></span><br><span class="line">        Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 生成:public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">        Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>Stream 的中间操作</strong><br>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”。</li></ul><ol><li><p>筛选与切片<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221029221529.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// filter(Predicate p)——接收 Lambda ，从流中排除某些元素。</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    stream.filter(e -&gt; e.getSalary() &gt; <span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个Stream已经终止</span></span><br><span class="line">    <span class="comment">// limit(n)——截断流，使其元素不超过给定数量。</span></span><br><span class="line">    Stream&lt;Employee&gt; stream2 = employees.stream();</span><br><span class="line">    stream2.limit(<span class="number">5</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span></span><br><span class="line">    Stream&lt;Employee&gt; stream3 = employees.stream();</span><br><span class="line">    stream3.skip(<span class="number">1</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// distinct()——筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span></span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//         System.out.println(employees);</span></span><br><span class="line">    employees.stream().distinct().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line"></span><br><span class="line">Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1003</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1005</span>, name=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line"></span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1003</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1005</span>, name=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1007</span>, name=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1008</span>, name=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line"></span><br><span class="line">Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1003</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1005</span>, name=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1007</span>, name=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1008</span>, name=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1010</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">40</span>, salary=<span class="number">8000.0</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p>映射<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221029221732.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    Stream&lt;String&gt; stringStream = stream.map(e -&gt; e.getName()).filter(name -&gt; name.length() &gt; <span class="number">3</span>);</span><br><span class="line">    stringStream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(StreamAPITest::fromStringToStream);</span><br><span class="line">    streamStream.forEach(e -&gt; &#123;</span><br><span class="line">        e.forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flatMap(Function f)——接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line">    Stream&lt;Character&gt; characterStream = list.stream().flatMap(StreamAPITest::fromStringToStream);</span><br><span class="line">    characterStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">fromStringToStream</span><span class="params">(String str)</span> &#123;<span class="comment">//aa</span></span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character c : str.toCharArray()) &#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">比尔盖茨</span><br><span class="line">扎克伯格</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">d</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p>排序<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221030140107.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自然排序</span></span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">    integers.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定制排序</span></span><br><span class="line">    <span class="comment">// 按照年龄从大到小排序</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    stream.sorted((e1, e2) -&gt; Integer.compare(e1.getAge(), e2.getAge())).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当年龄一样是按照薪水从大到小</span></span><br><span class="line">    Stream&lt;Employee&gt; stream1 = employees.stream();</span><br><span class="line">    stream1.sorted((e1, e2) -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ageValue</span> <span class="operator">=</span> Integer.compare(e1.getAge(), e2.getAge());</span><br><span class="line">        <span class="keyword">if</span> (ageValue != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ageValue;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(e1.getSalary(), e2.getSalary());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"></span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1007</span>, name=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1003</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1008</span>, name=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1005</span>, name=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line"></span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1007</span>, name=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1003</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1008</span>, name=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1005</span>, name=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>终止操作</strong><ul><li>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。</li><li>流进行了终止操作后，不能再次使用。</li></ul></li></ul><ol><li><p>匹配与查找<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221030154824.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配与查找</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class="line">    <span class="comment">// 练习：是否所有的员工的年龄都大于18</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> stream.allMatch(employee -&gt; employee.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">    System.out.println(b);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class="line">    <span class="comment">// 练习：是否存在员工的工资大于 10000</span></span><br><span class="line">    Stream&lt;Employee&gt; stream1 = employees.stream();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> stream1.anyMatch(employee -&gt; employee.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line">    System.out.println(b1);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// noneMatch(Predicate p)——检查是否没有匹配的元素。</span></span><br><span class="line">    <span class="comment">// 练习：是否**存在**员工姓“雷”</span></span><br><span class="line">    Stream&lt;Employee&gt; stream2 = employees.stream();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">lei</span> <span class="operator">=</span> stream2.noneMatch(employee -&gt; employee.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line">    System.out.println(lei);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// findFirst——返回第一个元素</span></span><br><span class="line">    Stream&lt;Employee&gt; stream3 = employees.stream();</span><br><span class="line">    Optional&lt;Employee&gt; first = stream3.findFirst();</span><br><span class="line">    System.out.println(first);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// findAny——返回当前流中的任意元素</span></span><br><span class="line">    Stream&lt;Employee&gt; stream4 = employees.parallelStream();</span><br><span class="line">    Optional&lt;Employee&gt; any = stream4.findAny();</span><br><span class="line">    System.out.println(any);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// count——返回流中元素的总个数</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stream.count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// max(Comparator c)——返回流中最大值</span></span><br><span class="line">    <span class="comment">// 练习：返回最高的工资：</span></span><br><span class="line">    Stream&lt;Employee&gt; stream1 = employees.stream();</span><br><span class="line">    Stream&lt;Double&gt; doubleStream = stream1.map(employee -&gt; employee.getSalary());</span><br><span class="line">    Optional&lt;Double&gt; max = doubleStream.max((e1, e2) -&gt; Double.compare(e1, e2));</span><br><span class="line">    System.out.println(max);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// min(Comparator c)——返回流中最小值</span></span><br><span class="line">    <span class="comment">// 练习：返回最低工资的员工</span></span><br><span class="line">    Stream&lt;Employee&gt; stream2 = employees.stream();</span><br><span class="line">    Optional&lt;Employee&gt; min = stream2.min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line">    System.out.println(min);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// forEach(Consumer c)——内部迭代</span></span><br><span class="line">    employees.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用集合的遍历操作</span></span><br><span class="line">    employees.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Optional[Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;]</span><br><span class="line"></span><br><span class="line">Optional[Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;]</span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">Optional[<span class="number">9876.12</span>]</span><br><span class="line"></span><br><span class="line">Optional[Employee&#123;id=<span class="number">1008</span>, name=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;]</span><br><span class="line"></span><br><span class="line">Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1003</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1005</span>, name=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1007</span>, name=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1008</span>, name=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line"></span><br><span class="line">Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1003</span>, name=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1005</span>, name=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1007</span>, name=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1008</span>, name=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p>归约<br>map 和 reduce 的连接通常称为 map-reduce 模式，因 Google用它来进行网络搜索而出名。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221030155115.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line">    <span class="comment">// 练习1：计算1-10的自然数的和</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = integers.stream();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> stream.reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">    System.out.println(reduce);</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line">    <span class="comment">// 练习2：计算公司所有员工工资的总和</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line">    Optional&lt;Double&gt; reduce1 = employees.stream().map(employee -&gt; employee.getSalary()).reduce(Double::sum);</span><br><span class="line">    System.out.println(reduce1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">21</span></span><br><span class="line"></span><br><span class="line">Optional[<span class="number">48424.08</span>]</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p>收集<br>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、 Map)。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221030163658.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line">    <span class="comment">//  练习1：查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    Stream&lt;Employee&gt; employeeStream = stream.filter(employee -&gt; employee.getSalary() &gt; <span class="number">6000</span>);</span><br><span class="line">    List&lt;Employee&gt; collect = employeeStream.collect(Collectors.toList());</span><br><span class="line">    collect.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Employee&#123;id=<span class="number">1001</span>, name=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1002</span>, name=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1004</span>, name=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee&#123;id=<span class="number">1006</span>, name=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><ul><li>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</li><li><p>创建Optional类对象的方法：</p><ul><li>Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</li><li>Optional.empty() : 创建一个空的 Optional 实例</li><li>Optional.ofNullable(T t)：t可以为null</li></ul></li><li><p>判断Optional容器中是否包含对象：</p><ul><li>boolean isPresent() : 判断是否包含对象</li><li>void ifPresent(Consumer&lt;? super T&gt; consumer) ：如果有值，就执行Consumer  接口的实现代码，并且该值会作为参数传给它。</li></ul></li><li><p>获取Optional容器的对象：</p><ul><li>T get(): 如果调用对象包含值，返回该值，否则抛异常</li><li>T orElse(T other) ：如果有值则将其返回，否则返回指定的other对象。</li><li>T orElseGet(Supplier&lt;? extends T&gt; other) ：如果有值则将其返回，否则返回由Supplier接口实现提供的对象。</li><li>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) ：如果有值则将其返 回，否则抛出由Supplier接口实现提供的异常。</li></ul></li></ul><h1 id="第十章-Java9-amp-10-amp-11新特性"><a href="#第十章-Java9-amp-10-amp-11新特性" class="headerlink" title="第十章 Java9&amp;10&amp;11新特性"></a>第十章 Java9&amp;10&amp;11新特性</h1><h2 id="Java-9-的新特性"><a href="#Java-9-的新特性" class="headerlink" title="Java 9 的新特性"></a>Java 9 的新特性</h2><ul><li><p><strong>JDK 和 JRE 目录结构的改变</strong></p><ul><li><strong>JDK 8 的目录结构</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221031194345.png" alt=""></li><li><strong>JDK 9 的目录结构</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221031194500.png" alt=""></li></ul></li><li><p><strong>模块化系统: Jigsaw -&gt; Modularity</strong><br>本质上讲也就是说，用模块来管理各个package，通过声明某个package  暴露，，模块(module)的概念，其实就是package外再裹一层，不声明默 认就是隐藏。因此，模块化使得代码组织上更安全，因为它可以指定哪 些部分可以暴露，哪些部分隐藏。</p><ul><li>实现目标<ul><li>模块化的主要目的在于减少内存的开销</li><li>只须必要模块，而非全部jdk模块，可简化各种类库和大型应用的开 发和维护</li><li>改进 Java SE 平台，使其可以适应不同大小的计算设备</li><li>改进其安全性，可维护性，提高性能</li></ul></li></ul></li></ul><p>模块将由通常的类和新的模块声明文件（module-info.java）组成。该文件是位于 java代码结构的顶层，该模块描述符明确地定义了我们的模块需要什么依赖关系，以及哪些模块被外部使用。在exports子句中未提及的所有包默认情况下将封装在模块中，不能在外部使用。</p><ul><li><p><strong>Java的REPL工具： jShell命令</strong></p><ul><li>实现目标<ul><li>Java 9 中终于拥有了 REPL工具：jShell。让Java可以像脚本语言一样运行，从 控制台启动jShell，利用jShell在没有创建类的情况下直接声明变量，计算表达式， 执行语句。即开发时可以在命令行里直接运行Java的代码，而无需创建Java文<br>件，无需跟人解释”public static void main(String[] args)”这句废话。</li><li>jShell也可以从文件中加载语句或者将语句保存到文件中。</li><li>jShell也可以是tab键进行自动补全和自动添加分号。</li></ul></li></ul></li><li><p><strong>语法改进：接口的私有方法</strong><br>Java 8中规定接口中的方法除了抽象方法之外，还可以定义静态方法 和默认的方法。一定程度上，扩展了接口的功能，此时的接口更像是 一个抽象类。</p></li></ul><p>在Java9中，接口更加的灵活和强大，连方法的访问权限修饰符都可 以声明为private的了，此时方法将不会成为你对外暴露的API的一部分。</p><ul><li><p><strong>语法改进:钻石操作符使用升级</strong><br>我们将能够与匿名实现类共同使用钻石操作符（diamond operator）在Java 8中如下的操作是会报错的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Object&gt; com = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Java 9中如下操作可以正常执行通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// anonymous classes can now use type inference</span></span><br><span class="line">Comparator&lt;Object&gt; com = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>语法改进：try语句</strong><br>Java 8 中，可以实现资源的自动关闭，但是要求执行后必须关闭的所有资源必须在try子句中初始化，否则编译不通过。如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)) &#123;</span><br><span class="line"><span class="comment">//读取数据细节省略</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 9中，用资源语句编写try将更容易，我们可以在try子句中使用已经初始 化过的资源，此时的资源是final的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);  </span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out);  \</span><br><span class="line"><span class="keyword">try</span> (reader; writer) &#123;</span><br><span class="line">    <span class="comment">//reader是final的，不可再被赋值</span></span><br><span class="line">    <span class="comment">//reader = null;</span></span><br><span class="line">    <span class="comment">//具体读写操作省略</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>String存储结构变更</strong><br><strong>Motivation</strong><br>The current implementation of the String class stores characters in a char  array, using two bytes (sixteen bits) for each character. Data gathered from  many different applications indicates that strings are a major component of  heap usage and, moreover, that most String objects contain only Latin-1  characters. Such characters require only one byte of storage, hence half of the  space in the internal char arrays of such String objects is going unused.<br><strong>Description</strong><br>We propose to change the internal representation of the String class from a  UTF-16 char array to a byte array plus an encoding-flag field. The new String  class will store characters encoded either as ISO-8859-1/Latin-1 (one byte per  character), or as UTF-16 (two bytes per character), based upon the contents  of the string. The encoding flag will indicate which encoding is used.<br>结论：String 再也不用 char[] 来存储，改成了 byte[] 加上编码标记，节约了一些空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;  </span><br><span class="line">    <span class="meta">@Stable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>集合工厂方法：快速创建只读集合</strong><br>要创建一个只读、不可改变的集合，必须构造和分配它，然后添加元素，最后 包装成一个不可修改的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; namesList = <span class="keyword">new</span> <span class="title class_">ArrayList</span> &lt;&gt;();  </span><br><span class="line">namesList.add(<span class="string">&quot;Joe&quot;</span>);  </span><br><span class="line">namesList.add(<span class="string">&quot;Bob&quot;</span>);  </span><br><span class="line">namesList.add(<span class="string">&quot;Bill&quot;</span>);</span><br><span class="line"></span><br><span class="line">namesList = Collections.unmodifiableList(namesList);</span><br><span class="line">System.out.println(namesList);</span><br></pre></td></tr></table></figure><p>Java 9因此引入了方便的方法，这使得类似的事情更容易表达。<br><strong><em>点击图片可以跳转源码</em></strong><br><a href="https://docs.oracle.com/javase/9/docs/api/java/util/Collections.html#field.summary"><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221031202154.png" alt=""></a></p></li><li><p><strong>InputStream 加强</strong><br>InputStream 终于有了一个非常有用的方法：transferTo，可以用来将数据直接 传输到 OutputStream，这是在处理原始数据流时非常常见的一种用法，如下示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> cl.getResourceAsStream(<span class="string">&quot;hello.txt&quot;</span>);  </span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;src\\hello1.txt&quot;</span>)) &#123;</span><br><span class="line">    is.transferTo(os); <span class="comment">// 把输入流中的所有数据直接自动地复制到输出流中</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>增强的 Stream API</strong></p><ul><li>Java 的 Steam API 是java标准库最好的改进之一，让开发者能够快速运算，  从而能够有效的利用数据并行计算。Java 8 提供的 Steam 能够利用多核架构 实现声明式的数据处理。</li><li>在Java 9 中，Stream API 变得更好，Stream 接口中添加了 4 个新的方法：  takeWhile, dropWhile, ofNullable，还有个 iterate 方法的新重载方法，可以 让你提供一个Predicate (判断条件)来指定什么时候结束迭代。</li><li>除了对 Stream 本身的扩展，Optional 和 Stream 之间的结合也得到了改进。 现在可以通过 Optional 的新方法 stream() 将一个 Optional 对象转换为一个 (可能是空的) Stream 对象。</li></ul></li></ul><ol><li>takeWhile()的使用<br>用于从 Stream 中获取一部分数据，接收一个 Predicate 来进行选择。在有序的Stream 中，takeWhile 返回从开头开始的尽量多的元素。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);  </span><br><span class="line">list.stream().takeWhile(x -&gt; x &lt; <span class="number">50</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);  </span><br><span class="line">list.stream().takeWhile(x -&gt; x &lt; <span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure></li><li>dropWhile()的使用<br>dropWhile 的行为与takeWhile 相反，返回剩余的元素。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);  </span><br><span class="line">list.stream().dropWhile(x -&gt; x &lt; <span class="number">50</span>).forEach(System.out::println);  </span><br><span class="line">System.out.println();</span><br><span class="line">list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);  </span><br><span class="line">list.stream().dropWhile(x -&gt; x &lt; <span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure></li><li>ofNullable()的使用<br>Java 8 中 Stream 不能完全为null，否则会报空指针异常。而 Java 9 中的ofNullable方法允许我们创建一个单元素 Stream，可以包含一个非空元素，也可以创建一个空 Stream。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报 NullPointerException</span></span><br><span class="line"><span class="comment">// Stream&lt;Object&gt; stream1 = Stream.of(null);</span></span><br><span class="line"><span class="comment">// System.out.println(stream1.count());</span></span><br><span class="line"><span class="comment">// 不报异常，允许通过</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">System.out.println(stringStream.count());<span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 不报异常，允许通过</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">list.add(<span class="literal">null</span>);</span><br><span class="line">System.out.println(list.stream().count());<span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ofNullable()：允许值为null</span></span><br><span class="line">Stream&lt;Object&gt; stream1 = Stream.ofNullable(<span class="literal">null</span>);  </span><br><span class="line">System.out.println(stream1.count());<span class="comment">// 0</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.ofNullable(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">System.out.println(stream.count());<span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li>iterate()重载的使用<br>这个 iterate 方法的新重载方法，可以让你提供一个 Predicate (判断条件)来指定什么时候结束迭代。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的控制终止方式：</span></span><br><span class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i + <span class="number">1</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 现在的终止方式：</span></span><br><span class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i &lt; <span class="number">100</span>, i -&gt; i + <span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><strong>Optional获取Stream的方法</strong><br><strong>Optional类中stream()的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Tim&quot;</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;List&lt;String&gt;&gt; optional = Optional.ofNullable(list); </span><br><span class="line">Stream&lt;List&lt;String&gt;&gt; stream = optional.stream();  </span><br><span class="line">stream.flatMap(x -&gt; x.stream()).forEach(System.out::println);</span><br></pre></td></tr></table></figure></li><li><p><strong>Javascript引擎升级：Nashorn</strong></p><ul><li>Nashorn 项目在 JDK 9 中得到改进，它为 Java 提供轻量级的 Javascript 运行时。 Nashorn 项目跟随 Netscape 的 Rhino 项目，目的是为了在 Java 中实现一个高 性能但轻量级的 Javascript 运行时。Nashorn 项目使得 Java 应用能够嵌入 Javascript。它在 JDK 8 中为Java 提供一个Javascript 引擎。</li><li>JDK 9 包含一个用来解析 Nashorn 的 ECMAScript 语法树的 API。这个 API 使得 IDE 和服务端框架不需要依赖 Nashorn 项目的内部实现类， 就能够分析 ECMAScript 代码。</li></ul></li></ul><h2 id="Java-10-新特性"><a href="#Java-10-新特性" class="headerlink" title="Java 10 新特性"></a>Java 10 新特性</h2><ul><li><p><strong>局部变量类型推断</strong><br><strong>好处：</strong>减少了啰嗦和形式的代码，避免了信息冗余，而且对齐了变量名，更容易阅读！<br><strong>场景一：</strong>类实例化时<br>作为 Java开发者，在声明一个变量时，我们总是习惯了敲打两次变量类型，第一次用于声明变量类型，第二次用于构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p><strong>场景二：</strong>返回值类型含复杂泛型结构<br>变量的声明类型书写复杂且较长，尤其是加上泛型的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;Integer, Student&gt;&gt; iterator = set.iterator();</span><br></pre></td></tr></table></figure><p><strong>场景三：</strong>我们也经常声明一种变量，它只会被使用一次，而且是用在下一行代码中，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://jermyn.cn/&quot;</span>);  </span><br><span class="line"><span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> url.openConnection();  </span><br><span class="line"><span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span>  <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br></pre></td></tr></table></figure><p>尽管IDE可以帮我们自动完成这些代码，但当变量总是跳来跳去的时候，可读 性还是会受到影响，因为变量类型的名称由各种不同长度的字符组成。而且， 有时候开发人员会尽力避免声明中间变量，因为太多的类型声明只会分散注意 力，不会带来额外的好处。</p></li><li><p><strong>局部变量类型推断适用于以下情况：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.局部变量的初始化</span></span><br><span class="line"><span class="type">var</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.增强for循环中的索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> v : list) &#123;</span><br><span class="line">    System.out.println(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.传统for循环中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++) &#123;  </span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>局部变量类型推断如下情况不适用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.局部变量不赋值，就不能实现类型推断</span></span><br><span class="line">    <span class="keyword">var</span> num ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.lambda表示式中，左边的函数式接口不能声明为var</span></span><br><span class="line">    Supplier&lt;Double&gt; sup = () -&gt; Math.random();</span><br><span class="line">    <span class="type">var</span> <span class="variable">sup</span> <span class="operator">=</span> () -&gt; Math.random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.方法引用中，左边的函数式接口不能声明为var</span></span><br><span class="line">    Consumer&lt;String&gt; con = System.out::println;</span><br><span class="line">    <span class="type">var</span> <span class="variable">con</span> <span class="operator">=</span> System.out::println;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.数组的静态初始化中，注意如下的情况也不可以</span></span><br><span class="line">    <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不适用以下的结构中：</strong><br>情况1：没有初始化的局部变量声明<br>情况2：方法的返回类型<br>情况3：方法的参数类型<br>情况4：构造器的参数类型<br>情况5：属性<br>情况6：catch块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 情况1：没有初始化的局部变量声明</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况6：catch块</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">var</span> e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//情况2：方法的返回类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况3：方法的参数类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(<span class="keyword">var</span> num)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况4：构造器的参数类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Java10Test</span><span class="params">(<span class="keyword">var</span> i)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况5：属性</span></span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>工作原理</strong><br>在处理 var时，编译器先是查看表达式右边部分，并根据右边变量值的类型进行 推断，作为左边变量的类型，然后将该类型写入字节码当中。</p></li><li><p><strong>注意</strong><br>  <strong>var不是一个关键字</strong><br>  你不需要担心变量名或方法名会与 var发生冲突，因为 var实际上并不是一个关键字，<br>  而是一个类型名，只有在编译器需要知道类型的地方才需要用到它。除此之外，它 就是一个普通合法的标识符。也就是说，除了不能用它作为类名，其他的都可以， 但极少人会用它作为类名。<br>  <strong>这不是JavaScript</strong><br>  首先我要说明的是，var并不会改变Java是一门静态类型语言的事实。编译器负责推 断出类型，并把结果写入字节码文件，就好像是开发人员自己敲入类型一样。</p></li><li><p><strong>集合新增创建不可变集合的方法</strong><br>自 Java 9 开始，Jdk 里面为集合（List / Set / Map）都添加了 of (jdk9新增)和 copyOf (jdk10新增)方法，它们两个都用来创建不可变的集合，来看下它们的 使用和区别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例1：</span></span><br><span class="line"><span class="type">var</span> <span class="variable">list1</span> <span class="operator">=</span> List.of(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C&quot;</span>);  </span><br><span class="line"><span class="type">var</span> <span class="variable">copy1</span> <span class="operator">=</span> List.copyOf(list1);  </span><br><span class="line">System.out.println(list1 == copy1); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//示例2：</span></span><br><span class="line"><span class="type">var</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();  </span><br><span class="line"><span class="type">var</span> <span class="variable">copy2</span> <span class="operator">=</span> List.copyOf(list2);</span><br><span class="line">System.out.println(list2 == copy2); <span class="comment">// false</span></span><br><span class="line"><span class="comment">//示例1和2代码基本一致，为什么一个为true,一个为false?</span></span><br></pre></td></tr></table></figure><p>从源码分析 ，可以看出 copyOf方法会先判断来源集合是不是 AbstractImmutableList 类型的，如果是，就直接返回，如果不是，则调用 of 创 建一个新的集合。</p></li></ul><p>示例2因为用的 new 创建的集合，不属于不可变 AbstractImmutableList 类的子类，<br>所以 copyOf 方法又创建了一个新的实例，所以为false。</p><p>注意：使用of和copyOf创建的集合为不可变集合，不能进行添加、删除、替换、 排序等操作，不然会报 java.lang.UnsupportedOperationException 异常。<br>上面演示了 List 的 of 和copyOf 方法，Set 和Map 接口都有。</p><h2 id="Java-11-新特性"><a href="#Java-11-新特性" class="headerlink" title="Java 11 新特性"></a>Java 11 新特性</h2><ul><li><p><strong>新增了一系列字符串处理方法</strong><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221031204504.png" alt=""></p></li><li><p><strong>Optional 加强</strong><br>Optional 也增加了几个非常酷的方法，现在可以很方便的将一个 Optional 转换 成一个 Stream, 或者当一个空 Optional 时给它一个替代的。<br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed@main/9a8a/20221031204542.png" alt=""></p></li><li><p><strong>局部变量类型推断升级</strong><br>在var上添加注解的语法格式，在jdk10中是不能实现的。在JDK11中加入了这样的语法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误的形式: 必须要有类型, 可以加上var</span></span><br><span class="line"><span class="comment">//Consumer&lt;String&gt; con1 = (@Deprecated t) -&gt;</span></span><br><span class="line">System.out.println(t.toUpperCase());</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确的形式:</span></span><br><span class="line"><span class="comment">//使用var的好处是在使用lambda表达式时给参数加上注解。  </span></span><br><span class="line">Consumer&lt;String&gt; con2 = (<span class="meta">@Deprecated</span> <span class="keyword">var</span> t) -&gt;  System.out.println(t.toUpperCase());</span><br></pre></td></tr></table></figure></li><li><p><strong>全新的HTTP 客户端API</strong></p><ul><li>HTTP，用于传输网页的协议，早在1997年就被采用在目前的1.1版本中。直 到2015年，HTTP2才成为标准。</li><li>HTTP/1.1和HTTP/2的主要区别是如何在客户端和服务器之间构建和传输数据。 HTTP/1.1依赖于请求/响应周期。 HTTP/2允许服务器“push”数据：它可以发 送比客户端请求更多的数据。这使得它可以优先处理并发送对于首先加载 网页至关重要的数据。</li><li>这是 Java 9 开始引入的一个处理 HTTP 请求的的 HTTP Client API，该 API 支持同步和异步，而在 Java 11 中已经为正式可用状态，你可以在</li><li>java.net 包中找到这个 API。<br>它将替代仅适用于blocking模式的HttpURLConnection（HttpURLConnection是在HTTP 1.0的时代创建的，并使用了协议无关的 方法），并提供对WebSocket 和 HTTP/2的支持。</li></ul></li><li><p><strong>更简化的编译运行程序</strong><br>看下面的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译</span></span><br><span class="line">javac Javastack.java</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">java Javastack</span><br></pre></td></tr></table></figure><p>在我们的认知里面，要运行一个 Java 源代码必须先编译，再运行，两步执行动作。而在未来的Java 11版本中，通过一个 java 命令就直接搞定了，如以下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Javastack.java</span><br></pre></td></tr></table></figure><p><strong>一个命令编译运行源代码的注意点：</strong></p></li></ul><ol><li>执行源文件中的第一个类, 第一个类必须包含主方法。</li><li>并且不可以使用其它源文件中的自定义类, 本文件中的自定义类是可以使用的。</li></ol><ul><li><p><strong>废弃Nashorn引擎</strong><br>废除Nashorn    javascript引擎，在后续版本准备移除掉，有需要的可以考虑使用GraalVM。</p></li><li><p><strong>ZGC</strong></p><ul><li>GC是java主要优势之一。 然而, 当GC停顿太长, 就会开始影响应用的响应时 间。消除或者减少GC停顿时长, java将对更广泛的应用场景是一个更有吸引力 的平台。此外, 现代系统中可用内存不断增长,用户和程序员希望JVM能够以高 效的方式充分利用这些内存, 并且无需长时间的GC暂停时间。</li><li>ZGC, A Scalable Low-Latency Garbage Collector(Experimental) ZGC, 这应该是JDK11最为瞩目的特性, 没有之一。 但是后面带了Experimental,  说明这还不建议用到生产环境。</li><li>ZGC是一个并发, 基于region, 压缩型的垃圾收集器, 只有root扫描阶段会 STW(stop the world), 因此GC停顿时间不会随着堆的增长和存活对象的增长 而变长。</li></ul></li><li><p><strong>优势：</strong></p><ul><li>GC暂停时间不会超过10ms</li><li>既能处理几百兆的小堆, 也能处理几个T的大堆(OMG)</li><li>和G1相比, 应用吞吐能力不会下降超过15%</li><li>为未来的GC功能和利用colord指针以及Load barriers优化奠定基础</li><li>初始只支持64位系统</li></ul></li><li><p><strong>ZGC的设计目标是：</strong><br>支持TB级内存容量，暂停时间低（&lt;10ms），对整个 程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人 兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存），或压缩堆。</p></li><li><p><strong>其它新特性</strong></p><ul><li>Unicode 10</li><li>Deprecate the Pack200 Tools and API</li><li>新的Epsilon垃圾收集器</li><li>完全支持Linux容器（包括Docker）</li><li>支持G1上的并行完全垃圾收集</li><li>最新的HTTPS安全协议TLS 1.3</li><li>Java Flight Recorder</li></ul></li></ul>]]></content>
    
    
    <summary type="html">Java学习笔记，Java基础阶段的高级编程，包含多线程，Java常用类，枚举类&amp;注解，Java集合，泛型，IO流，网络编程，Java反射机制，Java8的其他新特性，Java9&amp;10&amp;11新特性，文档资源来自尚硅谷，整理为博主，在此感谢尚硅谷无私分享大量的学习资源。</summary>
    
    
    
    <category term="JavaSE" scheme="https://www.jermyn.cn/categories/JavaSE/"/>
    
    
    <category term="大数据" scheme="https://www.jermyn.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="java" scheme="https://www.jermyn.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Jave基础编程</title>
    <link href="https://www.jermyn.cn/posts/e6c9.html"/>
    <id>https://www.jermyn.cn/posts/e6c9.html</id>
    <published>2022-09-02T12:27:24.000Z</published>
    <updated>2023-05-28T15:04:33.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Java语言概述"><a href="#第一章-Java语言概述" class="headerlink" title="第一章 Java语言概述"></a>第一章 Java语言概述</h1><h2 id="JDK、JRE、JVM关系"><a href="#JDK、JRE、JVM关系" class="headerlink" title="JDK、JRE、JVM关系"></a>JDK、JRE、JVM关系</h2><ul><li>JDK(Java Development Kit Java开发工具包)<br>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了<br>JRE。所以安装了JDK，就不用在单独安装JRE了。<br>其中的开发工具：编译工具(javac.exe) 打包工具(jar.exe)等</li><li>JRE(Java Runtime Environment Java运行环境)<br>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，<br>如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</li></ul><div class="note default simple"><p>简单而言，使用JDK的开发工具完成的java程序，交给JRE去运行。</p></div><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JDK = JRE + 开发工具集（例如Javac编译工具等）</span><br><span class="line">JRE = JVM + Java SE标准类库</span><br></pre></td></tr></table></figure><h2 id="第一个程序总结"><a href="#第一个程序总结" class="headerlink" title="第一个程序总结"></a>第一个程序总结</h2><ol><li>java程序编写-编译-运行的过程<br>编写：我们将编写的java代码保存在以”.java”结尾的源文件中<br>编译：使用javac.exe命令编译我们的java源文件。格式：javac 源文件名.java<br>运行：使用java.exe命令解释运行我们的字节码文件。 格式：java 类名</li><li>在一个java源文件中可以声明多个class。但是，只能最多有一个类声明为public的。而且要求声明为public的类的类名必须与源文件名相同。</li><li>程序的入口是main()方法。格式是固定的。</li><li>输出语句：<br>System.out.println():先输出数据，然后换行<br>System.out.print():只输出数据</li><li>每一行执行语句都以”;”结束。</li><li>编译的过程：编译以后，会生成一个或多个字节码文件。字节码文件的文件名与java源文件中的类名相同。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;<span class="comment">//public static void main(String a[]) &#123;//arguments:参数</span></span><br><span class="line">        System.out.print(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        System.out.println();<span class="comment">//换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第二章-Java基本语法（上）"><a href="#第二章-Java基本语法（上）" class="headerlink" title="第二章 Java基本语法（上）"></a>第二章 Java基本语法（上）</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li><strong>整型( byte \ short \ int \ long )</strong></li></ul><ol><li>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保java程序的可移植性。</li><li>java的整型常量默认为 int 型，声明long型常量须后加‘l’或‘L’</li><li>java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long<ul><li>byte<br>占用空间：1字节 = 8bit位 表数范围：-128 ~ 127</li><li>short<br>占用空间：2字节 = 16bit位 表数范围：-2^15 ~ 2^15-1</li><li>int<br>占用空间：4字节 = 32bit位 表数范围：-2^31 ~ 2^31-1(约21亿)</li><li>long<br>占用空间：8字节 = 64bit位 表数范围：-2^63 ~ 2^63-1<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;byte型的：&quot;</span> + b);</span><br><span class="line">        System.out.println(<span class="string">&quot;short型的：&quot;</span> + s);</span><br><span class="line">        System.out.println(<span class="string">&quot;int型的：&quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;long型的：&quot;</span> + l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><strong>浮点型( float \ double )</strong></li></ul><ol><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li><li>浮点型常量有两种表示形式：<br> 十进制数形式：如：5.12 512.0f .512 (必须有小数点）<br> 科学计数法形式:如：5.12e2 512E2 100E-2<ul><li>float<br>float:单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。<br>定义 float 类型变量时，变量要以 “f” 或者 “F” 结尾<br>占用空间：4字节 = 32bit位 表数范围：-3.403E38 ~ 3.403E38</li><li>double<br>double:双精度，精度是float的两倍。通常采用此类型。<br>占用空间：8字节 = 64bit位 表数范围：-1.798E308 ~ 1.798E308<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">3.14F</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;float型的：&quot;</span> + f);</span><br><span class="line">        System.out.println(<span class="string">&quot;double型的：&quot;</span> + d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><strong>字符型(char)</strong></li></ul><ol><li>char 型数据用来表示通常意义上“字符”(2字节) </li><li>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</li><li>字符型变量的三种表现形式：<br> 字符常量是用单引号(‘ ’)括起来的单个字符。例如：char c1 = ‘a’; char c2 = ‘中’; char c3 = ‘9’;<br> Java中还允许使用转义字符‘\’来将其后的字符转变为特殊字符型常量。例如：char c3 = ‘\n’; // ‘\n’表示换行符<br> 直接使用 Unicode 值来表示字符型常量：‘\uXXXX’。其中，XXXX代表一个十六进制整数。如：\u000a 表示 \n。 </li><li>char类型是可以进行运算的。因为它都对应有Unicode码。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;char型的c1：&quot;</span> + c1);</span><br><span class="line">        System.out.println(<span class="string">&quot;char型的c2：&quot;</span> + c2);</span><br><span class="line">        System.out.println(<span class="string">&quot;char型的c3：&quot;</span> + c3);</span><br><span class="line">        System.out.println(<span class="string">&quot;char型的c4：&quot;</span> + c4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>布尔型( boolean : true\false )</strong></li></ul><ol><li>boolean 类型用来判断逻辑条件，一般用于程序流程控制：<br> if条件控制语句；<br> while循环控制语句；<br> do-while循环控制语句；<br> for循环控制语句；</li><li>boolean类型数据只允许取值true和false，无null。 不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。———《java虚拟机规范 8版》</li></ol><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><ul><li><strong>字符串类型(String)</strong></li></ul><ol><li>String不是基本数据类型，属于引用数据类型</li><li>使用方式与基本数据类型一致。例如：String str = “abcd”;</li><li>String 可以和 8 种基本的数据类型做运算，运算结果是String，且运算只能是连接运算： + ==&gt;是连接符号，即为拼接在一起</li><li>一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。例如：<br> str = str + “xyz” ;<br> int n = 100;<br> str = str + n;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="自动数据类型转化"><a href="#自动数据类型转化" class="headerlink" title="自动数据类型转化"></a>自动数据类型转化</h2><ol><li>自动类型转换：容量小的类型自动转换为容量大的数据类型。<br>数据类型按容量大小排序为：</li><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的那种数据类型，然后再进行计算。</li><li>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。 </li><li>boolean类型不能与其它数据类型运算。</li><li>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类型的值将自动转化为字符串(String)类型。<blockquote><p>结论：当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。<br>注意：此时的容量大小表示的表示数的范围的大小，并非是占用的空间的大小。<br>特别地：byte、char、short 三种之间做运算用 int 以上的来接收</p></blockquote></li></ol><h2 id="强制数据类型转换"><a href="#强制数据类型转换" class="headerlink" title="强制数据类型转换"></a>强制数据类型转换</h2><ol><li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。 </li><li>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可以实现把字符串转换成基本类型。<br>如： String a = “43”; int i = Integer.parseInt(a);</li><li><p>boolean类型不可以转换为其它的数据类型。</p><blockquote><p>整型常量默认类型是 int 型<br>浮点型常量默认类型是 double 型</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 会造成精度的损失</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">3.9</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> (<span class="type">int</span>) d2;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> (<span class="type">int</span>) d1;</span><br><span class="line">        System.out.println(i1); <span class="comment">// 3</span></span><br><span class="line">        System.out.println(i2); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 没有精度的损失</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> (<span class="type">short</span>) l1;</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 精度损失</span></span><br><span class="line">        <span class="type">int</span> i3=<span class="number">128</span>;</span><br><span class="line">        <span class="type">byte</span>  b=(<span class="type">byte</span>) i3;</span><br><span class="line">        System.out.println(b); <span class="comment">// -128</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><div class="note success simple"><p>小练习1</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        System.out.println(c + num + str);   </span><br><span class="line">        System.out.println(c + str + num);</span><br><span class="line">        System.out.println(c + (num + str));</span><br><span class="line">        System.out.println((c + num) + str);</span><br><span class="line">        System.out.println(str + num + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">107Hello</span><br><span class="line">aHello10</span><br><span class="line">a10Hello</span><br><span class="line">107Hello</span><br><span class="line">Hello10a</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note success simple"><p>小练习2 </p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;*  *&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;*&#x27;</span> + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&#x27;*&#x27;</span> + (<span class="string">&#x27;\t&#x27;</span> + <span class="string">&quot;*&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">*  *</span><br><span class="line"><span class="number">93</span></span><br><span class="line"><span class="number">51</span>*</span><br><span class="line">**</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p></blockquote><ul><li><strong>算术运算符</strong><div class="tip "><p>注意：</p><ol><li>如果对负数取模，可以把模数负号忽略不记，如：5%-2=1。 但被模数是负数则不可忽略。此外，取模运算的结果不一定总是整数。</li><li>对于除号“/”，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃小数部分。 例如：int x=3510;x=x/1000*1000; x的结果是3000</li><li>“+”除字符串相加功能外，还能把非字符串转换成字符串.例如：System.out.println(“5+5=”+5+5); //打印结果是 5+5=55 </li></ol></div></li></ul><ul><li><strong>赋值运算符</strong></li></ul><ol><li>符号：=<br> 当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。<br> 支持连续赋值。 </li><li><p>扩展赋值运算符： +=, -=, *=, /=, %=</p><div class="tip "><p>注意：扩展赋值运算符不会改变数据类型</p></div> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">short</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//不改变数据类型</span></span><br><span class="line">        a++;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">// 不改变数据类型</span></span><br><span class="line">        a += <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line"><span class="comment">//        a = a + 1; 报错，1 为 int 型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><strong>比较运算符（关系运算符）</strong></p><blockquote><ol><li>比较运算符的结果都是boolean型，也就是要么是true，要么是false。 </li><li>比较运算符“==”不能误写成“=” 。</li></ol></blockquote></li><li><p><strong>逻辑运算符</strong></p></li></ul><ol><li>逻辑运算符用于连接布尔型表达式，在Java中不可以写成3 &lt; x &lt; 6，应该写成 x &gt; 3 &amp; x &lt; 6 。 </li><li>“&amp;”和“&amp;&amp;”的区别：<br> 单&amp;时，左边无论真假，右边都进行运算；<br> 双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。 </li><li>“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。 </li><li>异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。<blockquote><p>理解：异或，追求的是“异”!</p></blockquote></li></ol><ul><li><strong>位运算符</strong><blockquote><p>位运算是直接对整数的二进制进行的运算<br>注意：在一定范围内，某个数左移 n 位，即这个数乘以 2 的 n 次方。如：3 &lt;&lt; 2 结果为 1<br>在一定范围内，某个数右移 n 位，即这个数除以 2 的 n 次方。如：16 &lt;&lt; 2 结果为 4 ，15 &lt;&lt; 2 结果为 3</p></blockquote></li></ul><ul><li><strong>三元运算符</strong></li></ul><ol><li>格式: (条件表达式)?表达式1：表达式2；<br> 条件表达式为true，运算后的结果是表达式1；<br> 条件表达式为false，运算后的结果是表达式2； </li><li>表达式1和表达式2为同种类型</li><li>三元运算符与if-else的联系与区别：<br> 三元运算符可简化if-else语句<br> 三元运算符要求必须返回一个结果。<br> if后的代码块可有多个语句</li></ol><blockquote><p>1.运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如上表，上一行运算<br>符总优先于下一行。<br>2.只有单目运算符、三元运算符、赋值运算符是从右向左运算的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三元运算符示例，比较两个数，输出大的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">3</span>, n = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (m &gt; n) ? m : n;</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三元运算符的嵌套</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">3</span>, n = <span class="number">3</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> (m &gt; n) ? <span class="string">&quot;m大&quot;</span> : ((m == n) ? <span class="string">&quot;m和n相等&quot;</span> : <span class="string">&quot;n大&quot;</span>);</span><br><span class="line">        System.out.println(maxStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断三个数中最大的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">3</span>, n2 = <span class="number">8</span>, n3 = <span class="number">6</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> (((n1 &gt; n2) ? n1 : n2) &gt; n3) ? ((n1 &gt; n2) ? n1 : n2) : n3;</span><br><span class="line">        System.out.println(<span class="string">&quot;三个数中的最大值是：&quot;</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-Java基本语法（下）"><a href="#第三章-Java基本语法（下）" class="headerlink" title="第三章 Java基本语法（下）"></a>第三章 Java基本语法（下）</h1><h2 id="程序流程控制一"><a href="#程序流程控制一" class="headerlink" title="程序流程控制一"></a>程序流程控制一</h2><ol><li>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。 </li><li>其流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：<br> 顺序结构：程序从上到下逐行地执行，中间没有任何判断和跳转。<br> 分支结构：根据条件，选择性地执行某段代码;有if…else和switch-case两种分支语句。<br> 循环结构：根据循环条件，重复性的执行某段代码;有while、do…while、for三种循环语句。</li></ol><ul><li><p><strong>程序流程控制：if-else结构</strong><br>if语句三种格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行代码块；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">执行代码块<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if-else if...else</span></span><br><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">执行代码块<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">执行代码块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">执行代码块n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分支结构：if-else使用说明<br>1.条件表达式必须是布尔表达式（关系表达式或逻辑表达式）、布尔变量<br>2.语句块只有一条执行语句时，一对{}可以省略，但建议保留<br>3.if-else语句结构，根据需要可以嵌套使用<br>4.当if-else结构是“多选一”时，最后的else是可选的，根据需要可以省略<br>5.当多个条件是“互斥”关系时，条件判断语句及执行语句间顺序无所谓<br>6.当多个条件是“包含”关系时，“小上大下 / 子上父下”</p></blockquote>  <div class="tip "><p>Math.random()方法使用<br>Math.random() 可以生成 [0.0,1.0) 之间的随机数字<br>如果想要生成： [a,b] 之间的随机数<br>公式：(int) (Math.random() * (b - a + 1) + a)</p></div></li></ul><ul><li><strong>程序流程控制：switch-case结构</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">语句<span class="number">2</span>;</span><br><span class="line"><span class="comment">// break; … …</span></span><br><span class="line"><span class="keyword">case</span> 常量N:</span><br><span class="line">语句N;</span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句;</span><br><span class="line"><span class="comment">// break;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch语句有关规则<br>1.switch(表达式)中表达式的值必须是下述几种类型之一：<strong>byte，short，char，int，枚举 (jdk 5.0)，String (jdk 7.0)</strong>；<br>2.case子句中的值必须是<strong>常量</strong>，不能是变量名或不确定的表达式值；<br>3.同一个switch语句，所有case子句中的<strong>常量值互不相同</strong>；<br>4.break语句用来在执行完一个case分支后使程序跳出switch语句块；如果没有break，程序会顺序执行到switch结尾<br>5.default子句是可任选的。同时，位置也是灵活的。当没有匹配的case时，执行default</p></blockquote></li></ul><h2 id="程序流程控制二"><a href="#程序流程控制二" class="headerlink" title="程序流程控制二"></a>程序流程控制二</h2><ol><li>循环结构:在某些条件满足的情况下，反复执行特定代码的功能</li><li>循环语句分类<br> for 循环<br> while 循环<br> do-while 循环</li><li>循环语句的四个组成部分<br> 初始化部分(init_statement)<br> 循环条件部分(test_exp)<br> 循环体部分(body_statement)<br> 迭代部分(alter_statement)</li></ol><ul><li><p><strong>程序流程控制：循环结构之for循环</strong><br>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (①初始化部分;②循环条件部分;④迭代部分)&#123;</span><br><span class="line">    ③循环体部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：①-②-③-④-②-③-④-②-③-④-…..-②<br>说明：<br>  ②循环条件部分为boolean类型表达式，当值为false时，退出循环<br>  ①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔<br>  ④可以有多个变量更新，用逗号分隔</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环经典例子-求 1~100 的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>程序流程控制：循环结构之while循环</strong><br>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分;</span><br><span class="line"><span class="keyword">while</span> (②循环条件部分) &#123;</span><br><span class="line">    ③循环体部分;</span><br><span class="line">    ④迭代部分;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行过程：①-②-③-④-②-③-④-②-③-④-…-②<br>说明：<br>  注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。<br>  for循环和while循环可以相互转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while 循环经典案例-求 1~100 的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">            result += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>程序流程控制：循环结构之do-while循环</strong><br>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①初始化部分;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    ③循环体部分;</span><br><span class="line">    ④迭代部分;</span><br><span class="line">&#125; <span class="keyword">while</span> (②循环条件部分);</span><br></pre></td></tr></table></figure><p>执行过程：①-③-④-②-③-④-②-③-④-…②<br>说明：<br>  do-while循环至少执行一次循环体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// do-while 循环经典案例-求 1~100 的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            result += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt;= <span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>程序流程控制：嵌套循环结构</strong></li></ul><ol><li>将一个循环放在另一个循环体内，就形成了嵌套循环。其中，for ,while ,do…while均可以作为外层循环或内层循环。</li><li>实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的循环。</li><li>设外层循环次数为m次，内层为n次，则内层循环体实际上需要执行m*n次<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 嵌套循环经典例子-打印九九乘法表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d*%d=%d\t&quot;</span>, j, i, i * j);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span><span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span><span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span><span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span><span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span><span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span><span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span><span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span><span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span><span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span><span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span><span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span><span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span><span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span><span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span><span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span><span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span><span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span><span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span><span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span><span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span><span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span><span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span><span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span><span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span><span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span><span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span><span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span><span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span><span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span><span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span><span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span><span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span><span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span><span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span><span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span><span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断100以内的质数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">isPrimeNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= Math.sqrt(i); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    isFlag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isFlag == <span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d is a prime number\n&quot;</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">2</span> is a prime number</span><br><span class="line"><span class="number">3</span> is a prime number</span><br><span class="line"><span class="number">5</span> is a prime number</span><br><span class="line">.......</span><br><span class="line">......</span><br><span class="line"><span class="number">97</span> is a prime number</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="特殊关键字的使用"><a href="#特殊关键字的使用" class="headerlink" title="特殊关键字的使用"></a>特殊关键字的使用</h2></li></ol><ul><li><p><strong>程序流程控制：break的使用</strong><br>break 语句：break语句用于终止某个语句块的执行</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">label1:    </span><br><span class="line">&#123; ......</span><br><span class="line">    label2:</span><br><span class="line">    &#123; ......</span><br><span class="line">        label3:</span><br><span class="line">        &#123; ......</span><br><span class="line">        <span class="keyword">break</span> label2;</span><br><span class="line">        ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>程序流程控制：continue的使用</strong><br>continue 语句：<br>  1.continue只能使用在循环结构中<br>  2.continue语句用于跳过其所在循环语句块的一次执行，继续下一次循环<br>  3.continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// continue语句用法举例</span></span><br><span class="line"><span class="comment">// 打印 100以内10的倍数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">70</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="number">90</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求100以内的质数的优化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        label1:</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= Math.sqrt(i); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span> label1;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d is a prime number\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>程序流程控制：return的使用</strong></p><ul><li>return 关键字并不是专门用于结束循环的，return 语句用于终止函数的执行或退出类的方法，并把控制权返回该方法的调用者。如果这个方法带有返回类型，return 语句就必须返回这个类型的值；如果这个方法没有返回值，可以使用没有表达式的 return 语句。</li><li>与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内</li></ul></li></ul><div class="note info simple"><p>1.break只能用于switch语句和循环语句中。<br>2.continue <strong>只能用于循环语句</strong>中。<br>3.二者功能类似，但continue是终止<strong>本次</strong>循环，break是终止<strong>本层</strong>循环。<br>4.break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句。<br>5.标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。<br>6.很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它。但使程序容易出错。Java中的break和continue是不同于goto的。</p></div><h2 id="小项目"><a href="#小项目" class="headerlink" title="小项目"></a>小项目</h2><div class="note simple"><p>模拟实现一个基于文本界面的《家庭记账软件》</p></div><div class="tabs" id="小项目"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#小项目-1">Utility.java</button></li><li class="tab"><button type="button" data-href="#小项目-2">FamilyAccount.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="小项目-1"><details class="folding-tag" green><summary> 点击查看Utility.java源代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Utility工具类：</span></span><br><span class="line"><span class="comment">将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readMenuSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp; c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readConfirmSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readKeyBoard</span><span class="params">(<span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小项目-2"><details class="folding-tag" green><summary> 点击查看FamilyAccount.java源代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exer; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FamilyAccount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">while</span> (isFlag) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;\n\n-----------------家庭收支记账软件-----------------\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;1 收支明细\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;2 登记收入\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;3 登记支出\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;4 退 出\n&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择(1-4)：&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">selection</span> <span class="operator">=</span> Utility.readMenuSelection();</span><br><span class="line">            <span class="keyword">switch</span> (selection) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;-----------------当前收支明细记录-----------------&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;收支\t\t账户金额\t\t收支金额\t\t说 明&quot;</span>);</span><br><span class="line">                    System.out.println(details);</span><br><span class="line">                    System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次收入金额：&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">inputWealth</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次收入说明：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line">                    balance += inputWealth;</span><br><span class="line">                    details += (<span class="string">&quot;收入\t\t&quot;</span> + balance + <span class="string">&quot;\t\t&quot;</span> + inputWealth + <span class="string">&quot;\t\t\t&quot;</span> + description + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次支出金额：&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">outputWealth</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">                    System.out.print(<span class="string">&quot;本次支出说明：&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">description1</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line">                    <span class="keyword">if</span> (balance &gt;= outputWealth)</span><br><span class="line">                        balance -= outputWealth;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;支出金额过大，不够支出&quot;</span>);</span><br><span class="line">                    details += (<span class="string">&quot;支出\t\t&quot;</span> + balance + <span class="string">&quot;\t\t&quot;</span> + outputWealth + <span class="string">&quot;\t\t\t&quot;</span> + description1 + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    System.out.print(<span class="string">&quot;确认是否退出(Y/N)：&quot;</span>);</span><br><span class="line">                    <span class="type">char</span> <span class="variable">exitConfirm</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line">                    <span class="keyword">switch</span> (exitConfirm) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line">                            isFlag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">-----------------家庭收支记账软件-----------------</span><br><span class="line"><span class="number">1</span> 收支明细</span><br><span class="line"><span class="number">2</span> 登记收入</span><br><span class="line"><span class="number">3</span> 登记支出</span><br><span class="line"><span class="number">4</span> 退 出</span><br><span class="line">请选择(<span class="number">1</span>-<span class="number">4</span>)：<span class="number">2</span></span><br><span class="line">本次收入金额：<span class="number">200</span></span><br><span class="line">本次收入说明：打工</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------家庭收支记账软件-----------------</span><br><span class="line"><span class="number">1</span> 收支明细</span><br><span class="line"><span class="number">2</span> 登记收入</span><br><span class="line"><span class="number">3</span> 登记支出</span><br><span class="line"><span class="number">4</span> 退 出</span><br><span class="line">请选择(<span class="number">1</span>-<span class="number">4</span>)：<span class="number">3</span></span><br><span class="line">本次支出金额：<span class="number">300</span></span><br><span class="line">本次支出说明：吃饭</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------家庭收支记账软件-----------------</span><br><span class="line"><span class="number">1</span> 收支明细</span><br><span class="line"><span class="number">2</span> 登记收入</span><br><span class="line"><span class="number">3</span> 登记支出</span><br><span class="line"><span class="number">4</span> 退 出</span><br><span class="line">请选择(<span class="number">1</span>-<span class="number">4</span>)：<span class="number">1</span></span><br><span class="line">-----------------当前收支明细记录-----------------</span><br><span class="line">收支账户金额收支金额说 明</span><br><span class="line">收入<span class="number">10200</span><span class="number">200</span>打工</span><br><span class="line">支出<span class="number">9900</span><span class="number">300</span>吃饭</span><br><span class="line"></span><br><span class="line">------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------家庭收支记账软件-----------------</span><br><span class="line"><span class="number">1</span> 收支明细</span><br><span class="line"><span class="number">2</span> 登记收入</span><br><span class="line"><span class="number">3</span> 登记支出</span><br><span class="line"><span class="number">4</span> 退 出</span><br><span class="line">请选择(<span class="number">1</span>-<span class="number">4</span>)：<span class="number">4</span></span><br><span class="line">确认是否退出(Y/N)：y</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="第四章-数组"><a href="#第四章-数组" class="headerlink" title="第四章 数组"></a>第四章 数组</h1><ol><li>数组(Array)：是多个<strong>相同类型数据</strong>按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理</li><li>数组的常见概念：数组名; 下标(或索引); 元素; 数组的长度</li><li>数组本身是<strong>引用数据类型</strong>，而数组中的元素可以是任何数据类型，包括基本数据类型和引用数据类型。 </li><li>创建数组对象会在内存中开辟一整块<strong>连续的空间</strong>，而数组名中引用的是这块连续空间的<strong>首地址</strong>。 </li><li>数组的长度<strong>一旦确定，就不能修改</strong>。 </li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。 </li><li>数组的分类：<br> 按照维度：一维数组、二维数组、三维数组、…<br> 按照元素的数据类型分：基本数据类型元素的数组、引用数据类型元素的数组(即对象数组)</li></ol><h2 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h2><ul><li><p><strong>一维数组的使用：声明</strong><br>一维数组的声明方式：type var[] 或 type[] var；<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[];</span><br><span class="line"><span class="type">int</span>[] a1;</span><br><span class="line"><span class="type">double</span> b[];</span><br><span class="line">String[] c; <span class="comment">//引用类型变量数组</span></span><br></pre></td></tr></table></figure><p><em>Java语言中声明数组时不能指定其长度(数组中元素的数)， 例如： int a[5]; //非法</em></p></li><li><p><strong>一维数组的使用：初始化</strong><br>动态初始化：数组声明且为数组元素分配空间与赋值的操作分开进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态初始化</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">String names[];</span><br><span class="line">names = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">names[<span class="number">0</span>] = “Jack”;</span><br><span class="line">names[<span class="number">1</span>] = “Tom”;</span><br><span class="line">names[<span class="number">2</span>] = “Jermyn”;</span><br></pre></td></tr></table></figure><p>静态初始化：在定义数组的同时就为数组元素分配空间并赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line"><span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123; <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;</span><br><span class="line">或</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">String names[] = &#123;“Jack”,“Tom”,“Jermyn” &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>一维数组的使用：数组元素的引用</strong></p></li></ul><ol><li>定义并用运算符new为之分配空间后，才可以引用数组中的每个元素；</li><li>数组元素的引用方式：数组名[数组元素下标] </li><li>数组元素下标可以是<strong>整型常量或整型表达式</strong>。如a[3] , b[i] , c[6*i];</li><li>数组元素下标<strong>从0开始</strong>；长度为n的数组合法下标取值范围: 0 —&gt;n-1；如int a[]=new int[3]; 可引用的数组元素为a[0]、a[1]、a[2]</li><li>每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的长度(元素个数) </li><li>数组一旦初始化，其<strong>长度是不可变</strong>的</li></ol><ul><li><p><strong>一维数组的使用：数组元素的默认初始化值</strong><br>数组是引用类型，它的元素相当于类的成员变量，因此数组一经分配空间，其中的每个元素也被按照成员变量同样的方式被隐式初始化。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        System.out.println(a[<span class="number">3</span>]); <span class="comment">//a[3]的默认值为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于基本数据类型而言，默认初始化值各有不同<br>对于引用数据类型而言，默认初始化值为null(注意与0不同！)</p></blockquote></li><li><p><strong>一维数组的使用：数组元素的默认初始化值</strong></p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">数组元素类型</th><th style="text-align:center">元素默认初始值</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">0.0</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">0或写为 ‘\u0000’（表现为空）</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">引用类型</td><td style="text-align:center">null</td></tr></tbody></table></div><h2 id="多维数组的使用"><a href="#多维数组的使用" class="headerlink" title="多维数组的使用"></a>多维数组的使用</h2><ol><li>Java 语言里提供了支持多维数组的语法。</li><li><p>对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。其实，从数组底层的运行机制来看，其实没有多维数组。</p> <div class="tabs" id="数组使用"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#数组使用-1">格式一</button></li><li class="tab"><button type="button" data-href="#数组使用-2">格式二</button></li><li class="tab"><button type="button" data-href="#数组使用-3">格式三</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="数组使用-1"><p><strong><br>动态初始化：int[][] arr = new int[3][2];<br>定义了名称为arr的二维数组。二维数组中有3个一维数组。每一个一维数组中有2个元素。<br>一维数组的名称分别为arr[0], arr[1], arr[2]<br>给第一个一维数组1脚标位赋值为78写法是：arr[0][1] = 78;</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数组使用-2"><p><strong><br>动态初始化：int[][] arr = new int[3][];<br>二维数组中有3个一维数组。每个一维数组都是默认初始化值null (注意：区别于格式1）。可以对这个三个一维数组分别进行初始化<br>arr[0] = new int[3]; arr[1] = new int[1]; arr[2] = new int[2];<br>注：int[][]arr = new int[][3]; //非法</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="数组使用-3"><p>**</p><p>定义一个名称为arr的二维数组，二维数组中有三个一维数组<br>每一个一维数组中具体元素也都已初始化<br>第一个一维数组 arr[0] = {3,8,2};<br>第二个一维数组 arr[1] = {2,7};<br>第三个一维数组 arr[2] = {9,0,1,6};<br>第三个一维数组的长度表示方式：arr[2].length;<br>**</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>注意：特殊写法情况：int[] x,y[]; x是一维数组，y是二维数组。<br>Java中多维数组不必都是规则矩阵形式</p></blockquote></li></ol><ul><li><strong>遍历二维数组</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历二维数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arry = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>&#125;, &#123;<span class="number">2</span>, <span class="number">7</span>&#125;, &#123;<span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arry.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arry[i].length; j++) &#123;</span><br><span class="line">                System.out.print(arry[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>小练习1<br>使用二维数组打印一个 10 行杨辉三角。<br>【提示】</p><ol><li>第一行有 1 个元素, 第 n 行有 n 个元素</li><li>每一行的第一个元素和最后一个元素都是 1</li><li>从第三行开始, 对于非第一个元素和最后一个元素的元素。即：yangHui[i][j] = yangHui[i-1][j-1] + yangHui[i-1][j];</li></ol></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印10行杨辉三角</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YangHui</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] yangHui = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            yangHui[i] = <span class="keyword">new</span> <span class="title class_">int</span>[i + <span class="number">1</span>];</span><br><span class="line">            yangHui[i][<span class="number">0</span>] = yangHui[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; yangHui[i].length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                yangHui[i][j] = yangHui[i - <span class="number">1</span>][j - <span class="number">1</span>] + yangHui[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yangHui.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yangHui[i].length; j++) &#123;</span><br><span class="line">                System.out.print(yangHui[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">3</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">6</span>  <span class="number">4</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>  <span class="number">10</span>  <span class="number">10</span>  <span class="number">5</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">6</span>  <span class="number">15</span>  <span class="number">20</span>  <span class="number">15</span>  <span class="number">6</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">21</span>  <span class="number">35</span>  <span class="number">35</span>  <span class="number">21</span>  <span class="number">7</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">8</span>  <span class="number">28</span>  <span class="number">56</span>  <span class="number">70</span>  <span class="number">56</span>  <span class="number">28</span>  <span class="number">8</span>  <span class="number">1</span>  </span><br><span class="line"><span class="number">1</span>  <span class="number">9</span>  <span class="number">36</span>  <span class="number">84</span>  <span class="number">126</span>  <span class="number">126</span>  <span class="number">84</span>  <span class="number">36</span>  <span class="number">9</span>  <span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h1 id="第五章-面向对象编程（上）"><a href="#第五章-面向对象编程（上）" class="headerlink" title="第五章 面向对象编程（上）"></a>第五章 面向对象编程（上）</h1><ol><li>程序员从面向过程的<strong>执行者</strong>转化成了面向对象的<strong>指挥者</strong></li><li>面向对象分析方法分析问题的思路和步骤： <ul><li>根据问题需要，选择问题所针对的<strong>现实世界中的实体</strong>。 </li><li>从实体中寻找解决问题相关的属性和功能，这些属性和功能就形成了<strong>概念世界中的类</strong>。 </li><li>把抽象的实体用计算机语言进行描述，<strong>形成计算机世界中类的定义</strong>。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将<strong>类实例化成计算机世界中的对象</strong>。对象是计算机世界中解决问题的最终工具。</li></ul></li></ol><h2 id="Java语言的基本元素：类和对象"><a href="#Java语言的基本元素：类和对象" class="headerlink" title="Java语言的基本元素：类和对象"></a>Java语言的基本元素：类和对象</h2><ul><li><strong>面向对象的思想概述</strong></li></ul><ol><li>类(Class)和对象(Object)是面向对象的核心概念。<ul><li>类是对一类事物的描述，是抽象的、概念上的定义</li><li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。 </li></ul></li><li>“万事万物皆对象</li></ol><blockquote><p>属 性：对应类中的成员变量<br>行 为：对应类中的成员方法<br>Field = 属性 = 成员变量，Method = (成员)方法 = 函数</p></blockquote><ul><li><strong>类的语法格式</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名 &#123;</span><br><span class="line">    属性声明;</span><br><span class="line">    方法声明; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>说明：修饰符public：类可以被任意访问的正文要用{ }括起来</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ; <span class="comment">//声明私有变量 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAge</span><span class="params">(<span class="type">int</span> i)</span> &#123; <span class="comment">//声明方法showAge( )</span></span><br><span class="line">        age = i; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>创建Java自定义类</strong><br>步骤：</li></ul><ol><li>定义类（考虑修饰符、类名）</li><li>编写类的属性（考虑修饰符、属性类型、属性名、初始化值）</li><li>编写类的方法（考虑修饰符、返回值类型、方法名、形参等）</li></ol><h2 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h2><p>创建对象语法： <strong>类名 对象名 = new 类名();</strong><br>使用“对象名.对象成员”的方式访问对象成员（<em>包括属性和方法</em>）<br>过程：</p><ol><li>创建类，设计类的成员</li><li>创建类的对象</li><li>通过“对象.属性”或“对象.方法”调用对象的结构<details class="folding-tag" green><summary> 点击查看示例 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2. 创建Person类的对象 p1</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//Scanner scanner = new Scanner(System.in);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用对象的结构：属性、方法</span></span><br><span class="line">        <span class="comment">//调用属性：“对象.属性”</span></span><br><span class="line">        p1.name = <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        p1.isMale = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法：“对象.方法”</span></span><br><span class="line">        p1.eat();</span><br><span class="line">        p1.sleep();</span><br><span class="line">        p1.talk(<span class="string">&quot;Chinese&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个新的对象 p2</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p2.run();</span><br><span class="line">        System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line">        System.out.println(p2.isMale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建类，设计类的成员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在跑步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">(String language)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以说话,使用的是：&quot;</span> + language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Jermyn正在吃饭</span><br><span class="line">Jermyn正在睡觉</span><br><span class="line">人可以说话,使用的是：Chinese</span><br><span class="line"><span class="literal">null</span>正在跑步</span><br><span class="line"><span class="literal">null</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="tip warning faa-horizontal animated-hover"><p>类的访问机制：</p><ul><li>在一个类中的访问机制：类中的方法可以直接访问类中的成员变量。 （例外：static方法访问非static，编译不通过。） </li><li>在不同类中的访问机制：先创建要访问类的对象，再用对象访问类中定义的成员。</li></ul></div></li></ol><ul><li><strong>对象的创建和使用：内存解析</strong></li></ul><ul><li>堆（Heap），此内存区域的唯一目的就是<strong>存放对象实例</strong>，几乎所有的对象例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。 </li><li>通常所说的栈（Stack），是指<strong>虚拟机栈</strong>。虚拟机栈用于<strong>存储局部变量等</strong>。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char 、 short 、 int 、 float 、 long 、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 <strong>方法执行完，自动释放</strong>。 </li><li>方法区（Method Area），用于存储已被虚拟机<strong>加载的类信息</strong>、常量、静态变量、即时编译器编译后的代码等数据</li></ul><ul><li><strong>对象的创建和使用：匿名对象</strong></li></ul><ol><li>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。<br> 如：new Person().shout(); </li><li>使用情况<ul><li>如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。</li><li>我们经常将匿名对象作为实参传递给一个方法调用。<details class="folding-tag" green><summary> 点击查看示例 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名对象的使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 正常的操作</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="comment">//p = null;</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">        p.sendEmail();</span><br><span class="line">        p.playGame();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名对象</span></span><br><span class="line"><span class="comment">//new Phone().sendEmail();</span></span><br><span class="line"><span class="comment">//new Phone().playGame();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相当于创建两个对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Phone</span>().price = <span class="number">1999</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Phone</span>().showPrice();<span class="comment">//0.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">PhoneMall</span> <span class="variable">mall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneMall</span>();</span><br><span class="line"><span class="comment">//mall.show(p);</span></span><br><span class="line">        <span class="comment">//匿名对象的使用</span></span><br><span class="line">        mall.show(<span class="keyword">new</span> <span class="title class_">Phone</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneMall</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Phone phone)</span> &#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">        phone.playGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playGame</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩游戏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;手机价格为：&quot;</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">test.Phone@1b6d3586</span><br><span class="line">发送邮件</span><br><span class="line">玩游戏</span><br><span class="line">手机价格为：<span class="number">0.0</span></span><br><span class="line">发送邮件</span><br><span class="line">玩游戏</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul></li></ol><h2 id="类的成员之一：属性-field"><a href="#类的成员之一：属性-field" class="headerlink" title="类的成员之一：属性(field)"></a>类的成员之一：属性(field)</h2><ul><li><p><strong>基本</strong><br>语法格式：修饰符 数据类型 属性名 = 初始化值 ;<br><strong>说明1: 修饰符</strong><br>  常用的权限修饰符有：private、缺省、protected、public<br>  其他修饰符：static、final (暂不考虑)<br><strong>说明2：数据类型</strong><br>  任何基本数据类型(如int、Boolean) 或 任何引用数据类型。<br><strong>说明3：属性名</strong><br>  属于标识符，符合命名规则和规范即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">//声明private变量 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> “Jermyn”; <span class="comment">//声明public变量 name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>变量的分类：成员变量与局部变量</strong></p></li></ul><ol><li>在方法体外，类体内声明的变量称为成员变量。</li><li>在方法体内部声明的变量称为局部变量。</li><li>所有变量<ul><li>成员变量<ul><li>实例变量（不以static修饰）</li><li>类变量（以static修饰）</li></ul></li><li>局部变量<ul><li>形参（方法、构造器中定义的变量）</li><li>方法局部变量（在方法内定义）</li><li>代码块局部变量（在代码块内定义）</li></ul></li></ul></li><li>注意：二者在初始化值方面的异同:<br> 同：都有生命周期<br> 异：局部变量除形参外，均需显式初始化</li></ol><ul><li><strong>成员变量（属性）和局部变量的区别</strong></li></ul><div class="table-container"><table><thead><tr><th></th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>声明的位置</td><td>直接声明在类中</td><td>方法形参或内部，代码块内部，构造器内等</td></tr><tr><td>修饰符</td><td>private、public、static、final等</td><td>不能用权限修饰符修饰，可以用final修饰</td></tr><tr><td>初始化值</td><td>有默认初始化值</td><td>没有默认初始化值，必须显式赋值，方可使用</td></tr><tr><td>内存加载位置</td><td>堆空间 或 静态域内</td><td>栈空间</td></tr></tbody></table></div><ul><li><strong>对象属性的默认初始化赋值</strong><br>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。除了基本数据类型之外的变量类型都是引用类型，如上面的Person及前面讲过的数组。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">成员变量类型</th><th style="text-align:center">初始值</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">0L</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">0.0</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">0或写为 ‘\u0000’（表现为空）</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">引用类型</td><td style="text-align:center">null</td></tr></tbody></table></div><h2 id="类的成员之二：方法-method"><a href="#类的成员之二：方法-method" class="headerlink" title="类的成员之二：方法(method)"></a>类的成员之二：方法(method)</h2><ul><li><p><strong>什么是方法(method、函数)</strong></p><ol><li>方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为函数或过程。</li><li>将功能封装为方法的目的是，可以实现代码重用，简化代码</li><li>Java里的方法不能独立存在，所有的方法必须定义在类里。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="comment">//声明方法getAge()</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> i)</span> &#123; <span class="comment">//声明方法setAge</span></span><br><span class="line">        age = i; <span class="comment">//将参数i的值赋给类的成员变量age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>方法的声明格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名（参数类型 形参<span class="number">1</span>, 参数类型 形参<span class="number">2</span>, ….）｛</span><br><span class="line">    方法体程序代码</span><br><span class="line">    <span class="keyword">return</span> 返回值; </span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p><strong>修饰符</strong>：public,缺省,private, protected等<br><strong>返回值类型：</strong><br>1.没有返回值：void。<br>2.有返回值，声明出返回值的类型。与方法体中“return 返回值”搭配使用<br><strong>方法名</strong>：属于标识符，命名时遵循标识符命名规则和规范，“见名知意”<br><strong>形参列表</strong>：可以包含零个，一个或多个参数。多个参数时，中间用“,”隔开<br><strong>返回值</strong>：方法在执行完毕后返还给调用它的程序的数据。</p></li></ul><ul><li><strong>方法的分类：按照是否有形参及返回值</strong></li></ul><div class="table-container"><table><thead><tr><th></th><th>无返回值</th><th>有返回值</th></tr></thead><tbody><tr><td>无形参</td><td>void 方法名（）{}</td><td>返回值的类型 方法名（）{}</td></tr><tr><td>有形参</td><td>void 方法名（形参列表）{}</td><td>返回值的类型 方法名（形参列表）{}</td></tr></tbody></table></div><ul><li><p><strong>方法的调用</strong></p><ul><li>方法通过方法名被调用，且只有被调用才会执行。</li></ul></li><li><p><strong>方法调用过程分析</strong></p><div class="note info flat"><p>注 意：</p><ol><li>方法被<strong>调用一次，就会执行一次</strong></li><li>没有具体返回值的情况，返回值类型用关键字void表示，那么方法体中可不必使用return语句。如果使用，仅用来结束方法。</li><li>定义方法时，方法的结果应该返回给调用者，交由调用者处理。 </li><li>方法中只能调用<strong>方法或属性</strong>，不可以在方法内部定义方法。</li></ol></div><div class="note success flat"><p>对象数组题目：<br>定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。<br>问题一：打印出3年级(state值为3）的学生信息。<br>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</p></div><details class="folding-tag" green><summary> 点击查看代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student[] stus = <span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stus.length; i++) &#123;</span><br><span class="line">            stus[i] = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            stus[i].number = i + <span class="number">1</span>;</span><br><span class="line">            stus[i].score = (<span class="type">int</span>) (Math.random() * <span class="number">101</span>);</span><br><span class="line">            stus[i].state = (<span class="type">int</span>) (Math.random() * <span class="number">6</span> + <span class="number">1</span>);</span><br><span class="line">            stus[i].showStudentInfo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------分割线--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三年级的学生&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stus.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stus[i].state == <span class="number">3</span>) &#123;</span><br><span class="line">                stus[i].showStudentInfo();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------分割线--------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;按学生成绩排序&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stus.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; stus.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stus[j].score&gt;stus[j+<span class="number">1</span>].score)&#123;</span><br><span class="line">                    <span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> stus[j];</span><br><span class="line">                    stus[j] = stus[j + <span class="number">1</span>];</span><br><span class="line">                    stus[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stus.length; i++) &#123;</span><br><span class="line">            stus[i].showStudentInfo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">int</span> state;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showStudentInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学号：&quot;</span> + number + <span class="string">&quot;\t成绩：&quot;</span> + score + <span class="string">&quot;\t年级：&quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">学号：<span class="number">1</span>成绩：<span class="number">13</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">2</span>成绩：<span class="number">27</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">3</span>成绩：<span class="number">5</span>年级：<span class="number">6</span></span><br><span class="line">学号：<span class="number">4</span>成绩：<span class="number">19</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">5</span>成绩：<span class="number">3</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">6</span>成绩：<span class="number">63</span>年级：<span class="number">5</span></span><br><span class="line">学号：<span class="number">7</span>成绩：<span class="number">95</span>年级：<span class="number">2</span></span><br><span class="line">学号：<span class="number">8</span>成绩：<span class="number">4</span>年级：<span class="number">6</span></span><br><span class="line">学号：<span class="number">9</span>成绩：<span class="number">48</span>年级：<span class="number">4</span></span><br><span class="line">学号：<span class="number">10</span>成绩：<span class="number">67</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">11</span>成绩：<span class="number">2</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">12</span>成绩：<span class="number">58</span>年级：<span class="number">1</span></span><br><span class="line">学号：<span class="number">13</span>成绩：<span class="number">10</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">14</span>成绩：<span class="number">21</span>年级：<span class="number">6</span></span><br><span class="line">学号：<span class="number">15</span>成绩：<span class="number">77</span>年级：<span class="number">5</span></span><br><span class="line">学号：<span class="number">16</span>成绩：<span class="number">64</span>年级：<span class="number">5</span></span><br><span class="line">学号：<span class="number">17</span>成绩：<span class="number">27</span>年级：<span class="number">2</span></span><br><span class="line">学号：<span class="number">18</span>成绩：<span class="number">37</span>年级：<span class="number">1</span></span><br><span class="line">学号：<span class="number">19</span>成绩：<span class="number">81</span>年级：<span class="number">2</span></span><br><span class="line">学号：<span class="number">20</span>成绩：<span class="number">78</span>年级：<span class="number">5</span></span><br><span class="line">-------------------------分割线--------------------------</span><br><span class="line">三年级的学生</span><br><span class="line">学号：<span class="number">1</span>成绩：<span class="number">13</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">2</span>成绩：<span class="number">27</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">4</span>成绩：<span class="number">19</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">5</span>成绩：<span class="number">3</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">10</span>成绩：<span class="number">67</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">11</span>成绩：<span class="number">2</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">13</span>成绩：<span class="number">10</span>年级：<span class="number">3</span></span><br><span class="line">-------------------------分割线--------------------------</span><br><span class="line">按学生成绩排序</span><br><span class="line">学号：<span class="number">11</span>成绩：<span class="number">2</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">5</span>成绩：<span class="number">3</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">8</span>成绩：<span class="number">4</span>年级：<span class="number">6</span></span><br><span class="line">学号：<span class="number">3</span>成绩：<span class="number">5</span>年级：<span class="number">6</span></span><br><span class="line">学号：<span class="number">13</span>成绩：<span class="number">10</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">1</span>成绩：<span class="number">13</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">4</span>成绩：<span class="number">19</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">14</span>成绩：<span class="number">21</span>年级：<span class="number">6</span></span><br><span class="line">学号：<span class="number">2</span>成绩：<span class="number">27</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">17</span>成绩：<span class="number">27</span>年级：<span class="number">2</span></span><br><span class="line">学号：<span class="number">18</span>成绩：<span class="number">37</span>年级：<span class="number">1</span></span><br><span class="line">学号：<span class="number">9</span>成绩：<span class="number">48</span>年级：<span class="number">4</span></span><br><span class="line">学号：<span class="number">12</span>成绩：<span class="number">58</span>年级：<span class="number">1</span></span><br><span class="line">学号：<span class="number">6</span>成绩：<span class="number">63</span>年级：<span class="number">5</span></span><br><span class="line">学号：<span class="number">16</span>成绩：<span class="number">64</span>年级：<span class="number">5</span></span><br><span class="line">学号：<span class="number">10</span>成绩：<span class="number">67</span>年级：<span class="number">3</span></span><br><span class="line">学号：<span class="number">15</span>成绩：<span class="number">77</span>年级：<span class="number">5</span></span><br><span class="line">学号：<span class="number">20</span>成绩：<span class="number">78</span>年级：<span class="number">5</span></span><br><span class="line">学号：<span class="number">19</span>成绩：<span class="number">81</span>年级：<span class="number">2</span></span><br><span class="line">学号：<span class="number">7</span>成绩：<span class="number">95</span>年级：<span class="number">2</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h2 id="再谈方法"><a href="#再谈方法" class="headerlink" title="再谈方法"></a>再谈方法</h2><ul><li><p><strong>再谈方法1：方法的重载(overload)</strong><br><strong>重载的概念：</strong>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。<br><strong>重载的特点：</strong>与返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。<br><strong>重载示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回两个整数的和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br><span class="line"><span class="comment">//返回三个整数的和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span>&#123;<span class="keyword">return</span> x+y+z;&#125;</span><br><span class="line"><span class="comment">//返回两个小数的和</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> x,<span class="type">double</span> y)</span>&#123;<span class="keyword">return</span> x+y;&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>1.编写程序，定义三个重载方法并调用。方法名为mOL。<br>三个方法分别接收一个int参数、两个int参数、一个字符串参数。<br>分别执行平方运算并输出结果，相乘并输出结果，输出字符串信息。<br>在主类的main ()方法中分别用参数区别调用三个方法。</p><p>2.定义三个重载方法max()，<br>第一个方法求两个int值中的最大值，<br>第二个方法求两个double值中的最大值，<br>第三个方法求三个double值中的最大值，<br>并分别调用三个方法。</p></div><details class="folding-tag" green><summary> 点击查看结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OverLoad</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OverLoad</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OverLoad</span>();</span><br><span class="line">        test.mOL(<span class="number">1</span>);</span><br><span class="line">        test.mOL(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        test.mOL(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        System.out.println(test.max(<span class="number">23</span>, <span class="number">12</span>));</span><br><span class="line">        System.out.println(test.max(<span class="number">23.3</span>, <span class="number">23</span>, <span class="number">2</span>));</span><br><span class="line">        System.out.println(test.max(<span class="number">34.2</span>, <span class="number">34.3</span>, <span class="number">34.2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 如下的三个方法构成重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mOL</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        System.out.println(i * i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mOL</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(i * j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mOL</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.如下的三个方法构成重载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (i &gt; j) ? i : j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> d1, <span class="type">double</span> d2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (d1 &gt; d2) ? d1 : d2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> d1, <span class="type">double</span> d2, <span class="type">double</span> d3)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> (d1 &gt; d2) ? d1 : d2;</span><br><span class="line">        <span class="keyword">return</span> (max &gt; d3) ? max : d3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">Jermyn</span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">23.3</span></span><br><span class="line"><span class="number">34.3</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p><strong>再谈方法2：可变个数的形参</strong><br>JavaSE 5.0 中提供了Varargs(variable number of arguments)机制，允许直接定义能和<strong>多个实参相匹配的形参</strong>。从而，可以用一种更简单的方式，来传递个数可变的实参。<br>//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量<br>public static void test(int a ,String[] books);s<br>//JDK5.0：采用可变个数形参来定义方法，传入多个同一类型变量<br>public static void test(int a ,String…books);</p><blockquote><p>说明：</p><ol><li>声明格式：方法名(参数的类型名 …参数名)</li><li>可变参数：方法参数部分指定类型的参数个数是<strong>可变多个</strong>：0个，1个或多个</li><li>可变个数形参的方法与同名的方法之间，彼此构成重载</li><li>可变参数方法的使用与方法参数部分使用数组是一致的</li><li>方法的参数部分有可变形参，需要放在<strong>形参声明的最后</strong></li><li>在一个方法的形参位置，<strong>最多</strong>只能声明一个可变个数形参</li></ol></blockquote></li><li><p><strong>再谈方法3：方法参数的值传递机制</strong></p></li></ul><ol><li>方法，必须由其所在类或对象调用才有意义。若方法含有参数：<br>形参：方法声明时的参数<br>实参：方法调用时实际传给形参的参数值</li><li>Java里方法的参数传递方式只有一种：值传递。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。<br>形参是基本数据类型：将实参<strong>基本数据类型</strong>变量的“<strong>数据值</strong>”传递给形参<br>形参是引用数据类型：将实参<strong>引用数据类型</strong>变量的“<strong>地址值</strong>”传递给形参</li></ol><ul><li><strong>再谈方法4：递归(recursion)方法</strong><br>递归方法：一个方法体内调用它自身。<ul><li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</li><li>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：递归方法求1-100的和</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">        System.out.println(test.getSum(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i + getSum(i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="面向对象特征之一：封装与隐藏"><a href="#面向对象特征之一：封装与隐藏" class="headerlink" title="面向对象特征之一：封装与隐藏"></a>面向对象特征之一：封装与隐藏</h2><ol><li>程序设计追求“高内聚，低耦合”：<br>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；<br>低耦合 ：仅对外暴露少量的方法用于使用。</li><li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的<strong>可扩展性、可维护性</strong>。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</li><li>使用者对类内部定义的属性(对象的成员变量)的直接操作会导致数据的错误、混乱或安全性问题。</li></ol><ul><li><p><strong>信息的封装和隐藏</strong><br>Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx()和setXxx()实现对该属性的操作，以实现下述目的：</p><ul><li>隐藏一个类中不需要对外提供的实现细节；</li><li>使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；</li><li>便于修改，增强代码的可维护性；</li></ul></li><li><p><strong>四种访问权限修饰符</strong><br>Java权限修饰符public、protected、(缺省)、private置于类的成员定义前，用来限定对象对该类成员的访问权限</p></li></ul><blockquote><p>对于class的权限修饰只可以用public和default(缺省)。<br>public类可以在<strong>任意地方</strong>被访问。<br>default类<strong>只可以被同一个包内部</strong>的类访问。</p></blockquote><h2 id="类的成员之三：构造器-或构造方法"><a href="#类的成员之三：构造器-或构造方法" class="headerlink" title="类的成员之三：构造器(或构造方法)"></a>类的成员之三：构造器(或构造方法)</h2><ul><li><p><strong>构造器的特征</strong></p><ul><li>它具有<strong>与类相同的名称</strong></li><li>它<strong>不声明返回值类型</strong>。（与声明为void不同）</li><li>不能被static、final、synchronized、abstract、native修饰，<strong>不能有return语句</strong>返回值</li></ul></li><li><p><strong>构造器的作用：创建对象；给对象进行初始化</strong></p><ul><li>如：Order o = new Order(); Person p = new Person(“Peter”,15); </li><li>如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</li></ul></li><li><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类名 (参数列表) &#123;</span><br><span class="line">初始化语句；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>根据参数不同，构造器可以分为如下两类：</strong></p><ul><li>隐式无参构造器（系统默认提供）</li><li>显式定义一个或多个构造器（无参、有参）</li></ul></li><li><p><strong>注 意：</strong></p><ul><li>Java语言中，每个类都至少有一个构造器</li><li>默认构造器的修饰符与所属类的修饰符一致</li><li>一旦显式定义了构造器，则系统不再提供默认构造器 </li><li>一个类可以创建多个重载的构造器</li><li>父类的构造器不可被子类继承</li></ul></li><li><p><strong>构造器重载</strong></p></li></ul><ol><li>构造器一般用来创建对象的同时初始化对象。如<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n , <span class="type">int</span> a)</span>&#123; </span><br><span class="line">        name=n; </span><br><span class="line">        age=a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>构造器重载使得对象的创建更加灵活，方便创建各种不同的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造器重载举例：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, Date d)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name,age);</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Date d)</span> &#123;</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>构造器重载，参数列表必须不同</li></ol><ul><li><strong>总结：属性赋值过程</strong><br>截止到目前，我们讲到了很多位置都可以对类的属性赋值。现总结这几个位置，并指明赋值的先后顺序。<br><strong>赋值的位置：</strong><br>1.默认初始化<br>2.显式初始化<br>3.构造器中初始化<br>4.通过“对象.属性“或“对象.方法”的方式赋值<br><strong>赋值的先后顺序：</strong>① - ② - ③ - ④</li></ul><div class="note success flat"><p><strong>小练习</strong><br>编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形的面积。</p></div><div class="tabs" id="示例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#示例-1">TriAngleTest.java</button></li><li class="tab"><button type="button" data-href="#示例-2">TriAngle.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="示例-1"><details class="folding-tag" green><summary> 点击查看TriAngleTest.java源码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriAngleTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TriAngle</span> <span class="variable">tri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TriAngle</span>(<span class="number">3.0</span>, <span class="number">4.0</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;底边：%.2f\t高：%.2f\t面积：%.2f&quot;</span></span><br><span class="line">                , tri.getBase(),tri.getHeight(),tri.findArea());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="示例-2"><details class="folding-tag" green><summary> 点击查看TriAngle.java源码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriAngle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> base;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">TriAngle</span><span class="params">(<span class="type">double</span> b, <span class="type">double</span> h)</span> &#123;</span><br><span class="line">        base = b;</span><br><span class="line">        height = h;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">TriAngle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBase</span><span class="params">(<span class="type">double</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入有错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            base = b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> h)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (h &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入有错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            height = h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base * height * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">底边：<span class="number">3.00</span>高：<span class="number">4.00</span>面积：<span class="number">6.00</span></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><ul><li><strong>拓展知识：JavaBean</strong></li></ul><ol><li>JavaBean是一种Java语言写成的<strong>可重用组件</strong>。</li><li><p>所谓javaBean，是指符合如下标准的Java类：</p><ul><li>类是<strong>公共的</strong></li><li>有一个<strong>无参的公共的构造器</strong></li><li>有属性，且有对应的get、set方法</li></ul></li><li><p>用户可以使用JavaBean将<strong>功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象</strong>进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p></li></ol><ul><li><strong>拓展知识：UML类图</strong></li></ul><ol><li>+表示 public 类型， - 表示 private 类型，#表示protected类型</li><li>方法的写法: 方法的类型(+、-) 方法名(参数名： 参数类型)：返回值类型</li></ol><h2 id="关键字：this的使用"><a href="#关键字：this的使用" class="headerlink" title="关键字：this的使用"></a>关键字：this的使用</h2><ul><li><strong>this是什么？</strong></li></ul><ol><li>在Java中，this关键字比较难理解，它的作用和其词义很接近。<ul><li>它在方法内部使用，即这个方法所属对象的引用；</li><li>它在构造器内部使用，表示该构造器正在初始化的对象。</li></ul></li><li>this 可以调用类的属性、方法和构造器</li><li>什么时候使用this关键字呢？<ul><li>当在方法内需要用到调用该方法的对象时，就用this。具体的：我们可以用this来区分属性和局部变量。比如：this.name = name;</li></ul></li></ol><ul><li><strong>使用this，调用属性、方法</strong></li></ul><ol><li>在任意方法或构造器内，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的阅读性。不过，通常我们都习惯省略this。</li><li>当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量</li><li>使用this访问属性和方法时，如果在本类中未找到，会从父类中查找<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用属性，方法示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; <span class="comment">// 定义Person类</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ; </span><br><span class="line">        <span class="built_in">this</span>.age = age ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name) ;</span><br><span class="line">        <span class="built_in">this</span>.speak();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(“年龄：” + <span class="built_in">this</span>.age);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; <span class="comment">// 定义Person类</span></span><br><span class="line">    String name;</span><br><span class="line">    Person(String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类 --&gt; &quot;</span> + <span class="built_in">this</span>.name) ; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此方法目的是比较连个实例对象的 name 属性是否相等，this 指的是 测试类中的per1，p值的是per2</span></span><br><span class="line">    <span class="comment">// 可以理解为，谁调用了方法谁就是此方法中的 this</span></span><br><span class="line">    <span class="comment">// 示意图可看下图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name==p.name;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">per1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>) ;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">per2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>) ;</span><br><span class="line">        per1.getInfo() ; <span class="comment">// 当前调用getInfo()方法的对象是per1</span></span><br><span class="line">        per2.getInfo() ; <span class="comment">// 当前调用getInfo()方法的对象是per2</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> per1.compare(per2);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Person类 --&gt; 张三</span><br><span class="line">Person类 --&gt; 李四</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>使用this调用本类的构造器</strong><br>4.this可以作为一个类中构造器相互调用的特殊格式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123; <span class="comment">// 定义Person类</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123; <span class="comment">// 无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;新对象实例化&quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(); <span class="comment">// 调用本类中的无参构造器</span></span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>(name) ; <span class="comment">// 调用有一个参数的构造器</span></span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + name + <span class="string">&quot;，年龄：&quot;</span> + age ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(person01.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">新对象实例化</span><br><span class="line">姓名：张三，年龄：<span class="number">18</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note info flat"><p><em>注意：</em></p><ul><li>可以在类的构造器中使用”this(形参列表)”的方式，调用本类中重载的其他的构造器！</li><li>明确：构造器中<strong>不能</strong>通过”this(形参列表)”的方式<strong>调用自身</strong>构造器</li><li>如果一个类中声明了n个构造器，则最多有 <strong>n - 1</strong>个构造器中使用了”this(形参列表)”</li><li>“this(形参列表)”必须声明在类的构造器的<strong>首行</strong>！</li><li>在类的一个构造器中，<strong>最多只能声明一个</strong>“this(形参列表)”</li></ul></div><div class="note success flat"><p><strong>练习一</strong><br>添加必要的构造器，综合应用构造器的重载，this关键字</p></div><div class="tabs" id="小练习"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#小练习-1">Boy.java</button></li><li class="tab"><button type="button" data-href="#小练习-2">Girl.java</button></li><li class="tab"><button type="button" data-href="#小练习-3">BoyAndGirlTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="小练习-1"><p><strong><br>Boy<br>-name:String<br>-age:int<br>+setName(i: String)<br>+getName(): String<br>+setAge(i: int) +getAge(): int<br>+marry(girl:Girl)<br>+shout():void</strong></p><details class="folding-tag" green><summary> 点击查看Boy.java源文件 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">(Girl girl)</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我想娶一个女孩&quot;</span>+girl.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.age &gt;= <span class="number">22</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你可以去合法登记结婚了！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先多谈谈恋爱~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小练习-2"><p><strong><br>Girl<br>-name:String<br>-age:int<br>+setName(i: String)<br>+getName(): String<br>+marry(boy:Boy)<br>+compare(girl:Girl)</strong></p><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">marry</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我想嫁给&quot;</span> + boy.getName());</span><br><span class="line">        boy.marry(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Girl girl)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.age &gt; girl.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.age &lt; girl.age) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小练习-3"><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlAndBoyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;罗密欧&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        boy.shout();</span><br><span class="line"></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;朱丽叶&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        girl.marry(boy);</span><br><span class="line"></span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;朱丽叶妹妹&quot;</span>, <span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n------------------------分割线--------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (girl.compare(girl1) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(girl.getName() + <span class="string">&quot;说,我比&quot;</span> + girl1.getName() + <span class="string">&quot;大&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (girl.compare(girl1) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(girl.getName() + <span class="string">&quot;说,我比&quot;</span> + girl1.getName() + <span class="string">&quot;小&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(girl.getName() + <span class="string">&quot;说,我和&quot;</span> + girl1.getName() + <span class="string">&quot;一样大&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">先多谈谈恋爱~~</span><br><span class="line">我想嫁给罗密欧</span><br><span class="line">我想娶一个女孩朱丽叶</span><br><span class="line">------------------------分割线--------------------------</span><br><span class="line">朱丽叶说,我比朱丽叶妹妹大</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><hr><div class="note success flat"><p>小练习二</p></div><div class="tabs" id="小练习二"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#小练习二-1">Account.java</button></li><li class="tab"><button type="button" data-href="#小练习二-2">Customer.java</button></li><li class="tab"><button type="button" data-href="#小练习二-3">Bank.java</button></li><li class="tab"><button type="button" data-href="#小练习二-4">BankTest.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="小练习二-1"><p>按照如下的 UML 类图，创建相应的类，提供必要的结构<br>在提款方法 withdraw()中，需要判断用户余额是否能够满足提款数额的要求，如果不能，<br>应给出提示。deposit()方法表示存款。</p><details class="folding-tag" green><summary> 点击查看Account.java源代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">double</span> init_balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = init_balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amt)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.balance &lt; amt || amt &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n....正在处理中，请稍后....&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足，您的余额为：&quot;</span> + <span class="built_in">this</span>.balance);</span><br><span class="line">            System.out.println(<span class="string">&quot;....操作失败....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.balance = <span class="built_in">this</span>.balance - amt;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n....正在处理中，请稍后....&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;交易成功，本次取款：&quot;</span> + amt + <span class="string">&quot; 您的余额为：&quot;</span> + <span class="built_in">this</span>.balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amt)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n....正在处理中，请稍后....&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (amt &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;....操作失败....&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.balance += amt;</span><br><span class="line">        System.out.println(<span class="string">&quot;交易成功，本次存款：&quot;</span> + amt + <span class="string">&quot; 您的余额为：&quot;</span> + <span class="built_in">this</span>.balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小练习二-2"><p>按照如下的 UML 类图，创建相应的类，提供必要的结构</p><details class="folding-tag" green><summary> 点击查看Customer.java </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> exer.Account account;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String f, String l)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.firstName = f;</span><br><span class="line">        <span class="built_in">this</span>.lastName = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">getAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="built_in">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccount</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.account = account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小练习二-3"><p>按照如下的 UML 类图，创建相应的类，提供必要的结构</p><ol><li>addCustomer 方法必须依照参数（姓，名）构造一个新的 Customer 对象，然后把它放到 customer 数组中。还必须把 numberOfCustomer 属性的值加 1。 </li><li>getNumOfCustomers 方法返回 numberofCustomers 属性值。</li><li>getCustomer 方法返回与给出的 index 参数相关的客户。<details class="folding-tag" green><summary> 点击查看Bank.java源代码 </summary>           <div class='content'>           <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Customer[] customers;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfCustomers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bank</span><span class="params">()</span> &#123;</span><br><span class="line">        customers = <span class="keyword">new</span> <span class="title class_">Customer</span>[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCustomer</span><span class="params">(String f, String l)</span> &#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(f, l);</span><br><span class="line">        <span class="comment">// new 一个新的customer ，numberOfCustomers+1 ，即为当前bank里面有多少个账户</span></span><br><span class="line">        <span class="comment">// 每 new 一个新的customer存放在数组customers里面</span></span><br><span class="line">        customers[numberOfCustomers++] = customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfCustomers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Customer <span class="title function_">getCustmoer</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断查询的customers里面的customer的index，如果小于0和大于当前的账户数，即为空</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; numberOfCustomers) &#123;</span><br><span class="line">            <span class="keyword">return</span> customers[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>           </div>         </details></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="小练习二-4"><p>创建 BankTest 类，进行测试。</p><details class="folding-tag" green><summary> 点击查看BankTest.java源代码 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line"></span><br><span class="line">        bank.addCustomer(<span class="string">&quot;Jay&quot;</span>, <span class="string">&quot;Zhou&quot;</span>);</span><br><span class="line">        System.out.println(bank.getCustmoer(<span class="number">0</span>).getName());</span><br><span class="line">        bank.getCustmoer(<span class="number">0</span>).setAccount(<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">2000</span>));</span><br><span class="line">        bank.getCustmoer(<span class="number">0</span>).getAccount().deposit(<span class="number">200</span>);</span><br><span class="line">        bank.getCustmoer(<span class="number">0</span>).getAccount().withdraw(<span class="number">1800</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">        bank.addCustomer(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Chen&quot;</span>);</span><br><span class="line">        System.out.println(bank.getCustmoer(<span class="number">1</span>).getName());</span><br><span class="line">        bank.getCustmoer(<span class="number">1</span>).setAccount(<span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">5000</span>));</span><br><span class="line">        bank.getCustmoer(<span class="number">1</span>).getAccount().deposit(-<span class="number">200</span>);</span><br><span class="line">        bank.getCustmoer(<span class="number">1</span>).getAccount().withdraw(-<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(bank.getNumberOfCustomer());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">用户名：JayZhou</span><br><span class="line"></span><br><span class="line">....正在处理中，请稍后....</span><br><span class="line">交易成功，本次存款：<span class="number">200.0</span> 您的余额为：<span class="number">2200.0</span></span><br><span class="line"></span><br><span class="line">....正在处理中，请稍后....</span><br><span class="line">交易成功，本次取款：<span class="number">1800.0</span> 您的余额为：<span class="number">400.0</span></span><br><span class="line">---------------------------------------</span><br><span class="line">用户名：JackChen</span><br><span class="line"></span><br><span class="line">....正在处理中，请稍后....</span><br><span class="line">输入有误</span><br><span class="line">....操作失败....</span><br><span class="line"></span><br><span class="line">....正在处理中，请稍后....</span><br><span class="line">余额不足，您的余额为：<span class="number">5000.0</span></span><br><span class="line">....操作失败....</span><br><span class="line"></span><br><span class="line">当前银行总共：<span class="number">2</span>名用户</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="关键字：package、import的使用"><a href="#关键字：package、import的使用" class="headerlink" title="关键字：package、import的使用"></a>关键字：package、import的使用</h2><ol><li>package语句作为Java源文件的第一条语句，指明该文件中定义的类所在的包。(若缺省该语句，则指定为无名包)。它的格式为：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package 顶层包名.子包名 ;</span></span><br><span class="line">pack1\pack2\PackageTest.java</span><br><span class="line"><span class="keyword">package</span> pack1.pack2; <span class="comment">//指定类PackageTest属于包pack1.pack2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PackageTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;in method display()&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>包对应于文件系统的目录，package语句中，用 “.” 来指明包(目录)的层次；</li><li>包通常用小写单词标识。通常使用所在公司域名的倒置</li></ol><ul><li><strong>包的作用：</strong></li></ul><ol><li>包帮助管理大型软件系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式</li><li>包可以包含类和子包，划分项目层次，便于管理</li><li>解决类命名冲突的问题</li><li>控制访问权限<br> 例：某航运软件系统包括：一组域对象、GUI和reports子系统包的作用：</li></ol><ul><li><strong>MVC设计模式</strong><br>MVC是常用的设计模式之一，将整个程序分为三个层次：<strong>视图模型层，控制器层，与数据模型层</strong>。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程<br>序的耦合性。</li></ul><ol><li><p>模型层 model 主要处理数据</p><ul><li>数据对象封装 model.bean/domain</li><li>数据库操作类 model.dao</li><li>数据库 model.db</li></ul></li><li><p>控制层 controller 处理业务逻辑</p><ul><li>应用界面相关 controller.activity</li><li>存放fragment controller.fragment</li><li>显示列表的适配器 controller.adapter</li><li>服务相关的 controller.service</li><li>抽取的基类 controller.base</li></ul></li><li><p>视图层 view 显示数据</p><ul><li>相关工具类 view.utils</li><li>自定义view view.ui </li></ul></li></ol><ul><li><strong>JDK中主要的包介绍</strong></li></ul><ol><li>java.lang——包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能</li><li>java.net——包含执行与网络相关的操作的类和接口。</li><li>java.io ——包含能提供多种输入/输出功能的类。</li><li>java.util——包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。</li><li>java.text——包含了一些java格式化相关的类</li><li>java.sql——包含了java进行JDBC数据库编程的相关类/接口</li><li>java.awt——包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。</li></ol><ul><li><strong>关键字—import</strong><br>为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类或全部类(.*)。import语句告诉编译器到哪里去寻找类。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import 包名. 类名; </span></span><br><span class="line"><span class="keyword">import</span> pack1.pack2.Test; <span class="comment">//import pack1.pack2.*;表示引入pack1.pack2包中的所有结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PackTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(); <span class="comment">//Test类在pack1.pack2包中定义</span></span><br><span class="line">        t.display();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>注意</strong></li></ul><ol><li>在源文件中使用import显式的导入指定包下的类或接口</li><li>声明在包的声明和类的声明之间。</li><li>如果需要导入多个类或接口，那么就并列显式多个import语句即可</li><li>举例：可以使用java.util.*的方式，一次性导入util包下所有的类或接口。</li><li>如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此import语句。</li><li>如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的是哪个类。</li><li>如果已经导入java.a包下的类。那么如果需要使用a包的子包下的类的话，仍然需要导入。</li><li>import static组合的使用：调用指定类或接口下的静态的属性或方法</li></ol><h1 id="第六章-面向对象编程（中）"><a href="#第六章-面向对象编程（中）" class="headerlink" title="第六章 面向对象编程（中）"></a>第六章 面向对象编程（中）</h1><h2 id="面向对象特征之二：继承性-inheritance"><a href="#面向对象特征之二：继承性-inheritance" class="headerlink" title="面向对象特征之二：继承性(inheritance)"></a>面向对象特征之二：继承性(inheritance)</h2><div class="tabs" id="继承"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#继承-1">Person.java</button></li><li class="tab"><button type="button" data-href="#继承-2">Student.java</button></li><li class="tab"><button type="button" data-href="#继承-3">Student extends Person</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="继承-1"><p>为描述和处理个人信息，定义类Person:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> Date birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="继承-2"><p>为描述和处理学生信息，定义类Student:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> Date birthDate;  </span><br><span class="line">    <span class="keyword">public</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="继承-3"><p>通过继承，简化Student类的定义:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> Date birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> String school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Student类继承了父类Person的所有属性和方法，并增加了一 个属性school。Person中的属性和方法,Student都可以使用。</p></blockquote><ul><li><strong>为什么要有继承？</strong><br>多个类中<strong>存在相同属性和行为</strong>时，将这些内容抽取到单独一个类中， 那么多个类无需再定义这些属性和行为，只要继承那个类即可。</li><li>此处的多个类称为子类(派生类)，单独的这个类称为父类(基类 或超类)。可以理解为:“子类 is a 父类”</li><li>类继承语法规则:<strong>class Subclass extends SuperClass{ }</strong></li><li><p><strong>作用：</strong></p><ul><li>继承的出现<strong>减少了代码冗余</strong>，提高了代码的<strong>复用性</strong>。</li><li>继承的出现，更有利于<strong>功能的扩展</strong>。</li><li>继承的出现让类与类之间产生了关系，提供了<strong>多态的前提</strong>。<br><strong>注意：不要仅为了获取其他类中某个功能而去继承</strong></li></ul></li><li><p>子类继承了父类，就继承了父类的方法和属性。</p></li><li>在子类中，可以使用父类中定义的方法和属性，也可以创建新的数据和方法。</li><li><p>在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集，而是对父类的“扩展”。<br><em>关于继承的规则：子类<strong>不能直接访问</strong>父类中私有的(private)的成员变量和方法。</em></p></li><li><p>Java只支持<strong>单继承和多层继承</strong>，不允许多重继承</p><ul><li>一个子类<strong>只能有一个父类</strong></li><li>一个父类可以<strong>派生出多个子类</strong></li></ul></li></ul><h2 id="方法的重写-override-overwrite"><a href="#方法的重写-override-overwrite" class="headerlink" title="方法的重写(override/overwrite)"></a>方法的重写(override/overwrite)</h2><ul><li><p><strong>定义：</strong><br>在子类中可以根据需要对从<strong>父类中继承来的方法</strong>进行改造，也称为方法的重置、覆盖。在程序执行时，子类的方法将<strong>覆盖</strong>父类的方法</p></li><li><p><strong>重载和重写的区别</strong><br><em>从编译和运行的角度看：</em><br>重载，是指允许<strong>存在多个同名方法</strong>，而这些方法的<strong>参数不同</strong>。 编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。 它们的调用<strong>地址在编译期</strong>就绑定了 。 Java的重载是可以包括父类和子类的，即子类可以重载父类 的同名不同参数的方法。<br>所以：<br>对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为 “<strong>早绑定”或“静态绑定</strong><br>而<br>对于多态，只有等到方法调用的那一刻解释运行器才会确定所要调用的具体方法，这称为 “<strong>晚绑定”或“动态绑定</strong> 。<br><em>引用一句Bruce Eckel 的话： ：“不要犯傻，如果它不是晚绑定它就不是多态。”</em></p></li></ul><ul><li><p><strong>要求：</strong><br>1、子类重写的方法必须和父类被重写的方法具有<strong>相同的方法名称、参数列表</strong><br>2、子类重写的方法的<strong>返回值类型不能大于</strong>父类被重写的方法的返回值类型<br>3、子类重写的方法使用的<strong>访问权限不能小于</strong>父类被重写的方法的访问权限<br>4、子类<strong>不能重写</strong>父类中声明为<strong>private权限</strong>的方法<br>5、子类方法抛出的异常不能大于父类被重写方法的异常</p></li><li><p><strong>注意：</strong><br>子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p></li><li><strong>实例</strong><div class="tabs" id="实例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#实例-1">父类 Person</button></li><li class="tab"><button type="button" data-href="#实例-2">子类 Student</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="实例-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name:&quot;</span> + name + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;age:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="实例-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类 Person 中的 getInfo 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name:&quot;</span> + name + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;age:&quot;</span> + age + <span class="string">&quot;\t&quot;</span>+ <span class="string">&quot;school:&quot;</span> + school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.name = <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        student.age = <span class="number">20</span>;</span><br><span class="line">        student.school = <span class="string">&quot;USTC&quot;</span>;</span><br><span class="line">        System.out.println(student.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Name:Jermyn</span><br><span class="line">age:<span class="number">20</span>school:USTC</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h2 id="关键字：-super"><a href="#关键字：-super" class="headerlink" title="关键字： super"></a>关键字： super</h2><ul><li><p>在 Java 类中使用 super 来调用父类中的指定操作：</p><ul><li>super 可用于访问父类中定义的<strong>属性</strong></li><li>super 可用于调用父类中定义的<strong>成员方法</strong></li><li>super 可用于在子类构造器中调用父类的<strong>构造器</strong></li></ul></li><li><p><strong>注意：</strong></p><ul><li>尤其当子父类出现同名成员时可以用 super 表明调用的是父类中的成员</li><li>super 的追溯<strong>不仅限于直接父类</strong></li><li>super 和 this 的用法相像 this 代表本类对象的引用 super 代表父类的内存空间的标识</li></ul></li><li><p><strong>调用父类的构造器</strong></p><ul><li>子类中所有的构造器<strong>默认</strong>都会访问父类中参数的构造器</li><li>当父类中没有空参数的构造器时 子类的构造器必须通过 this(参数列表) 或者 super(参数列表) 语句指定调用本类或者父类中相应的造器。同时只能二选一且必须放在构造器的<strong>首行</strong></li><li>如果子类构造器中既未显式调用父类或本类的构造器且父类中又没有无参的构造器则编译出错</li></ul></li><li><p><strong>this和super的区别</strong></p></li></ul><div class="table-container"><table><thead><tr><th>No.</th><th style="text-align:center">区别点</th><th style="text-align:center">this</th><th><strong>super</strong></th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">访问属性</td><td style="text-align:center">访问本类中的属性，如果本类没  有此属性则从父类中继续查找</td><td>直接访问父类中的属性</td></tr><tr><td>2</td><td style="text-align:center">调用方法</td><td style="text-align:center">访问本类中的方法，如果本类没 有此方法则从父类中继续查找</td><td>直接访问父类中的方法</td></tr><tr><td>3</td><td style="text-align:center">调用构造器</td><td style="text-align:center">调用本类构造器，必须放在构造  器的首行</td><td>调用父类构造器，必须  放在子类构造器的首行</td></tr></tbody></table></div><h2 id="面向对象特征之三：多态性-Polymorphism"><a href="#面向对象特征之三：多态性-Polymorphism" class="headerlink" title="面向对象特征之三：多态性(Polymorphism)"></a>面向对象特征之三：多态性(Polymorphism)</h2><ul><li><strong>对象的多态性：</strong>父类的引用指向子类的对象可以直接应用在抽象类和接口上</li><li>Java 引用变量有两个类型：<strong>编译时类型</strong> 和 <strong>运行时类型</strong> 。 编译时类型由声明该变量时使用的类型决定 运行时类型由实际赋给该变量的对象决定 。 简称： <strong>编译时看左边；运行时看右边</strong> 。</li><li>若编译时类型和运行时类型不一致就出现了对象的多态性 (Polymorphism).多态情况下看左边看的是父类的引用父类中不具备子类特有的方法<strong>看右边</strong>看的是<strong>子类的对象</strong> 实际运行的是子类重写父类的方法</li><li><p>对象的多态在Java中,子类的对象可以替代父类的对象使用</p><ul><li>一个变量只能有一种确定的数据类型</li><li>一个引用类型变量可能指向(引用)多种不同类型的对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); <span class="comment">//Object类型的变量o，指向Person类型的对象</span></span><br><span class="line">o = <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">//Object类型的变量o，指向Student类型的对象</span></span><br><span class="line"><span class="comment">// 本人理解为，Person p 即为我需要一个 Person，叫 p ，new Student() 可以理解为你给我了一个学生，如果给我一个工人也可以，只要是属于 Person 类的（此为继承性）都可以。</span></span><br><span class="line"><span class="comment">// 因为任何类的根父类都是 object，所以我需要一个 object 类，你只要给我一个类就行，我不关心是什么类</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>子类可看做是特殊的父类，所以父类类型的引用可以指向子类的对象：向上转型(upcasting)。</p></li><li>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就<strong>不能</strong>再访问子类中添加的属性和方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">m.school = “pku”;<span class="comment">//合法,Student类有school成员变量  Person e = new Student();</span></span><br><span class="line">e.school = “pku”;<span class="comment">//非法,Person类没有school成员变量</span></span><br><span class="line"><span class="comment">// 属性是在编译时确定的，编译时e为Person类型，没有school成员变量，因而编译错误。</span></span><br></pre></td></tr></table></figure></li><li><strong>多态的实例</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnimalTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnimalTest</span>();</span><br><span class="line">        test.fun(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        test.fun(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    Animal animal = new Dog();</span></span><br><span class="line"><span class="comment">//    Animal animal = new Cat();</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">        animal.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The animal are eating!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The animals are roaring!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The dog is eating the bone!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The dog is barking!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The cat is eating the fish!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The cat is called!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">The dog is eating the bone!</span><br><span class="line">The dog is barking!</span><br><span class="line">The cat is eating the fish!</span><br><span class="line">The cat is called!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><ul><li><p><strong>虚拟方法调用(Virtual Method Invocation)</strong></p><ul><li>正常的方法调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">e.getInfo();</span><br><span class="line"><span class="type">Student</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  e.getInfo();</span><br></pre></td></tr></table></figure></li><li>虚拟方法调用(多态情况下):子类中定义了与父类同名同参数的方法，在多态情况下，将此时<strong>父类的方法称为虚拟方法</strong>，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">e.getInfo();<span class="comment">//调用Student类的getInfo()方法</span></span><br></pre></td></tr></table></figure></li><li>编译时类型和运行时类型:编译时e为Person类型，而方法的调用是在<strong>运行时确定的</strong>，所以调用的是Student类的getInfo()方法。——动态绑定</li></ul></li><li><p><strong>多态小结</strong></p><ul><li>多态作用：提高了代码的<strong>通用性</strong>，常称作<strong>接口</strong>重用</li><li>前提：1.需要存在<strong>继承</strong>或者实现关系 2.有方法的<strong>重写</strong></li><li>成员方法：1.编译时：要查看引用变量所声明的类中是否<strong>有</strong>所调用的方法。2.运行时：调用实际new的对象所属的类中的重写方法。</li><li>成员变量：<strong>不具备多态性</strong>，只看引用变量所声明的类</li></ul></li></ul><ul><li><p><strong>instanceof 操作符</strong><br><strong>x instanceof A</strong>：检验x是否为类A的对象，返回值为<em>boolean</em>型。</p><ul><li>要求x所属的类与类A必须是<strong>子类和父类的关系</strong>，否则编译错误。</li><li>如果x属于类A的子类B，x instanceof A值也为true。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graduate</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(Person e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Person)</span><br><span class="line"><span class="comment">// 处理Person类及其子类对象</span></span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Student)</span><br><span class="line"><span class="comment">//处理Student类及其子类对象  </span></span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> Graduate)</span><br><span class="line"><span class="comment">//处理Graduate类及其子类对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>对象类型转换 (Casting )</strong></p></li></ul><ol><li><p>基本数据类型的Casting：</p><ul><li><strong>自动类型</strong>转换：小的数据类型可以自动转换成大的数据类型如:long g = 20;    double d = 12.0f</li><li><strong>强制类型</strong>转换：可以把大的数据类型强制转换(casting)成小的数据类型如: float f=(float)12.0;    int a=(int)1200L</li></ul></li><li><p>对Java对象的<strong>*强制类型</strong>转换称为<strong>造型</strong></p><ul><li>从子类到父类的类型转换可以自动进行(即为多态)</li><li>从父类到子类的类型转换必须通过造型(强制类型转换)实现</li><li><strong>无继承关系</strong>的引用类型间的转换是<strong>非法</strong>的</li><li>在造型前可以使用instanceof操作符测试一个对象的类型</li></ul></li></ol><ul><li><p><strong>强转以及instanceof的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="comment">/* 编译的时候 m 指的是 Person，解释的时候 m 指的是 Man</span></span><br><span class="line"><span class="comment">         m.eat() 指的是 Man 中重写的 Person 中的 eat(),</span></span><br><span class="line"><span class="comment">         如果 Man 中没有重写 eat() ,则 m.eat()值得是Person中的 eat()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        m.eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* m.isMan(),m 只能调用 Person 中的属性方法，Man 为 Person 的子类，</span></span><br><span class="line"><span class="comment">        Person 的 m 不可调用 Man 的方法，想要调用，可以理解为强转，将 Person 的 m 强转为 Man 的 m</span></span><br><span class="line"><span class="comment">        就可以调用 Man 中独有的方法</span></span><br><span class="line"><span class="comment">        注意：只有 上到下 的方式，没有 Man 转为 Woman 的方式</span></span><br><span class="line"><span class="comment">            下到上就是多态</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        m.isMan();</span></span><br><span class="line">        <span class="keyword">if</span> (m <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            ((Man) m).isMan();</span><br><span class="line">            System.out.println(<span class="string">&quot;强转Person成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m <span class="keyword">instanceof</span> Woman) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;强转Woman成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;可以吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人可以吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isMan</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;男人可以进入男厕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isWoman</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;女人可以进入女厕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">男人可以吃饭</span><br><span class="line">男人可以进入男厕</span><br><span class="line">强转Person成功</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p><strong>多态体会属性和方法的不同</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FieldMethodTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sub</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">        System.out.println(s.count);</span><br><span class="line">        s.display();</span><br><span class="line">        <span class="type">Base</span> <span class="variable">b</span> <span class="operator">=</span> s;</span><br><span class="line">        System.out.println(b == s);</span><br><span class="line">        System.out.println(b.count);</span><br><span class="line">        b.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note info flat"><p><strong>子类继承父类</strong></p><ol><li>若子类重写了父类方法，就意味着子类里定义的方法<strong>彻底覆盖</strong>了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。(编译看左边，运行看右边)</li><li>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的 实例变量，这个<strong>实例变量依然不可能覆盖父类中定义的实例变量</strong>(编译运行都看左边)</li></ol></div></li></ul><h2 id="Object类的使用"><a href="#Object类的使用" class="headerlink" title="Object类的使用"></a>Object类的使用</h2><ul><li>Object类是所有Java类的<strong>根父类</strong></li><li>如果在类的声明中未使用 extends 关键字指明其父类，则<strong>默认</strong>父类为 <strong>java.lang.Object</strong>类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">等价于：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><p><strong>==操作符</strong>与<strong>equals方法</strong></p><ul><li>基本类型比较值:只要两个变量的<strong>值相等</strong>，即为true。 eg: int a=5; if(a==6){…}</li><li>引用类型比较引用(是否指向<strong>同一个对象</strong>)：只有指向同一个对象时，== 才返回true。</li><li>用“==”进行比较时，符号两边的数据<strong>类型必须兼容</strong>(可自动转换的<strong>基本数据类型除外</strong>)，否则编译出错</li><li>equals()：所有类都继承了Object，也就获得了equals()方法。还可以重写。① 只能比较引用类型，其作用与“==”相同,比较是否指向同一个对象。②格式:obj1.equals(obj2)</li><li><em>特例：当用equals() 方法进行比较时， 对类File、String、Date及包装类（Wrapper Class）来说，是比较类型及内容而不考虑引用的是否是同一个对象；</em></li><li>当自定义使用equals()时，可以重写。用于比较两个对象的“内容”是否都相等</li></ul></li><li><p><strong>重写equals()方法的原则</strong></p><ul><li><strong>对称性</strong>： 如果x.equals(y)返回是“ true ”， 那么y.equals(x) 也应该返回是“true”。</li><li><strong>自反性</strong>：x.equals(x)必须返回是“true”。</li><li><strong>传递性</strong>：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</li><li><strong>一致性</strong>：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你 重复x.equals(y)多少次，返回都是“true”。</li><li><strong>任何情况下</strong>，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。<div class="note success flat"><p>子类重写父类equals()示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(person1 == person2);</span><br><span class="line">        System.out.println(person1.equals(person2));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有重写equals()的话，person1.equals(person2) 结果就是false</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age == ((Person) o).age &amp;&amp; Objects.equals(<span class="built_in">this</span>.name, ((Person) o).name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><blockquote><p>简单理解为：== 和 equals(),前者可以比较基本和引用数据类型，后者因为是方法，所以只能比较引用数据类型，正常情况下 == 和 equals() 比较引用数据类型时候都是比较实例的地址值，因为所有的类的根父类都是 object，正常情况下都是调用根父类的equals（），对于根父类来说 equals（） 就是比较地址值。但在实际情况中，多数情况下比较是否相等都是比较两个实例的内容是否相等，不是比较地址值，所以，此时就会有子类重写父类的 equals（） 方法，使其比较两个实例的类型。<br>注意：String 类型的 equals（），也是重写过的，只不过不用我们自己来重写，直接 java 就设计了。</p></blockquote></li></ul></li></ul><hr><ul><li><strong>toString() 方法</strong><ul><li>toString()方法在<strong>Object类</strong>中定义，其返回值是String类型，返回<strong>类名和它的引用地址</strong>。</li><li>在进行String与其它类型数据的连接操作时，<strong>自动调用toString()方法</strong><ul><li>Date now = new Date();System.out.println(“now=”+now); </li><li>相当于System.out.println(“now=”+now.toString());</li></ul></li><li>可以根据需要在用户自定义类型中<strong>重写</strong>toString()方法 如String 类重写了toString()方法，返回字符串的值。 <ul><li>s1=“hello”;</li><li>System.out.println(s1);//相当于System.out.println(s1.toString());</li></ul></li><li>基本类型数据转换为String类型时，调用了<strong>对应包装类</strong>的toString()方法<ul><li>int a=10;    System.out.println(“a=”+a);</li></ul></li></ul></li></ul><div class="note success flat"><p>面试题</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] arr = <span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(arr1);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>&#125;;</span><br><span class="line">        System.out.println(arr2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">abc</span><br><span class="line">[I@1b6d3586</span><br><span class="line">[D@4554617c</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><hr><ul><li><strong>Java中的JUnit单元测试</strong><br><em>步骤：</em></li></ul><ol><li>安装JUnit插件步骤:<strong>File—&gt;settings—&gt;Plguins—&gt;Browse repositories—&gt;输入JUnit—&gt;选择 JUnit Generator V2.0安装</strong>。</li><li>点击想要测试的类，快捷键：<strong>Alt + Shift + 0</strong>,出现候选框后<strong>点击 JUnit Test —&gt;点击 JUnit 4</strong> 即可生成测试类</li><li><p>特点：</p><ul><li>此类是public的  </li><li>此类提供公共的无参的构造器 </li><li>此时的单元测试方法：方法的权限是public,没有返回值，没有形参</li><li>此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;</li></ul></li><li><p>声明好单元测试方法以后，就可以在方法体内测试相关的代码。</p></li></ol><hr><h2 id="包装类-Wrapper-的使用"><a href="#包装类-Wrapper-的使用" class="headerlink" title="包装类(Wrapper)的使用"></a>包装类(Wrapper)的使用</h2><ul><li><strong>引入包装类的目的</strong><br>针对<strong>八种基本数据类型</strong>定义相应的引用类型—包装类（封装类）<br>有了类的特点，就可以<strong>调用类中的方法</strong>，Java才是真正的面向对象!</li></ul><div class="note info flat"><p><strong>基本数据类型 &lt;====&gt; 包装类</strong></p></div><ul><li><p>基本数据类型包装成包装类的实例 —-&gt; <strong>装箱</strong></p><ul><li>通过包装类的<strong>构造器</strong>实现：int i = 500;    Integer t = new Integer(i);</li><li>还可以通过字符串参数构造包装类对象：<ul><li>Float f = new Float(“4.56”);</li><li>Long l = new Long(“asdf”);    //NumberFormatException</li></ul></li></ul></li><li><p>获得包装类对象中包装的基本类型变量    —-&gt; <strong>拆箱</strong></p><ul><li>调用包装类的.xxxValue()方法：boolean b = bObj.booleanValue();<blockquote><p>JDK1.5之后，支持自动装箱，自动拆箱。但类型必须匹配。</p></blockquote></li></ul></li></ul><div class="note info flat"><p><strong>基本数据类型 &lt;====&gt; String类</strong></p></div><ul><li><p>字符串转换成基本数据类型</p><ul><li>通过包装类的构造器实现：int i = new Integer(“12”);</li><li>通过包装类的<strong>parseXxx(String s)</strong>静态方法：  Float f = Float.parseFloat(“12.1”);</li></ul></li><li><p>基本数据类型转换成字符串</p><ul><li>调用字符串<strong>重载的valueOf()方法</strong>：String fstr = String.valueOf(2.34f);</li><li>更直接的方式：String intStr = 5 + “”</li></ul></li><li><p>基本类型、包装类与String类间的转换</p></li></ul><div class="note success flat"><p>示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本数据类型 ---&gt;包装类：调用包装类的构造器</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------test1--------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//基本数据类型 int 转为 Integer 类</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(num1);</span><br><span class="line">        System.out.println(in1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">in2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(in2.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化 Float类</span></span><br><span class="line">        <span class="type">Float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.3f</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;12.3&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;TrUe&quot;</span>);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//包装类---&gt;基本数据类型:调用包装类 Xxx 的 xxxValue()方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------test2--------------------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> in1.intValue();</span><br><span class="line">        System.out.println(i1 + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">12.3</span>);</span><br><span class="line">        <span class="type">float</span> <span class="variable">f2</span> <span class="operator">=</span> f1.floatValue();</span><br><span class="line">        System.out.println(f2 + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------test3--------------------------------&quot;</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动装箱：基本数据类型 ---&gt;包装类</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">in1</span> <span class="operator">=</span> num2;<span class="comment">//自动装箱</span></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> b1;<span class="comment">//自动装箱</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动拆箱：包装类---&gt;基本数据类型</span></span><br><span class="line">        System.out.println(in1.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> in1;<span class="comment">//自动拆箱</span></span><br><span class="line">        System.out.println(num3 + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本数据类型、包装类---&gt; String类型：调用String重载的valueOf(Xxx xxx)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------test4--------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//方式1：连接运算</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> num1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：调用 String 的valueOf(Xxx xxx)</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">12.3f</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> String.valueOf(f1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">12.4</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> String.valueOf(d1);</span><br><span class="line"></span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        System.out.println(str3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String类型 ---&gt; 基本数据类型、包装类：调用包装类的parseXxx(String s)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------test5--------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(str1);</span><br><span class="line">        System.out.println(num2 + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;true1&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> Boolean.parseBoolean(str2);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">------------------------------test1--------------------------------</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">12.3</span></span><br><span class="line"><span class="number">12.3</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">------------------------------test2--------------------------------</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">13.3</span></span><br><span class="line">------------------------------test3--------------------------------</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">------------------------------test4--------------------------------</span><br><span class="line"><span class="number">12.3</span></span><br><span class="line"><span class="number">12.4</span></span><br><span class="line">------------------------------test5--------------------------------</span><br><span class="line"><span class="number">124</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note success flat"><p>小面试题</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出结果是什么？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong><psw>true是一定会执行的，Integer与后面的 Double，Integer会自动提升为Double</psw><br><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><hr><h1 id="第七章-面向对象编程（下）"><a href="#第七章-面向对象编程（下）" class="headerlink" title="第七章 面向对象编程（下）"></a>第七章 面向对象编程（下）</h1><h2 id="关键字：static"><a href="#关键字：static" class="headerlink" title="关键字：static"></a>关键字：static</h2><p>当我们编写一个类时，其实就是在描述其<strong>对象的属性和行为</strong>，而并没有产生实质上的对象，只有通过<strong>new</strong>关键字才会产生出对象，这时系统才会<strong>分配内存空间</strong>给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下， 某些特定的数据在内存空间里只有一份 ，例如所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量 。</p><ul><li><p><strong>类属性、类方法的设计思想</strong></p><ul><li>类属性作为该类各个对象之间<strong>共享的变量</strong>。在设计类时分析哪些属性<strong>不因对象的不同而改变</strong> ，将这些属性设置为类属性。相应的方法设置为类方法。</li><li>如果<strong>方法与调用者无关</strong>，则这样的方法通常被声明为类方法，由于不需要创建对象就可以调用类方法 ，从而简化了方法的调用。</li></ul></li><li><p><strong>使用范围：</strong><br>在 Java 类中可用 static 修饰<strong>属性 、方法 、代码块 、内部类</strong></p></li><li><p><strong>被修饰后的成员具备以下特点：</strong></p><ul><li>随着<strong>类的加载而加载</strong></li><li>优先于<strong>对象</strong>存在</li><li>修饰的成员，被<strong>所有对象所共享</strong></li><li>访问权限允许时，可<strong>不创建对象</strong>，直接<strong>被类调用</strong></li></ul></li><li><p><strong>类方法(class method)</strong></p><ul><li>没有对象的实例时，可以用<strong>类名.方法名()</strong>的形式访问由static修饰的类方法。</li><li>在static方法内部<strong>只能访问类的static修饰的属性或方法，不能访问类的非static的结构</strong>。</li><li>因为不需要实例就可以访问static方法，因此static方法内部不能有this。(也不能有super)</li><li>static修饰的方法<strong>不能被重写</strong></li></ul></li></ul><div class="note success flat"><p>关于static的练习</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 至于为什么是 -1 ，主要的我也解释不清楚，如果把测试写在 main 里面，或者单独写测试，都是可以设置为 0，</span></span><br><span class="line">    <span class="comment">// 经过我的测试发现，以下的这种测试，开始会直接先相当于new了一个 Circle，为这么这样，我暂时还说不清楚</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">totalInstance</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span> &#123;</span><br><span class="line">        id = initId++;</span><br><span class="line">        totalInstance++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getRadius</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRadius</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotalInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findArea</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">circleInfo</span><span class="params">(Circle circle)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id=&quot;</span> + circle.id + <span class="string">&quot;\tradius=&quot;</span> + circle.radius + <span class="string">&quot;\tarea=&quot;</span> + circle.findArea();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CircleTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        c1.radius=<span class="number">2.0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前有：&quot;</span>+Circle.getTotalInstance()+<span class="string">&quot;个实例&quot;</span>);</span><br><span class="line">        System.out.println(c1.findArea());</span><br><span class="line">        System.out.println(Circle.circleInfo(c1));</span><br><span class="line"></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        c2.radius=<span class="number">3.0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前有：&quot;</span>+Circle.getTotalInstance()+<span class="string">&quot;个实例&quot;</span>);</span><br><span class="line">        System.out.println(c2.findArea());</span><br><span class="line">        System.out.println(Circle.circleInfo(c2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">当前有：<span class="number">1</span>个实例</span><br><span class="line"><span class="number">12.566370614359172</span></span><br><span class="line">id=<span class="number">1</span>radius=<span class="number">2.0</span>area=<span class="number">12.566370614359172</span></span><br><span class="line">当前有：<span class="number">2</span>个实例</span><br><span class="line"><span class="number">28.274333882308138</span></span><br><span class="line">id=<span class="number">2</span>radius=<span class="number">3.0</span>area=<span class="number">28.274333882308138</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><hr><ul><li><p><strong>单例 (Singleton)设计模式</strong></p><ul><li><p>设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、 以及解决问题的思考方式。设计模型免去我们自己再思考和摸索。就像是经典的棋谱，不同的棋局，我们用不同的棋谱。”套路”</p></li><li><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类<strong>只提供一个取得其对象实例的方法</strong>。 如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造器的访问权限设置为<strong>private</strong>，这样，就不能用 new 操作符在类的外部产生类的对象了，但在类<strong>内部仍可以产生该类的对象</strong>。因为在类的外部开始还无法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象，静态方法<strong>只能访问类中的静态成员变量</strong>，所以，指向类内部产生的该类对象的变量也必须定义成静态的。</p><div class="note success flat"><p>单例设计的两种实现方式</p></div><div class="tabs" id="单例设计模式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#单例设计模式-1">单例设计模式一：饿汉式</button></li><li class="tab"><button type="button" data-href="#单例设计模式-2">单例设计模式二：懒汉式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="单例设计模式-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank1</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank2</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        System.out.println(bank1 == bank2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line">    <span class="comment">// 1.私有化类的空参构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.在类的内部创建一个对象，要求这个对象是静态的，&quot; 3. &quot;的静态方法只能访问静态成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.在类的内部提供一个公共的且是静态的方法返回一个实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="单例设计模式-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank1</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        <span class="type">Bank</span> <span class="variable">bank2</span> <span class="operator">=</span> Bank.getInstance();</span><br><span class="line">        System.out.println(bank1 == bank2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line">    <span class="comment">// 1.私有化类的空参构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.声明此对象，没有初始化，&quot; 3. &quot;的静态方法只能访问静态成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.声明 public static 返回当前类对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>懒汉式暂时还存在线程安全问题，可修复</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note success flat"><p>Java源码Runtime方法使用单例设计模式</p></div></li></ul></li></ul><ul><li><strong>单例模式的优点：</strong><br>由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后<strong>永久驻留内存</strong>的方式来解决。</li><li><strong>单例模式-应用场景</strong><ul><li>网站的计数器，一般也是单例模式实现，否则难以同步。</li><li>应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志 文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。</li><li>数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库 资源。</li><li>项目中，读取配置文件的类，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。</li><li>Application 也是单例的典型应用</li><li>Windows的Task Manager (任务管理器)就是很典型的单例模式</li><li>Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程 中，回收站一直维护着仅有的一个实例。</li></ul></li></ul><hr><ul><li><p><strong>理解main方法的语法</strong>    </p><ul><li><p>由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是 public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须 是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令 时传递给所运行的类的参数。</p></li><li><p>又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</p></li></ul></li></ul><h2 id="类的成员之四：代码块"><a href="#类的成员之四：代码块" class="headerlink" title="类的成员之四：代码块"></a>类的成员之四：代码块</h2><ul><li><strong>代码块(或初始化块)的作用：</strong><br>对Java类或对象进行初始化</li><li><strong>代码块(或初始化块)的分类：</strong><br>一个类中代码块若有修饰符， 则只能被static修饰，称为静态代码块(static block)，没有使用static修饰的，为非静态代码块。<br><em>static代码块通常用于初始化static的属性</em></li><li><strong>静态代码块：用static 修饰的代码块</strong></li></ul><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</li><li>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</li><li>静态代码块的执行要先于非静态代码块。</li><li>静态代码块随着类的加载而加载，且只执行<strong>一次</strong></li></ol><ul><li><strong>非静态代码块：没有static修饰的代码块</strong></li></ul><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>除了调用非静态的结构外，还可以调用静态的变量或方法。</li><li>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</li><li>每次创建对象的时候，都会执行一次。且先于构造器执行。<div class="note success flat"><p>代码块的示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockCodeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.static attribute and static functions are along with class loading(include static code block )</span></span><br><span class="line">        <span class="comment">// 2.The functions only loading not to run</span></span><br><span class="line">        <span class="comment">// 4.The static code block will run with class loading</span></span><br><span class="line">        <span class="comment">// 5.Run it just once</span></span><br><span class="line">        <span class="comment">// 6.Run from top to bottom if you have many of static code block</span></span><br><span class="line">        Test.fun();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.The non-static code block will run with when you build a object</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        System.out.println(Test.getName());</span><br><span class="line">        <span class="comment">// 2.Every time when you build a object</span></span><br><span class="line">        <span class="comment">// 3.Run from top to bottom if you have many of not-static code block</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(test.age);</span><br><span class="line">        System.out.println(test1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        Test.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I will output this sentence when you use static function or static variable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;I will output this sentence when you bulid a object because i am non-static code block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">I will output <span class="built_in">this</span> sentence when you use <span class="keyword">static</span> function or <span class="keyword">static</span> variable</span><br><span class="line"><span class="keyword">static</span> function</span><br><span class="line">I will output <span class="built_in">this</span> sentence when you bulid a object because i am non-<span class="keyword">static</span> code block</span><br><span class="line">Jermyn</span><br><span class="line">I will output <span class="built_in">this</span> sentence when you bulid a object because i am non-<span class="keyword">static</span> code block</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ol><ul><li><strong>程序中成员变量赋值的执行顺序</strong></li></ul><ol><li>声明成员变量的默认初始化</li><li>显式初始化、多个初始化块依次被执行（同级别下按先后顺序执行）</li><li>构造器再对成员进行初始化操作</li><li>通过”对象.属性”或”对象.方法”的方式，可多次给属性赋值<div class="note success flat"><p>程序中成员变量赋值的执行顺序的例子</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeafTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------分割线---------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Root</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Root</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Root的无参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mid</span> <span class="keyword">extends</span> <span class="title class_">Root</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mid</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的无参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mid</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="comment">//通过this调用同一类中重载的构造器</span></span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Mid的带参数构造器，其参数值：&quot;</span></span><br><span class="line">                + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">extends</span> <span class="title class_">Mid</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的静态初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的普通初始化块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Leaf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//通过super调用父类中有一个字符串参数的构造器</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Leaf的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Root的静态初始化块</span><br><span class="line">Mid的静态初始化块</span><br><span class="line">Leaf的静态初始化块</span><br><span class="line">Root的普通初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的普通初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：Jermyn</span><br><span class="line">Leaf的普通初始化块</span><br><span class="line">Leaf的构造器</span><br><span class="line">---------------------------分割线---------------------------</span><br><span class="line">Root的普通初始化块</span><br><span class="line">Root的无参数的构造器</span><br><span class="line">Mid的普通初始化块</span><br><span class="line">Mid的无参数的构造器</span><br><span class="line">Mid的带参数构造器，其参数值：Jermyn</span><br><span class="line">Leaf的普通初始化块</span><br><span class="line">Leaf的构造器</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="tip warning faa-horizontal animated-hover"><p><strong>总结：由父及子 静态先行</strong></p></div></li></ol><hr><h2 id="关键字：final"><a href="#关键字：final" class="headerlink" title="关键字：final"></a>关键字：final</h2><p>在Java中声明<strong>类、变量和方法</strong>时，可使用关键字final来修饰,表示“最终的”。</p><ol><li>final标记的<strong>类不能被继承</strong>。提高安全性，提高程序的可读性。<ul><li>String类、System类、StringBuffer类</li></ul></li><li>final标记的方法<strong>不能被子类重写</strong>。<ul><li>比如：Object类中的getClass()。</li></ul></li><li>final标记的变量(成员变量或局部变量)即称为常量。名称大写，且<strong>只能被赋值一次</strong>。<ul><li>final标记的成员变量必须在声明时或在每个构造器中或代码块中显式赋值，然后才能使用。</li><li>final double MY_PI = 3.14;</li></ul></li></ol><div class="tabs" id="final特点"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#final特点-1">1.final修饰类</button></li><li class="tab"><button type="button" data-href="#final特点-2">2.final修饰方法</button></li><li class="tab"><button type="button" data-href="#final特点-3">3.final修饰变量-常量</button></li><li class="tab"><button type="button" data-href="#final特点-4">4.final修饰局部变量</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="final特点-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wrong, final修饰的 A 就是最后一个类了，不可以在作为父类背继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="final特点-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">// wrong，父类A，final修饰的print方法，不可就是最终的，不可再被重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;Jermyn&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="final特点-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// final 修饰的变量就是常量，不可再赋值，即 final修 饰的变量就只能赋值一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="string">&quot;Jermyn&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        INFO = <span class="string">&quot;JERMYN&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="final特点-4"><p><strong>尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AB</span>().print(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> num)</span>&#123;</span><br><span class="line">        <span class="comment">// final 修饰的变量，就只能被赋值一次</span></span><br><span class="line"><span class="comment">//        num=50;</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p><strong>小结：</strong><br><strong>public static void main (String[] args){</strong><br>    <strong>方法体</strong><br><strong>}</strong><br><strong>权限修饰符：private, 缺省 , protected , public ——————&gt;封装性</strong><br><strong>修饰符： static , final , abstract , native</strong><br><strong>返回值类型：无返回值, 有返回值的 return …;</strong><br><strong>方法名：需要满足表示符命名规则、规范：“见名知意”</strong><br><strong>形参列表：重载 VS 重写：参数的值传递机制，体现对象的多态性</strong><br><strong>方法体：体现方法的功能</strong></p></blockquote><hr><h2 id="抽象类与抽象方法"><a href="#抽象类与抽象方法" class="headerlink" title="抽象类与抽象方法"></a>抽象类与抽象方法</h2><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。</p><ul><li><strong>特点</strong></li></ul><ol><li>用abstract关键字来修饰一个类，这个类叫做抽象类。</li><li>用abstract来修饰一个方法，该方法叫做抽象方法。<ul><li>抽象方法：只有方法的声明，没有方法的实现。以分号结束：比如：public abstract void talk();</li></ul></li><li>含有抽象方法的类<strong>必须</strong>被声明为抽象类。</li><li>抽象类<strong>不能被实例化</strong>。抽象类是用来<strong>被继承的</strong>，抽象类的子类<strong>必须重写</strong>父类的抽象方法，并提供方法体。若没有重写全部的抽象方法，仍为抽象类。</li><li>不能用abstract<strong>修饰变量、代码块、构造器</strong>；</li><li>不能用abstract修饰<strong>私有方法（原因：私有的方法就不可被重写）、静态方法（原因：abstract修饰的类，就不可以创建类了，只可以创建类的子类）、final的方法（原因：final修饰的方法就不可被重写）、final的类（原因：final修饰的类就不可被继承）</strong>。</li></ol><ul><li><strong>抽象类应用</strong><br>抽象类是用来模型化那些父类无法确定全部实现，而是由其子类提供具体实现的对象的类。<br>在航运公司系统中，Vehicle类 需要定义两个方法分别计算运 输工具的燃料效率和行驶距离<br>问题：卡车(Truck)和驳船(RiverBarge)的燃料效率和行驶距离的计算方法完全不同。Vehicle类不能提供计算方法但子类可以。<ul><li>解决方案：Java允许类设计者指定：超类声明一个方法但不提供实现，该方法的实现由子类提供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。</li><li>Vehicle是一个抽象类，有两个抽象方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">calcFuelEfficiency</span><span class="params">()</span>; <span class="comment">//计算燃料效率的抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">calcTripDistance</span><span class="params">()</span>;<span class="comment">//计算行驶距离的抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Truck</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcFuelEfficiency</span><span class="params">( )</span>&#123; </span><br><span class="line">        <span class="comment">//写出计算卡车的燃料效率的具体方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcTripDistance</span><span class="params">( )</span> &#123;  </span><br><span class="line">        <span class="comment">//写出计算卡车行驶距离的具体方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RiverBarge</span> <span class="keyword">extends</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcFuelEfficiency</span><span class="params">( )</span> &#123; </span><br><span class="line">        <span class="comment">//写出计算驳船的燃料效率的具体方法 </span></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calcTripDistance</span><span class="params">( )</span> &#123; </span><br><span class="line">        <span class="comment">//写出计算驳船行驶距离的具体方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><div class="note success flat"><p>抽象类的示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Manager</span>().getPay();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CommonEmployee</span>().work();</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------分割线-----------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 匿名类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Employee</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPay</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工获取薪水&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工努力工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.work();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Employee</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPay</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工获取薪水&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工努力工作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.getPay();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">getPay</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理者获取薪水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理者管理员工&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommonEmployee</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通员工获取薪水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通员工在一线工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">管理者获取薪水</span><br><span class="line">普通员工在一线工作</span><br><span class="line">-----------------------------------分割线-----------------------------------</span><br><span class="line">员工努力工作</span><br><span class="line">员工获取薪水</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><ul><li><strong>多态的应用：模板方法设计模式(TemplateMethod)</strong><br>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象 类的行为方式。<br><strong>解决的问题：</strong></li></ul><ol><li>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以 把不确定的部分暴露出去，让子类去实现。</li><li>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用， 这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽 象出来，供不同子类实现。这就是一种模板模式。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">getTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        excuteCode();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行时间是：&quot;</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubTemplate</span> <span class="keyword">extends</span> <span class="title class_">Template</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">excuteCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><ul><li><p><strong>概述</strong></p><ul><li>一方面，有时必须从几个类中<strong>派生出一个子类</strong>，继承它们<strong>所有的属性和方法</strong>。但是，Java<strong>不支持多重继承</strong>。有了接口，就可以得到多重继承的效果。</li><li>另一方面，有时必须从几个类中<strong>抽取出一些共同的行为特征</strong>，而它们之间又<strong>没有is-a的关系</strong>，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打 印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等都支持USB连接。</li><li>接口就是<strong>规范</strong>，定义的是一组规则，体现了现实世界中“如果你是/要…则 必须能…”的思想。继承是一个”是不是”的关系，而接口实现则是 “能不能”  的关系。</li><li>接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。</li></ul></li><li><p><strong>接口的特点：</strong><br>接口(interface)是<strong>抽象方法和常量值定义</strong>的集合。</p><ul><li>用 <strong>interface</strong>来定义。</li><li>接口中的所有成员变量都默认是由public static final修饰的。</li><li>接口中的所有抽象方法都默认是由public abstract修饰的。</li><li>接口中<strong>没有构造器</strong>。</li><li>接口采用<strong>多继承</strong>机制。</li></ul></li><li><p><strong>接口的定义</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK7及以前：只能定义全局常量和抽象方法</span></span><br><span class="line"><span class="comment">// 全局常量：public static final的.但是书写时，可以省略不写</span></span><br><span class="line"><span class="comment">// 抽象方法：public abstract的</span></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runner</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两种定义方法效果一样，均可</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意</strong></p></li></ul><ol><li><p>定义Java类的语法格式：<strong>先写 extends，后写 implements</strong></p><ul><li>class SubClass extends SuperClass implements InterfaceA{ }</li></ul></li><li><p>一个类可以实现<strong>多个接口</strong>，接口也可以<strong>继承</strong>其它接口。</p></li><li>实现接口的类中必须提供接口中<strong>所有</strong>方法的具体实现内容，方可实例化。<strong>否则仍为抽象类</strong>。</li><li>接口的主要用途就是<strong>被实现类实现</strong>。（面向接口编程）</li><li>与继承关系类似，接口与实现类之间存在<strong>多态性</strong></li><li>接口和类是<strong>并列关系</strong>，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义 (JDK7.0及之前)，而没有变量和方法的实现。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface 示例</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Runner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Runner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 准备工作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 准备工作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 准备工作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><strong>*接口的应用：代理模式(Proxy)</strong><br>概述：代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetWorkTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line"><span class="type">ProxyServer</span> <span class="variable">proxyServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyServer</span>(server);</span><br><span class="line">proxyServer.browse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;真实的服务器访问网络&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyServer</span> <span class="keyword">implements</span> <span class="title class_">NetWork</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> NetWork work;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProxyServer</span><span class="params">(NetWork work)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;联网之前的检查工作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">browse</span><span class="params">()</span> &#123;</span><br><span class="line">check();</span><br><span class="line"></span><br><span class="line">work.browse();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>应用场景：</strong></p><ul><li><strong>安全代理</strong>：屏蔽对真实角色的直接访问。</li><li><strong>远程代理</strong>：通过代理类处理远程方法调用（RMI）</li><li><strong>延迟加载</strong>：先加载轻量级的代理对象，真正需要再加载真实对象比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有 100MB，在打开文件时，不可能将所有的图片都显示出来，这样就可以使用代理模式，当需要查看图片时，用proxy来进行大图片的打开。</li></ul></li><li><p><strong>接口和抽象类之间的对比</strong><br><strong>在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。</strong></p></li><li><p><strong>Java 8中关于接口的改进</strong><br>Java 8中，你可以为接口<strong>添加静态方法和默认方法</strong>。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p><ul><li><p>静态方法：使用 <strong>static</strong> 关键字修饰。可以通过<strong>接口直接调用静态方法</strong>，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。你可以在标准库中 找到像Collection/Collections或者Path/Paths这样成对的接口和类。</p></li><li><p>默认方法：默认方法使用 <strong>default</strong> 关键字修饰。可以通过<strong>实现类对象</strong>来调用。 我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。 比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</p></li></ul></li><li><p><strong>接口中的默认方法</strong></p><ul><li><p>若一个接口中定义了一个默认方法，而另外一个接口中也定义了一个同名同参数的方法（不管此方法是否是默认方法），在实现类同时实现了这两个接口时，会出现：接口冲突。</p><ul><li>解决办法：实现类必须覆盖接口中同名同参数的方法，来解决冲突,即为<strong>必须重写重写</strong>。</li></ul></li><li><p>若一个接口中定义了一个默认方法，而父类中也定义了一个同名同参数的非抽象方法，则不会出现冲突问题。因为此时遵守：<strong>类优先原则</strong>。<strong>接口中具有相同名称和参数的默认方法会被忽略</strong>。</p></li></ul></li></ul><h2 id="类的内部成员之五：内部类"><a href="#类的内部成员之五：内部类" class="headerlink" title="类的内部成员之五：内部类"></a>类的内部成员之五：内部类</h2><ol><li>当一个事物的内部，还有一个部分需要一个<strong>完整</strong>的结构进行描述，而这个内部的完整的结构<strong>又只为外部事物提供服务</strong>，那么整个内部的完整结构最好使用内部类。</li><li>在Java中，允许一个类的定义位于另一个类的内部，前者称为内部类，后者称为外部类。</li><li>Inner class一般用在<strong>定义它的类或语句块之内</strong>，在外部引用它时<strong>必须</strong>给出完整的名称。Inner class的名字不能与包含它的外部类类名相同；</li><li>分类：①成员内部类（static成员内部类和非static成员内部类）②局部内部类（不谈修饰符）、匿名内部类</li></ol><ul><li><p><strong>成员内部类作为类的成员的角色：</strong></p><ul><li>和外部类不同，Inner class还可以声明为<strong>private或protected</strong>；</li><li>可以<strong>调用外部类的结构</strong></li><li>Inner class 可以声明为<strong>static</strong>的，但此时就不能再使用外层类的非static的成员变量；</li></ul></li><li><p><strong>成员内部类作为类的角色：</strong></p><ul><li>可以在内部定义<strong>属性、方法、构造器</strong>等结构</li><li>可以声明为 <strong>abstract</strong> 类 ，因此可以被其它的内部类继承</li><li>可以声明为 <strong>final</strong> 的</li><li>编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）<blockquote><p>【注意】<br>非static的成员内部类中的成员不能声明为static的，只有在外部类或static的成员内部类中才可声明static成员。<br>外部类访问成员内部类的成员，需要<strong>内部类.成员 或 内部类对象.成员</strong>的方式<br>成员内部类可以直接使用外部类的所有成员，包括私有的数据(此处可以当作方法理解)<br>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</p></blockquote></li></ul></li></ul><hr><ul><li><strong>如何声明局部内部类</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class 外部类 &#123;  </span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    方法() &#123;</span><br><span class="line">        class 局部内部类 &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">    class 局部内部类&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>如何使用局部内部类</strong></p><ul><li>只能在声明它的方法或代码块中使用，而且是<strong>先声明后使用</strong>。除此之外的任何地方都<strong>不能</strong>使用该类</li><li>但是它的对象可以通过外部方法的返回值返回使用，返回值类型<strong>只能是局部内部类的父类或父接口类型</strong></li></ul></li><li><p><strong>局部内部类的特点</strong></p></li></ul><ol><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。（例：OuterClass$InnerClass.class）</li><li>只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。</li><li>局部内部类可以使用外部类的成员，包括私有的。(此处可以当作方法理解)</li><li>局部内部类可以使用外部方法的局部变量，但是必须是final的。由局部内部类和局 部变量的声明周期不同所致。</li><li>局部内部类和局部变量地位类似，不能使用public,protected,缺省,private</li><li>局部内部类不能使用static修饰，因此也不能包含静态成员</li></ol><ul><li><strong>匿名内部类</strong><ul><li>匿名内部类<strong>不能定义任何静态成员、方法和类</strong>，只能创建匿名内部类的一个实例。一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</li><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器（实参列表）|实现接口()&#123;</span><br><span class="line">    <span class="comment">//匿名内部类的类体部分</span></span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Product p)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;购买了一个&quot;</span> + p.getName() + <span class="string">&quot;，花掉了&quot;</span> + p.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AnonymousTest</span> <span class="variable">ta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnonymousTest</span>();</span><br><span class="line">        <span class="comment">//调用test方法时，需要传入一个Product参数，</span></span><br><span class="line">        <span class="comment">//此处传入其匿名实现类的实例</span></span><br><span class="line">        ta.test(<span class="keyword">new</span> <span class="title class_">Product</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">567.8</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;AGP显卡&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">购买了一个AGP显卡，花掉了<span class="number">567.8</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details></li><li>匿名内部类的特点<ul><li>匿名内部类<strong>必须继承</strong>父类或实现接口</li><li>匿名内部类<strong>只能</strong>有一个对象</li><li>匿名内部类对象<strong>只能</strong>使用多态形式引用</li></ul></li></ul></li></ul><div class="note success flat"><p>abstract类与接口的比较</p></div><blockquote><p>（1）abstract类和接口都可以有abstract方法。<br>（2）接口中只能有常量，不能有变量；而abstract类中既可以有常量，也可以有变量。<br>（3）abstract类中也可以有非abstract方法（不是default方法，还带有方法体的方法）但不可以有default实例方法。接口不可以有非abstraet方法，但可以有default实例方法。在设计程序时应当根据具体的分析来确定是使用抽象类还是接口。abstract类除了提供重要的需要子类去实现的abstract方法外，还提供了子类可以继承的变量和非abstract方法如果某个问题需要使用继承才能更好地解决，例如，子类除了需要实现父类的abstract方法还需要从父类继承一些变量或继承一些重要的非abstraet方法，就可以考虑用abstract类。如果某个问题不需要继承，只是需要若干个类给出某些重要的abstract方法的实现细节，就可以考虑使用接口。</p></blockquote><h1 id="第八章-异常处理"><a href="#第八章-异常处理" class="headerlink" title="第八章 异常处理"></a>第八章 异常处理</h1><h2 id="异常概述与异常体系结构"><a href="#异常概述与异常体系结构" class="headerlink" title="异常概述与异常体系结构"></a>异常概述与异常体系结构</h2><p>异常：在Java语言中，将程序执行中发生的<strong>不正常情况</strong>称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)<br>Java程序在执行过程中所发生的异常事件可分为两类：</p><ol><li>Error：Java虚拟机<strong>无法解决</strong>的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。<strong>一般不编写针对性 的代码进行处理</strong>。</li><li>Exception: 其它因<strong>编程错误或偶然的外在因素</strong>导致的一般性问题，可以使 用针对性的代码进行处理。例如：空指针访问；试图读取不存在的文件；网络连接中断；数组角标越界</li></ol><ul><li><p><strong>解决办法</strong></p><ul><li>对于这些错误，一般有两种解决方法：一是遇到错误就<strong>终止程序的运行</strong>。另一种方法是由程序员在编写程序时，就<strong>考虑到</strong>错误的检测、错误消息的提示，以及错误的处理。</li><li>捕获错误最理想的是在<strong>编译期间</strong>，但有的错误只有在运行时才会发生。比如：除数为0，数组下标越界等</li></ul></li><li><p><strong>异常体系结构</strong></p><ul><li><strong>运行时异常unchecked</strong><ul><li>是指编译器<strong>不要求强制处置的异常</strong>。一般是指编程时的<strong>逻辑错误</strong>，是程序员应该<strong>积极避免</strong>其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。</li><li>对于这类异常，<strong>可以不作处理</strong>，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</li></ul></li><li><strong>编译时异常checked</strong><ul><li>是指编译器要求<strong>必须处置的异常</strong>。即程序在运行时由于<strong>外界因素</strong>造成的一 般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。</li><li>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</li></ul></li></ul></li></ul><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><ul><li><p><strong>java.lang.RuntimeException</strong></p><ul><li>ClassCastException</li><li>ArrayIndexOutOfBoundsException</li><li>NullPointerException</li><li>ArithmeticException</li><li>NumberFormatException</li><li>InputMismatchException</li><li>…….</li></ul></li><li><p><strong>java.io.IOExeption</strong></p><ul><li>FileNotFoundException</li><li>EOFException</li></ul></li><li><p><strong>java.lang.ClassNotFoundException</strong></p></li><li><strong>java.lang.InterruptedException</strong></li><li><strong>java.io.FileNotFoundException</strong></li><li><strong>java.sql.SQLException</strong></li></ul><div class="note success flat"><p>常见异常复现</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NullPointerException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        str = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//StringIndexOutOfBoundsException</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ClassCastException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NumberFormatException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//InputMismatchException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(score);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ArithmeticException</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(a / b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常处理机制一：try-catch-finally"><a href="#异常处理机制一：try-catch-finally" class="headerlink" title="异常处理机制一：try-catch-finally"></a>异常处理机制一：try-catch-finally</h2><ul><li><strong>注意：</strong></li></ul><ol><li>Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</li><li>Java提供的是异常处理的抓抛模型。</li><li>Java程序的执行过程中如出现异常，会生成一个<strong>异常类对象</strong>， 该异常对象将被提交给Java运行时系统，这个过程称为抛出 (throw)异常。</li><li><p>异常对象的生成</p><ul><li>由虚拟机<strong>自动生成</strong>：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出</li><li>由开发人员手动创建：Exception exception = new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样</li></ul></li><li><p>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的<strong>上层</strong>方法。这个过程将一直继续下去，直到异常被处理。 这一过程称为<strong>捕获(catch)异常</strong>。</p></li><li>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li><li>程序员通常只能处理Exception，而对Error无能为力。</li></ol><ul><li><strong>语法格式</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>( ExceptionName1 e )&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//当产生ExceptionName1型异常时的处置措施</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName2 e )&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//当产生ExceptionName2型异常时的处置措施</span></span><br><span class="line">&#125;</span><br><span class="line">[ <span class="keyword">finally</span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//无论是否发生异常，都无条件执行的语句</span></span><br><span class="line">&#125; ]</span><br></pre></td></tr></table></figure></li><li><strong>try{}</strong><br>捕获异常的第一步是用 <strong>try{…}</strong> 语句块选定捕获异常的范围，将<strong>可能出现异常</strong>的代码放在try语句块中。</li><li><strong>catch (Exceptiontype e)</strong><br>在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随<strong>一个或多个</strong>catch语句，用于处理可能产生的<strong>不同类型</strong>的异常对象。</li><li><strong>finally{…}</strong><ul><li>捕获异常的最后一步是通过finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够 对程序的状态作统一的管理。</li><li>不论在try代码块中是否发生了异常事件，catch语句是否执 行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行。</li><li>finally语句和catch语句是任选的</li></ul></li><li><strong>捕获异常的有关信息：</strong><br>与其它对象一样，可以访问一个异常对象的成员变量或调用它的方法。<ul><li>getMessage()    获取异常信息，返回字符串</li><li>printStackTrace()    获取异常类名和异常信息，以及异常出现在程序中的位置。返回值void。<blockquote><p><strong>注意：</strong><br>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。<br>比如 ： 可以用 ArithmeticException 类作参数的地方 ， 就可以用 RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。 但不能是与ArithmeticException类无关的异常，如NullPointerException（catch  中的&gt;语句将不会执行）。</p></blockquote></li></ul></li></ul><div class="note success flat"><p>try…catch…finally示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(method());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">            System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This line of code must be executed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">java.lang.ArrayIndexOutOfBoundsException: <span class="number">10</span></span><br><span class="line">at com.jermyn.test14.ExceptionTest.method(ExceptionTest.java:<span class="number">18</span>)</span><br><span class="line">at com.jermyn.test14.ExceptionTest.methodTest(ExceptionTest.java:<span class="number">11</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$<span class="number">1.</span>runReflectiveCall(FrameworkMethod.java:<span class="number">59</span>)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:<span class="number">12</span>)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:<span class="number">56</span>)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:<span class="number">17</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">3.</span>evaluate(ParentRunner.java:<span class="number">306</span>)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner$<span class="number">1.</span>evaluate(BlockJUnit4ClassRunner.java:<span class="number">100</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:<span class="number">366</span>)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:<span class="number">103</span>)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:<span class="number">63</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">4.</span>run(ParentRunner.java:<span class="number">331</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">1.</span>schedule(ParentRunner.java:<span class="number">79</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:<span class="number">329</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.access$<span class="number">100</span>(ParentRunner.java:<span class="number">66</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">2.</span>evaluate(ParentRunner.java:<span class="number">293</span>)</span><br><span class="line">at org.junit.runners.ParentRunner$<span class="number">3.</span>evaluate(ParentRunner.java:<span class="number">306</span>)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:<span class="number">413</span>)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:<span class="number">137</span>)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:<span class="number">69</span>)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner$Repeater$<span class="number">1.</span>execute(IdeaTestRunner.java:<span class="number">38</span>)</span><br><span class="line">at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:<span class="number">11</span>)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">35</span>)</span><br><span class="line">This line of code must be executed!</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">235</span>)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">54</span>)</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="异常处理机制二：throws"><a href="#异常处理机制二：throws" class="headerlink" title="异常处理机制二：throws"></a>异常处理机制二：throws</h2><ol><li><p>声明抛出异常是Java中处理异常的第二种方式</p><ul><li>如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这 种异常，则此方法应显示地声明抛出异常，表明该方法将不对这些异常进行处理，  而由该方法的调用者负责处理。</li><li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可 以是方法中产生的异常类型，也可以是它的父类。</li></ul></li><li><p>声明抛出异常举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String file)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="comment">// 读文件的操作可能产生FileNotFoundException类型的异常</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写方法声明抛出异常的原则:重写方法不能抛出比被重写方法范围更大的异常类型。在多态的情况下， 对methodA()方法的调用-异常的捕获按父类声明的异常处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B2</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开发中如何选择使用try-catch-finally 还是使用throws？<br>4.1 如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。<br>4.2 执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。 </p></li></ol><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要使用人工创建并抛出。</p><ul><li>首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运 行环境)。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IOException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IOException</span>();  </span><br><span class="line"><span class="keyword">throw</span> e;</span><br></pre></td></tr></table></figure></li><li>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将 会产生语法错误：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;want to throw&quot;</span>);</span><br></pre></td></tr></table></figure><div class="note success flat"><p>手动抛出异常示例</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            p.regist(-<span class="number">5</span>);</span><br><span class="line">            System.out.println(p.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;The number you enter cannot be negative&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.Exception: The data you entered is illegal</span><br><span class="line">at com.jermyn.test14.Person.regist(PersonTest.java:<span class="number">27</span>)</span><br><span class="line">at com.jermyn.test14.PersonTest.main(PersonTest.java:<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">1</span></span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h2 id="用户自定义异常类用户自定义异常类"><a href="#用户自定义异常类用户自定义异常类" class="headerlink" title="用户自定义异常类用户自定义异常类"></a>用户自定义异常类用户自定义异常类</h2><ol><li>一般地，用户自定义异常类都是RuntimeException的子类。</li><li>自定义异常类通常需要编写几个重载的构造器。</li><li>自定义异常需要提供serialVersionUID</li><li>自定义的异常通过throw抛出。</li><li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据</li><li>名字判断异常类型。</li></ol><ul><li><strong>步骤：</strong></li></ul><ol><li>继承于现有的异常结构：RuntimeException 、Exception</li><li>提供全局常量：serialVersionUID</li><li>提供重载的构造器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">33875169924229948L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success flat"><p>小练习体会执行的先后顺序</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReturnExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入方法A&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;制造异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用A方法的finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入方法B&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用B方法的finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodA();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">进入方法A</span><br><span class="line">用A方法的<span class="keyword">finally</span></span><br><span class="line">制造异常</span><br><span class="line">进入方法B</span><br><span class="line">调用B方法的<span class="keyword">finally</span></span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure>              </div>            </details><div class="note success flat"><p>练习</p></div>编写应用程序EcmDef.java，接收命令行的两个参数，要求不能输入负数，计算两数相除。<br>对数据类型不一致(NumberFormatException) 、 缺 少 命 令 行 参 数<br>(ArrayIndexOutOfBoundsException、除0(ArithmeticException),及输入负数(EcDef 自定义的异常)进行异常处理。<br>提示：<br>1.在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能<br>2.在main()方法中使用异常处理语句进行异常处理。<br>3.在程序中，自定义对应输入负数的异常类(EcDef)。<br>4.运行时接受参数 java EcmDef 20 10    //args[0]=“20” args[1]=“10”<br>5.Interger类的static方法parseInt(String s)将s转换成对应的int值。 如：int a=Interger.parseInt(“314”);//a=314;<div class="tabs" id="块名"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#块名-1">EcmDef.java</button></li><li class="tab"><button type="button" data-href="#块名-2">EcDefException.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="块名-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EcmDef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> EcDefException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">reult</span> <span class="operator">=</span> ecm(num1, num2);</span><br><span class="line">            System.out.println(reult);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;缺少命令行参数&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数据类型不一致&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除0异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EcDefException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ecm</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> <span class="keyword">throws</span> EcDefException &#123;</span><br><span class="line">        <span class="keyword">if</span> (num1 &lt; <span class="number">0</span> || num2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EcDefException</span>(<span class="string">&quot;不可小于零&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num1 / num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="块名-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EcDefException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3387516124229948L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EcDefException</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EcDefException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="folding-tag" green><summary> 点击查看运行结果 </summary>              <div class='content'>              <p>直接运行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">缺少命令行参数</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">数据类型不一致</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">除<span class="number">0</span>异常</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\PATH-EN\java-path\bin\java.exe ...</span><br><span class="line">不可小于零</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码<span class="number">0</span></span><br></pre></td></tr></table></figure></p>              </div>            </details></li></ol>]]></content>
    
    
    <summary type="html">Java学习笔记，Java基础阶段的基础编程，包含Java语言概述，基本语法，数组，面向对象编程，异常处理。文档资源来自尚硅谷，整理为博主，在此感谢尚硅谷无私分享大量的学习资源。</summary>
    
    
    
    <category term="JavaSE" scheme="https://www.jermyn.cn/categories/JavaSE/"/>
    
    
    <category term="大数据" scheme="https://www.jermyn.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="java" scheme="https://www.jermyn.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>大数据集群服务部署</title>
    <link href="https://www.jermyn.cn/posts/ef13.html"/>
    <id>https://www.jermyn.cn/posts/ef13.html</id>
    <published>2022-08-27T13:53:29.000Z</published>
    <updated>2023-05-28T15:04:33.107Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>本文为大数据集群服务的部署文档<br>包括zookeeper服务部署,Hadoop服务部署,Spark服务部署,Kafka服务部署,Hbase服务部署,Hive服务部署<br>文档写于2022年初作为学习笔记使用。</p></div><div class="tip fa-atom"><p>系统版本：CentOS Linux release 7.9.2009 (Core)<br>内核版本：3.10.0-1160.el7.x86_64<br>内存：4GB<br>处理器数量（p）：2<br>每个处理器的内核数量（c）：2<br>硬盘：30GB</p></div><div class="tip fa-gamepad faa-horizontal animated"><p>前置：主机相关配置</p></div><div class="table-container"><table><thead><tr><th>Hostname</th><th>IPADDR</th><th>NETMASK</th><th>GATWAY</th><th>DNS1</th><th>ROLE</th><th>USR</th><th>PASSWORD</th></tr></thead><tbody><tr><td>master</td><td>192.168.88.135</td><td>255.255.255.0</td><td>192.168.88.2</td><td>8.8.8.8</td><td>NN    DN    RM  NM</td><td>root</td><td>Ccu2021@</td></tr><tr><td>slave1</td><td>192.168.88.136</td><td>255.255.255.0</td><td>192.168.88.2</td><td>8.8.8.8</td><td>SNN  DN           NM</td><td>root</td><td>Ccu2021@</td></tr><tr><td>slave2</td><td>192.168.88.137</td><td>255.255.255.0</td><td>192.168.88.2</td><td>8.8.8.8</td><td>DN                     NM</td><td>root</td><td>Ccu2021@</td></tr></tbody></table></div><div class="tip fa-gamepad faa-horizontal animated"><p>规划：所有组件包均在 /export/server 文件目录下</p></div><div class="table-container"><table><thead><tr><th style="text-align:left">组件</th><th style="text-align:left">版本</th><th style="text-align:left">启动命令</th><th style="text-align:left">WebUI</th></tr></thead><tbody><tr><td style="text-align:left">zookeeper</td><td style="text-align:left">zookeeper-3.4.10 后期改为zookeeper-3.7.0</td><td style="text-align:left">zkServer-all.sh start</td><td style="text-align:left">暂无</td></tr><tr><td style="text-align:left">hadoop</td><td style="text-align:left">hadoop-3.3.0</td><td style="text-align:left">start-all.sh</td><td style="text-align:left"><a href="http://master:9870/">http://master:9870/</a>     <a href="http://master:8088/">http://master:8088/</a></td></tr><tr><td style="text-align:left">spark</td><td style="text-align:left">spark-3.2.0</td><td style="text-align:left">cd /export/server/spark/bin ./pyspark</td><td style="text-align:left"><a href="http://master:4040/">http://master:4040/</a></td></tr><tr><td style="text-align:left">spark-history</td><td style="text-align:left">同spark版本</td><td style="text-align:left">cd /export/server/spark/sbin  ./start-history-server.sh</td><td style="text-align:left"><a href="http://master:18080/">http://master:18080/</a></td></tr><tr><td style="text-align:left">hbase</td><td style="text-align:left">hbase-1.2.4</td><td style="text-align:left">cd /export/server/hbase/bin            ./start-hbase.sh</td><td style="text-align:left"><a href="http://master:16010/master-status">http://master:16010/master-status</a></td></tr><tr><td style="text-align:left">Mysql</td><td style="text-align:left">MySQL5.7</td><td style="text-align:left">启动：/etc/init.d/mysqld start                            登录：mysql -u root -p</td><td style="text-align:left">暂无</td></tr><tr><td style="text-align:left">jdk</td><td style="text-align:left">jdk_1.8.0_241</td><td style="text-align:left">暂无</td><td style="text-align:left">暂无</td></tr><tr><td style="text-align:left">kafka</td><td style="text-align:left">kafka_2.11-2.0.0</td><td style="text-align:left">kafka-all.sh start</td><td style="text-align:left">暂无</td></tr><tr><td style="text-align:left">hadoop-history</td><td style="text-align:left">同hadoop版本</td><td style="text-align:left">cd /export/server/hadoop-3.3.0/sbin  ./mr-jobhistory-daemon.sh start historyserver</td><td style="text-align:left"><a href="http://master:19888/">http://master:19888/</a></td></tr><tr><td style="text-align:left">python</td><td style="text-align:left">python-3.8.8</td><td style="text-align:left">python</td><td style="text-align:left">暂无</td></tr><tr><td style="text-align:left">hive</td><td style="text-align:left">hive-3.0.0</td><td style="text-align:left">hive</td><td style="text-align:left">暂无</td></tr></tbody></table></div><h1 id="网络环境配置"><a href="#网络环境配置" class="headerlink" title="网络环境配置"></a>网络环境配置</h1><ul><li><p>更改三台主机的主机名</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;master&quot;</span> &gt;/etc/hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># slave1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;slave1&quot;</span> &gt;/etc/hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># slave2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;slave2&quot;</span> &gt;/etc/hostname</span><br></pre></td></tr></table></figure></li><li><p>更改网络配置（注：三台主机都需要做）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入路径 /etc/sysconfig/network-scripts 编辑ifcfg-ens33文件</span></span><br><span class="line">vim /etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-ens33</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置ONBOOT=yes:表示启动这块网卡</span></span><br><span class="line"><span class="comment"># 配置BOOTPROTO=static：表示静态路由协议，可以保持IP固定</span></span><br><span class="line"><span class="comment"># 配置IPADDR:表示虚拟机的IP地址，这里设置的IP地址要与前面IP映射配置时的IP地址一致，否则无法通过主机名找到对应IP;</span></span><br><span class="line"><span class="comment"># 配置GATEWAY:表示虚拟机网关,通常都是将IP地址最后一个位数变为2;</span></span><br><span class="line"><span class="comment"># 配置NETMASK:表示虚拟机子网掩码,通常都是255.255.255.0;</span></span><br><span class="line"><span class="comment"># 配置DNS1:表示域名解析器，此处采用Google提供的免费DNS服务器88.8.8(也可以设置为PC端电脑对应的DNS)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">88.135</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">88.2</span></span><br><span class="line">DNS1=<span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slave1</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">88.135</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">88.2</span></span><br><span class="line">DNS1=<span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># slave2</span></span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">88.135</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span>.<span class="number">88.2</span></span><br><span class="line">DNS1=<span class="number">8.8</span>.<span class="number">8.8</span></span><br></pre></td></tr></table></figure></li><li><p>前两步骤做完后三台主机进行重启</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown <span class="literal">-r</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>测试（注：三台主机都做ping，看是否ping通外网）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com <span class="literal">-c5</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="hosts映射"><a href="#hosts映射" class="headerlink" title="hosts映射"></a>hosts映射</h1><p>打开一个hosts映射文件,为了保证后续相互关联的虚拟机能够通过主机名进行访问，根据实际需求配置对应的IP和主机名映射，分别将主机名master、slave1、slave2 与IP地址 192.168.88.134、192.168.88.135 和192.168.88.136进行了匹配映射(这里通常要根据实际需要，将要搭建的集群主机都配置主机名和IP映射)。</p><ul><li><p>编辑 /etc/hosts 文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure></li><li><p>内容修改为（注：三台主机内容一样）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.135</span>  master</span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.136</span>  slave1</span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.137</span>  slave2</span><br></pre></td></tr></table></figure></li></ul><h1 id="集群配置时间同步"><a href="#集群配置时间同步" class="headerlink" title="集群配置时间同步"></a>集群配置时间同步</h1><p>定义：网络时间服务协议（Network Time Protocol, NTP），是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器做时间同步化。</p><p>原因：时间同步服务器，顾名思义就是来同步时间的。在集群中同步时间有着十分重要的作用，负载均衡集群或高可用集群如果时间不一致，在服务器之间的数据误差就会很大，寻找数据便会成为一件棘手的事情。若是时间无法同步，那么就算是备份了数据，你也可能无法在正确的时间将正确的数据备份。那损失可就大了。</p><ul><li><p>yum 安装 ntp （注：三台主机做同样操作）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp <span class="literal">-y</span></span><br></pre></td></tr></table></figure></li><li><p>开机自启动ntp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable ntpd  &amp;&amp; systemctl start ntpd</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># systemctl enable ntpd  &amp;&amp; systemctl start ntpd</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi<span class="literal">-user</span>.target.wants/ntpd.service to /usr/lib/systemd/system/ntpd.service.</span><br></pre></td></tr></table></figure></li><li><p>授权 192.168.88.0-192.168.10.255 网段上的所有机器可以从这台机器上查询和同步时间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看ntp配置文件</span></span><br><span class="line"> <span class="built_in">ls</span> <span class="literal">-al</span> /etc | grep <span class="string">&#x27;ntp&#x27;</span></span><br><span class="line"><span class="comment"># 显示内容</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">etc</span>]<span class="comment"># ls -al /etc | grep &#x27;ntp&#x27;</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">3</span> root root       <span class="number">52</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">18</span>:<span class="number">25</span> ntp</span><br><span class="line"><span class="literal">-rw-r--r--</span>   <span class="number">1</span> root root     <span class="number">2041</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">20</span>:<span class="number">03</span> ntp.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑内容添加 restrict 192.168.88.0 mask 255.255.255.0 （注：在17行左右）</span></span><br><span class="line">vim /etc/ntp.conf </span><br><span class="line"></span><br><span class="line"><span class="number">16</span> <span class="comment"># Hosts on local network are less restricted.</span></span><br><span class="line"><span class="number">17</span> restrict <span class="number">192.168</span>.<span class="number">88.0</span> mask <span class="number">255.255</span>.<span class="number">255.0</span></span><br></pre></td></tr></table></figure></li><li><p>集群在局域网中，不使用其他互联网上的时间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 /etc/ntpd.conf 内容</span></span><br><span class="line">vim /etc/ntp.conf </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将21-24行内容注释掉（注：原来未注释）</span></span><br><span class="line"> <span class="number">21</span> <span class="comment">#server 0.centos.pool.ntp.org iburst</span></span><br><span class="line"> <span class="number">22</span> <span class="comment">#server 1.centos.pool.ntp.org iburst</span></span><br><span class="line"> <span class="number">23</span> <span class="comment">#server 2.centos.pool.ntp.org iburst</span></span><br><span class="line"> <span class="number">24</span> <span class="comment">#server 3.centos.pool.ntp.org iburst</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在25行添加 server masterIP 即为：</span></span><br><span class="line">server <span class="number">192.168</span>.<span class="number">88.135</span></span><br><span class="line">server <span class="number">127.127</span>.<span class="number">1.0</span> iburst</span><br></pre></td></tr></table></figure></li><li><p>slave1 和 slave2 相同操作</p></li><li><p>三台主机同时执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable ntpd  &amp;&amp; systemctl <span class="built_in">start</span> ntpd</span><br></pre></td></tr></table></figure></li><li><p>查看ntp端口</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">etc</span>]<span class="comment"># ss -tupln | grep &#x27;123&#x27;</span></span><br><span class="line">udp    UNCONN     <span class="number">0</span>      <span class="number">0</span>      <span class="number">192.168</span>.<span class="number">88.135</span>:<span class="number">123</span>                   *:*                   users:((<span class="string">&quot;ntpd&quot;</span>,pid=<span class="number">54823</span>,fd=<span class="number">19</span>))</span><br><span class="line">udp    UNCONN     <span class="number">0</span>      <span class="number">0</span>      <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">123</span>                   *:*                   users:((<span class="string">&quot;ntpd&quot;</span>,pid=<span class="number">54823</span>,fd=<span class="number">18</span>))</span><br><span class="line">udp    UNCONN     <span class="number">0</span>      <span class="number">0</span>         *:<span class="number">123</span>                   *:*                   users:((<span class="string">&quot;ntpd&quot;</span>,pid=<span class="number">54823</span>,fd=<span class="number">16</span>))</span><br><span class="line">udp    UNCONN     <span class="number">0</span>      <span class="number">0</span>      [<span class="type">fe80</span>::<span class="number">2832</span>:<span class="number">5</span><span class="type">f98</span>:<span class="number">5</span><span class="type">bc0</span>:<span class="type">e621</span>]%ens33:<span class="number">123</span>                [::]:*                   users:((<span class="string">&quot;ntpd&quot;</span>,pid=<span class="number">54823</span>,fd=<span class="number">23</span>))</span><br><span class="line">udp    UNCONN     <span class="number">0</span>      <span class="number">0</span>         [::<span class="number">1</span>]:<span class="number">123</span>                [::]:*                   users:((<span class="string">&quot;ntpd&quot;</span>,pid=<span class="number">54823</span>,fd=<span class="number">20</span>))</span><br><span class="line">udp    UNCONN     <span class="number">0</span>      <span class="number">0</span>      [::]:<span class="number">123</span>                [::]:*                   users:((<span class="string">&quot;ntpd&quot;</span>,pid=<span class="number">54823</span>,fd=<span class="number">17</span>))</span><br></pre></td></tr></table></figure></li><li><p>配置完成后三台主机都需要重启</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown <span class="literal">-r</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>三台主机同时执行（注：此过程需要5分钟左右）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpstat</span><br></pre></td></tr></table></figure></li></ul><h1 id="ssh免密钥登陆"><a href="#ssh免密钥登陆" class="headerlink" title="ssh免密钥登陆"></a>ssh免密钥登陆</h1><p>​    SSH免密钥登陆<strong>可以更加方便的实现不同计算机之间的连接和切换</strong></p><ul><li><p>master 生成公钥私钥 (一路回车)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span>  </span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#结果显示：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">.ssh</span>]<span class="comment"># ssh-keygen </span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:QUAgFH5KBc/Erlf1JWSBbKeEepPJqMBqpWbc02/uFj8 root@master</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">| .=++oo+.o+.     |</span></span><br><span class="line"><span class="string">| . *. ..*.o .    |</span></span><br><span class="line"><span class="string">|. o.++ *.+ o     |</span></span><br><span class="line"><span class="string">|.o ++ B ...      |</span></span><br><span class="line"><span class="string">|o.=o.o .S        |</span></span><br><span class="line"><span class="string">|.*oo.. .         |</span></span><br><span class="line"><span class="string">|+  .. . o        |</span></span><br><span class="line"><span class="string">|       + E       |</span></span><br><span class="line"><span class="string">|      =o  .      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></li><li><p>查看隐藏的 .ssh 文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">la <span class="literal">-al</span> .ssh</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果显示</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># ls -al .ssh/</span></span><br><span class="line">总用量 <span class="number">16</span></span><br><span class="line">drwx<span class="literal">------</span>  <span class="number">2</span> root root   <span class="number">80</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">52</span> .</span><br><span class="line">dr<span class="literal">-xr-x---</span>. <span class="number">4</span> root root  <span class="number">175</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">45</span> ..</span><br><span class="line"><span class="literal">-rw-------</span>  <span class="number">1</span> root root  <span class="number">393</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">52</span> authorized_keys</span><br><span class="line"><span class="literal">-rw-------</span>  <span class="number">1</span> root root <span class="number">1675</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">48</span> id_rsa</span><br><span class="line"><span class="literal">-rw-r--r--</span>  <span class="number">1</span> root root  <span class="number">393</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">48</span> id_rsa.pub</span><br><span class="line"><span class="literal">-rw-r--r--</span>  <span class="number">1</span> root root  <span class="number">366</span> <span class="number">3</span>月  <span class="number">10</span> <span class="number">21</span>:<span class="number">54</span> known_hosts</span><br></pre></td></tr></table></figure></li><li><p>master 配置免密登录到master slave1 slave2</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-copy-id</span> master</span><br><span class="line">ssh<span class="literal">-copy-id</span> slave1</span><br><span class="line">ssh<span class="literal">-copy-id</span> slave2</span><br></pre></td></tr></table></figure></li></ul><h1 id="安装配置-jdk"><a href="#安装配置-jdk" class="headerlink" title="安装配置 jdk"></a>安装配置 jdk</h1><ul><li><p>编译环境软件安装目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> /export/server</span><br></pre></td></tr></table></figure></li><li><p>JDK 1.8安装  上传 jdk-8u241-linux-x64.tar.gz到/export/server/目录下 并解压文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> jdk<span class="literal">-8u241-linux-x64</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/export/server/jdk1.<span class="number">8.0</span>_241</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">export CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>查看 java 版本号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">[root@master jdk1.8.0_241]# java -version</span><br><span class="line">java version &quot;1.8.0_241&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_241-b07)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)</span><br></pre></td></tr></table></figure></li><li><p>master 节点将 java 传输到 slave1 和 slave2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /export/server/jdk1.8.0_241/ root@slave1:/export/server/</span><br><span class="line">scp -r /export/server/jdk1.8.0_241/ root@slave2:/export/server/</span><br></pre></td></tr></table></figure></li><li><p>配置 slave1 和 slave2 的 jdk 环境变量（注：和上方 master 的配置方法一样）</p></li><li><p>在 master slave1 和slave2 创建软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line">ln <span class="literal">-s</span> jdk1.<span class="number">8.0</span>_241/ jdk</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li></ul><h1 id="zookeeper安装配置"><a href="#zookeeper安装配置" class="headerlink" title="zookeeper安装配置"></a>zookeeper安装配置</h1><ul><li><p>配置主机名和IP的映射关系，修改 /etc/hosts 文件，添加 master.root   slave1.root  slave2.root</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果显示</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::<span class="number">1</span>         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.135</span>  master  master.root</span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.136</span>  slave1  slave1.root</span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.137</span>  slave2  slave2.root</span><br></pre></td></tr></table></figure></li><li><p>zookeeper安装  上传 zookeeper-3.4.10.tar.gz到/export/server/目录下 并解压文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/</span><br><span class="line"></span><br><span class="line">tar <span class="literal">-zxvf</span> zookeeper<span class="literal">-3</span>.<span class="number">4.10</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>在 /export/server 目录下创建软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line">ln <span class="literal">-s</span> zookeeper<span class="literal">-3</span>.<span class="number">4.10</span>/ zookeeper</span><br></pre></td></tr></table></figure></li><li><p>进入   /export/server/zookeeper/conf/  将 zoo_sample.cfg 文件复制为新文件 zoo.cfg </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/zookeeper/conf/ </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></li><li><p>接上步给 zoo.cfg  添加内容 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Zookeeper的数据存放目录</span></span><br><span class="line"></span><br><span class="line">dataDir=/export/server/zookeeper/zkdatas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留多少个快照</span></span><br><span class="line">autopurge.snapRetainCount=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志多少小时清理一次</span></span><br><span class="line">autopurge.purgeInterval=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群中服务器地址</span></span><br><span class="line">server.<span class="number">1</span>=master:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">server.<span class="number">2</span>=slave1:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">server.<span class="number">3</span>=slave2:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure></li><li><p>进入 /export/server/zookeeper/zkdatas 目录在此目录下创建 myid 文件，将 1 写入进去</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/zookeeper/zkdata</span><br><span class="line"></span><br><span class="line">touch myid</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;1&#x27;</span> &gt; myid</span><br></pre></td></tr></table></figure></li><li><p>将 master 节点中 /export/server/zookeeper-3.4.10 路径下内容推送给slave1 和 slave2</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="literal">-r</span> /export/server/zookeeper<span class="literal">-3</span>.<span class="number">4.10</span>/ slave1:<span class="variable">$PWD</span></span><br><span class="line"></span><br><span class="line">scp <span class="literal">-r</span> /export/server/zookeeper<span class="literal">-3</span>.<span class="number">4.10</span>/ slave2:<span class="variable">$PWD</span></span><br></pre></td></tr></table></figure></li><li><p>推送成功后，分别在 slave1 和 slave2 上创建软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> zookeeper<span class="literal">-3</span>.<span class="number">4.10</span>/ zookeeper</span><br></pre></td></tr></table></figure></li><li><p>接上步推送完成后将 slave1 和 slave2 的 /export/server/zookeeper/zkdatas/ 文件夹下的 myid 中的内容分别改为 2 和 3</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/zookeeper/zkdatas/</span><br><span class="line">结果显示：</span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> <span class="type">zkdatas</span>]<span class="comment"># vim myid </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> <span class="type">zkdatas</span>]<span class="comment"># more myid </span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> <span class="type">zkdatas</span>]<span class="comment"># vim myid </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> <span class="type">zkdatas</span>]<span class="comment"># more myid </span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>配置zookeeper的环境变量（注：三台主机都需要配置）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper 环境变量</span></span><br><span class="line">export ZOOKEEPER_HOME=/export/server/zookeeper</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>进入 /export/server/zookeeper-3.4.10/bin 目录下启动 zkServer.sh 脚本 （注：三台都需要做）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /export/server/zookeeper<span class="literal">-3</span>.<span class="number">4.10</span>/bin </span><br><span class="line"></span><br><span class="line">zkServer.sh <span class="built_in">start</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">bin</span>]<span class="comment"># ./zkServer.sh start</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line"><span class="keyword">Using</span> config: /export/server/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure></li><li><p>查看 zookeeper 的状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># zkServer.sh  status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line"><span class="keyword">Using</span> config: /export/server/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> <span class="type">server</span>]<span class="comment"># zkServer.sh  status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line"><span class="keyword">Using</span> config: /export/server/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> <span class="type">conf</span>]<span class="comment"># zkServer.sh  status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line"><span class="keyword">Using</span> config: /export/server/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># jps</span></span><br><span class="line"><span class="number">125348</span> QuorumPeerMain</span><br><span class="line"><span class="number">16311</span> Jps</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave1</span> <span class="type">server</span>]<span class="comment"># jps</span></span><br><span class="line"><span class="number">126688</span> QuorumPeerMain</span><br><span class="line"><span class="number">17685</span> Jps</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">slave2</span> <span class="type">conf</span>]<span class="comment"># jps</span></span><br><span class="line"><span class="number">126733</span> QuorumPeerMain</span><br><span class="line"><span class="number">17727</span> Jps</span><br></pre></td></tr></table></figure></li><li><p>脚本一键启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">vim zkServer.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span><span class="comment"># -eq 0 ] ;</span></span><br><span class="line"><span class="type">then</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;please input param:start stop&quot;</span></span><br><span class="line"><span class="type">else</span></span><br><span class="line"><span class="type">if</span> [ <span class="variable">$1</span> = <span class="type">start</span>  ] ;<span class="type">then</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;1&#125;ing master&quot;</span></span><br><span class="line"><span class="type">ssh</span> <span class="type">master</span> <span class="string">&quot;source /etc/profile;/export/server/zookeeper/bin/zkServer.sh start&quot;</span></span><br><span class="line"><span class="type">for</span> <span class="type">i</span> <span class="type">in</span> &#123;<span class="number">1</span><span class="type">..2</span>&#125;</span><br><span class="line"><span class="type">do</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;1&#125;ping slave<span class="variable">$</span>&#123;i&#125;&quot;</span></span><br><span class="line"><span class="type">ssh</span> <span class="type">slave</span><span class="variable">$</span>&#123;<span class="type">i</span>&#125; <span class="string">&quot;source /etc/profile;/export/server/zookeeper/bin/zkServer.sh start&quot;</span></span><br><span class="line"><span class="type">done</span></span><br><span class="line"><span class="type">fi</span></span><br><span class="line"><span class="type">if</span> [ <span class="variable">$1</span> = <span class="type">stop</span> ];<span class="type">then</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;1&#125;ping master &quot;</span></span><br><span class="line"><span class="type">ssh</span> <span class="type">master</span> <span class="string">&quot;source /etc/profile;/export/server/zookeeper/bin/zkServer.sh stop&quot;</span></span><br><span class="line"><span class="type">for</span> <span class="type">i</span> <span class="type">in</span> &#123;<span class="number">1</span><span class="type">..2</span>&#125;</span><br><span class="line"><span class="type">do</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;1&#125;ping slave<span class="variable">$</span>&#123;i&#125;&quot;</span></span><br><span class="line"><span class="type">ssh</span> <span class="type">slave</span><span class="variable">$</span>&#123;<span class="type">i</span>&#125; <span class="string">&quot;source /etc/profile;/export/server/zookeeper/bin/zkServer.sh stop&quot;</span></span><br><span class="line"><span class="type">done</span></span><br><span class="line"><span class="type">fi</span></span><br><span class="line"><span class="type">if</span> [ <span class="variable">$1</span> = <span class="type">status</span> ];<span class="type">then</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;1&#125;ing master&quot;</span></span><br><span class="line"><span class="type">ssh</span> <span class="type">master</span> <span class="string">&quot;source /etc/profile;/export/server/zookeeper/bin/zkServer.sh status&quot;</span></span><br><span class="line"><span class="type">for</span> <span class="type">i</span> <span class="type">in</span> &#123;<span class="number">1</span><span class="type">..2</span>&#125;</span><br><span class="line"><span class="type">do</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;1&#125;ping slave<span class="variable">$</span>&#123;i&#125;&quot;</span></span><br><span class="line"><span class="type">ssh</span> <span class="type">slave</span><span class="variable">$</span>&#123;<span class="type">i</span>&#125; <span class="string">&quot;source /etc/profile;/export/server/zookeeper/bin/zkServer.sh status&quot;</span></span><br><span class="line"><span class="type">done</span></span><br><span class="line"><span class="type">fi</span></span><br><span class="line"><span class="type">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件放在 /bin 目录下</span></span><br><span class="line">chmod +x zkServer<span class="literal">-all</span>.sh &amp;&amp; zkServer<span class="literal">-all</span>.sh</span><br></pre></td></tr></table></figure></li></ul><h1 id="Hadoop-安装配置"><a href="#Hadoop-安装配置" class="headerlink" title="Hadoop 安装配置"></a>Hadoop 安装配置</h1><ul><li><p>把 hadoop-3.3.0-Centos7-64-with-snappy.tar.gz  上传到 /export/server 并解压文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> hadoop<span class="literal">-3</span>.<span class="number">3.0</span><span class="literal">-Centos7-64-with-snappy</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件(进入路径 /export/server/hadoop-3.3.0/etc/hadoop)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/hadoop-3.3.0/etc/hadoop</span><br></pre></td></tr></table></figure><ul><li><p>hadoop-env.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文件最后添加</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk1.<span class="number">8.0</span>_241</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root </span><br></pre></td></tr></table></figure></li></ul></li><li><p>core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置默认使用的文件系统 Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置Hadoop本地保存数据路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/export/data/hadoop-3.3.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置HDFS web UI用户身份 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 整合hive 用户代理设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 文件系统垃圾桶保存时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1440<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置SNN进程运行机器位置信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>slave1:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mapred-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置MR程序默认运行模式： yarn集群模式 local本地模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MR程序历史服务地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- MR程序历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置YARN集群主角色运行机器位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否将对容器实施物理内存限制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否将对容器实施虚拟内存限制。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启日志聚集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置yarn历史服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://master:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 历史日志保存的时间 7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>workers</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li><li><p>分发同步hadoop安装包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line">scp <span class="literal">-r</span> hadoop<span class="literal">-3</span>.<span class="number">3.0</span> root@slave1:<span class="variable">$PWD</span></span><br><span class="line">scp <span class="literal">-r</span> hadoop<span class="literal">-3</span>.<span class="number">3.0</span> root@slave2:<span class="variable">$PWD</span></span><br></pre></td></tr></table></figure></li><li><p>将hadoop添加到环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop<span class="literal">-3</span>.<span class="number">3.0</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p><strong>Hadoop集群启动</strong></p><ul><li><p>格式化namenode（只有首次启动需要格式化）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode <span class="literal">-format</span></span><br></pre></td></tr></table></figure></li><li><p>脚本一键启动</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># start-dfs.sh </span></span><br><span class="line">Starting namenodes on [<span class="type">master</span>]</span><br><span class="line">上一次登录：五 <span class="number">3</span>月 <span class="number">11</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">24</span> CST <span class="number">2022</span>pts/<span class="number">0</span> 上</span><br><span class="line">Starting datanodes</span><br><span class="line">上一次登录：五 <span class="number">3</span>月 <span class="number">11</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">32</span> CST <span class="number">2022</span>pts/<span class="number">0</span> 上</span><br><span class="line">Starting secondary namenodes [<span class="type">slave1</span>]</span><br><span class="line">上一次登录：五 <span class="number">3</span>月 <span class="number">11</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">35</span> CST <span class="number">2022</span>pts/<span class="number">0</span> 上</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># start-yarn.sh </span></span><br><span class="line">Starting resourcemanager</span><br><span class="line">上一次登录：五 <span class="number">3</span>月 <span class="number">11</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">41</span> CST <span class="number">2022</span>pts/<span class="number">0</span> 上</span><br><span class="line">Starting nodemanagers</span><br><span class="line">上一次登录：五 <span class="number">3</span>月 <span class="number">11</span> <span class="number">21</span>:<span class="number">27</span>:<span class="number">51</span> CST <span class="number">2022</span>pts/<span class="number">0</span> 上</span><br></pre></td></tr></table></figure></li><li><p>启动后 输入 jps 查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# jps</span><br><span class="line">127729 NameNode</span><br><span class="line">127937 DataNode</span><br><span class="line">14105 Jps</span><br><span class="line">128812 NodeManager</span><br><span class="line">128591 ResourceManager</span><br><span class="line"></span><br><span class="line">[root@slave1 hadoop]# jps</span><br><span class="line">121889 NodeManager</span><br><span class="line">121559 SecondaryNameNode</span><br><span class="line">7014 Jps</span><br><span class="line">121369 DataNode</span><br><span class="line"></span><br><span class="line">[root@slave2 hadoop]# jps</span><br><span class="line">6673 Jps</span><br><span class="line">121543 NodeManager</span><br><span class="line">121098 DataNode</span><br></pre></td></tr></table></figure></li><li><p>WEB页面</p></li><li><p>HDFS集群：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:9870/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G8T5C.png" alt="image-20220405131530881"></p></li></ul></li></ul><ul><li><p>YARN集群：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:<span class="number">8088</span>/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G83vU.png" alt="image-20220405131613474"></p></li></ul><p>​    </p><h1 id="Spark安装配置"><a href="#Spark安装配置" class="headerlink" title="Spark安装配置"></a>Spark安装配置</h1><p>Spark是专为大规模数据处理而设计的快速通用的计算引擎，其提供了一个全面、统一的框架用于管理各种不同性质的数据集和数据源的大数据处理的需求，大数据开发需掌握Spark基础、SparkJob、Spark RDD、spark job部署与资源分配、Spark shuffle、Spark内存管理、Spark广播变量、Spark SQL、Spark Streaming以及Spark ML等相关知识。</p><h2 id="Spark-local模式"><a href="#Spark-local模式" class="headerlink" title="Spark-local模式"></a>Spark-local模式</h2><p>本地模式(单机) 本地模式就是以一个独立的进程,通过其内部的多个线程来模拟整个Spark运行时环境</p><ul><li><p>Anaconda On Linux 安装 (单台服务器脚本安装)</p></li><li><p>安装上传安装包:  资料中提供的Anaconda3-2021.05-Linux-x86_64.sh文件到Linux服务器上安装位置在 /export/server:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行文件</span></span><br><span class="line">sh Anaconda3<span class="literal">-2021</span>.<span class="number">05</span><span class="literal">-Linux-x86_64</span>.sh</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">过程显示：</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 出现内容选 yes</span></span><br><span class="line">Please answer <span class="string">&#x27;yes&#x27;</span> or <span class="string">&#x27;no&#x27;</span>:<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; yes</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 出现添加路径：/export/server/anaconda3</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">[/root/anaconda3] &gt;&gt;&gt; /export/server/anaconda3</span></span><br><span class="line"><span class="string">PREFIX=/export/server/anaconda3</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></li><li><p>安装完成后, 退出终端， 重新进来:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line"># 看到这个Base开头表明安装好了.base是默认的虚拟环境.</span><br><span class="line">Last login: Tue Mar 15 15:28:59 2022 from 192.168.88.1</span><br><span class="line">(base) [root@master ~]# </span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境 pyspark 基于 python3.8</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create <span class="literal">-n</span> pyspark python=<span class="number">3.8</span> </span><br></pre></td></tr></table></figure></li><li><p>切换到虚拟环境内 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pyspark  </span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># conda activate pyspark  </span></span><br><span class="line">(pyspark) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>在虚拟环境内安装包 （有WARNING不用管）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyhive pyspark jieba <span class="literal">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li><p>spark 安装</p></li><li><p>将文件上传到 /export/server 里面 ，解压</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar <span class="literal">-zxvf</span> spark<span class="literal">-3</span>.<span class="number">2.0</span><span class="literal">-bin-hadoop3</span>.<span class="number">2</span>.tgz <span class="literal">-C</span> /export/server/</span><br></pre></td></tr></table></figure></li><li><p>建立软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> /export/server/spark<span class="literal">-3</span>.<span class="number">2.0</span><span class="literal">-bin-hadoop3</span>.<span class="number">2</span> /export/server/spark</span><br></pre></td></tr></table></figure></li></ul><ul><li>添加环境变量<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SPARK_HOME: 表示Spark安装路径在哪里</span><br><span class="line">PYSPARK_PYTHON: 表示Spark想运行Python程序, 那么去哪里找python执行器</span><br><span class="line">JAVA_HOME: 告知Spark Java在哪里</span><br><span class="line">HADOOP_CONF_DIR: 告知Spark Hadoop的配置文件在哪里</span><br><span class="line">HADOOP_HOME: 告知Spark  Hadoop安装在哪里</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>修改环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">添加内容：</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line">注：此部分之前配置过，此部分不需要在配置</span><br><span class="line"><span class="comment">#JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk1.<span class="number">8.0</span>_241  </span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin  </span><br><span class="line">export CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"></span><br><span class="line"><span class="comment">#HADOOP_HOME</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop<span class="literal">-3</span>.<span class="number">3.0</span> </span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment">#ZOOKEEPER_HOME</span></span><br><span class="line">export ZOOKEEPER_HOME=/export/server/zookeeper</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br><span class="line">.....</span><br><span class="line"><span class="comment"># 将以下部分添加进去</span></span><br><span class="line"><span class="comment">#SPARK_HOME</span></span><br><span class="line">export SPARK_HOME=/export/server/spark</span><br><span class="line"></span><br><span class="line"><span class="comment">#HADOOP_CONF_DIR</span></span><br><span class="line">export HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment">#PYSPARK_PYTHON</span></span><br><span class="line">export PYSPARK_PYTHON=/export/server/anaconda3/envs/pyspark/bin/python</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">内容添加进去：</span><br><span class="line"><span class="comment">#JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/export/server/jdk1.<span class="number">8.0</span>_241  </span><br><span class="line"><span class="comment">#PYSPARK_PYTHON</span></span><br><span class="line">export PYSPARK_PYTHON=/export/server/anaconda3/envs/pyspark/bin/python</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量文件</p></li></ul><ul><li><p>进入 /export/server/anaconda3/envs/pyspark/bin/ 文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/anaconda3/envs/pyspark/bin/</span><br></pre></td></tr></table></figure></li><li><p>开启</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./pyspark</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">bin</span>]<span class="comment"># ./pyspark</span></span><br><span class="line">Python <span class="number">3.8</span>.<span class="number">12</span> (default, Oct <span class="number">12</span> <span class="number">2021</span>, <span class="number">13</span>:<span class="number">49</span>:<span class="number">34</span>) </span><br><span class="line">[<span class="type">GCC</span> <span class="number">7.5</span><span class="type">.0</span>] :: Anaconda, Inc. on linux</span><br><span class="line"><span class="built_in">Type</span> <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">Setting default log level to <span class="string">&quot;WARN&quot;</span>.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). <span class="keyword">For</span> SparkR, use setLogLevel(newLevel).</span><br><span class="line"><span class="number">2022</span><span class="literal">-03-15</span> <span class="number">20</span>:<span class="number">37</span>:<span class="number">04</span>,<span class="number">612</span> WARN util.NativeCodeLoader: Unable to load native<span class="literal">-hadoop</span> library <span class="keyword">for</span> your platform... <span class="keyword">using</span> builtin-java classes where applicable</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  <span class="string">&#x27;_/</span></span><br><span class="line"><span class="string">   /__ / .__/\_,_/_/ /_/\_\   version 3.2.0</span></span><br><span class="line"><span class="string">      /_/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Using Python version 3.8.12 (default, Oct 12 2021 13:49:34)</span></span><br><span class="line"><span class="string">Spark context Web UI available at http://master:4040</span></span><br><span class="line"><span class="string">Spark context available as &#x27;</span><span class="built_in">sc</span><span class="string">&#x27; (master = local[*], app id = local-1647347826262).</span></span><br><span class="line"><span class="string">SparkSession available as &#x27;</span>spark<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure></li><li><p>查看WebUI界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问：</span><br><span class="line"></span><br><span class="line">http://master:4040/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G8bwB.png" alt="image-20220405131946528"></p></li><li><p>退出</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spark-Standalone模式"><a href="#Spark-Standalone模式" class="headerlink" title="Spark-Standalone模式"></a>Spark-Standalone模式</h2><p>Standalone模式(集群) Spark中的各个角色以独立进程的形式存在,并组成Spark集群环境</p><ul><li><p>Anaconda On Linux 安装 (单台服务器脚本安装 注：在 slave1 和 slave2 上部署)</p></li><li><p>安装上传安装包:  资料中提供的Anaconda3-2021.05-Linux-x86_64.sh文件到Linux服务器上安装位置在 /export/server:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行文件</span></span><br><span class="line">sh Anaconda3<span class="literal">-2021</span>.<span class="number">05</span><span class="literal">-Linux-x86_64</span>.sh</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">过程显示：</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 出现内容选 yes</span></span><br><span class="line">Please answer <span class="string">&#x27;yes&#x27;</span> or <span class="string">&#x27;no&#x27;</span>:<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; yes</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 出现添加路径：/export/server/anaconda3</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">[/root/anaconda3] &gt;&gt;&gt; /export/server/anaconda3</span></span><br><span class="line"><span class="string">PREFIX=/export/server/anaconda3</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure></li><li><p>安装完成后, 退出终端， 重新进来:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line"><span class="comment"># 看到这个Base开头表明安装好了.base是默认的虚拟环境.</span></span><br><span class="line">Last login: Tue Mar <span class="number">15</span> <span class="number">15</span>:<span class="number">28</span>:<span class="number">59</span> <span class="number">2022</span> from <span class="number">192.168</span>.<span class="number">88.1</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>在 master 节点上把  ./bashrc 和  profile 分发给 slave1 和 slave2</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分发 .bashrc :</span></span><br><span class="line">scp ~/.bashrc root@slave1:~/</span><br><span class="line">scp ~/.bashrc root@slave2:~/</span><br><span class="line"></span><br><span class="line"><span class="comment">#分发 profile :</span></span><br><span class="line">scp /etc/profile/ root@slave1:/etc/</span><br><span class="line">scp /etc/profile/ root@slave2:/etc/</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境 pyspark 基于 python3.8</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create <span class="literal">-n</span> pyspark python=<span class="number">3.8</span> </span><br></pre></td></tr></table></figure></li><li><p>切换到虚拟环境内 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate pyspark  </span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># conda activate pyspark  </span></span><br><span class="line">(pyspark) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>在虚拟环境内安装包 （有WARNING不用管）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyhive pyspark jieba <span class="literal">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li><p>master 节点节点进入 /export/server/spark/conf 修改以下配置文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/spark/conf</span><br></pre></td></tr></table></figure></li><li><p>将文件 workers.template 改名为 workers，并配置文件内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> workers.template workers</span><br><span class="line"></span><br><span class="line">vim workers</span><br><span class="line"></span><br><span class="line"><span class="comment"># localhost删除，内容追加文末：</span></span><br><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line"><span class="comment"># 功能: 这个文件就是指示了  当前SparkStandAlone环境下, 有哪些worker</span></span><br></pre></td></tr></table></figure></li><li><p>将文件 spark-env.sh.template 改名为 spark-env.sh，并配置相关内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> spark<span class="literal">-env</span>.sh.template spark<span class="literal">-env</span>.sh</span><br><span class="line"></span><br><span class="line">vim spark<span class="literal">-env</span>.sh</span><br><span class="line"></span><br><span class="line">文末追加内容：</span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置JAVA安装目录</span></span><br><span class="line">JAVA_HOME=/export/server/jdk</span><br><span class="line"></span><br><span class="line"><span class="comment">## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span><br><span class="line">HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment">## 指定spark老大Master的IP和提交任务的通信端口</span></span><br><span class="line"><span class="comment"># 告知Spark的master运行在哪个机器上</span></span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line"><span class="comment"># 告知sparkmaster的通讯端口</span></span><br><span class="line">export SPARK_MASTER_PORT=<span class="number">7077</span></span><br><span class="line"><span class="comment"># 告知spark master的 webui端口</span></span><br><span class="line">SPARK_MASTER_WEBUI_PORT=<span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># worker cpu可用核数</span></span><br><span class="line">SPARK_WORKER_CORES=<span class="number">1</span></span><br><span class="line"><span class="comment"># worker可用内存</span></span><br><span class="line">SPARK_WORKER_MEMORY=<span class="number">1</span>g</span><br><span class="line"><span class="comment"># worker的工作通讯地址</span></span><br><span class="line">SPARK_WORKER_PORT=<span class="number">7078</span></span><br><span class="line"><span class="comment"># worker的 webui地址</span></span><br><span class="line">SPARK_WORKER_WEBUI_PORT=<span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 设置历史服务器</span></span><br><span class="line"><span class="comment"># 配置的意思是  将spark程序运行的历史日志 存到hdfs的/sparklog文件夹中</span></span><br><span class="line">SPARK_HISTORY_OPTS=<span class="string">&quot;-Dspark.history.fs.logDirectory=hdfs://master:8020/sparklog/ -Dspark.history.fs.cleaner.enabled=true&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>开启 hadoop 的 hdfs 和 yarn 集群</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start-dfs</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">start-yarn</span>.sh </span><br></pre></td></tr></table></figure></li><li><p>在HDFS上创建程序运行历史记录存放的文件夹，同样 conf 文件目录下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir /sparklog</span><br><span class="line"></span><br><span class="line">hadoop fs -chmod 777 /sparklog</span><br></pre></td></tr></table></figure></li><li><p>将 spark-defaults.conf.template  改为 spark-defaults.conf 并做相关配置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> spark<span class="literal">-defaults</span>.conf.template spark<span class="literal">-defaults</span>.conf</span><br><span class="line"></span><br><span class="line">vim spark<span class="literal">-defaults</span>.conf</span><br><span class="line"></span><br><span class="line">文末追加内容为：</span><br><span class="line"><span class="comment"># 开启spark的日期记录功能</span></span><br><span class="line">spark.eventLog.enabled true</span><br><span class="line"><span class="comment"># 设置spark日志记录的路径</span></span><br><span class="line">spark.eventLog.dir hdfs://master:<span class="number">8020</span>/sparklog/ </span><br><span class="line"><span class="comment"># 设置spark日志是否启动压缩</span></span><br><span class="line">spark.eventLog.compress true</span><br></pre></td></tr></table></figure></li><li><p>配置 log4j.properties 文件 将文件第 19 行的 log4j.rootCategory=INFO, console 改为 log4j.rootCategory=WARN, console （即将INFO 改为 WARN  目的：输出日志, 设置级别为WARN 只输出警告和错误日志，INFO 则为输出所有信息，多数为无用信息）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> log4j.properties.template log4j.properties</span><br><span class="line"></span><br><span class="line">vim log4j.properties</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">...</span><br><span class="line"><span class="number">18</span> <span class="comment"># Set everything to be logged to the console</span></span><br><span class="line"><span class="number">19</span> log4j.rootCategory=WARN, console</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li><li><p>master 节点分发 spark 安装文件夹  到 slave1 和 slave2 上</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/</span><br><span class="line"></span><br><span class="line">scp <span class="literal">-r</span> /export/server/spark<span class="literal">-3</span>.<span class="number">2.0</span><span class="literal">-bin-hadoop3</span>.<span class="number">2</span>/ slave1:<span class="variable">$PWD</span></span><br><span class="line"></span><br><span class="line">scp <span class="literal">-r</span> /export/server/spark<span class="literal">-3</span>.<span class="number">2.0</span><span class="literal">-bin-hadoop3</span>.<span class="number">2</span>/ slave2:<span class="variable">$PWD</span></span><br></pre></td></tr></table></figure></li><li><p>在slave1 和 slave2 上做软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> /export/server/spark<span class="literal">-3</span>.<span class="number">2.0</span><span class="literal">-bin-hadoop3</span>.<span class="number">2</span> /export/server/spark</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>进入 /export/server/spark/sbin 文件目录下 启动 start-history-server.sh</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/spark/sbin </span><br><span class="line"></span><br><span class="line">./<span class="built_in">start-history</span><span class="literal">-server</span>.sh</span><br></pre></td></tr></table></figure></li><li><p>访问 WebUI 界面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问：</span><br><span class="line"></span><br><span class="line">http://master:<span class="number">18080</span>/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G8wgR.png" alt="image-20220405132216135"></p></li><li><p>启动Spark的Master和Worker进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动全部master和worker</span></span><br><span class="line">sbin/<span class="built_in">start-all</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者可以一个个启动:</span></span><br><span class="line"><span class="comment"># 启动当前机器的master</span></span><br><span class="line">sbin/<span class="built_in">start-master</span>.sh</span><br><span class="line"><span class="comment"># 启动当前机器的worker</span></span><br><span class="line">sbin/<span class="built_in">start-worker</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止全部</span></span><br><span class="line">sbin/<span class="built_in">stop-all</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止当前机器的master</span></span><br><span class="line">sbin/<span class="built_in">stop-master</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止当前机器的worker</span></span><br><span class="line">sbin/<span class="built_in">stop-worker</span>.sh</span><br></pre></td></tr></table></figure></li><li><p>访问 WebUI界面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问：</span><br><span class="line"></span><br><span class="line">http://master:<span class="number">8080</span>/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G8a66.png" alt="image-20220405132434960"></p></li></ul><h2 id="Spark-Standalone-HA模式"><a href="#Spark-Standalone-HA模式" class="headerlink" title="Spark-Standalone-HA模式"></a>Spark-Standalone-HA模式</h2><p>Spark Standalone集群是Master-Slaves架构的集群模式,和大部分的Master-Slaves结构集群一样,存在着Master 单点故障(SPOF)的问题。简单理解为，spark-Standalone 模式下为 master 节点控制其他节点，当 master 节点出现故障时，集群就不可用了。                        spark-Standalone-HA 模式下 master 节点不固定，当一个宕机时，立即换另一台为 master 保障不出现故障。</p><ul><li><p>此处因为先前配置时的 zookeeper 版本和 spark 版本不太兼容，导致此模式有故障，需要重新下载配置新的版本的 zookeeper</p></li><li><p>配置之前需要删除三台主机的 旧版 zookeeper 以及 对应的软连接</p></li><li><p>在 master 节点上重新进行前面配置的 zookeeper 操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.上传apache<span class="literal">-zookeeper-3</span>.<span class="number">7.0</span><span class="literal">-bin</span>.tar.gz 到/export/server/目录下 并解压文件</span><br><span class="line"><span class="number">2</span>.在 /export/server 目录下创建软连接</span><br><span class="line"><span class="number">3</span>.进入   /export/server/zookeeper/conf/  将 zoo_sample.cfg 文件复制为新文件 zoo.cfg </span><br><span class="line"><span class="number">4</span>.接上步给 zoo.cfg  添加内容 </span><br><span class="line"><span class="number">5</span>.进入 /export/server/zookeeper/zkdatas 目录在此目录下创建 myid 文件，将 <span class="number">1</span> 写入进去</span><br><span class="line"><span class="number">6</span>.将 master 节点中 /export/server/zookeeper<span class="literal">-3</span>.<span class="number">7.0</span> 路径下内容推送给slave1 和 slave2</span><br><span class="line"><span class="number">7</span>.推送成功后，分别在 slave1 和 slave2 上创建软连接</span><br><span class="line"><span class="number">8</span>.接上步推送完成后将 slave1 和 slave2 的 /export/server/zookeeper/zkdatas/文件夹下的 myid 中的内容分别改为 <span class="number">2</span> 和 <span class="number">3</span></span><br><span class="line">配置环境变量：</span><br><span class="line">因先前配置 zookeeper 时候创建过软连接且以 ’zookeeper‘ 为路径，所以不用配置环境变量，此处也是创建软连接的方便之处. </span><br></pre></td></tr></table></figure></li><li><p>进入  /export/server/spark/conf  文件夹 修改 spark-env.sh 文件内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/spark/conf </span><br><span class="line"></span><br><span class="line">vim spark<span class="literal">-env</span>.sh</span><br></pre></td></tr></table></figure><ul><li><p>为 83 行内容加上注释，此部分原为指定 某台主机 做 master ，加上注释后即为 任何主机都可以做 master</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">......</span><br><span class="line"> <span class="number">82</span> <span class="comment"># 告知Spark的master运行在哪个机器上</span></span><br><span class="line"> <span class="number">83</span> <span class="comment"># export SPARK_MASTER_HOST=master</span></span><br><span class="line">.........</span><br></pre></td></tr></table></figure></li><li><p>文末添加内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SPARK_DAEMON_JAVA_OPTS=<span class="string">&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=master:2181,slave1:2181,slave2:2181 -Dspark.deploy.zookeeper.dir=/spark-ha&quot;</span></span><br><span class="line"><span class="comment"># spark.deploy.recoveryMode 指定HA模式 基于Zookeeper实现</span></span><br><span class="line"><span class="comment"># 指定Zookeeper的连接地址</span></span><br><span class="line"><span class="comment"># 指定在Zookeeper中注册临时节点的路径</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>分发 spark-env.sh 到 salve1 和 slave2 上</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp spark<span class="literal">-env</span>.sh slave1:/export/server/spark/conf/</span><br><span class="line"></span><br><span class="line">scp spark<span class="literal">-env</span>.sh slave2:/export/server/spark/conf/</span><br></pre></td></tr></table></figure></li><li><p>启动之前确保 Zookeeper 和 HDFS 均已经启动</p></li><li><p>启动集群:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 master 上 启动一个master 和全部worker</span></span><br><span class="line">/export/server/spark/sbin/<span class="built_in">start-all</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意, 下面命令在 slave1 上执行 启动 slave1 上的 master 做备用 master</span></span><br><span class="line">/export/server/spark/sbin/<span class="built_in">start-master</span>.sh</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># jps</span></span><br><span class="line"><span class="number">37328</span> DataNode</span><br><span class="line"><span class="number">41589</span> Master</span><br><span class="line"><span class="number">35798</span> QuorumPeerMain</span><br><span class="line"><span class="number">38521</span> ResourceManager</span><br><span class="line"><span class="number">46281</span> Jps</span><br><span class="line"><span class="number">38907</span> NodeManager</span><br><span class="line"><span class="number">41821</span> Worker</span><br><span class="line"><span class="number">36958</span> NameNode</span><br><span class="line"></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> <span class="type">sbin</span>]<span class="comment"># jps</span></span><br><span class="line"><span class="number">36631</span> DataNode</span><br><span class="line"><span class="number">48135</span> Master</span><br><span class="line"><span class="number">35385</span> QuorumPeerMain</span><br><span class="line"><span class="number">37961</span> NodeManager</span><br><span class="line"><span class="number">40970</span> Worker</span><br><span class="line"><span class="number">48282</span> Jps</span><br><span class="line"><span class="number">37276</span> SecondaryNameNode</span><br></pre></td></tr></table></figure></li><li><p>访问 WebUI 界面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:8081/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G81HI.png" alt="image-20220403195207486"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://slave1:8082/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G89Fj.png" alt="image-20220403195512439"></p></li><li><p>此时 kill 掉 master 上的 master 假设 master 主机宕机掉</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master主机 master 的进程号</span></span><br><span class="line"><span class="built_in">kill</span> <span class="literal">-9</span> <span class="number">41589</span></span><br><span class="line"></span><br><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># jps</span></span><br><span class="line"><span class="number">37328</span> DataNode</span><br><span class="line"><span class="number">90336</span> Jps</span><br><span class="line"><span class="number">35798</span> QuorumPeerMain</span><br><span class="line"><span class="number">38521</span> ResourceManager</span><br><span class="line"><span class="number">38907</span> NodeManager</span><br><span class="line"><span class="number">41821</span> Worker</span><br><span class="line"><span class="number">36958</span> NameNode</span><br></pre></td></tr></table></figure></li><li><p>访问 slave1 的 WebUI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://slave1:8082/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G8K5r.png" alt="image-20220403203828713"></p></li><li><p>进行主备切换的测试</p></li><li><p>提交一个 spark 任务到当前 活跃的 master上 :</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/export/server/spark/bin/spark<span class="literal">-submit</span> <span class="literal">--master</span> spark://master:<span class="number">7077</span> /export/server/spark/examples/src/main/python/pi.py <span class="number">1000</span></span><br></pre></td></tr></table></figure></li><li><p>复制标签 kill 掉 master 的 进程号</p></li><li><p>再次访问 master 的 WebUI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:8081/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页访问不了！</span><br></pre></td></tr></table></figure></li><li><p>再次访问 slave1 的 WebUI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://slave1:8082/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G878p.png" alt="image-20220403204737370"></p></li><li><p>可以看到当前活跃的 master 提示信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@master ~]# /export/server/spark/bin/spark-submit --master spark://master:7077 /export/server/spark/examples/src/main/python/pi.py 1000</span><br><span class="line">22/03/29 16:11:15 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">22/03/29 16:12:16 WARN StandaloneAppClient$ClientEndpoint: Connection to master:7077 failed; waiting for master to reconnect...</span><br><span class="line">22/03/29 16:12:16 WARN StandaloneSchedulerBackend: Disconnected from Spark cluster! Waiting for reconnection...</span><br><span class="line">22/03/29 16:12:16 WARN StandaloneAppClient$ClientEndpoint: Connection to master:7077 failed; waiting for master to reconnect...</span><br><span class="line">Pi is roughly 3.140960</span><br><span class="line">(base) [root@master ~]# </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同样可以输出结果</span><br></pre></td></tr></table></figure><p>当新的 master 接收集群后, 程序继续运行, 正常得到结果.</p></li></ul><blockquote><p>结论 HA模式下, 主备切换 不会影响到正在运行的程序.</p><p>最大的影响是 会让它中断大约30秒左右.</p></blockquote><h2 id="Spark-On-YARN模式"><a href="#Spark-On-YARN模式" class="headerlink" title="Spark On YARN模式"></a>Spark On YARN模式</h2><p>在已有YARN集群的前提下在单独准备Spark StandAlone集群,对资源的利用就不高.Spark On YARN, 无需部署Spark集群, 只要找一台服务器, 充当Spark的客户端</p><ul><li><p>保证 HADOOP<em>CONF</em>和 DIR_YARN_CONF_DIR 已经配置在 spark-env.sh 和环境变量中 （注: 前面配置spark-Standlone 时已经配置过此项了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spark-env.sh 文件部分显示：</span><br><span class="line">....</span><br><span class="line"> 77 ## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span><br><span class="line"> 78 HADOOP_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line"> 79 YARN_CONF_DIR=/export/server/hadoop/etc/hadoop</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>链接到 YARN 中（注: 交互式环境 pyspark  和 spark-shell  无法运行 cluster模式）</p></li><li><p>```powershell<br>bin/pyspark —master yarn —deploy-mode client|cluster<br>—deploy-mode 选项是指定部署模式, 默认是 客户端模式<br>client就是客户端模式<br>cluster就是集群模式<br>—deploy-mode 仅可以用在YARN模式下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```powershell</span><br><span class="line">  bin/spark-shell --master yarn --deploy-mode client|cluster</span><br></pre></td></tr></table></figure></li><li><p>```powershell<br>bin/spark-submit —master yarn —deploy-mode client|cluster /xxx/xxx/xxx.py 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- spark-submit 和 spark-shell 和 pyspark的相关参数</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>bin/pyspark: pyspark解释器spark环境</li><li>bin/spark-shell: scala解释器spark环境</li><li>bin/spark-submit: 提交jar包或Python文件执行的工具</li><li>bin/spark-sql: sparksql客户端工具<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>这4个客户端工具的参数基本通用.以spark-submit 为例:<br>bin/spark-submit —master spark://master:7077 xxx.py`<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```powershell</span><br><span class="line">Usage: spark-submit [options] &lt;app jar | python file | R file&gt; [app arguments]</span><br><span class="line">Usage: spark-submit --kill [submission ID] --master [spark://...]</span><br><span class="line">Usage: spark-submit --status [submission ID] --master [spark://...]</span><br><span class="line">Usage: spark-submit run-example [options] example-class [example args]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --master MASTER_URL         spark://host:port, mesos://host:port, yarn,</span><br><span class="line">                              k8s://https://host:port, or local (Default: local[*]).</span><br><span class="line">  --deploy-mode DEPLOY_MODE   部署模式 client 或者 cluster 默认是client</span><br><span class="line">  --class CLASS_NAME          运行java或者scala class(for Java / Scala apps).</span><br><span class="line">  --name NAME                 程序的名字</span><br><span class="line">  --jars JARS                 Comma-separated list of jars to include on the driver</span><br><span class="line">                              and executor classpaths.</span><br><span class="line">  --packages                  Comma-separated list of maven coordinates of jars to include</span><br><span class="line">                              on the driver and executor classpaths. Will search the local</span><br><span class="line">                              maven repo, then maven central and any additional remote</span><br><span class="line">                              repositories given by --repositories. The format for the</span><br><span class="line">                              coordinates should be groupId:artifactId:version.</span><br><span class="line">  --exclude-packages          Comma-separated list of groupId:artifactId, to exclude while</span><br><span class="line">                              resolving the dependencies provided in --packages to avoid</span><br><span class="line">                              dependency conflicts.</span><br><span class="line">  --repositories              Comma-separated list of additional remote repositories to</span><br><span class="line">                              search for the maven coordinates given with --packages.</span><br><span class="line">  --py-files PY_FILES         指定Python程序依赖的其它python文件</span><br><span class="line">  --files FILES               Comma-separated list of files to be placed in the working</span><br><span class="line">                              directory of each executor. File paths of these files</span><br><span class="line">                              in executors can be accessed via SparkFiles.get(fileName).</span><br><span class="line">  --archives ARCHIVES         Comma-separated list of archives to be extracted into the</span><br><span class="line">                              working directory of each executor.</span><br><span class="line"></span><br><span class="line">  --conf, -c PROP=VALUE       手动指定配置</span><br><span class="line">  --properties-file FILE      Path to a file from which to load extra properties. If not</span><br><span class="line">                              specified, this will look for conf/spark-defaults.conf.</span><br><span class="line"></span><br><span class="line">  --driver-memory MEM         Driver的可用内存(Default: 1024M).</span><br><span class="line">  --driver-java-options       Driver的一些Java选项</span><br><span class="line">  --driver-library-path       Extra library path entries to pass to the driver.</span><br><span class="line">  --driver-class-path         Extra class path entries to pass to the driver. Note that</span><br><span class="line">                              jars added with --jars are automatically included in the</span><br><span class="line">                              classpath.</span><br><span class="line"></span><br><span class="line">  --executor-memory MEM       Executor的内存 (Default: 1G).</span><br><span class="line"></span><br><span class="line">  --proxy-user NAME           User to impersonate when submitting the application.</span><br><span class="line">                              This argument does not work with --principal / --keytab.</span><br><span class="line"></span><br><span class="line">  --help, -h                  显示帮助文件</span><br><span class="line">  --verbose, -v               Print additional debug output.</span><br><span class="line">  --version,                  打印版本</span><br><span class="line"></span><br><span class="line"> Cluster deploy mode only(集群模式专属):</span><br><span class="line">  --driver-cores NUM          Driver可用的的CPU核数(Default: 1).</span><br><span class="line"></span><br><span class="line"> Spark standalone or Mesos with cluster deploy mode only:</span><br><span class="line">  --supervise                 如果给定, 可以尝试重启Driver</span><br><span class="line"></span><br><span class="line"> Spark standalone, Mesos or K8s with cluster deploy mode only:</span><br><span class="line">  --kill SUBMISSION_ID        指定程序ID kill</span><br><span class="line">  --status SUBMISSION_ID      指定程序ID 查看运行状态</span><br><span class="line"></span><br><span class="line"> Spark standalone, Mesos and Kubernetes only:</span><br><span class="line">  --total-executor-cores NUM  整个任务可以给Executor多少个CPU核心用</span><br><span class="line"></span><br><span class="line"> Spark standalone, YARN and Kubernetes only:</span><br><span class="line">  --executor-cores NUM        单个Executor能使用多少CPU核心</span><br><span class="line"></span><br><span class="line"> Spark on YARN and Kubernetes only(YARN模式下):</span><br><span class="line">  --num-executors NUM         Executor应该开启几个</span><br><span class="line">  --principal PRINCIPAL       Principal to be used to login to KDC.</span><br><span class="line">  --keytab KEYTAB             The full path to the file that contains the keytab for the</span><br><span class="line">                              principal specified above.</span><br><span class="line"></span><br><span class="line"> Spark on YARN only:</span><br><span class="line">  --queue QUEUE_NAME          指定运行的YARN队列(Default: &quot;default&quot;).</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动 YARN 的历史服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/hadoop-3.3.0/sbin</span><br><span class="line"></span><br><span class="line">./mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure></li><li><p>访问WebUI界面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:19888/</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G8czK.png" alt="image-20220403213634530"></p></li></ul><ul><li><p>client 模式测试</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SPARK_HOME=/export/server/spark </span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;SPARK_HOME&#125;/bin/spark<span class="literal">-submit</span>  <span class="literal">--master</span> yarn  <span class="literal">--deploy-mode</span> client  <span class="literal">--driver-memory</span> <span class="number">512</span>m  <span class="literal">--executor-memory</span> <span class="number">512</span>m  <span class="literal">--num-executors</span> <span class="number">1</span>  <span class="literal">--total-executor-cores</span> <span class="number">2</span> <span class="variable">$</span>&#123;SPARK_HOME&#125;/examples/src/main/python/pi.py <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>cluster 模式测试</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SPARK_HOME=/export/server/spark </span><br><span class="line"></span><br><span class="line"><span class="variable">$</span>&#123;SPARK_HOME&#125;/bin/spark<span class="literal">-submit</span> <span class="literal">--master</span> yarn <span class="literal">--deploy-mode</span> cluster <span class="literal">--driver-memory</span> <span class="number">512</span>m <span class="literal">--executor-memory</span> <span class="number">512</span>m <span class="literal">--num-executors</span> <span class="number">1</span> <span class="literal">--total-executor-cores</span> <span class="number">2</span> <span class="literal">--conf</span> <span class="string">&quot;spark.pyspark.driver.python=/root/anaconda3/bin/python3&quot;</span> <span class="literal">--conf</span> <span class="string">&quot;spark.pyspark.python=/root/anaconda3/bin/python3&quot;</span> <span class="variable">$</span>&#123;SPARK_HOME&#125;/examples/src/main/python/pi.py <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="kafka-安装配置"><a href="#kafka-安装配置" class="headerlink" title="kafka 安装配置"></a>kafka 安装配置</h1><p>Kafka是一种高吞吐量的分布式发布订阅消息系统，其在大数据开发应用上的目的是通过 Hadoo的并行加载机制来统一线上和离线的消息处理，也是为了通过集群来提供实时的消息。大数据开发需掌握Kafka架构原理及各组件的作用和使用方法及相关功能的实现。</p><ul><li><p>上传文件包 到/export/server/</p></li><li><p>解压文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> kafka_2.<span class="number">11</span><span class="literal">-2</span>.<span class="number">0.0</span>.tgz</span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> kafka_2.<span class="number">11</span><span class="literal">-2</span>.<span class="number">0.0</span>/ kafka</span><br></pre></td></tr></table></figure></li><li><p>进入 /export/server/kafka/config  修改 配置文件 server.properties</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/kafka/config</span><br><span class="line"></span><br><span class="line">vim server.properties </span><br></pre></td></tr></table></figure><ul><li><p>21 行内容 broker.id=0 为依次增长的:0、1、2、3、4,集群中唯一 id 从0开始，每台不能重复（注：此处不用修改）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span> broker.id=<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>31 行内容 #listeners=PLAINTEXT://:9092 取消注释，内容改为：listeners=PLAINTEXT://master:9092 </p><p>PLAINTEXT为通信使用明文（加密ssl）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">31</span> listeners=PLAINTEXT://master:<span class="number">9092</span> </span><br></pre></td></tr></table></figure></li><li><p>59 行内容  log.dirs=/tmp/kafka-logs 为默认日志文件存储的位置，改为 log.dirs=/export/server/data/kafka-logs</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">59</span> log.dirs=/export/<span class="keyword">data</span>/kafka<span class="literal">-logs</span></span><br></pre></td></tr></table></figure></li><li><p>63 行内容为  num.partitions=1 是默认分区数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">63</span> num.partitions=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>76 行部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">############################ **Log Flush Policy** ###############################</span><br><span class="line"> </span><br><span class="line">数据安全性（持久化之前先放到缓存上，从缓存刷到磁盘上）interval.messages   interval.ms</span><br></pre></td></tr></table></figure></li><li><p>93 行部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">########################### **Log Retention Policy** ############################</span><br><span class="line"> </span><br><span class="line">数据保留策略 168/24=7，1073741824/1024=1GB，300000ms = 300s = 5min超过了删掉（最后修改时间还是创建时间--&gt;日志段中最晚的一条消息，维护这个最大的时间戳--&gt;用户无法干预</span><br></pre></td></tr></table></figure></li><li><p>121 行内容 zookeeper.connect=localhost:2181 修改为 zookeeper.connect=master:2181,slave1:2181,slave2:2181</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">121</span> zookeeper.connect=master:<span class="number">2181</span>,slave1:<span class="number">2181</span>,slave2:<span class="number">2181</span></span><br></pre></td></tr></table></figure></li><li><p>126 行内容 group.initial.rebalance.delay.ms=0 修改为 group.initial.rebalance.delay.ms=3000</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">133</span> group.initial.rebalance.delay.ms=<span class="number">3000</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>给 slaves1和 slavs2 scp 分发 kafka</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/</span><br><span class="line"></span><br><span class="line">scp <span class="literal">-r</span> /export/server/kafka_2.<span class="number">11</span><span class="literal">-2</span>.<span class="number">0.0</span>/ slave1:<span class="variable">$PWD</span></span><br><span class="line"></span><br><span class="line">scp <span class="literal">-r</span> /export/server/kafka_2.<span class="number">11</span><span class="literal">-2</span>.<span class="number">0.0</span>/ slave2:<span class="variable">$PWD</span></span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /export/server/kafka_2.11-2.0.0/ kafka</span><br></pre></td></tr></table></figure></li><li><p>配置 kafka 环境变量（注：可以一台一台配，也可以在 master 完成后发给 slave1 和slave2）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile </span><br><span class="line"></span><br><span class="line"><span class="comment"># kafka 环境变量</span></span><br><span class="line">export KAFKA_HOME=/export/server/kafka </span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$KAFKA_HOME</span>/bin </span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>分别在 slave1 和slave2 上修改配置文件 路径：/export/server/kafka/config</p><ul><li><p>将文件 server.properties  的第 21 行的 broker.id=0 修改为 broker.id=1 同理 slave2 同样操作</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span> broker.id=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>将文件 server.properties  的第 31 行的 listeners=PLAINTEXT://master:9092 修改为 listeners=PLAINTEXT://slave1:9092 同理slave2 同样操作 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">31</span> listeners=PLAINTEXT://slave1:<span class="number">9092</span> </span><br></pre></td></tr></table></figure></li></ul></li><li><p>启停 kafka (注：kafka 启动需要在 zookeeper 启动的情况下才可)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka<span class="literal">-server-start</span>.sh <span class="literal">-daemon</span> /export/server/kafka/config/server.properties</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">hadoop，zookeeper，kafka启动</span><br><span class="line">结果显示：</span><br><span class="line">(base) [root@master ~]# jps</span><br><span class="line">11793 NodeManager</span><br><span class="line">91699 Kafka</span><br><span class="line">85618 QuorumPeerMain</span><br><span class="line">10697 NameNode</span><br><span class="line">10924 DataNode</span><br><span class="line">11596 ResourceManager</span><br><span class="line">109852 Jps</span><br><span class="line"></span><br><span class="line">[root@slave1 ~]# jps</span><br><span class="line">9301 DataNode</span><br><span class="line">9493 SecondaryNameNode</span><br><span class="line">95959 Kafka</span><br><span class="line">102971 Jps</span><br><span class="line">9855 NodeManager</span><br><span class="line">89534 QuorumPeerMain</span><br><span class="line"></span><br><span class="line">[root@slave2 ~]# jps</span><br><span class="line">88660 QuorumPeerMain</span><br><span class="line">95204 Kafka</span><br><span class="line">9110 NodeManager</span><br><span class="line">8616 DataNode</span><br><span class="line">102104 Jps</span><br></pre></td></tr></table></figure></li><li><p>关闭 kafka</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka<span class="literal">-server-stop</span>.sh stop</span><br></pre></td></tr></table></figure></li><li><p>定制脚本一键启动</p></li><li><p>```sh<br>vim kafka-all.sh</p><p>放入 /bin 路径下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```powershell</span><br><span class="line">#!/bin/bash</span><br><span class="line">if [ $# -eq 0 ] ;</span><br><span class="line">then</span><br><span class="line">echo &quot;please input param:start stop&quot;</span><br><span class="line">else</span><br><span class="line">if [ $1 = start  ] ;then</span><br><span class="line">echo &quot;$&#123;1&#125;ing master&quot;</span><br><span class="line">ssh master &quot;source /etc/profile;kafka-server-start.sh -daemon /export/server/kafka/config/server.properties&quot;</span><br><span class="line">for i in &#123;1..2&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;$&#123;1&#125;ing slave$&#123;i&#125;&quot;</span><br><span class="line">ssh slave$&#123;i&#125; &quot;source /etc/profile;kafka-server-start.sh -daemon /export/server/kafka/config/server.properties&quot;</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">if [ $1 = stop ];then</span><br><span class="line">echo &quot;$&#123;1&#125;ping master &quot;</span><br><span class="line">ssh master &quot;source /etc/profile;kafka-server-stop.sh&quot;</span><br><span class="line">for i in &#123;1..2&#125;</span><br><span class="line">do</span><br><span class="line">echo &quot;$&#123;1&#125;ping slave$&#123;i&#125;&quot;</span><br><span class="line">ssh slave$&#123;i&#125; &quot;source /etc/profile;kafka-server-stop.sh&quot;</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h1 id="hbase安装配置"><a href="#hbase安装配置" class="headerlink" title="hbase安装配置"></a>hbase安装配置</h1><ul><li><p>进入 /export/server 将文件 hbase-1.2.4-bin.tar 上传 并解压</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line">tar <span class="literal">-zxvf</span> hbase<span class="literal">-1</span>.<span class="number">2.4</span><span class="literal">-bin</span>.tar.gz </span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s hbase-1.2.4 hbase</span><br></pre></td></tr></table></figure></li><li><p>进入 /export/server/hbase/conf 修改配置</p><ul><li><p>修改 hbase-env.sh 文件内容 添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim hbase-env.sh</span><br><span class="line"></span><br><span class="line">内容添加末尾：</span><br><span class="line">export HBASE_MANAGES_ZK=false</span><br><span class="line">export JAVA_HOME=/export/server/jdk1.8.0_241</span><br><span class="line">export HBASE_CLASSPATH=/export/server/hadoop-3.3.0/etc/hadoop</span><br></pre></td></tr></table></figure></li><li><p>修改 hbase-site.xml 文件内容 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim hbase-site.xml</span><br><span class="line"></span><br><span class="line"># 文末删除 <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> 添加以下内容</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:8020/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:6000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master,slave1,slave2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>/export/server/ zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置  regionservers 添加内容 删除原来的 localhoast</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入 /export/server/hadoop-3.3.0/etc/hadoop 将文件 hdfs-site.xml 和 core-site.xml 拷贝到 hbase的配置文件夹下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /export/server/hadoop-3.3.0/etc/hadoop</span><br><span class="line"></span><br><span class="line">cp hdfs-site.xml /export/server/hbase/conf/</span><br><span class="line">cp core-site.xml /export/server/hbase/conf/</span><br></pre></td></tr></table></figure></li><li><p>向 slave1 和 slave2 分发配置的 hbase</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp  -r  /export/server/hbase/  root@slave1:/export/server/</span><br><span class="line">scp  -r  /export/server/hbase/  root@slave2:/export/server/</span><br></pre></td></tr></table></figure></li><li><p>master slave1 和 slave2三台主机同时配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"># 添加内容</span><br><span class="line">#HBASE_HOME</span><br><span class="line">export  HBASE_HOME=/export/server/hbase</span><br><span class="line">export  PATH=$PATH:$HBASE_HOME/bin</span><br></pre></td></tr></table></figure><p>重新加载环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>启动 hbase（注:启动 hbase 之前需要启动 zookeeper 和 hadoop ）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zkServer<span class="literal">-all</span>.sh <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">start-all</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /export/server/hbase/bin</span><br><span class="line"></span><br><span class="line">./<span class="built_in">start-hbase</span>.sh </span><br></pre></td></tr></table></figure></li><li><p>jps 查看进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [root@master bin]# jps</span><br><span class="line">24977 Jps</span><br><span class="line">24534 HMaster</span><br></pre></td></tr></table></figure></li><li><p>访问 WebUI </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://master:16010/master-status</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G82Em.png" alt="image-20220403171041076"></p></li></ul><h1 id="Hive安装配置"><a href="#Hive安装配置" class="headerlink" title="Hive安装配置"></a>Hive安装配置</h1><div class="tip fa-gamepad faa-horizontal animated"><p>规划</p></div><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">主机</th><th style="text-align:center">角色</th></tr></thead><tbody><tr><td style="text-align:center">01</td><td style="text-align:center">master</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">02</td><td style="text-align:center">salve1</td><td style="text-align:center">mysql，hive server服务器端</td></tr><tr><td style="text-align:center">03</td><td style="text-align:center">slave2</td><td style="text-align:center">作为Client客户端</td></tr></tbody></table></div><h2 id="Hive-部署之本地模式"><a href="#Hive-部署之本地模式" class="headerlink" title="Hive 部署之本地模式"></a>Hive 部署之本地模式</h2><p>本地模式部署本质上是将Hive默认的元数据存储介质由内嵌的Derby数据库替换为独立数据库，即MySQL数据库。本地模式部署Hive需要在一台虚拟机上同时安装MySQL和Hive，接下来，我们以虚拟机slave1为例，使用本地模式部署Hive。</p><ul><li><p><strong><em>安装 Mysql 安装 Mysql 5.7</em></strong></p></li><li><p>下载并安装wget工具，wget是Linux中的一个下载文件的工具</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="built_in">wget</span> <span class="literal">-y</span></span><br></pre></td></tr></table></figure></li><li><p>下载MySQL 5.7的yum资源库，资源库文件会下载到当前目录下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"></span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-i</span> <span class="literal">-c</span> http://dev.mysql.com/get/mysql57<span class="literal">-community-release-el7-10</span>.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装MySQL 5.7的yum资源库</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install mysql57<span class="literal">-community-release-el7-10</span>.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>进入 /etc/yum.repos.d 文件查看 是否有  mysql-community.repo 和从 mysql-community-source.repo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /etc/yum.repos.d | grep <span class="string">&#x27;mysql&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">结果显示:</span><br><span class="line">(base) [root@slave1~]# ls /etc/yum.repos.d | grep &#x27;mysql&#x27;</span><br><span class="line">mysql-community.repo</span><br><span class="line">mysql-community-source.repo</span><br></pre></td></tr></table></figure></li><li><p>mysql-community-source.repo 文件内容是 需要的下载的 mysql 组件</p></li><li><p>清除缓存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all &amp;&amp; yum makecache fast</span><br></pre></td></tr></table></figure></li><li><p>安装MySQL 5.7服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql<span class="literal">-community-server</span> <span class="literal">--nogpgcheck</span></span><br></pre></td></tr></table></figure></li><li><p>启动 mysql 并查看 服务状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> mysqld.service</span><br><span class="line"></span><br><span class="line">systemctl status mysqld.service</span><br><span class="line"></span><br><span class="line">结果显示:</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> <span class="type">log</span>]<span class="comment"># systemctl status mysqld.service</span></span><br><span class="line"></span><br><span class="line">● mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat <span class="number">2022</span><span class="literal">-04-09</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">23</span> CST; <span class="number">13</span>s ago</span><br><span class="line">     Docs: <span class="built_in">man</span>:mysqld(<span class="number">8</span>)</span><br><span class="line">           http://dev.mysql.com/doc/refman/en/using<span class="literal">-systemd</span>.html</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">1800</span> ExecStart=/usr/sbin/mysqld <span class="literal">--daemonize</span> <span class="literal">--pid-file</span>=/var/run/mysqld/mysqld.pid <span class="variable">$MYSQLD_OPTS</span> (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line">  <span class="keyword">Process</span>: <span class="number">1751</span> ExecStartPre=/usr/bin/mysqld_pre_systemd (code=exited, status=<span class="number">0</span>/SUCCESS)</span><br><span class="line"> Main PID: <span class="number">1803</span> (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─<span class="number">1803</span> /usr/sbin/mysqld <span class="literal">--daemonize</span> <span class="literal">--pid-file</span>=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">Apr <span class="number">09</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">16</span> slave1 systemd[<span class="number">1</span>]: Starting MySQL Server...</span><br><span class="line">Apr <span class="number">09</span> <span class="number">17</span>:<span class="number">26</span>:<span class="number">23</span> slave1 systemd[<span class="number">1</span>]: Started MySQL Server.</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> <span class="type">log</span>]<span class="comment"># </span></span><br></pre></td></tr></table></figure></li><li><p>MySQL安装完成后需要通过用户名和密码进行登录，MySQL为本地默认用户root自动生成密码，可以在MySQL的日志文件中查看此密码。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;password&quot;</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">结果显示:</span><br><span class="line">(base) [root@slave1 log]# grep &quot;password&quot; /var/log/mysqld.log</span><br><span class="line">2022-04-09T09:26:19.571037Z 1 [Note] A temporary password is generated for root@localhost: /Xb6caelDqqk</span><br><span class="line"></span><br><span class="line">注意:/Xb6caelDqqk 为默认密码</span><br></pre></td></tr></table></figure></li><li><p>知识点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">数字权限使用格式</span><br><span class="line">在这种使用方式中，首先我们需要了解数字如何表示权限。 首先，我们规定 数字 4 、2 和 1表示读、写、执行权限（具体原因可见下节权限详解内容），即 r=4，w=2，x=1 。此时其他的权限组合也可以用其他的八进制数字表示出来，</span><br><span class="line">如：</span><br><span class="line">rwx = 4 + 2 + 1 = 7</span><br><span class="line">rw = 4 + 2 = 6</span><br><span class="line">rx = 4 +1 = 5</span><br><span class="line"></span><br><span class="line">若要同时设置 rwx (可读写运行） 权限则将该权限位 设置 为 4 + 2 + 1 = 7</span><br><span class="line">若要同时设置 rw- （可读写不可运行）权限则将该权限位 设置 为 4 + 2 = 6</span><br><span class="line">若要同时设置 r-x （可读可运行不可写）权限则将该权限位 设置 为 4 +1 = 5</span><br><span class="line">User-Group-Other---&gt;&gt;U-G-O</span><br><span class="line">-rw------- (600)    只有拥有者有读写权限。</span><br><span class="line">-rw-r--r-- (644)    只有拥有者有读写权限；而属组用户和其他用户只有读权限。</span><br><span class="line">-rwx------ (700)    只有拥有者有读、写、执行权限。</span><br><span class="line">-rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</span><br><span class="line">-rwx--x--x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</span><br><span class="line">-rw-rw-rw- (666)    所有用户都有文件读、写权限。</span><br><span class="line">-rwxrwxrwx (777)    所有用户都有读、写、执行权限。</span><br></pre></td></tr></table></figure></li><li><p>登录 mysql 默认密码：/Xb6caelDqqk</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="literal">-u</span> root <span class="literal">-p</span></span><br></pre></td></tr></table></figure></li><li><p>修改密码为 Ccu2021@ ，密码策略规则要求密码必须包含英文大小写、数字以及特殊符号</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span><span class="string">@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Ccu2021@&#x27;;</span></span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE hive;</span><br></pre></td></tr></table></figure></li><li><p>刷新MySQL配置，使得配置生效</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意：</p></li><li><p>此部分如果是需要远程登陆的话，mysql  需要创建远程登录，mysql本地登录的话，这步非必要选择</p></li><li><p>创建 用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create  user  &#x27;root&#x27;@&#x27;%&#x27;  identified  by  &#x27;Ccu2022@&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>允许远程连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant  all  privileges  on  *.*  to  &#x27;root&#x27;@&#x27;%&#x27;  with  grant  option;</span><br></pre></td></tr></table></figure></li><li><p>更新权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong><em>安装HIve</em></strong></p></li><li><p>网址（注：hive基于hadoop ，因先前部署hadoop版本3.3.0 所以hive版本必须为3.0以上，否则会有不兼容发生）：<a href="http://archive.apache.org/dist/hive/">Index of /dist/hive (apache.org)</a></p></li><li><p>上传 Hive 安装包到 /export/server </p></li><li><p>此处如果使用PowerShell 上传的话</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入文件所在的文件夹 打开PowerShell</span></span><br><span class="line">scp <span class="literal">-r</span> .\apache<span class="literal">-hive-3</span>.<span class="number">0.0</span><span class="literal">-bin</span>.tar.gz root@<span class="number">192.168</span>.<span class="number">88.136</span>:/export/server</span><br></pre></td></tr></table></figure></li><li><p>解压文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-hive-3</span>.<span class="number">0.0</span><span class="literal">-bin</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> apache<span class="literal">-hive-3</span>.<span class="number">0.0</span><span class="literal">-bin</span> hive</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><ul><li><p>进入Hive安装目录下的conf目录，复制模板文件hive-env.sh.template并重命名为hive-env.sh，文件hive-env.sh用于配置Hive运行环境。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> hive<span class="literal">-env</span>.sh.template hive<span class="literal">-env</span>.sh</span><br><span class="line"> </span><br><span class="line">vim hive<span class="literal">-env</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文末添加内容</span></span><br><span class="line"></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop<span class="literal">-3</span>.<span class="number">3.0</span> </span><br><span class="line">export HIVE_CONF_DIR=/export/server/hive/conf</span><br><span class="line">export HIVE_AUX_JARS_PATH=/export/server/hive/lib</span><br><span class="line">export JAVA_HOME=/export/server/jdk</span><br></pre></td></tr></table></figure></li><li><p>进入Hive安装目录下的conf目录，创建文件hive-site.xml用于配置Hive相关参数。或者以模板复制一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br><span class="line"></span><br><span class="line">vim hive-site.xml</span><br><span class="line"></span><br><span class="line"># <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> 添加内容 <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Hive数据存储在HDFS上的目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive_local/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Hive在HDFS上的临时目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp_local/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hive开启本地模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置JDBC连接地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hive?</span><br><span class="line">createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>usessL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 如果需要配置mysql的远程，需要在这里改--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;value&gt;jdbc:mysql://slave2:3306/hive?</span></span><br><span class="line"><span class="comment">createDatabaseIfNotExist=true&amp;amp;usessL=false&lt;/value&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置JDBC驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置连接MySQL的用户名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置连接MySQL的密码  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>Ccu2021@<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置在命令行界面（CLI）中显示表的列名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header&lt;/name        </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置在命令行界面（CLI）中显示当前数据库名称  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>上传JDBC 连接MySQL的驱动包，传入 /export/server/hive/lib 文件夹下</p></li><li><p>注：此部分如需要远程连接 mysql 需要上传MySQL的驱动包 到</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp <span class="literal">-r</span> .\mysql<span class="literal">-connector-java-5</span>.<span class="number">1.32</span>.jar root@<span class="number">192.168</span>.<span class="number">88.136</span>:/export/server/hive/lib</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># HIVE_PATH</span></span><br><span class="line">export HIVE_HOME=/export/server/hive</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$HIVE_HOME</span>/bin</span><br></pre></td></tr></table></figure></li><li><p>重新加载环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>初始化mysql</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool <span class="literal">-initSchema</span> <span class="literal">-dbType</span> mysql</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">结果显示:</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> <span class="type">conf</span>]<span class="comment"># schematool -initSchema -dbType mysql</span></span><br><span class="line">Metastore connection URL:        jdbc:mysql://localhost:<span class="number">3306</span>/hive?</span><br><span class="line">createDatabaseIfNotExist=true&amp;usessL=false</span><br><span class="line">Metastore Connection Driver :    com.mysql.jdbc.Driver</span><br><span class="line">Metastore connection User:       root</span><br><span class="line">Starting metastore schema initialization to <span class="number">3.0</span>.<span class="number">0</span></span><br><span class="line">Initialization script hive<span class="literal">-schema-3</span>.<span class="number">0.0</span>.mysql.sql</span><br><span class="line">Initialization script completed</span><br><span class="line">schemaTool completed</span><br></pre></td></tr></table></figure><p>注：如果执行有报错看下方报错解决办法！！！！</p></li><li><p>注：启动 hive 之前必须启动 hadoop 集群</p></li><li><p>启动Hive</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> <span class="type">conf</span>]<span class="comment"># hive</span></span><br><span class="line">SLF4J: <span class="class"><span class="keyword">Class</span> <span class="title">path</span> <span class="title">contains</span> <span class="title">multiple</span> <span class="title">SLF4J</span> <span class="title">bindings</span>.</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">Found</span> <span class="title">binding</span> <span class="title">in</span> [<span class="title">jar</span>:<span class="title">file</span>:/<span class="title">export</span>/<span class="title">server</span>/<span class="title">hbase</span>/<span class="title">lib</span>/<span class="title">slf4j</span>-<span class="title">log4j12</span>-1.7.5.<span class="title">jar</span>!/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">Found</span> <span class="title">binding</span> <span class="title">in</span> [<span class="title">jar</span>:<span class="title">file</span>:/<span class="title">export</span>/<span class="title">server</span>/<span class="title">apache</span>-<span class="title">hive</span>-3.0.0-<span class="title">bin</span>/<span class="title">lib</span>/<span class="title">log4j</span>-<span class="title">slf4j</span>-<span class="title">impl</span>-2.10.0.<span class="title">jar</span>!/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">See</span> <span class="title">http</span>://<span class="title">www</span>.<span class="title">slf4j</span>.<span class="title">org</span>/<span class="title">codes</span>.<span class="title">html</span>#<span class="title">multiple_bindings</span> <span class="title">for</span> <span class="title">an</span> <span class="title">explanation</span>.</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">Actual</span> <span class="title">binding</span> <span class="title">is</span> <span class="title">of</span> <span class="title">type</span> [<span class="title">org</span>.<span class="title">slf4j</span>.<span class="title">impl</span>.<span class="title">Log4jLoggerFactory</span>]</span></span><br><span class="line"><span class="class"><span class="title">Hive</span> <span class="title">Session</span> <span class="title">ID</span> = <span class="title">a898fd11</span>-<span class="title">e58d</span>-4<span class="title">d25</span>-<span class="title">adf8</span>-21<span class="title">c8077f5a4b</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Logging</span> <span class="title">initialized</span> <span class="title">using</span> <span class="title">configuration</span> <span class="title">in</span> <span class="title">jar</span>:<span class="title">file</span>:/<span class="title">export</span>/<span class="title">server</span>/<span class="title">apache</span>-<span class="title">hive</span>-3.0.0-<span class="title">bin</span>/<span class="title">lib</span>/<span class="title">hive</span>-<span class="title">common</span>-3.0.0.<span class="title">jar</span>!/<span class="title">hive</span>-<span class="title">log4j2</span>.<span class="title">properties</span> <span class="title">Async</span>: <span class="title">true</span></span></span><br><span class="line"><span class="class"><span class="title">Hive</span>-<span class="title">on</span>-<span class="title">MR</span> <span class="title">is</span> <span class="title">deprecated</span> <span class="title">in</span> <span class="title">Hive</span> 2 <span class="title">and</span> <span class="title">may</span> <span class="title">not</span> <span class="title">be</span> <span class="title">available</span> <span class="title">in</span> <span class="title">the</span> <span class="title">future</span> <span class="title">versions</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">a</span> <span class="title">different</span> <span class="title">execution</span> <span class="title">engine</span> (<span class="title">i</span>.<span class="title">e</span>. <span class="title">spark</span>, <span class="title">tez</span>) <span class="title">or</span> <span class="title">using</span> <span class="title">Hive</span> 1.<span class="title">X</span> <span class="title">releases</span>.</span></span><br><span class="line"><span class="class"><span class="title">hive</span> (<span class="title">default</span>)&gt; </span></span><br></pre></td></tr></table></figure><p>报错解决办法：</p><ul><li>执行 schematool -initSchema -dbType mysql 出现：</li></ul><p><img src="https://s1.328888.xyz/2022/08/27/G8Iw7.png" alt="image-20220409224823997"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解决办法】：此问题由于 hive 和 hadoop 中的 log4j-slf4j-impl-2.10.0.jar包冲突删除一个即可</span><br><span class="line">hive中的路径： /export/server/hive/lib</span><br><span class="line">hadoop中的路径： /export/server/hadoop-3.3.0/share/hadoop/common/lib/</span><br><span class="line">任意删除一个</span><br></pre></td></tr></table></figure><ul><li>执行 schematool -initSchema -dbType mysql 出现：</li></ul><p><img src="https://s1.328888.xyz/2022/08/27/G8V8k.png" alt="image-20220409225740771"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【解决办法】：此问题com.google.common.base.Preconditions.checkArgument 这是因为hive内依赖的guava.jar和hadoop内的版本不一致造成的</span><br><span class="line">hive中的路径： /export/server/hive/lib</span><br><span class="line">hadoop中的路径： /export/server/hadoop-3.3.0/share/hadoop/common/lib/</span><br><span class="line">查看guava.jar的版本 。如果两者不一致，删除版本低的，并拷贝高版本的，保证两者的版本一致。</span><br></pre></td></tr></table></figure></li></ul><h2 id="Hive-部署之远程模式"><a href="#Hive-部署之远程模式" class="headerlink" title="Hive 部署之远程模式"></a>Hive 部署之远程模式</h2><p>远程模式与本地模式一样，同样是使用独立数据库存储元数据。不同的是，远程模式使用的是远端的独立数据库，而本地模式使用的是本地独立数据库。远程模式主要应用于Hive客户端较多的情况。</p><ul><li><p>启动HiveServer2服务</p></li><li><p>在虚拟机Node_02中执行“hiveserver2”命令启动HiveServer2服务，HiveServer2服务会进入监听状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hiveserver2</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> ~]<span class="comment"># hiveserver2</span></span><br><span class="line">SLF4J: <span class="class"><span class="keyword">Class</span> <span class="title">path</span> <span class="title">contains</span> <span class="title">multiple</span> <span class="title">SLF4J</span> <span class="title">bindings</span>.</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">Found</span> <span class="title">binding</span> <span class="title">in</span> [<span class="title">jar</span>:<span class="title">file</span>:/<span class="title">export</span>/<span class="title">server</span>/<span class="title">hbase</span>/<span class="title">lib</span>/<span class="title">slf4j</span>-<span class="title">log4j12</span>-1.7.5.<span class="title">jar</span>!/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">Found</span> <span class="title">binding</span> <span class="title">in</span> [<span class="title">jar</span>:<span class="title">file</span>:/<span class="title">export</span>/<span class="title">server</span>/<span class="title">apache</span>-<span class="title">hive</span>-3.0.0-<span class="title">bin</span>/<span class="title">lib</span>/<span class="title">log4j</span>-<span class="title">slf4j</span>-<span class="title">impl</span>-2.10.0.<span class="title">jar</span>!/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">See</span> <span class="title">http</span>://<span class="title">www</span>.<span class="title">slf4j</span>.<span class="title">org</span>/<span class="title">codes</span>.<span class="title">html</span>#<span class="title">multiple_bindings</span> <span class="title">for</span> <span class="title">an</span> <span class="title">explanation</span>.</span></span><br><span class="line"><span class="class"><span class="title">SLF4J</span>: <span class="title">Actual</span> <span class="title">binding</span> <span class="title">is</span> <span class="title">of</span> <span class="title">type</span> [<span class="title">org</span>.<span class="title">slf4j</span>.<span class="title">impl</span>.<span class="title">Log4jLoggerFactory</span>]</span></span><br><span class="line"><span class="class">2022-04-09 23:48:24: <span class="title">Starting</span> <span class="title">HiveServer2</span></span></span><br><span class="line"><span class="class"><span class="title">Hive</span> <span class="title">Session</span> <span class="title">ID</span> = 09<span class="title">ab8af4</span>-5<span class="title">dbf</span>-473<span class="title">f</span>-9<span class="title">e34</span>-<span class="title">d4b929984b5c</span></span></span><br><span class="line"><span class="class"><span class="title">Hive</span> <span class="title">Session</span> <span class="title">ID</span> = 9<span class="title">f0ed0a4</span>-<span class="title">b8f6</span>-43<span class="title">ca</span>-9430-7527<span class="title">b81543aa</span></span></span><br></pre></td></tr></table></figure></li><li><p>使用后台方式启动HiveServer2服务，则执行“hive —service hiveserver2 &amp;”命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive <span class="literal">--service</span> hiveserver2 &amp;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> ~]<span class="comment"># hive --service hiveserver2 &amp;</span></span><br><span class="line">[<span class="number">2</span>] <span class="number">6640</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> ~]<span class="comment"># jps</span></span><br><span class="line"><span class="number">2304</span> DataNode</span><br><span class="line"><span class="number">6800</span> Jps</span><br><span class="line"><span class="number">2531</span> NodeManager</span><br><span class="line"><span class="number">6340</span> RunJar</span><br><span class="line"><span class="number">2421</span> SecondaryNameNode</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">slave1</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>上传 Hive 到 /export/server 文件夹下（注：以下部分在slave2上操作）</p></li><li><p>此处如果使用PowerShell 上传的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入文件所在的文件夹 打开PowerShell</span><br><span class="line">scp -r .\apache-hive-3.0.0-bin.tar.gz root@192.168.88.137:/export/server</span><br></pre></td></tr></table></figure></li><li><p>解压文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="literal">-zxvf</span> apache<span class="literal">-hive-3</span>.<span class="number">0.0</span><span class="literal">-bin</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln <span class="literal">-s</span> apache<span class="literal">-hive-3</span>.<span class="number">0.0</span><span class="literal">-bin</span> hive</span><br></pre></td></tr></table></figure></li><li><p><strong><em>配置Hive</em></strong></p></li><li><p>虚拟机 slave2 进入Hive安装目录下的conf目录，创建文件hive-site.xml用于配置Hive相关参数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cp hive-default.xml.template hive-site.xml</span><br><span class="line"></span><br><span class="line">vim hive-site.xml</span><br><span class="line"></span><br><span class="line"># <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> 添加内容 <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Hive数据存储在HDFS上的目录  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>             </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive_local/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Hive在HDFS上的临时目录  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp_local/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hive不开启本地模式  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Metastore服务地址   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://slave1:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li><li><p>编辑环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"># HIVE_HOME</span><br><span class="line">export HIVE_HOME=/export/server/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>虚拟机 slave2 执行通过Hive客户端工具Beeline远程连接虚拟机 slave1 的HiveServer2服务。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beeline <span class="literal">-u</span> jdbc:hive2://slave1:<span class="number">10000</span> <span class="literal">-n</span> root <span class="literal">-p</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">结果显示:</span><br><span class="line">(base) [root@slave2 conf]# beeline -u jdbc:hive2://slave1:10000 -n root -p</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/export/server/apache-hive-3.0.0-bin/lib/log4j-slf4j-impl-2.10.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/export/server/hadoop-3.3.0/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Connecting to jdbc:hive2://slave1:10000/;user=root</span><br><span class="line">Enter password for jdbc:hive2://slave1:10000/: ********</span><br><span class="line">Connected to: Apache Hive (version 3.0.0)</span><br><span class="line">Driver: Hive JDBC (version 3.0.0)</span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br><span class="line">Beeline version 3.0.0 by Apache Hive</span><br><span class="line">0: jdbc:hive2://slave1:10000/&gt;</span><br></pre></td></tr></table></figure></li><li><p>执行“hive”命令，通过Hive客户端工具HiveCLI操作本地模式下的Hive，在HiveCLI的命令行界面执行“create database test;”命令创建数据库test。然后分别执行“show databases;”命令分别查看 slave1 和 slave2 数据库列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果显示:</span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/27/G8P6J.png" alt="image-20220410002727118"></p></li></ul><div class="tip warning faa-horizontal animated-hover"><p>文档内容来自于网络采集和自己编写,不做任何盈利,仅供学习。如有侵权请及时联系博主,博主会在第一时间进行删改。</p></div>]]></content>
    
    
    <summary type="html">本文为大数据集群服务的部署文档,包括zookeeper服务部署,Hadoop服务部署,Spark服务部署,Kafka服务部署,Hbase服务部署,Hive服务部署</summary>
    
    
    
    <category term="大数据" scheme="https://www.jermyn.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="zookeeper" scheme="https://www.jermyn.cn/tags/zookeeper/"/>
    
    <category term="linux" scheme="https://www.jermyn.cn/tags/linux/"/>
    
    <category term="大数据服务部署" scheme="https://www.jermyn.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Hadoop" scheme="https://www.jermyn.cn/tags/Hadoop/"/>
    
    <category term="Spark" scheme="https://www.jermyn.cn/tags/Spark/"/>
    
    <category term="Kafka" scheme="https://www.jermyn.cn/tags/Kafka/"/>
    
    <category term="Hbase" scheme="https://www.jermyn.cn/tags/Hbase/"/>
    
    <category term="Hive" scheme="https://www.jermyn.cn/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop集群脚本部署</title>
    <link href="https://www.jermyn.cn/posts/ba42.html"/>
    <id>https://www.jermyn.cn/posts/ba42.html</id>
    <published>2022-08-26T22:05:28.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop集群脚本部署"><a href="#Hadoop集群脚本部署" class="headerlink" title="Hadoop集群脚本部署"></a>Hadoop集群脚本部署</h1><div class="note info simple"><p>此部分脚本为Hadoop部署脚本，算是刚学完shell编程后拿来练手的小作业，不保证正确可靠，但保证可运行</p></div><p><strong>系统信息及配置</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">系统版本：CentOS Linux release <span class="number">7.9</span>.<span class="number">2009</span> (Core)</span><br><span class="line">内核版本：<span class="number">3.10</span>.<span class="number">0</span><span class="literal">-1160</span>.el7.x86_64</span><br><span class="line">内存：<span class="number">1</span>GB</span><br><span class="line">处理器数量（p）：<span class="number">1</span></span><br><span class="line">每个处理器的内核数量（c）：<span class="number">1</span></span><br><span class="line">硬盘：<span class="number">30</span>GB</span><br></pre></td></tr></table></figure><p><strong>脚本用途</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>.network_conf.sh </span><br><span class="line">此脚本用于系统网络配置和修改主机名，运行结束后，重启即可生效</span><br><span class="line"></span><br><span class="line"><span class="number">01</span>.set_ssh_hosts.sh  </span><br><span class="line">此脚本用于设置集群主机间的免密登录，配置 hosts映射</span><br><span class="line"></span><br><span class="line"><span class="number">02</span>.ntp_server_install.sh</span><br><span class="line">此脚本用于配置集群的时间同步</span><br><span class="line"></span><br><span class="line"><span class="number">03</span>.jdk_install.sh</span><br><span class="line">此脚本用于 jdk 的下载配置</span><br><span class="line"></span><br><span class="line"><span class="number">04</span>.zookeeper_install.sh</span><br><span class="line">此脚本用于集群的 zookeeper 部署</span><br><span class="line"></span><br><span class="line"><span class="number">05</span>.zkServer<span class="literal">-all</span>.sh</span><br><span class="line">此脚本是 zookeeper 的启停脚本，可做启动，停止脚本，以及查看状态</span><br><span class="line"></span><br><span class="line"><span class="number">06</span>.hadoop_install.sh</span><br><span class="line">此脚本是 hadoop 的部署脚本</span><br><span class="line"></span><br><span class="line">ip.txt</span><br><span class="line">此文件最为重要，其中包含三个字段，<span class="variable">$1</span> 是主机的IP，<span class="variable">$2</span> 是主机密码，<span class="variable">$3</span> 是主机的hostname</span><br><span class="line">字段之间以一个空格隔开</span><br><span class="line">此文件应严格按照要求配置，以上所有脚本不同提供 IP 的检测，故在配置的时候做到仔细认真。</span><br></pre></td></tr></table></figure><p><strong>软件包</strong></p><ul><li><p>JDK 版本：1.8.0_141</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载链接：</span><br><span class="line">http://download.oracle.com/otn<span class="literal">-pub</span>/java/jdk/<span class="number">8</span>u141<span class="literal">-b15</span>/<span class="number">336</span>fa29ff2bb4ef291e347e091f7f4a7/jdk<span class="literal">-8u141-linux-x64</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>zookeeper 版本：zookeeper-3.7.1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载链接：</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper<span class="literal">-3</span>.<span class="number">7.1</span>/apache<span class="literal">-zookeeper-3</span>.<span class="number">7.1</span><span class="literal">-bin</span>.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>hadoop 版本：hadoop-3.3.1</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载链接：</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop<span class="literal">-3</span>.<span class="number">3.1</span>/hadoop<span class="literal">-3</span>.<span class="number">3.1</span>.tar.gz</span><br></pre></td></tr></table></figure></li></ul><h2 id="00-network-conf-sh"><a href="#00-network-conf-sh" class="headerlink" title="00.network_conf.sh"></a>00.network_conf.sh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"><span class="comment"># Desc    : 网络配置</span></span><br><span class="line"><span class="comment"># Path    : /root/cluster</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-26</span></span><br><span class="line"><span class="comment"># Version : 1.0</span></span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line"></span><br><span class="line">NETWORK_DIR=/etc/sysconfig/network<span class="literal">-scripts</span></span><br><span class="line">NETWORK_NIC=`ls <span class="literal">-al</span> /sys/<span class="class"><span class="keyword">class</span>/<span class="title">net</span>/ | <span class="title">grep</span> <span class="title">pci</span> | <span class="title">awk</span> -<span class="title">F</span> &#x27;/&#x27; &#x27;</span>&#123;print <span class="variable">$8</span>&#125;<span class="string">&#x27;`</span></span><br><span class="line"><span class="string">read -p &quot;Please Input Server Name Is:&quot; HOSTNAME</span></span><br><span class="line"><span class="string">read -p &quot;Please Input Server IP Address Is:&quot; IP_ADDRESS</span></span><br><span class="line"><span class="string">read -p &quot;Please Input Server Netmask Is:&quot; NETMASK_ADDRESS</span></span><br><span class="line"><span class="string">read -p &quot;Please Input Server Gateway Is:&quot; GATEWAY_ADDRESS</span></span><br><span class="line"><span class="string">read -p &quot;Please Input Server DNS Address Is:&quot; DNS_ADDRESS</span></span><br><span class="line"><span class="string">echo &quot;$&#123;HOSTNAME&#125;&quot; &gt; /etc/hostname</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sed -i &quot;s/BOOTPROTO=dhcp/BOOTPROTO=static/g&quot; $&#123;NETWORK_DIR&#125;/ifcfg-$&#123;NETWORK_NIC&#125;</span></span><br><span class="line"><span class="string">sed -i &quot;s/ONBOOT=no/ONBOOT=yes/g&quot; $&#123;NETWORK_DIR&#125;/ifcfg-$&#123;NETWORK_NIC&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cat &gt;&gt;$&#123;NETWORK_DIR&#125;/ifcfg-$&#123;NETWORK_NIC&#125; &lt;&lt;-EOF</span></span><br><span class="line"><span class="string">IPADDR=$&#123;IP_ADDRESS&#125;</span></span><br><span class="line"><span class="string">NETMASK=$&#123;NETMASK_ADDRESS&#125;</span></span><br><span class="line"><span class="string">GATEWAY=$&#123;GATEWAY_ADDRESS&#125;</span></span><br><span class="line"><span class="string">DNS1=$&#123;DNS_ADDRESS&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">echo &quot;网络配置完成，重启后即可生效&quot;</span></span><br></pre></td></tr></table></figure><h2 id="01-set-ssh-hosts-sh"><a href="#01-set-ssh-hosts-sh" class="headerlink" title="01.set_ssh_hosts.sh"></a>01.set_ssh_hosts.sh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment"># Desc    : 此脚本包括配置集群的ssh免密登录和集群内主机的 hosts 映射写入</span></span><br><span class="line"><span class="comment"># Path    : /root</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-27</span></span><br><span class="line"><span class="comment"># Version : 1.0</span></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line">yum <span class="literal">-y</span> install expect</span><br><span class="line">setSSH()&#123;</span><br><span class="line">    /usr/bin/expect &lt;&lt;<span class="literal">-END</span> </span><br><span class="line">    <span class="built_in">set</span> timeout <span class="number">30</span></span><br><span class="line">    spawn ssh<span class="literal">-keygen</span>  </span><br><span class="line">    expect &#123;</span><br><span class="line">    <span class="string">&quot;Enter file in which to save the key (/root/.ssh/id_rsa):&quot;</span> </span><br><span class="line">    &#123; send <span class="string">&quot;\r&quot;</span>;exp_continue ;exp_continue &#125;</span><br><span class="line">    <span class="string">&quot;Enter passphrase (empty for no passphrase):&quot;</span> </span><br><span class="line">    &#123; send <span class="string">&quot;\r&quot;</span>;exp_continue  &#125;</span><br><span class="line">    <span class="string">&quot;Enter same passphrase again: &quot;</span></span><br><span class="line">    &#123; send <span class="string">&quot;\r&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cpSSH()&#123;</span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span>  </span><br><span class="line">    spawn ssh<span class="literal">-copy-id</span> <span class="variable">$ip</span> </span><br><span class="line">    expect &#123;</span><br><span class="line">    <span class="string">&quot;Are you sure you want to continue connecting (yes/no)?&quot;</span> </span><br><span class="line">    &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line">    <span class="string">&quot;root@&quot;</span> </span><br><span class="line">    &#123; send <span class="string">&quot;<span class="variable">$</span>&#123;password&#125;\r&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">done &lt; ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setHOSTS()&#123;</span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span>  </span><br><span class="line">spawn scp <span class="literal">-r</span> /root/ip.txt root<span class="selector-tag">@</span><span class="variable">$</span>&#123;ip&#125;:/root</span><br><span class="line">spawn ssh <span class="variable">$ip</span> </span><br><span class="line">expect <span class="string">&quot;#&quot;</span> </span><br><span class="line">send <span class="string">&quot;cat ip.txt | cut -d &#x27; &#x27; -f1,3 | tee -a /etc/hosts\r&quot;</span></span><br><span class="line">send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">done &lt; ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;************************************************************************&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;此脚本用于集群中主机的免密登录，以及主机hosts 映射&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;运行此脚本前，请注意需要创建名为 ip.txt 的文件用于存放用户信息&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;此文件中需注意，字段之间以空格 <span class="variable">$1</span> 为用户IP，<span class="variable">$2</span> 为主机密码，<span class="variable">$3</span> 为主机名&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;************************************************************************&quot;</span></span><br><span class="line"><span class="built_in">sleep</span> <span class="number">5</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正在运行脚本，请稍后.......&quot;</span></span><br><span class="line"></span><br><span class="line">setSSH</span><br><span class="line">cpSSH</span><br><span class="line">setHOSTS</span><br></pre></td></tr></table></figure><h2 id="02-ntp-server-install-sh"><a href="#02-ntp-server-install-sh" class="headerlink" title="02.ntp_server_install.sh"></a>02.ntp_server_install.sh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment"># Desc    : 此脚本用于集群中时间同步，同步目标主机是 ip.txt 中的 master</span></span><br><span class="line"><span class="comment"># Path    : /root</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-28</span></span><br><span class="line"><span class="comment"># Version : 1.0</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="keyword">if</span> [ `i<span class="type">d</span> -<span class="type">u</span>` -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;YOU MUST BE ROOT!!!&quot;</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ntp_cnf_master()&#123;</span><br><span class="line">yum <span class="literal">-y</span> install ntp</span><br><span class="line"><span class="built_in">cp</span> /etc/ntp.conf /etc/ntp.conf.bak_<span class="variable">$</span>(date +%F_%T)</span><br><span class="line">ntp_server_ip=`cat ip.txt | grep <span class="string">&#x27;master&#x27;</span> | awk <span class="operator">-F</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;server 127.127.1.0 iburst&quot;</span> &gt;&gt; /etc/ntp.conf </span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;s/^server/# &amp; /g&#x27;</span> /etc/ntp.conf </span><br><span class="line">sed <span class="literal">-r</span> <span class="literal">-i</span> <span class="string">&#x27;/3.centos/a server 120.25.115.20\nserver 203.107.6.88&#x27;</span> /etc/ntp.conf</span><br><span class="line">sed <span class="literal">-r</span> <span class="literal">-i</span> <span class="string">&#x27;/restrict 127.0.0.1/i restrict 120.25.115.20\nrestrict 203.107.6.88&#x27;</span> /etc/ntp.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;restrict <span class="variable">$</span>&#123;ntp_server_ip&#125; mask 255.255.255.0 nomodify notrap&quot;</span> &gt;&gt; /etc/ntp.conf</span><br><span class="line"></span><br><span class="line">systemctl enable ntpd  &amp;&amp; systemctl <span class="built_in">start</span> ntpd</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;lsof -i:123 | wc -l&quot;</span> != <span class="string">&quot;0&quot;</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;NTP Service Is Ok!&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;NTP Service Is Error!&quot;</span></span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ntp_cnf_slave()&#123;</span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">[ <span class="variable">$hostname</span> = <span class="type">master</span> ] &amp;&amp; <span class="keyword">continue</span></span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span> </span><br><span class="line"><span class="built_in">set</span> timeout  <span class="number">30</span> </span><br><span class="line">spawn ssh <span class="variable">$ip</span> </span><br><span class="line">expect <span class="string">&quot;#&quot;</span> </span><br><span class="line">send <span class="string">&quot;yum -y install ntp\r&quot;</span></span><br><span class="line">send <span class="string">&quot;sed -r -i &#x27;/restrict 127.0.0.1/i restrict master&#x27; /etc/ntp.conf\r&quot;</span></span><br><span class="line">send <span class="string">&quot;sed -i &#x27;s/^server/# &amp; /g&#x27; /etc/ntp.conf \r&quot;</span></span><br><span class="line">send <span class="string">&quot;sed -r -i &#x27;/3.centos/a server master&#x27; /etc/ntp.conf\r&quot;</span></span><br><span class="line">send <span class="string">&quot;systemctl enable ntpd  &amp;&amp; systemctl start ntpd \r&quot;</span></span><br><span class="line">send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">done &lt; ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################分割线#############################################################</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;********************************************************************&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;*******************************\033[41;30m请注意\033[0m*******************************&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m1.此脚本需要root身份运行！\033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m2.此脚本需要运行前需要按照要求配置 ip.txt 文件！\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m3.运行此脚本前需要配置好 hosts 映射 和 ssh免密！ \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m4.默认文件以主机 master 作为集群中时间同步的服务器，其他 slave 以 \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31mmaster 为同步对象,请在 ip.txt 文件中做出规范！\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m5.您有 30 秒的时间思考是否严格按照上方要求配置文件！\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m如果没有请执行 Ctrl^c 中断执行此脚本！\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;********************************************************************&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">30</span>..<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m时间还剩 <span class="variable">$i</span> 秒\033[0m&quot;</span></span><br><span class="line">    elif [[ <span class="variable">$i</span>%<span class="number">5</span> -<span class="type">eq</span> <span class="number">0</span> ]];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;时间还剩 <span class="variable">$i</span> 秒&quot;</span></span><br><span class="line">    fi</span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ntp_cnf_master</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">2</span></span><br><span class="line">ntp_cnf_slave</span><br></pre></td></tr></table></figure><h2 id="03-jdk-install-sh"><a href="#03-jdk-install-sh" class="headerlink" title="03.jdk_install.sh"></a>03.jdk_install.sh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="comment"># Desc    : jdk 部署安装 </span></span><br><span class="line"><span class="comment"># Path    : /root/cluster</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-26</span></span><br><span class="line"><span class="comment"># Version : 2.0</span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"><span class="keyword">if</span> [ `i<span class="type">d</span> -<span class="type">u</span>` -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;YOU MUST BE ROOT!!!&quot;</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">java <span class="literal">-version</span> &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;您已经安装了JDK，执行命令：\033[41;30m java -version \033[0m 查看版本信息&quot;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jdk_dir=/var/local</span><br><span class="line">jdk=jdk<span class="literal">-8u141-linux-x64</span>.tar.gz</span><br><span class="line"></span><br><span class="line">to_source()&#123;</span><br><span class="line">yum <span class="literal">-y</span> install expect &amp;&gt;/dev/null</span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-P</span> <span class="variable">$</span>&#123;jdk_dir&#125; <span class="literal">--no-cookies</span> <span class="literal">--no-check-certificate</span> <span class="literal">--header</span> <span class="string">&quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot;</span> <span class="string">&quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/<span class="variable">$</span>&#123;jdk&#125;&quot;</span> &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 下载安装包成功 \033[0m&quot;</span> || <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 下载失败 \033[0m&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install()&#123;</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$</span>&#123;jdk_dir&#125; &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在解压安装包...... \033[0m&quot;</span></span><br><span class="line">tar <span class="literal">-zxvf</span> <span class="variable">$</span>&#123;jdk&#125;  &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 解压成功 \033[0m&quot;</span> || <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 解压失败 \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在删除压缩包.... \033[0m&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> <span class="variable">$</span>&#123;jdk&#125;</span><br><span class="line">ln <span class="literal">-s</span> `ls | grep <span class="string">&#x27;jdk&#x27;</span>` jdk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conf_master_jdk()&#123;</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;/etc/profile &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="comment"># JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=<span class="variable">$</span>&#123;jdk_dir&#125;/jdk</span><br><span class="line">export PATH=\<span class="variable">$JAVA_HOME</span>/bin:\<span class="variable">$PATH</span></span><br><span class="line">export CLASSPATH=.:\<span class="variable">$JAVA_HOME</span>/lib/dt.jar:\<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">send2slave_jdk()&#123;</span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">[ <span class="variable">$hostname</span> = <span class="type">master</span> ] &amp;&amp; <span class="keyword">continue</span></span><br><span class="line">scp <span class="literal">-r</span> <span class="variable">$</span>&#123;jdk_dir&#125;/jdk root<span class="selector-tag">@</span><span class="variable">$</span>&#123;ip&#125;:<span class="variable">$</span>&#123;jdk_dir&#125; &amp;&gt;/dev/null</span><br><span class="line">scp <span class="literal">-r</span> /etc/profile root<span class="selector-tag">@</span><span class="variable">$</span>&#123;ip&#125;:/etc/</span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span>  </span><br><span class="line">spawn ssh <span class="variable">$ip</span> </span><br><span class="line">expect <span class="string">&quot;#&quot;</span> </span><br><span class="line">send <span class="string">&quot;source /etc/profile\r&quot;</span></span><br><span class="line">send <span class="string">&quot;sleep 2\r&quot;</span></span><br><span class="line">send <span class="string">&quot;java -version\r&quot;</span></span><br><span class="line">send <span class="string">&quot;&quot;</span></span><br><span class="line">send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">done &lt; ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================分割线======================================</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在为您校验jdk安装包... \033[0m&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;jdk_dir&#125;/<span class="variable">$</span>&#123;jdk&#125;&quot;</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 校验成功！！ \033[0m&quot;</span></span><br><span class="line">    install</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 校验失败！未找到安装包，正在下载安装包\033[0m&quot;</span></span><br><span class="line">    to_source</span><br><span class="line">    install</span><br><span class="line">    conf_master_jdk</span><br><span class="line">    source /etc/profile</span><br><span class="line">    java <span class="literal">-version</span> </span><br><span class="line">    [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span>  <span class="string">&quot;``已经安装了JDK&quot;</span>  || <span class="built_in">echo</span> <span class="string">&quot;jdk 部署失败&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m正在为其他节点部署jdk，请稍等......\033[0m&quot;</span> </span><br><span class="line">    send2slave_jdk</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=================================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;JDK 安装完成！！！&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;文件存储在：\033[41;30m <span class="variable">$</span>&#123;jdk_dir&#125; \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;执行命令：\033[41;30m source /etc/profile \033[0m 重新加载环境变量&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;执行命令：\033[41;30m java -version \033[0m 查看版本信息&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=================================================&quot;</span></span><br></pre></td></tr></table></figure><h2 id="04-zookeeper-install-sh"><a href="#04-zookeeper-install-sh" class="headerlink" title="04.zookeeper_install.sh"></a>04.zookeeper_install.sh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="comment"># Desc    : 此脚本用于集群中zookeeper 部署</span></span><br><span class="line"><span class="comment"># Path    : /root</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-28</span></span><br><span class="line"><span class="comment"># Version : 1.0</span></span><br><span class="line"><span class="comment">############################################################################</span></span><br><span class="line"><span class="keyword">if</span> [ `i<span class="type">d</span> -<span class="type">u</span>` -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;YOU MUST BE ROOT!!!&quot;</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">zk_dir=/var/local</span><br><span class="line">zkdatas_dir=/var/local/zookeeper</span><br><span class="line">zk=apache<span class="literal">-zookeeper-3</span>.<span class="number">7.1</span><span class="literal">-bin</span>.tar.gz</span><br><span class="line">link_zk=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.7.1/apache-zookeeper-3.7.1-bin.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">to_source()&#123;</span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-P</span> <span class="variable">$</span>&#123;zk_dir&#125; <span class="literal">--no-cookies</span> <span class="literal">--no-check-certificate</span> <span class="literal">--header</span> <span class="string">&quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot;</span> <span class="variable">$</span>&#123;link_zk&#125;</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 下载安装包成功 \033[0m&quot;</span> || <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 下载失败 \033[0m&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install()&#123;</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$</span>&#123;zk_dir&#125; &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在解压安装包...... \033[0m&quot;</span></span><br><span class="line">tar <span class="literal">-zxvf</span> <span class="variable">$</span>&#123;zk&#125;  &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 解压成功 \033[0m&quot;</span> || <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 解压失败 \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在删除压缩包.... \033[0m&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> <span class="variable">$</span>&#123;zk&#125;</span><br><span class="line">ln <span class="literal">-s</span> `ls | grep <span class="string">&#x27;zookeeper&#x27;</span>` zookeeper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">master_conf()&#123;</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$</span>&#123;zk_dir&#125;/zookeeper/conf</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br><span class="line">mkdir <span class="variable">$</span>&#123;zkdatas_dir&#125;/zkdatas</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;zoo.cfg&lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="comment"># Zookeeper的数据存放目录</span></span><br><span class="line">dataDir=<span class="variable">$</span>&#123;zkdatas_dir&#125;/zkdatas</span><br><span class="line"><span class="comment"># 保留多少个快照</span></span><br><span class="line">autopurge.snapRetainCount=<span class="number">3</span></span><br><span class="line"><span class="comment"># 日志多少小时清理一次</span></span><br><span class="line">autopurge.purgeInterval=<span class="number">1</span></span><br><span class="line"><span class="comment"># 集群中服务器地址&quot; </span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    server_num=`grep <span class="literal">-n</span> <span class="literal">-o</span> <span class="string">&quot;<span class="variable">$</span>&#123;hostname&#125;&quot;</span> /root/ip.txt | awk <span class="operator">-F</span> <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;server.<span class="variable">$</span>&#123;server_num&#125;=<span class="variable">$</span>&#123;hostname&#125;:2888:3888&quot;</span> &gt;&gt;<span class="variable">$</span>&#123;zk_dir&#125;/zookeeper/conf/zoo.cfg</span><br><span class="line">done &lt; /root/ip.txt</span><br><span class="line">server_id=<span class="variable">$</span>(grep <span class="literal">-n</span> <span class="literal">-o</span> <span class="string">&quot;`hostname`&quot; /root/ip.txt | awk -F &#x27;:&#x27; &#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;)</span></span><br><span class="line"><span class="string">echo <span class="variable">$</span>&#123;server_id&#125; &gt;&gt; <span class="variable">$</span>&#123;zkdatas_dir&#125;/zkdatas/myid</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">env_conf()&#123;</span></span><br><span class="line"><span class="string">cat &gt;&gt;/etc/profile &lt;&lt;-EOF</span></span><br><span class="line"><span class="string"># zookeeper 环境变量</span></span><br><span class="line"><span class="string">export ZOOKEEPER_HOME=<span class="variable">$</span>&#123;zk_dir&#125;/zookeeper</span></span><br><span class="line"><span class="string">export PATH=\<span class="variable">$PATH:</span>\<span class="variable">$ZOOKEEPER_HOME</span>/bin</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">source /etc/profile</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">send2slave_zk()&#123;</span></span><br><span class="line"><span class="string">while read ip password hostname</span></span><br><span class="line"><span class="string">do</span></span><br><span class="line"><span class="string">[ <span class="variable">$hostname</span> = master ] &amp;&amp; continue</span></span><br><span class="line"><span class="string">echo -e &quot;</span>\<span class="number">033</span>[<span class="number">32</span><span class="type">m</span> 正在为 <span class="variable">$</span>&#123;<span class="type">hostname</span>&#125; 传输 <span class="type">zk</span>包，请稍等<span class="type">.......</span>\<span class="number">033</span>[<span class="number">0</span><span class="type">m</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">scp -r <span class="variable">$</span>&#123;zk_dir&#125;/zookeeper root@<span class="variable">$</span>&#123;ip&#125;:<span class="variable">$</span>&#123;zk_dir&#125; &amp;&gt;/dev/null</span></span><br><span class="line"><span class="string">[ <span class="variable">$</span>? -eq 0 ] &amp;&amp; echo -e &quot;</span>\<span class="number">033</span>[<span class="number">32</span><span class="type">m</span> 传输成功！！\<span class="number">033</span>[<span class="number">0</span><span class="type">m</span><span class="string">&quot; || echo -e &quot;</span>\<span class="number">033</span>[<span class="number">32</span><span class="type">m</span>传输失败\<span class="number">033</span>[<span class="number">0</span><span class="type">m</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">scp -r /etc/profile root@<span class="variable">$</span>&#123;ip&#125;:/etc/</span></span><br><span class="line"><span class="string">/usr/bin/expect &lt;&lt;-END  </span></span><br><span class="line"><span class="string">spawn ssh <span class="variable">$ip</span> </span></span><br><span class="line"><span class="string">expect &quot;</span><span class="comment">#&quot; </span></span><br><span class="line"><span class="type">send</span> <span class="string">&quot;hostname=`hostname`\r&quot;</span></span><br><span class="line"><span class="type">send</span> <span class="string">&quot;grep -n -o <span class="variable">$hostname</span> /root/ip.txt |cut -d &#x27;:&#x27; -f1 &gt;<span class="variable">$</span>&#123;zkdatas_dir&#125;/zkdatas/myid\r&quot;</span></span><br><span class="line"><span class="type">send</span> <span class="string">&quot;sleep 2\r&quot;</span></span><br><span class="line"><span class="type">send</span> <span class="string">&quot;exit\r&quot;</span></span><br><span class="line"><span class="type">expect</span> <span class="type">eof</span></span><br><span class="line"><span class="type">END</span></span><br><span class="line"><span class="type">done</span> &lt; /<span class="type">root</span>/<span class="type">ip.txt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">main</span>()&#123;</span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[33m 正在为您校验zookeeper安装包... \033[0m&quot;</span></span><br><span class="line"><span class="type">if</span> [ -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;zk_dir&#125;/<span class="variable">$</span>&#123;zk&#125;&quot;</span> ];<span class="type">then</span></span><br><span class="line">    <span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[32m 校验成功！！ \033[0m&quot;</span></span><br><span class="line">    <span class="type">install</span></span><br><span class="line"><span class="type">else</span></span><br><span class="line">    <span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[32m 校验失败！未找到安装包，正在下载安装包\033[0m&quot;</span></span><br><span class="line">    <span class="type">to_source</span></span><br><span class="line">    <span class="type">sleep</span> <span class="number">2</span></span><br><span class="line">    <span class="type">install</span></span><br><span class="line"><span class="type">fi</span> </span><br><span class="line"><span class="type">master_conf</span></span><br><span class="line"><span class="type">env_conf</span></span><br><span class="line"><span class="type">send2slave_zk</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;=====================================================================================&quot;</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;集群 zookeeper 部署完成，如需要启动脚本请执行 <span class="variable">$</span>&#123;zk_dir&#125;/zookeeper/bin/zkServer.sh 文件 &quot;</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;如需要一键启动脚本请执行 05.zkServer-all.sh （请注意此脚本需要传递参数 start|stop|status）&quot;</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;=====================================================================================&quot;</span>   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################分割线#############################################################</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;********************************************************************&quot;</span></span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;*******************************\033[41;30m请注意\033[0m*******************************&quot;</span> </span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[31m1.此脚本需要root身份运行！\033[0m&quot;</span> </span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[31m2.此脚本需要运行前需要按照要求配置 ip.txt 文件！\033[0m&quot;</span></span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[31m3.运行此脚本前需要配置好 hosts 映射 和 ssh免密！ \033[0m&quot;</span> </span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[31m4.默认文件以主机 master 作为脚本的起始机 \033[0m&quot;</span> </span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[31m5.您有 30 秒的时间思考是否严格按照上方要求配置文件！\033[0m&quot;</span></span><br><span class="line"><span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[31m如果没有请执行 Ctrl^c 中断执行此脚本！\033[0m&quot;</span></span><br><span class="line"><span class="type">echo</span> <span class="string">&quot;********************************************************************&quot;</span></span><br><span class="line"><span class="type">for</span> <span class="type">i</span> <span class="type">in</span> &#123;<span class="number">30</span><span class="type">..1</span>&#125;</span><br><span class="line"><span class="type">do</span></span><br><span class="line">    <span class="type">if</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ];<span class="type">then</span></span><br><span class="line">        <span class="type">echo</span> -<span class="type">e</span> <span class="string">&quot;\033[31m时间还剩 <span class="variable">$i</span> 秒\033[0m&quot;</span></span><br><span class="line">    <span class="type">elif</span> [[ <span class="variable">$i</span>%<span class="number">5</span> -<span class="type">eq</span> <span class="number">0</span> ]];<span class="type">then</span></span><br><span class="line">        <span class="type">echo</span> <span class="string">&quot;时间还剩 <span class="variable">$i</span> 秒&quot;</span></span><br><span class="line">    <span class="type">fi</span></span><br><span class="line">    <span class="type">sleep</span> <span class="number">1</span></span><br><span class="line"><span class="type">done</span></span><br><span class="line"><span class="type">main</span></span><br></pre></td></tr></table></figure><h2 id="05-zkServer-all-sh"><a href="#05-zkServer-all-sh" class="headerlink" title="05.zkServer-all.sh"></a>05.zkServer-all.sh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment"># Desc    : 此脚本用于集群中zookeeper 一键启停</span></span><br><span class="line"><span class="comment"># Path    : /root</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-28</span></span><br><span class="line"><span class="comment"># Version : 1.0</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;此脚本用于集群中的 zookeeper 的启停及查看状态&quot;</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入您执行的操作（start|stop|status）：&quot;</span> CHOICE</span><br><span class="line">zk_dir=/var/local</span><br><span class="line">operate()&#123;</span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span>  </span><br><span class="line">spawn ssh <span class="variable">$ip</span> </span><br><span class="line">expect <span class="string">&quot;#&quot;</span> </span><br><span class="line">send <span class="string">&quot;cd <span class="variable">$</span>&#123;zk_dir&#125;/zookeeper/bin\r&quot;</span></span><br><span class="line">send <span class="string">&quot;./zkServer.sh <span class="variable">$CHOICE</span>\r&quot;</span></span><br><span class="line">send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">done &lt; /root/ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$CHOICE</span> = <span class="string">&quot;start&quot;</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[42;34m集群中 zookeeper 正在开启......\033[0m&quot;</span> </span><br><span class="line">    operate</span><br><span class="line">elif [ <span class="variable">$CHOICE</span> = <span class="string">&quot;stop&quot;</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[42;34m集群中 zookeeper 正在关闭......\033[0m&quot;</span> </span><br><span class="line">    operate</span><br><span class="line">elif [ <span class="variable">$CHOICE</span> = <span class="string">&quot;status&quot;</span> ];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[42;34m查看集群中 zookeeper 运行状态\033[0m&quot;</span> </span><br><span class="line">    operate</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="06-hadoop-install-sh"><a href="#06-hadoop-install-sh" class="headerlink" title="06.hadoop_install.sh"></a>06.hadoop_install.sh</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment"># Desc    : 此脚本用于部署 Hadoop 集群</span></span><br><span class="line"><span class="comment"># Path    : /root</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-28</span></span><br><span class="line"><span class="comment"># Version : 1.0</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="keyword">if</span> [ `i<span class="type">d</span> -<span class="type">u</span>` -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;YOU MUST BE ROOT!!!&quot;</span></span><br><span class="line">    <span class="keyword">exit</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">hadoop_dir=/var/local</span><br><span class="line">hadoop=hadoop<span class="literal">-3</span>.<span class="number">3.1</span>.tar.gz</span><br><span class="line">hd_conf_dir=<span class="variable">$</span>&#123;hadoop_dir&#125;/hadoop/etc/hadoop</span><br><span class="line">hd_data_dir=/var/local/<span class="keyword">data</span></span><br><span class="line">snn_host=slave1</span><br><span class="line">web_history_host=master</span><br><span class="line">yarn_lead_role=master</span><br><span class="line">link_hadoop=<span class="string">&quot;https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.3.1/hadoop-3.3.1.tar.gz&quot;</span></span><br><span class="line"></span><br><span class="line">to_source()&#123;</span><br><span class="line"><span class="built_in">wget</span> <span class="literal">-P</span> <span class="variable">$</span>&#123;hadoop_dir&#125; <span class="literal">--no-cookies</span> <span class="literal">--no-check-certificate</span> <span class="literal">--header</span> <span class="string">&quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot;</span> <span class="variable">$</span>&#123;link_hadoop&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install()&#123;</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$</span>&#123;hadoop_dir&#125; &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在解压安装包...... \033[0m&quot;</span></span><br><span class="line">tar <span class="literal">-zxvf</span> <span class="variable">$</span>&#123;hadoop&#125;  &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 解压成功 \033[0m&quot;</span> || <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 解压失败 \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在删除压缩包.... \033[0m&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-rf</span> <span class="variable">$</span>&#123;hadoop&#125;</span><br><span class="line">ln <span class="literal">-s</span> `ls | grep <span class="string">&#x27;hadoop&#x27;</span>` hadoop</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hadoop_master_cnf()&#123;</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$hd_conf_dir</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;hadoop<span class="literal">-env</span>.sh&lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">export JAVA_HOME=<span class="variable">$</span>&#123;hadoop_dir&#125;/jdk</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root </span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;/configuration/d&#x27;</span> core<span class="literal">-site</span>.xml</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;core<span class="literal">-site</span>.xml&lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;!<span class="literal">--</span> 设置默认使用的文件系统 Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;hdfs://master:<span class="number">8020</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!<span class="literal">--</span> 设置Hadoop本地保存数据路径 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;<span class="variable">$</span>&#123;hd_data_dir&#125;/hadoop&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!<span class="literal">--</span> 设置HDFS web UI用户身份 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hadoop.http.staticuser.user&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!<span class="literal">--</span> 整合hive 用户代理设置 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="literal">--</span> 文件系统垃圾桶保存时间 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;fs.trash.interval&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;<span class="number">1440</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;/configuration/d&#x27;</span> hdfs<span class="literal">-site</span>.xml</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;hdfs<span class="literal">-site</span>.xml&lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!<span class="literal">--</span> 设置SNN进程运行机器位置信息 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;dfs.namenode.secondary.http<span class="literal">-address</span>&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;<span class="variable">$</span>&#123;snn_host&#125;:<span class="number">9868</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;/configuration/d&#x27;</span> mapred<span class="literal">-site</span>.xml</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;mapred<span class="literal">-site</span>.xml&lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;!<span class="literal">--</span> 设置MR程序默认运行模式： yarn集群模式 local本地模式 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="literal">--</span> MR程序历史服务地址 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="variable">$</span>&#123;web_history_host&#125;:<span class="number">10020</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;!<span class="literal">--</span> MR程序历史服务器web端地址 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="variable">$</span>&#123;web_history_host&#125;:<span class="number">19888</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;HADOOP_MAPRED_HOME=\<span class="variable">$</span>&#123;HADOOP_HOME&#125;&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.map.env&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;HADOOP_MAPRED_HOME=\<span class="variable">$</span>&#123;HADOOP_HOME&#125;&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.reduce.env&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;HADOOP_MAPRED_HOME=\<span class="variable">$</span>&#123;HADOOP_HOME&#125;&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;/configuration/d&#x27;</span> yarn<span class="literal">-site</span>.xml</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;yarn<span class="literal">-site</span>.xml&lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;!<span class="literal">--</span> 设置YARN集群主角色运行机器位置 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;<span class="variable">$</span>&#123;yarn_lead_role&#125;&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.nodemanager.aux<span class="literal">-services</span>&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="literal">--</span> 是否将对容器实施物理内存限制 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.nodemanager.pmem<span class="literal">-check-enabled</span>&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="literal">--</span> 是否将对容器实施虚拟内存限制。 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.nodemanager.vmem<span class="literal">-check-enabled</span>&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="literal">--</span> 开启日志聚集 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.log<span class="literal">-aggregation-enable</span>&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;true&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="literal">--</span> 设置yarn历史服务器地址 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.log.server.url&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;http://<span class="variable">$</span>&#123;web_history_host&#125;:<span class="number">19888</span>/jobhistory/logs&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!<span class="literal">--</span> 历史日志保存的时间 <span class="number">7</span>天 <span class="literal">--</span>&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">      &lt;name&gt;yarn.log<span class="literal">-aggregation</span>.retain<span class="literal">-seconds</span>&lt;/name&gt;</span><br><span class="line">      &lt;value&gt;<span class="number">604800</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sed <span class="literal">-i</span> <span class="string">&#x27;/localhost/d&#x27;</span> workers</span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$hostname</span> &gt;&gt;workers</span><br><span class="line">done &lt; /root/ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">env_conf()&#123;</span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;/etc/profile &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line"><span class="comment"># HADOOP环境变量</span></span><br><span class="line">export HADOOP_HOME=<span class="variable">$</span>&#123;hadoop_dir&#125;/hadoop</span><br><span class="line">export PATH=\<span class="variable">$PATH:</span>\<span class="variable">$HADOOP_HOME</span>/bin:\<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line">EOF</span><br><span class="line">source /etc/profile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">send2slave_hd()&#123;</span><br><span class="line"><span class="keyword">while</span> read ip password hostname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">[ <span class="variable">$hostname</span> = <span class="type">master</span> ] &amp;&amp; <span class="keyword">continue</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 正在为 <span class="variable">$</span>&#123;hostname&#125; 传输 hadoop包，请稍等.......\033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 请注意此过程所需时间较长请耐心等待\033[0m&quot;</span></span><br><span class="line">scp <span class="literal">-r</span> <span class="variable">$</span>&#123;hadoop_dir&#125;/hadoop root<span class="selector-tag">@</span><span class="variable">$</span>&#123;ip&#125;:<span class="variable">$</span>&#123;hadoop_dir&#125; &amp;&gt;/dev/null</span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 传输成功！！\033[0m&quot;</span> || <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m传输失败\033[0m&quot;</span> </span><br><span class="line">scp <span class="literal">-r</span> /etc/profile root<span class="selector-tag">@</span><span class="variable">$</span>&#123;ip&#125;:/etc/</span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span>  </span><br><span class="line">spawn ssh <span class="variable">$ip</span> </span><br><span class="line">expect <span class="string">&quot;#&quot;</span> </span><br><span class="line">send <span class="string">&quot;source /etc/profile\r&quot;</span></span><br><span class="line">send <span class="string">&quot;sleep 2\r&quot;</span></span><br><span class="line">send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">done &lt; /root/ip.txt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[33m 正在为您校验hadoop安装包... \033[0m&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> <span class="string">&quot;<span class="variable">$</span>&#123;hadop_dir&#125;/<span class="variable">$</span>&#123;hadoop&#125;&quot;</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 校验成功！！ \033[0m&quot;</span></span><br><span class="line">    install</span><br><span class="line">    hadoop_master_cnf</span><br><span class="line">    env_conf</span><br><span class="line">    hdfs namenode <span class="literal">-format</span></span><br><span class="line">    send2slave_hd</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 校验失败！未找到安装包，正在下载安装包\033[0m&quot;</span></span><br><span class="line">    to_source</span><br><span class="line">    install</span><br><span class="line">    hadoop_master_cnf</span><br><span class="line">    env_conf</span><br><span class="line">    hdfs namenode <span class="literal">-format</span></span><br><span class="line">    send2slave_hd</span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">2</span></span><br><span class="line">fi  </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====================================================================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m您已经成功部署hadoop\033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m开启 hadoop 前请先开启 zookeeper \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m请前往<span class="variable">$</span>&#123;hadoop_dir&#125;/hadoop/sbin \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m执行start-all.sh 文件开启 hadoop 集群\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m执行 mr-jobhistory-daemon.sh start historyserver文件开启历史服务器\033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m开启后即可访问 web 页面：http://master:9870/ \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m开启后即可访问 web 页面：http://master:8088/ \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m开启后即可访问 web 页面：http://master:19888/ \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m执行 jps 查看开启的进程\033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====================================================================================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#==================================分割线=======================================</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====================================================================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;*******************************\033[41;30m请注意\033[0m*******************************&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m1.此脚本需要root身份运行！\033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m2.此脚本需要运行前需要按照要求配置 ip.txt 文件,请先阅读readme！\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m3.运行此脚本前需要配置好 hosts 映射 和 ssh免密！ \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m4.默认文件以主机 master 作为脚本的起始机 \033[0m&quot;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m5.您有 30 秒的时间思考是否严格按照上方要求配置文件！\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m如果没有请执行 Ctrl^c 中断执行此脚本！\033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====================================================================================&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">30</span>..<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m时间还剩 <span class="variable">$i</span> 秒\033[0m&quot;</span></span><br><span class="line">    elif [[ <span class="variable">$i</span>%<span class="number">5</span> -<span class="type">eq</span> <span class="number">0</span> ]];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;时间还剩 <span class="variable">$i</span> 秒&quot;</span></span><br><span class="line">    fi</span><br><span class="line">    <span class="built_in">sleep</span> <span class="number">1</span></span><br><span class="line">done</span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="ip-txt"><a href="#ip-txt" class="headerlink" title="ip.txt"></a>ip.txt</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.88.135 Ccu2021@ master</span><br><span class="line">192.168.88.136 Ccu2021@ slave1</span><br><span class="line">192.168.88.137 Ccu2021@ slave2</span><br></pre></td></tr></table></figure><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>视频演示链接：<a href="https://www.bilibili.com/video/BV1aN4y177Zr?spm_id_from=333.999.0.0&amp;vd_source=1f803637576adecd1ce5031eaadeb42b">https://www.bilibili.com/video/BV1aN4y177Zr?spm_id_from=333.999.0.0&amp;vd_source=1f803637576adecd1ce5031eaadeb42b</a></p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>阿里云盘链接：<a href="https://www.aliyundrive.com/s/r9kfvYTrnje">https://www.aliyundrive.com/s/r9kfvYTrnje</a></p></div>]]></content>
    
    
    <summary type="html">Hadoop脚本部署，包含7个shell脚本，以及一个ip.txt文件，建议运行顺序为00-06</summary>
    
    
    
    <category term="Linux" scheme="https://www.jermyn.cn/categories/Linux/"/>
    
    
    <category term="Hadoop脚本部署" scheme="https://www.jermyn.cn/tags/Hadoop%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2/"/>
    
    <category term="ssh" scheme="https://www.jermyn.cn/tags/ssh/"/>
    
    <category term="zookeeper" scheme="https://www.jermyn.cn/tags/zookeeper/"/>
    
    <category term="ntp" scheme="https://www.jermyn.cn/tags/ntp/"/>
    
  </entry>
  
  <entry>
    <title>Tag-Plugins-Plus</title>
    <link href="https://www.jermyn.cn/posts/2c50.html"/>
    <id>https://www.jermyn.cn/posts/2c50.html</id>
    <published>2022-08-26T20:14:04.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<div class="note info simple"><p>info 本文档为🧊Akilarの糖果屋🍭出品，转载需注明出处。<br>如有使用了本站的外挂标签插件的读者，请确保自己的配置内容为最新。<br>同理，若您在使用本帖教程后，发现样式无法完全还原文档内效果，请重点排查您的其余第三方魔改css样式，例如css中是否存在circle、square等易重class名。</p></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><div class="tabs" id="text"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#text-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#text-2">样式预览</button></li><li class="tab"><button type="button" data-href="#text-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><div class="tabs" id="span"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#span-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#span-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><div class="tabs" id="p"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#p-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#p-3">样式预览</button></li><li class="tab"><button type="button" data-href="#p-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="p-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用-note"><a href="#引用-note" class="headerlink" title="引用 note"></a>引用 note</h2><div class="note warning flat"><p>最新版<code>butterfly</code>标签支持引用<code>fontawesome V5</code>图标，效果上已经优于<code>volantis</code>的note标签。故不再额外引入<code>volantis的note样式</code>。<del>做样式适配好麻烦的啊，能偷懒就偷懒吧</del></p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>以下是<code>butterfly</code>主题的note写法。</p></div><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#note-1">通用配置</button></li><li class="tab"><button type="button" data-href="#note-2">语法格式</button></li><li class="tab"><button type="button" data-href="#note-3">配置参数</button></li><li class="tab active"><button type="button" data-href="#note-4">样式预览</button></li><li class="tab"><button type="button" data-href="#note-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><details class="folding-tag" cyan><summary> 方法一 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><details class="folding-tag" cyan><summary> 方法一 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】不显示 icon</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table></div>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="note-4"><details class="folding-tag" cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div></li><li><p><code>modern</code>样式</p><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div></li><li><p><code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div></li><li><p><code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div></li><li><p><code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div></li></ol>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><p>simple样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>modern样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>flat样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li></ol><ol><li><p>disabled样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div></li><li><p>no-icon样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><details class="folding-tag" cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><details class="folding-tag" blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><p><code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly渐变背景标签</a>,自己写了个<code>tip.js</code>来渲染标签，精简了一下代码。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>default</p></div>   <div class="tip info"><p>info</p></div>   <div class="tip success"><p>success</p></div>   <div class="tip error"><p>error</p></div>   <div class="tip warning"><p>warning</p></div>   <div class="tip bolt"><p>bolt</p></div>   <div class="tip ban"><p>ban</p></div>   <div class="tip home"><p>home</p></div>   <div class="tip sync"><p>sync</p></div>   <div class="tip cogs"><p>cogs</p></div>   <div class="tip key"><p>key</p></div>   <div class="tip bell"><p>bell</p></div>   <div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h2><div class="tip fa-gamepad faa-horizontal animated"><p>动态标签的实质是引用了<a href="https://github.com/l-lin/font-awesome-animation">font-awesome-animation</a>的css样式，不一定局限于tip标签，也可以是其他标签。<br>只不过这里<code>tip.js</code>是我自己写的，所以我清楚它会怎么被渲染成html，才用的这个写法。<br>可以熟读文档，使用html语言来编写其他标签类型。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看<a href="http://l-lin.github.io/font-awesome-animation/">font-awesome-animation文档</a></p><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><div class="table-container"><table><thead><tr><th style="text-align:left">On DOM load<br>当页面加载时<br>显示动画</th><th style="text-align:left">On hover<br>当鼠标悬停时<br>显示动画</th><th style="text-align:left">On parent hover<br>当鼠标悬停<br>在父级元素时<br>显示动画</th></tr></thead><tbody><tr><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated"></i>&nbsp;faa-wrench animated</span></td><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated-hover"></i>&nbsp;faa-wrench animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i>&nbsp;faa-wrench</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated"></i>&nbsp;faa-ring animated</span></td><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated-hover"></i>&nbsp;faa-ring animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i>&nbsp;faa-ring</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated"></i>&nbsp;faa-horizontal animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated-hover"></i>&nbsp;faa-horizontal animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i>&nbsp;faa-horizontal</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated"></i>&nbsp;faa-vertical animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated-hover"></i>&nbsp;faa-vertical animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i>&nbsp;faa-vertical</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated"></i>&nbsp;faa-flash animated</span></td><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i>&nbsp;faa-flash animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i>&nbsp;faa-flash</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated"></i>&nbsp;faa-bounce animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated-hover"></i>&nbsp;faa-bounce animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i>&nbsp;faa-bounce</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated"></i>&nbsp;faa-spin animated</span></td><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated-hover"></i>&nbsp;faa-spin animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i>&nbsp;faa-spin</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated"></i>&nbsp;faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-plane faa-tada"></i>&nbsp;faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated"></i>&nbsp;faa-pulse animated</span></td><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated-hover"></i>&nbsp;faa-pulse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i>&nbsp;faa-pulse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated"></i>&nbsp;faa-shake animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated-hover"></i>&nbsp;faa-shake animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i>&nbsp;faa-shake</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated"></i>&nbsp;faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated-hover"></i>&nbsp;faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i>&nbsp;faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated"></i>&nbsp;faa-passing animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated-hover"></i>&nbsp;faa-passing animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i>&nbsp;faa-passing</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated"></i>&nbsp;faa-passing-reverse animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i>&nbsp;faa-passing-reverse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i>&nbsp;faa-passing-reverse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated"></i>&nbsp;faa-burst animated</span></td><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated-hover"></i>&nbsp;faa-burst animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i>&nbsp;faa-burst</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-star faa-falling animated"></i>&nbsp;faa-falling animated</span></td><td style="text-align:left"><span><i class="fas fa-star faa-falling animated-hover"></i>&nbsp;faa-falling animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i>&nbsp;faa-falling</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated"></i>&nbsp;faa-rising animated</span></td><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated-hover"></i>&nbsp;faa-rising animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i>&nbsp;faa-rising</span></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><ol><li><p>On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div></li><li><p>调整动画速度。</p><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div></li><li><p>On hover（当鼠标悬停时显示动画）</p><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div></li><li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><ol><li><p>On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li><li><p>On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h2><div class="tabs" id="checkbox"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#checkbox-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#checkbox-3">样式预览</button></li><li class="tab"><button type="button" data-href="#checkbox-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="checkbox-3"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div>   <div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div>   <div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div>   <div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div>   <div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div>   <div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div>   <div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div>   <div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div>   <div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div>   <div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h2><div class="tabs" id="radio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#radio-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#radio-3">样式预览</button></li><li class="tab"><button type="button" data-href="#radio-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-2"><ol><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="radio-3"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div>   <div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div>   <div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div>   <div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div>   <div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div>   <div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div>   <div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时间轴-timeline"><a href="#时间轴-timeline" class="headerlink" title="时间轴 timeline"></a>时间轴 timeline</h2><div class="tip fa-wrench"><p>插件版v1.0.16以后，为避免与Butterfly_v4.0+版本中的timeline外挂标签冲突，已经移除了插件内的timeline外挂标签，请低于Butterfly_v4.0的用户升级主题或安装1.0.15版本的外挂标签插件，或者自行添加timeline.js和timeline.styl文件至对应文件夹。请使用了原有timeline外挂标签的用户受累替换语法格式。<br>Butterfly_v4.0+自带的timeline外挂标签样式更加好看。语法语意也更加清晰。</p></div><div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#timeline-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#timeline-2">参数配置</button></li><li class="tab"><button type="button" data-href="#timeline-3">样式预览</button></li><li class="tab"><button type="button" data-href="#timeline-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="timeline-2"><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">标题/时间线</td></tr><tr><td style="text-align:left">color</td><td style="text-align:left"><code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-3"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#link-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#link-2">样式预览</button></li><li class="tab"><button type="button" data-href="#link-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="link-2"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="按钮-btns"><a href="#按钮-btns" class="headerlink" title="按钮 btns"></a>按钮 btns</h2><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p><code>Volantis</code>的按钮使用的是<code>btn</code>和<code>btns</code>标签。<code>btns</code>和<code>butterfly</code>的<code>button</code>不冲突，但是<code>btn</code>会被强制渲染，导致部分参数失效,而且<code>btn</code>的效果还是<code>butterfly</code>的<code>button</code>更好看些。所以就只适配了<code>btns</code>。</p></div><div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#btn-1">标签语法</button></li><li class="tab"><button type="button" data-href="#btn-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#btn-3">样式预览</button></li><li class="tab"><button type="button" data-href="#btn-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt;</code>和<code>&lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">wide</td><td style="text-align:left">宽一点的按钮</td></tr><tr><td style="text-align:left">fill</td><td style="text-align:left">填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td style="text-align:left">center</td><td style="text-align:left">居中，按钮之间是固定间距</td></tr><tr><td style="text-align:left">around</td><td style="text-align:left">居中分散</td></tr><tr><td style="text-align:left">grid2</td><td style="text-align:left">等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid3</td><td style="text-align:left">等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid4</td><td style="text-align:left">等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid5</td><td style="text-align:left">等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="btn-3"><ol><li><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><div class="btns circle grid5">         <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>       </div></li><li><p>或者含有图标的按钮：</p><div class="btns rounded grid5">         <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>       </div></li><li><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><div class="btns circle center grid5">         <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p red'>专业版</p><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'><i class='fab fa-apple'></i><b>心率管家</b><p class='p green'>免费版</p><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>       </div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-4"><ol><li><p>如果需要显示类似「团队成员」之类的一组含有头像的链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者含有图标的按钮：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li><li><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="github卡片-ghcard"><a href="#github卡片-ghcard" class="headerlink" title="github卡片 ghcard"></a>github卡片 ghcard</h2><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>ghcard使用了<code>github-readme-stats</code>的API，支持直接使用markdown语法来写。</p></div><div class="tabs" id="ghcard"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghcard-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghcard-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghcard-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghcard-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-2"><p>更多参数可以参考：<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/anuraghazra/github-readme-stats"><img src="https://github-readme-stats.vercel.app/api/pin/?username=anuraghazra&repo=github-readme-stats&show_owner=true"/></a><br>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><div class="table-container"><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">取值</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">hide</td><td style="text-align:left">stars,commits,prs,issues,contribs</td><td style="text-align:left">隐藏指定统计</td></tr><tr><td style="text-align:left">count_private</td><td style="text-align:left">true</td><td style="text-align:left">将私人项目贡献添加到总提交计数中</td></tr><tr><td style="text-align:left">show_icons</td><td style="text-align:left">true</td><td style="text-align:left">显示图标</td></tr><tr><td style="text-align:left">theme</td><td style="text-align:left">请查阅<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td style="text-align:left">主题</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghcard-3"><ol><li>用户信息卡片</li></ol><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><ol><li>仓库信息卡片</li></ol><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-4"><ol><li><p>用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></li><li><p>仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="github徽标-ghbdage"><a href="#github徽标-ghbdage" class="headerlink" title="github徽标 ghbdage"></a>github徽标 ghbdage</h2><div class="tip cogs"><p>关于ghbdage参数的更多具体用法可以参看站内教程：<a href="/posts/e87ad7f8">添加github徽标</a></p></div><div class="tabs" id="ghbdage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghbdage-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghbdage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghbdage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghbdage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghbdage-3"><p>   <div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div></p><ol><li>基本参数<br><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></li><li>信息参数<br><br><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></li><li>拓展参数<br><br><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=40"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=40&logoColor=violet"></object></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-4"><pre><code>&lt;div class=&quot;note info modern&quot;&gt;&lt;p&gt;本外挂标签的参数分为三组，用&lt;code&gt;||&lt;/code&gt;分割。&lt;/p&gt;</code></pre><p>&lt;/div&gt;</p><ol><li>基本参数,定义徽标左右文字和图标</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><ol><li>信息参数，定义徽标右侧内容背景色，指向链接</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><ol><li>拓展参数，支持shields的API的全部参数内容</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h2><div class="tabs" id="site"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#site-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#site-2">样式预览</button></li><li class="tab"><button type="button" data-href="#site-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内图片-inlineimage"><a href="#行内图片-inlineimage" class="headerlink" title="行内图片 inlineimage"></a>行内图片 inlineimage</h2><div class="tabs" id="inlineimage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#inlineimage-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#inlineimage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#inlineimage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-2"><ol><li>高度：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><div class="tabs" id="image"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#image-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#image-3">样式预览</button></li><li class="tab"><button type="button" data-href="#image-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="image-3"><ol><li><p>添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li><li><p>指定宽度：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div></li><li><p>指定宽度并添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div></li><li><p>设置占位背景色：</p><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-4"><ol><li><p>添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定宽度：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h2><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#audio-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#audio-2">样式预览</button></li><li class="tab"><button type="button" data-href="#audio-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h2><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#video-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#video-3">样式预览</button></li><li class="tab"><button type="button" data-href="#video-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="video-3"><ol><li><p>100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></li><li><p>50%宽度</p><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li><li><p>25%宽度</p><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-4"><ol><li><p>100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li><li><p>25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="相册-gallery"><a href="#相册-gallery" class="headerlink" title="相册 gallery"></a>相册 gallery</h2><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>自带<code>gallery</code>相册，而且会根据图片大小自动调整排版，效果比<code>Volantis</code>的<code>gallery</code>更好，故不再收录<code>Volantis</code>的<code>gallery</code>标签。</p></div><div class="note flat"><p>以下为<code>Butterfly</code>自带的<code>gallery</code>标签写法。相册图库和相册配合使用。</p></div><div class="tabs" id="gallery"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#gallery-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#gallery-3">样式预览</button></li><li class="tab"><button type="button" data-href="#gallery-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-2"><ul><li>gallerygroup 相册图库</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">图库名字</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">图库描述</td></tr><tr><td style="text-align:left">link</td><td style="text-align:left">链接到对应相册的地址</td></tr><tr><td style="text-align:left">img-url</td><td style="text-align:left">图库封面</td></tr></tbody></table></div><div class="note info flat"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p></div><ul><li>gallery 相册<br>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="gallery-3"><ul><li>gallerygroup 相册图库</li></ul><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div><ul><li>gallery 相册</li></ul><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-4"><div class="note info flat"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个gallery的page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问MC相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p></div><ol><li><p>gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://npm.elemecdn.com/akilar-candyassets/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://npm.elemecdn.com/akilar-candyassets/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h2><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>虽然也有内置折叠框<code>hideToggle</code>标签，但是<code>Volantis</code>的<code>folding</code>折叠框更好看一些。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>的<code>tab</code>标签和<code>Volantis</code>的<code>tab</code>标签都是移值自<code>NexT</code>主题，所以写法和效果一模一样。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>Unique name :<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子/页面的URL必须是唯一的！</li></ul></li><li>[index]:<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果index为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>[Tab caption]:<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>[@icon]:<ul><li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li><li>可以指定带空格或不带空格；</li><li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li><li>可选参数。</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 2 - 预设选择tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary flat"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><p><div class="note primary flat"><p>Demo 1 - 预设选择第一个【默认】</p></div><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p><div class="note primary flat"><p>Demo 2 - 预设选择tabs</p></div><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p><div class="note primary flat"><p>Demo 3 - 没有预设值</p></div><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><p><div class="note primary flat"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="数据集合-issues"><a href="#数据集合-issues" class="headerlink" title="数据集合 issues"></a>数据集合 issues</h2><script defer src="https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js"></script><script defer src="https://npm.elemecdn.com/hexo-theme-volantis@4.3.1/source/js/issues.min.js"></script><div class="tabs" id="issues"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#issues-1">标签语法</button></li><li class="tab"><button type="button" data-href="#issues-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#issues-3">样式预览</button></li><li class="tab"><button type="button" data-href="#issues-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="issues-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-2"><p><span class='p center logo large'>type(类型)：</span><br>根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有：</p><ol><li>时间轴<code>timeline</code>: 解析成<code>timeline</code>标签，<code>issue</code>的标题对应<code>timeline</code>的时间，<code>issue</code>的内容对应<code>timeline</code>的内容。</li><li><p>网站卡片<code>sites</code>: 解析成<code>sites</code>标签，需要有<code>JSON</code>代码块,各参数对应<code>sites</code>标签参数:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;「keywords」&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">网站名称</td></tr><tr><td style="text-align:left">screenshot</td><td style="text-align:left">网站预览图</td></tr><tr><td style="text-align:left">url</td><td style="text-align:left">网站链接，需要添加<br><code>https://</code>协议组成完整域名。<br>否则可能被识别成站点相对路径。</td></tr><tr><td style="text-align:left">avatar</td><td style="text-align:left">站长头像</td></tr><tr><td style="text-align:left">「keywords」</td><td style="text-align:left">分组依据，<br>未必要叫「keywords」，<br>详见下文group(分组)</td></tr></tbody></table></div><p><span class='p center logo large'>api(接口)：</span><br>url为可以调的通的API，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active</span><br><span class="line">api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://gitee.com/api/v5/">https://gitee.com/api/v5/</a></td><td style="text-align:left">gitee仓库的api</td></tr><tr><td style="text-align:left"><a href="https://api.github.com/">https://api.github.com/</a></td><td style="text-align:left">github仓库的api</td></tr><tr><td style="text-align:left">repos/xaoxuu/friends/issues</td><td style="text-align:left">repos/用户名/仓库名/issues</td></tr><tr><td style="text-align:left">sort=updated&amp;state=open</td><td style="text-align:left">界定哪些类型的<code>issues</code>会<br>被读取过来渲染成相应的标签</td></tr><tr><td style="text-align:left">page=1&amp;per_page=100</td><td style="text-align:left">读取前100条issues</td></tr><tr><td style="text-align:left">labels=active</td><td style="text-align:left">控制默认的issue不显示，<br>只有自己审核通过<br>添加了active标签之后才会显示</td></tr></tbody></table></div><p><span class='p center logo large'>group(分组)：</span><br><code>sites</code>类型的<code>issues</code>默认不分组，如果需要分组，可指定分组依据<code>「keywords」</code>，和分组白名单<code>「value1」</code>、<code>「value2」</code>等，例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">group=version:v4,v3,v2</span></span><br><span class="line"><span class="comment"># 此处的version就是上文中的「keywords」</span></span><br></pre></td></tr></table></figure><p>这个参数的作用就是，筛选出<code>JSON</code>中包含<code>&quot;version&quot;: &quot;v4&quot;</code>或者<code>&quot;version&quot;:&quot;v3&quot;</code>或者<code>&quot;version&quot;: &quot;v2&quot;</code>的数据，并分组显示。</p><p><span class='p center logo large'>仓库ISSUES模板配置</span></p><details class="folding-tag" green><summary> Github仓库配置方案 </summary>              <div class='content'>              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.github\ISSUE_TEMPLATE.md</code>,<br>  并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line"><span class="section">about: 请根据指示规范填写友链格式。</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active label</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/d63b5c0c.png" alt="新建label用于控制审核结果"></p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/6311f960.png" alt="配置名称描述颜色"></p></li><li><p>提交示例</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/f87ebfd3.png" alt="填写规范"><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/efdfc67d.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>              </div>            </details><details class="folding-tag" yellow><summary> Gitee仓库配置方案 </summary>              <div class='content'>              <ol><li><p>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.gitee\ISSUE_TEMPLATE.md</code>,<br>  并在其中输入以下内容作为<code>issues</code>模板。</p><div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line"><span class="section">about: 请根据指示规范填写友链格式。</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建active标签</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/7522911b.png" alt="新建标签用于控制审核结果"></p></li></ol><ol><li><p>提交示例</p><p><img src="https://npm.elemecdn.com/akilar-candyassets/image/dd334eea.png" alt="填写规范"><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/72d06ae1.png" alt="审核通过"></p></li><li><p>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</p></li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="issues-3"><ol><li><p>时间轴标签<code>timeline</code>渲染<br>对应的仓库<code>issues</code>链接:</p>  <div class="tag link"><a class="link-card" title="xaoxuu/timeline" href="https://gitee.com/xaoxuu/timeline/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/timeline</p><p class="url">https://gitee.com/xaoxuu/timeline/issues</p></div></a></div><div class="issues-api timeline"api="https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&creator=xaoxuu&sort=created&direction=desc&page=1&per_page=100"></div></li><li><p>网站卡片标签<code>sites</code>渲染</p><ul><li><p>gitee仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://gitee.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://gitee.com/xaoxuu/friends/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li><li><p>github仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://github.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://github.com/xaoxuu/friends/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li></ul></li><li><p>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：<br>  对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="如何参与项目" href="https://github.com/volantis-x/examples/issues"><div class="left"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">如何参与项目</p><p class="url">https://github.com/volantis-x/examples/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-4"><ol><li><p>时间轴标签<code>timeline</code>渲染</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;sort=created&amp;direction=desc&amp;page=1&amp;per<span class="emphasis">_page=100 %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>网站卡片标签<code>sites</code>渲染</p><ul><li><p>gitee仓库示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>github仓库示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="诗词标签-poem"><a href="#诗词标签-poem" class="headerlink" title="诗词标签 poem"></a>诗词标签 poem</h2><div class="tabs" id="poem"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#poem-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#poem-3">样式预览</button></li><li class="tab"><button type="button" data-href="#poem-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="poem-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-2"><ol><li>title：诗词标题</li><li>author：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="poem-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？<br>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="阿里图标-icon"><a href="#阿里图标-icon" class="headerlink" title="阿里图标 icon"></a>阿里图标 icon</h2><div class="tip cogs"><p>本标签的图标需要自己额外引入阿里矢量图标库的样式，具体引入方案请移步：<a href="/posts/d2ebecef/">Hexo引入阿里矢量图标库</a></p></div><div class="tabs" id="icon示例"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#icon示例-1">标签语法</button></li><li class="tab"><button type="button" data-href="#icon示例-2">参数释义</button></li><li class="tab active"><button type="button" data-href="#icon示例-3">样式预览</button></li><li class="tab"><button type="button" data-href="#icon示例-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="icon示例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="icon示例-3"><div class="table-container"><table><thead><tr><th style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></th></tr></thead><tbody><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="特效标签wow"><a href="#特效标签wow" class="headerlink" title="特效标签wow"></a>特效标签wow</h2><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>特效标签的静态资源未添加在本帖的配置内容中（因为多为cdn配置），请移步站内教程完成相关配置：</p><div class="tag link"><a class="link-card" title="使用wowjs给博客添加动画效果" href="/posts/abab51cf/"><div class="left"><img src="https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">使用wowjs给博客添加动画效果</p><p class="url">/posts/abab51cf/</p></div></a></div></div><div class="tabs" id="animate"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#animate-1">标签语法</button></li><li class="tab"><button type="button" data-href="#animate-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#animate-3">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="animate-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><div class="note warning flat"><p>注意，后面四个虽然是选填项，但是当有跨位选填时，次序不能乱。详见示例。<br>支持嵌套其他外挂标签。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="animate-3"><ol><li><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="进度条-progress"><a href="#进度条-progress" class="headerlink" title="进度条 progress"></a>进度条 progress</h2><div class="note info morden flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="progress"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#progress-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#progress-3">样式预览</button></li><li class="tab"><button type="button" data-href="#progress-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="progress-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-2"><p><code>width</code>: 0到100的阿拉伯数字<br><code>color</code>: 颜色，取值有<span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span><br><code>text</code>:进度条上的文字内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="progress-3"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="注释-notation"><a href="#注释-notation" class="headerlink" title="注释 notation"></a>注释 notation</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>label</code>: 注释词汇<br><code>text</code>: 悬停显示的注解内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="气泡注释-bubble"><a href="#气泡注释-bubble" class="headerlink" title="气泡注释 bubble"></a>气泡注释 bubble</h2><div class="tabs" id="bubble"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#bubble-1">标签语法</button></li><li class="tab"><button type="button" data-href="#bubble-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#bubble-3">样式预览</button></li><li class="tab"><button type="button" data-href="#bubble-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="bubble-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-2"><p><code>content</code>: 注释词汇<br><code>notation</code>: 悬停显示的注解内容<br><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="bubble-3"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如 CSS 的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex 布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;"> Flex 是 Flexible Box 的缩写，意为弹性布局 "，用来为盒状模型提供最大的灵活性"</span></span>，<span class="bubble-content">transform 变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;"> transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation 的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线 (Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content"> clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path 属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用文献-reference"><a href="#引用文献-reference" class="headerlink" title="引用文献 reference"></a>引用文献 reference</h2><div class="tabs" id="bubble"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#bubble-1">标签语法</button></li><li class="tab"><button type="button" data-href="#bubble-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#bubble-3">样式预览</button></li><li class="tab"><button type="button" data-href="#bubble-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="bubble-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-2"><div class="tip ban"><p>考虑到锚点跳转的特性，不建议您将引用出处标签referfrom写在常隐外挂标签(如folding、tab、hideToggle)中，这样能有效避免跳转失败。</p></div><ol><li><p>referto 引用上标<br><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转<br>  <code>literature</code>: 引用的参考文献名称</p></li><li><p>referfrom 引用出处<br><code>id</code>: 序号内容，需与referto标签的id对应才能实现跳转<br>  <code>literature</code>: 引用的参考文献名称<br>  <code>url</code>: 引用的参考文献链接，可省略</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="bubble-3"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]" data-pjax-state="">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]" data-pjax-state="">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]" data-pjax-state="">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]" data-pjax-state="">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]" data-pjax-state="">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]" data-pjax-state="">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]" data-pjax-state="">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]" data-pjax-state="">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]" data-pjax-state="">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bubble-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="旋转相册-carousel"><a href="#旋转相册-carousel" class="headerlink" title="旋转相册 carousel"></a>旋转相册 carousel</h2><div class="tip warning"><p>旋转相册标签与fancybox灯箱存在兼容性bug，若发现旋转相册呈扁平状，请关闭fancybox或换用medium_zoom。</p></div><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% carousel [Id] , [name] %&#125;</span><br><span class="line">![](<span class="link">/img/1.jpg</span>)</span><br><span class="line">![](<span class="link">/img/2.jpg</span>)</span><br><span class="line">![](<span class="link">/img/3,jpg</span>)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>Id</code>: 相册唯一ID，用于监测相册鼠标动作。禁止使用中文。同一页内不得出现相同ID的carousel相册。<br><code>name</code>: 相册中间显示的内容，建议用英文单引号包裹。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><p><div id="SF" class="carousel"></p><p><div id="SF-drag-container" class="drag-container"></p><p><div id="SF-spin-container" class="spin-container"><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110444226.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110525753.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110600751.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110621554.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110637459.png" ><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110654150.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110707916.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110719787.png"><br><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110731118.png"></p><p><p>strike freedom</p></p><p><div id="SF-carousel-ground" class="carousel-ground" style="width: 720px; height: 720px;"></div></div><script type="text/javascript">carouselinit('SF');</script></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% carousel &#x27;SF&#x27;,&#x27;strike freedom&#x27; %&#125;</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110444226.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110525753.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110600751.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110621554.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110637459.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110654150.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110707916.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110719787.png</span>)</span><br><span class="line">![](<span class="link">https://npm.elemecdn.com/akilar-candyassets/image/20200907110731118.png</span>)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">外挂标签示例</summary>
    
    
    
    <category term="博客" scheme="https://www.jermyn.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Tag-Plugins-Plus" scheme="https://www.jermyn.cn/tags/Tag-Plugins-Plus/"/>
    
  </entry>
  
  <entry>
    <title>shell 学习笔记</title>
    <link href="https://www.jermyn.cn/posts/d746.html"/>
    <id>https://www.jermyn.cn/posts/d746.html</id>
    <published>2022-08-26T20:13:52.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小工具用法"><a href="#小工具用法" class="headerlink" title="小工具用法"></a>小工具用法</h2><h4 id="grep-用法"><a href="#grep-用法" class="headerlink" title="grep 用法"></a>grep 用法</h4><p>语法：行过滤</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] <span class="string">&#x27;关键字&#x27;</span> 文件名 </span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS:</span><br><span class="line">    <span class="literal">-i</span>: 不区分大小写</span><br><span class="line">    <span class="literal">-v</span>: 查找不包含指定内容的行,反向选择(取反)</span><br><span class="line">    <span class="literal">-w</span>: 按单词搜索</span><br><span class="line">    <span class="literal">-o</span>: 打印匹配关键字</span><br><span class="line">    <span class="literal">-c</span>: 统计匹配到的行数</span><br><span class="line">    <span class="literal">-n</span>: 显示行号（注：区分大小写。不区分大小写的话 <span class="literal">-ni</span> ）</span><br><span class="line">    <span class="literal">-r</span>: 逐层遍历目录查找</span><br><span class="line">    <span class="literal">-A</span>: 显示匹配行及后面多少行</span><br><span class="line">    <span class="literal">-B</span>: 显示匹配行及前面多少行</span><br><span class="line">    <span class="literal">-C</span>: 显示匹配行前后多少行</span><br><span class="line">    <span class="literal">-l</span>：只列出匹配的文件名</span><br><span class="line">    <span class="literal">-L</span>：列出不匹配的文件名</span><br><span class="line">    <span class="literal">-e</span>: 使用正则匹配</span><br><span class="line">    <span class="literal">-E</span>:使用扩展正则匹配</span><br><span class="line">    ^key:以关键字开头</span><br><span class="line">    key<span class="variable">$</span>:以关键字结尾</span><br><span class="line">    ^<span class="variable">$</span>:匹配空行</span><br><span class="line">    <span class="literal">--color</span>=auto ：可以将找到的关键词部分加上颜色的显示</span><br></pre></td></tr></table></figure><p><strong>1.1 对 grep 起个别名 每次输入 grep 达到 grep —color=auto 效果</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.临时生效</span><br><span class="line">alias grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.永久生效，全局,修改配置文件/etc/bashrc 文末添加</span><br><span class="line">此文件是用户在登陆时被读取</span><br><span class="line">vim /etc/bashrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim:ts=4:sw=4</span></span><br><span class="line">alias grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line">重新加载文件</span><br><span class="line">source /etc/bashrc</span><br></pre></td></tr></table></figure><p><strong>1.2 需求</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">前置：<span class="built_in">cp</span> /etc/passwd .</span><br><span class="line"><span class="number">1</span>.过滤文件内容包含 root 的</span><br><span class="line">grep <span class="string">&#x27;root&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.过滤文件内容包含 root 的行显示行号（区分大小写）</span><br><span class="line">grep <span class="literal">-n</span> <span class="string">&#x27;root&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.过滤文件内容包含 root 的行显示行号（不区分大小写）</span><br><span class="line">grep <span class="literal">-ni</span> <span class="string">&#x27;root&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.过滤文件内容以 root 开头的行</span><br><span class="line">grep <span class="string">&#x27;^root&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.过滤文件内容以 bash 结尾的行</span><br><span class="line">grep  <span class="string">&#x27;bash$&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.过滤不以 root 开头的行</span><br><span class="line">grep <span class="literal">-iv</span> <span class="string">&#x27;^root&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>.过滤包含 root 的后<span class="number">5</span>行，显示行号</span><br><span class="line">grep <span class="literal">-nA</span> <span class="number">5</span> <span class="string">&#x27;root&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>.过滤包含 mail 的前<span class="number">5</span>行，显示行号</span><br><span class="line">grep <span class="literal">-nB</span> <span class="string">&#x27;mail&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>.过滤包含 mail 的前后<span class="number">3</span>行，显示行号</span><br><span class="line">grep <span class="literal">-nC</span> <span class="number">3</span> <span class="string">&#x27;mail&#x27;</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>.统计 passwd 文件中 root 出现的次数</span><br><span class="line">grep <span class="literal">-c</span> <span class="string">&#x27;root&#x27;</span> passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="cut-用法"><a href="#cut-用法" class="headerlink" title="cut 用法"></a>cut 用法</h4><p>语法：列截取的工具</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut 选项  文件名</span><br></pre></td></tr></table></figure><p><strong>2.1 常见选项：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-c</span>:以字符为单位进行分割,截取</span><br><span class="line"><span class="literal">-d</span>:自定义分隔符，默认为制表符\t</span><br><span class="line"><span class="operator">-f</span>:与<span class="literal">-d</span>一起使用，指定截取哪个区域</span><br></pre></td></tr></table></figure><p><strong>2.2 需求</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.分割以 ：为分隔符第一列的内容</span><br><span class="line">cut <span class="literal">-d</span> <span class="string">&#x27;:&#x27;</span> <span class="operator">-f</span> <span class="number">1</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.以 ：为分割符 第<span class="number">1</span>列和第<span class="number">5</span>列的内容，显示前<span class="number">10</span>行</span><br><span class="line">cut <span class="literal">-d</span> <span class="string">&#x27;:&#x27;</span> <span class="operator">-f</span> <span class="number">1</span>,<span class="number">5</span> passwd | head </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.截取第<span class="number">2</span>到第<span class="number">5</span>个字符</span><br><span class="line">cut <span class="literal">-c</span> <span class="number">2</span><span class="literal">-5</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.截取第<span class="number">1</span>个字符</span><br><span class="line">cut <span class="literal">-c</span> <span class="number">1</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.截取第<span class="number">10</span>个字符以后的内容</span><br><span class="line">cut <span class="literal">-c</span> <span class="number">10</span>- passwd</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.显示当前系统的运行级别</span><br><span class="line">runlevel | cut <span class="literal">-d</span> <span class="string">&#x27; &#x27;</span> <span class="operator">-f</span> <span class="number">2</span></span><br><span class="line">runlevel | cut <span class="literal">-c</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="tee-用法"><a href="#tee-用法" class="headerlink" title="tee 用法"></a>tee 用法</h4><p>语法：tee工具是从标准输入读取并写入到标准输出和文件，即：双向覆盖重定向（屏幕输出|文本输入）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[语法] | <span class="built_in">tee</span> [内容]</span><br></pre></td></tr></table></figure><p><strong>3.1 常见选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选项：</span><br><span class="line"><span class="literal">-a</span>：双向追加重定向</span><br><span class="line">注：不加 <span class="literal">-a</span> 默认是覆盖的</span><br></pre></td></tr></table></figure><p><strong>3.2 需求</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.查看主机的网络配置文件并保存到 network_config.txt</span><br><span class="line">grep <span class="literal">-v</span> <span class="string">&#x27;^#&#x27;</span> /etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-ens33</span> | grep <span class="literal">-v</span> <span class="string">&#x27;^$&#x27;</span> | <span class="built_in">tee</span> network_config.txt</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.查看主机的广播地址并保存到 broadcast.txt</span><br><span class="line">ifconfig | grep <span class="string">&#x27;broadcast&#x27;</span> | cut <span class="literal">-d</span> <span class="string">&#x27; &#x27;</span> <span class="operator">-f</span> <span class="number">15</span>,<span class="number">16</span> | <span class="built_in">tee</span> broadcast.txt</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.查看主机的子网掩码并追加到 broadcast.txt</span><br><span class="line">ifconfig | grep <span class="string">&#x27;broadcast&#x27;</span> | cut <span class="literal">-d</span> <span class="string">&#x27; &#x27;</span> <span class="operator">-f</span> <span class="number">12</span>,<span class="number">13</span> | <span class="built_in">tee</span> <span class="literal">-a</span> broadcast.txt</span><br></pre></td></tr></table></figure><h4 id="sort-用法"><a href="#sort-用法" class="headerlink" title="sort 用法"></a>sort 用法</h4><p>语法：sort工具用于排序;它将文件的每一行作为一个单位，从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><p><strong>4.1 常见选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-u</span> ：去除重复行</span><br><span class="line"><span class="literal">-r</span> ：降序排列，默认是升序</span><br><span class="line"><span class="literal">-o</span> : 将排序结果输出到文件中,类似重定向符号&gt;</span><br><span class="line"><span class="literal">-n</span> ：以数字排序，默认是按字符排序</span><br><span class="line"><span class="literal">-t</span> ：分隔符</span><br><span class="line"><span class="literal">-k</span> ：第N列</span><br><span class="line"><span class="literal">-b</span> ：忽略前导空格。</span><br><span class="line"><span class="literal">-R</span> ：随机排序，每次运行的结果均不同</span><br></pre></td></tr></table></figure><p><strong>4.2  需求</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 按照用户的uid进行升序排列</span><br><span class="line"><span class="built_in">sort</span> <span class="literal">-n</span> <span class="literal">-t</span> <span class="string">&#x27;:&#x27;</span> <span class="literal">-k</span> <span class="number">3</span> passwd</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.按照用户的uid进行降序排列</span><br><span class="line"><span class="built_in">sort</span> <span class="literal">-nr</span> <span class="literal">-t</span> <span class="string">&#x27;:&#x27;</span> <span class="literal">-k</span> <span class="number">3</span> passwd</span><br></pre></td></tr></table></figure><h4 id="uniq-用法"><a href="#uniq-用法" class="headerlink" title="uniq 用法"></a>uniq 用法</h4><p>语法：uniq用于去除 连续的 重复行</p><p><strong>5.1 常见选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-i</span>: 忽略大小写</span><br><span class="line"><span class="literal">-c</span>: 统计重复行次数</span><br><span class="line"><span class="literal">-d</span>:只显示重复行</span><br></pre></td></tr></table></figure><h4 id="diff-用法"><a href="#diff-用法" class="headerlink" title="diff 用法"></a>diff 用法</h4><p>语法：逐行比较两个文件的不同，即怎样改变第一个文件才能和第二个文件相同。</p><p>两个文件的内容相同的时候就不出结果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">diff</span> [选项] 文件<span class="number">1</span> 文件<span class="number">2</span> </span><br></pre></td></tr></table></figure><p><strong>6.1 常见选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-b</span>：不检查空格</span><br><span class="line"><span class="literal">-B</span>：不检查空白行</span><br><span class="line"><span class="literal">-i</span>：不检查大小写</span><br><span class="line"><span class="literal">-w</span>：忽略所有的空格</span><br><span class="line"><span class="literal">--normal</span>：正常格式显示(默认)</span><br><span class="line"><span class="literal">-c</span>：上下文格式显示</span><br><span class="line"><span class="literal">-u</span>：合并格式显示</span><br></pre></td></tr></table></figure><p><strong>6.2  举例说明</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim file1</span><br><span class="line">添加内容：</span><br><span class="line">aaaa</span><br><span class="line"><span class="number">111</span></span><br><span class="line">hello world</span><br><span class="line"><span class="number">222</span></span><br><span class="line"><span class="number">333</span></span><br><span class="line">bbb</span><br><span class="line"></span><br><span class="line">vim file2</span><br><span class="line">添加内容：</span><br><span class="line">aaa</span><br><span class="line">hello</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br><span class="line">bbb</span><br><span class="line"><span class="number">333</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure><p><strong>6.2.1 diff 正常格式显示即 —normal （默认）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">diff</span> file1 file2</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># diff file1 file2</span></span><br><span class="line"><span class="number">1</span>c1,<span class="number">2</span>           第一个文件（file1）的第<span class="number">1</span>行需改变（c=change）和第二个文件（file2）的 <span class="number">1</span>至<span class="number">2</span>行匹配</span><br><span class="line">&lt; aaaa          “&lt;” 即左边的文件（file1）内容 aaaa </span><br><span class="line"><span class="literal">---</span>             分割线</span><br><span class="line">&gt; aaa           “&gt;” 即右边文件（file2）的内容 </span><br><span class="line">&gt; hello</span><br><span class="line"><span class="number">3</span>d3             第一个文件的第<span class="number">3</span>行需删除（d=delete）和第二个文件（file2）的第 <span class="number">3</span> 行匹配</span><br><span class="line">&lt; hello world   文件左边的内容 即删除 hello world</span><br><span class="line"><span class="number">5</span>d4             第一个文件的第<span class="number">5</span>行需删除（d=delete）和第二个文件（file2）的第 <span class="number">4</span> 行匹配</span><br><span class="line">&lt; <span class="number">333</span>           文件左边的内容 即删除 <span class="number">333</span></span><br><span class="line"><span class="number">6</span>a6,<span class="number">7</span>           第一个文件的第<span class="number">6</span>行需添加（a=add）和第二个文件（file2）的第 <span class="number">6</span>，<span class="number">7</span> 行匹配</span><br><span class="line">&gt; <span class="number">333</span>           添加的内容是第二个文件<span class="number">6</span>，<span class="number">7</span>行的 <span class="number">333</span> 和 world</span><br><span class="line">&gt; world</span><br></pre></td></tr></table></figure><p><strong>6.2.2 diff 上下文格式显示  -c</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">diff</span> <span class="literal">-c</span> file1 file2</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># diff -c file1 file2</span></span><br><span class="line">下面两行显示了文件名，时间戳； *** 表示前一个文件即file1  <span class="literal">---</span>表示后一个文件即 file2</span><br><span class="line">下面两个部分都是在 file1的角度，指如何改变file1 才能和file2 一样</span><br><span class="line">*** file1       <span class="number">2022</span><span class="literal">-07-03</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">21.046292165</span> +<span class="number">0800</span></span><br><span class="line"><span class="literal">---</span> file2       <span class="number">2022</span><span class="literal">-07-03</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">39.631278483</span> +<span class="number">0800</span></span><br><span class="line">***************        分隔符</span><br><span class="line">*** <span class="number">1</span>,<span class="number">6</span> ****           以***开头的表示file1 数字<span class="number">1</span>,<span class="number">6</span> 表示<span class="number">1</span>到<span class="number">6</span>行</span><br><span class="line">! aaaa                 ! 表示此行需要修改才可以与file2 匹配</span><br><span class="line">  <span class="number">111</span></span><br><span class="line">- hello world          - 表示此行需要删除才可以与file2 匹配</span><br><span class="line">  <span class="number">222</span></span><br><span class="line">- <span class="number">333</span>                  - 表示此行需要删除才可以与file2 匹配</span><br><span class="line">  bbb</span><br><span class="line"><span class="literal">---</span> <span class="number">1</span>,<span class="number">7</span> <span class="literal">----</span>           以<span class="literal">---</span>开头的表示file2 数字<span class="number">1</span>,<span class="number">7</span> 表示<span class="number">1</span>到<span class="number">7</span>列</span><br><span class="line">! aaa               表示第一个文件需要修改才与第二个文件匹配</span><br><span class="line">! hello                表示第一个文件需要修改才与第二个文件匹配</span><br><span class="line">  <span class="number">111</span></span><br><span class="line">  <span class="number">222</span></span><br><span class="line">  bbb</span><br><span class="line">+ <span class="number">333</span>                  表示第一个文件需要加上该行才与第二个文件匹配</span><br><span class="line">+ world                表示第一个文件需要加上该行才与第二个文件匹配</span><br></pre></td></tr></table></figure><p><strong>6.2.3 diff 合并模式 -u</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">diff</span> <span class="literal">-u</span> file1 file2</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># diff -u file1 file2</span></span><br><span class="line"><span class="literal">---</span> 指的是第一个文件即 file1 +++ 指的是第二个文件即file2 数字是时间戳 </span><br><span class="line"><span class="literal">---</span> file1       <span class="number">2022</span><span class="literal">-07-03</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">21.046292165</span> +<span class="number">0800</span></span><br><span class="line">+++ file2       <span class="number">2022</span><span class="literal">-07-03</span> <span class="number">09</span>:<span class="number">51</span>:<span class="number">39.631278483</span> +<span class="number">0800</span></span><br><span class="line"><span class="selector-tag">@</span><span class="selector-tag">@</span> <span class="literal">-1</span>,<span class="number">6</span> +<span class="number">1</span>,<span class="number">7</span> <span class="selector-tag">@</span><span class="selector-tag">@</span></span><br><span class="line"><span class="literal">-aaaa</span>           第一个文件需要 删除 aaaa</span><br><span class="line">+aaa            第一个文件 添加 aaa</span><br><span class="line">+hello          第一个文件 添加 hello</span><br><span class="line"> <span class="number">111</span>            <span class="number">111</span>不变</span><br><span class="line"><span class="literal">-hello</span> world    第一个文件 删除 hello world</span><br><span class="line"> <span class="number">222</span>            <span class="number">222</span>不变</span><br><span class="line"><span class="literal">-333</span>            第一个文件 删除 <span class="number">333</span></span><br><span class="line"> bbb            bbb不变</span><br><span class="line">+<span class="number">333</span>            第一个文件 添加 <span class="number">333</span></span><br><span class="line">+world          第一个文件 添加 world</span><br></pre></td></tr></table></figure><p><strong>6.3 diff 工具比较两个目录的不同（注：此功能较常用）</strong></p><p>数据准备：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># mkdir dir1 dir2</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># touch dir1/file&#123;1..5&#125;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># touch dir2/file&#123;1..3&#125;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># touch dir2/test&#123;1..2&#125;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># ls -R dir*</span></span><br><span class="line">dir1:</span><br><span class="line">file1  file2  file3  file4  file5</span><br><span class="line"></span><br><span class="line">dir2:</span><br><span class="line">file1  file2  file3  test1  test2</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line">文件里面随便添加一些数据</span><br></pre></td></tr></table></figure><p><strong>6.3.1 比较两个文件目录的不同，也会比较两个文件里面文件内容的不同</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># diff dir1 dir2</span></span><br><span class="line"><span class="built_in">diff</span> dir1/file1 dir2/file1</span><br><span class="line"><span class="number">1</span>c1</span><br><span class="line">&lt; aa</span><br><span class="line"><span class="literal">---</span></span><br><span class="line">&gt; fja</span><br><span class="line"><span class="built_in">diff</span> dir1/file2 dir2/file2</span><br><span class="line"><span class="number">1</span>d0</span><br><span class="line">&lt; aa</span><br><span class="line"><span class="built_in">diff</span> dir1/file3 dir2/file3</span><br><span class="line"><span class="number">1</span>d0</span><br><span class="line">&lt; afdas</span><br><span class="line">Only <span class="keyword">in</span> dir1: file4</span><br><span class="line">Only <span class="keyword">in</span> dir1: file5</span><br><span class="line">Only <span class="keyword">in</span> dir2: test1</span><br><span class="line">Only <span class="keyword">in</span> dir2: test2</span><br></pre></td></tr></table></figure><p><strong>6.3.1 只比较文件目录的不同不比较文件内容不同  -q</strong> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># diff -q dir1 dir2</span></span><br><span class="line">Files dir1/file1 and dir2/file1 differ</span><br><span class="line">Files dir1/file2 and dir2/file2 differ</span><br><span class="line">Files dir1/file3 and dir2/file3 differ</span><br><span class="line">Only <span class="keyword">in</span> dir1: file4</span><br><span class="line">Only <span class="keyword">in</span> dir1: file5</span><br><span class="line">Only <span class="keyword">in</span> dir2: test1</span><br><span class="line">Only <span class="keyword">in</span> dir2: test2</span><br></pre></td></tr></table></figure><p><strong>6.4 打补丁</strong></p><p>diff 找出文件的不同的目的是变相同，以一个文件为标准，去修改其他文件，并且修改的地方较多时，我们可以通过打补丁的方式完成。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.先找出两个文件的不同输出到另一个文件中</span><br><span class="line"><span class="built_in">diff</span> <span class="literal">-uN</span> file1 file2 | <span class="built_in">tee</span> file.patch</span><br><span class="line"><span class="literal">-u</span>:合并模式</span><br><span class="line"><span class="literal">-N</span>:将不存在的文件当作空文件</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.将不同的内容打补丁到 file1</span><br><span class="line">patch file1 file.patch</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.测试验证（注：内容为空则修改完成）</span><br><span class="line"><span class="built_in">diff</span> file1 file2</span><br></pre></td></tr></table></figure><h4 id="paste用法"><a href="#paste用法" class="headerlink" title="paste用法"></a>paste用法</h4><p>用法：paste工具用于合并文件行，并不改变原文件</p><p><strong>7.1 常见选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-d</span>：自定义间隔符，默认是tab</span><br><span class="line"><span class="literal">-s</span>：串行处理，非并行</span><br></pre></td></tr></table></figure><p><strong>7.2 举例说明</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;file1的第一行内容&#x27;</span> &gt; file1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;file1的第二行内容&#x27;</span> &gt;&gt; file1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;file2的第一行内容&#x27;</span> &gt; file2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;file2的第二行内容&#x27;</span> &gt;&gt; file2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;file2的第三行内容&#x27;</span> &gt;&gt; file2</span><br></pre></td></tr></table></figure><p><strong>7.2.1 默认分隔符</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paste file1 file2</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># paste file1 file2</span></span><br><span class="line">file1的第一行内容       file2的第一行内容</span><br><span class="line">file1的第二行内容       file2的第二行内容</span><br><span class="line">        file2的第三行内容</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>7.2.1 以 ： 作为分隔符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paste -d &#x27;:&#x27; file1 file2</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># paste -d &#x27;:&#x27; file1 file2</span></span><br><span class="line">file1的第一行内容:file2的第一行内容</span><br><span class="line">file1的第二行内容:file2的第二行内容</span><br><span class="line">:file2的第三行内容</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>7.2.2 串行合并</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paste <span class="literal">-d</span> <span class="string">&#x27;:&#x27;</span> <span class="literal">-s</span> file1 file2</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># paste -d &#x27;:&#x27; -s file1 file2</span></span><br><span class="line">file1的第一行内容:file1的第二行内容</span><br><span class="line">file2的第一行内容:file2的第二行内容:file2的第三行内容</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="tr-用法"><a href="#tr-用法" class="headerlink" title="tr 用法"></a>tr 用法</h4><p>用法：tr用于字符转换，替换和删除；主要用于 删除文件中控制字符 或 进行字符转换</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、命令的执行结果交给tr处理，其中string1用于查询，string2用于转换处理</span><br><span class="line">commands|tr  <span class="string">&#x27;string1&#x27;</span>  <span class="string">&#x27;string2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、tr处理的内容来自文件，记住要使用<span class="string">&quot;&lt;&quot;</span>标准输入</span><br><span class="line">tr  <span class="string">&#x27;string1&#x27;</span>  <span class="string">&#x27;string2&#x27;</span> &lt; filename</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、匹配string1进行相应操作，如删除操作</span><br><span class="line">tr [<span class="type">options</span>] <span class="string">&#x27;string1&#x27;</span> &lt; filename</span><br></pre></td></tr></table></figure><p><strong>8.1 常见选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-d</span>：删除字符串<span class="number">1</span>中所有输入字符。</span><br><span class="line"><span class="literal">-s</span>：删除所有重复出现字符序列，只保留第一个；即将重复出现字符串压缩为一个字符串</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a<span class="literal">-z</span> 或 [:<span class="type">lower</span>:] : 匹配所有小写字母    </span><br><span class="line">A<span class="literal">-Z</span> 或 [:<span class="type">upper</span>:] : 匹配所有大写字母    </span><br><span class="line"><span class="number">0</span><span class="literal">-9</span> 或 [:<span class="type">digit</span>:] : 匹配所有数字      </span><br><span class="line">[<span class="type">a</span>-<span class="type">zA</span>-<span class="type">Z0</span>-<span class="number">9</span>] : 所有大小写和数字</span><br><span class="line">[:<span class="type">alnum</span>:] : 匹配所有字母和数字   </span><br><span class="line">[:<span class="type">alpha</span>:] : 匹配所有字母        </span><br><span class="line">[:<span class="type">blank</span>:] : 所有水平空白       </span><br><span class="line">[:<span class="type">punct</span>:] : 匹配所有标点符号    </span><br><span class="line">[:<span class="type">space</span>:] : 所有水平或垂直的空格 </span><br><span class="line">[:<span class="type">cntrl</span>:] : 匹配所有的控制字符如：\f 走行换页   \n 换行    \r 回车     \t tab键</span><br></pre></td></tr></table></figure><p><strong>8.2需求</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/passwd .</span><br><span class="line"><span class="number">1</span>.找到文件中所有的小写字母替换为大写字母</span><br><span class="line"><span class="built_in">cat</span> passwd | tr <span class="string">&#x27;a-z&#x27;</span> <span class="string">&#x27;A-Z&#x27;</span></span><br><span class="line">tr <span class="string">&#x27;[:lower:]&#x27;</span> <span class="string">&#x27;[:upper:]&#x27;</span> &lt; passwd</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.找到文件中所有的数字替换成为 <span class="selector-tag">@</span></span><br><span class="line"><span class="built_in">cat</span> passwd | tr <span class="string">&#x27;0-9&#x27;</span> <span class="string">&#x27;@&#x27;</span></span><br><span class="line">tr <span class="string">&#x27;[:digit:]&#x27;</span> <span class="string">&#x27;@&#x27;</span> &lt; passwd</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.找到文件中的所有的 ： 和 / 替换为 <span class="comment">#</span></span><br><span class="line"><span class="built_in">cat</span> passwd | tr <span class="string">&#x27;:/&#x27;</span> <span class="string">&#x27;#&#x27;</span> </span><br><span class="line">tr <span class="string">&#x27;:/&#x27;</span> <span class="string">&#x27;#&#x27;</span> &lt; passwd</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.删除文件中的所有小写字母</span><br><span class="line"><span class="built_in">cat</span> passwd | tr <span class="literal">-d</span> <span class="string">&#x27;a-z&#x27;</span> </span><br><span class="line">tr <span class="literal">-d</span> <span class="string">&#x27;[:lower:]&#x27;</span> &lt; passwd</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>.查看系统的内置模块，并且按照模块的大小进行升序排列</span><br><span class="line">lsmod | tr <span class="literal">-s</span> <span class="string">&#x27; &#x27;</span> | <span class="built_in">sort</span> <span class="literal">-n</span> <span class="literal">-t</span> <span class="string">&#x27; &#x27;</span> <span class="literal">-k</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">7</span>.查看本机网卡 ens33 的 IP,NETMASK,BROADCAST 并存储到net_conf</span><br><span class="line">ifconfig ens33 | grep <span class="string">&#x27;netmask&#x27;</span> | tr <span class="literal">-s</span> <span class="string">&#x27; &#x27;</span> | cut <span class="literal">-d</span> <span class="string">&#x27; &#x27;</span> <span class="operator">-f</span> <span class="number">2</span><span class="literal">-7</span> | tr <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">tee</span> net_conf</span><br></pre></td></tr></table></figure><h2 id="bash-特性"><a href="#bash-特性" class="headerlink" title="bash 特性"></a>bash 特性</h2><h4 id="命令和文件自动补全"><a href="#命令和文件自动补全" class="headerlink" title="命令和文件自动补全"></a>命令和文件自动补全</h4><p>Tab只能补全 命令 和 文件</p><p><strong>1.1 常见的快捷键</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">^c   终止前台运行的程序</span><br><span class="line">^z  将前台运行的程序挂起到后台</span><br><span class="line">^d   退出 等价<span class="keyword">exit</span></span><br><span class="line">^l 或 <span class="built_in">clear</span>   清屏 </span><br><span class="line">^a |home      光标移到命令行的最前端</span><br><span class="line">^e |<span class="keyword">end</span>      光标移到命令行的后端</span><br><span class="line">^u   删除光标前所有字符</span><br><span class="line">^k   删除光标后所有字符</span><br><span class="line">^r 搜索历史命令</span><br></pre></td></tr></table></figure><p><strong>1.2 常用的通配符（重点）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* :匹配<span class="number">0</span>或多个任意字符</span><br><span class="line">? :匹配任意单个字符</span><br><span class="line">[<span class="type">list</span>] :匹配[<span class="type">list</span>]中的任意单个字符,或者一组单个字符   [<span class="type">a</span>-<span class="type">z</span>]</span><br><span class="line">[!<span class="type">list</span>] :   匹配除list中的任意单个字符</span><br><span class="line">&#123;string1,string2,...&#125; ：匹配string1,string2或更多字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rm -f file*</span></span><br><span class="line"><span class="comment"># cp *.conf  /dir1</span></span><br><span class="line"><span class="comment"># touch file&#123;1..5&#125;</span></span><br></pre></td></tr></table></figure><p><strong>1.3 bash中的引号（重点）</strong></p><ul><li>双引号””   :会把引号的内容当成整体来看待，允许通过$符号引用其他变量值</li><li>单引号’’     :会把引号的内容当成整体来看待，禁止引用其他变量值，shell中特殊符号都被视为普通字符</li><li>反撇号``  :反撇号和$()一样，引号或括号里的命令会优先执行，如果存在嵌套，反撇号不能用</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.把 passwd 文件做备份，要求看出备份的日期</span><br><span class="line"><span class="built_in">cp</span> /etc/passwd ./passwd_`date +%F_%<span class="built_in">H</span>:%M:%S`.bak</span><br><span class="line"><span class="built_in">cp</span> /etc/passwd ./passwd_<span class="variable">$</span>(date +%F_%<span class="built_in">H</span>:%M:%S).bak</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># ls</span></span><br><span class="line">passwd_2022<span class="literal">-07-04_17</span>:<span class="number">31</span>:<span class="number">00</span>.bak  passwd_2022<span class="literal">-07-04_17</span>:<span class="number">31</span>:<span class="number">28</span>.bak</span><br></pre></td></tr></table></figure><h2 id="shell-初识"><a href="#shell-初识" class="headerlink" title="shell 初识"></a>shell 初识</h2><h4 id="第一个shll-脚本"><a href="#第一个shll-脚本" class="headerlink" title="第一个shll 脚本"></a>第一个shll 脚本</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/env bash</span></span><br><span class="line"><span class="comment">######################################################</span></span><br><span class="line"><span class="comment"># Name    : first_shell.sh                           #</span></span><br><span class="line"><span class="comment"># Desc    : OUPUT HELLO WORLD                        #</span></span><br><span class="line"><span class="comment"># Path    : /root/test/first_shell.sh                #</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn                                   #</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-04                               #</span></span><br><span class="line"><span class="comment"># Version : 1.0                                      #</span></span><br><span class="line"><span class="comment">######################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;HELLO WORLD!!!!&quot;</span></span><br></pre></td></tr></table></figure><p><strong>1.1 执行方式</strong></p><p><strong>1.1.1 标准执行（必须有可执行权限）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给执行的脚本添加一个可执行的权限！后面加脚本的相对路径或者绝对路径</span><br><span class="line">chmod +x first_shell.sh  </span><br><span class="line">./first_shell.sh</span><br><span class="line"></span><br><span class="line">/root/test/first_shell.sh</span><br></pre></td></tr></table></figure><p><strong>1.1.2  在命令行指定解释器执行（可以没有可执行权限）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bash first_shell.sh</span><br><span class="line"></span><br><span class="line">sh first_shell.sh</span><br><span class="line"></span><br><span class="line"><span class="literal">------------------------------</span></span><br><span class="line"><span class="literal">-x</span>:一般用于排错，查看脚本的执行过程</span><br><span class="line"><span class="literal">-n</span>:用来查看脚本的语法是否有问题</span><br><span class="line"><span class="literal">------------------------------</span></span><br><span class="line"></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># bash -x first_shell.sh</span></span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">&#x27;HELLO WORLD!!!!&#x27;</span></span><br><span class="line">HELLO WORLD!!!!</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># bash -n first_shell.sh</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>1.1.3 source 重新读取文件的内容（可以没有可执行权限）</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source first_shell.sh</span><br></pre></td></tr></table></figure><h4 id="写一个-shell-脚本"><a href="#写一个-shell-脚本" class="headerlink" title="写一个 shell 脚本"></a>写一个 shell 脚本</h4><p>需求：拷贝 /etc/passwd 的内容到 /test 目录下，拷贝文件的命名需要显示时间，运行此脚本的时候显示运行脚本的时间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim cp_passwd.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#！/bin/env bash</span></span><br><span class="line"><span class="comment">######################################################</span></span><br><span class="line"><span class="comment"># Name    : cp_passwd.sh                             #</span></span><br><span class="line"><span class="comment"># Desc    : COPY PASSWD                              #</span></span><br><span class="line"><span class="comment"># Path    : /root/testcp_passwd.sh                   #</span></span><br><span class="line"><span class="comment"># Auther  : Jermyn                                   #</span></span><br><span class="line"><span class="comment"># Date    : 2022-07-04                               #</span></span><br><span class="line"><span class="comment"># Version : 1.0                                      #</span></span><br><span class="line"><span class="comment">######################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> /etc/passwd /root/test/passwd_<span class="variable">$</span>(date +%F_%<span class="built_in">H</span>:%M:%S).bak</span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m --------------------------------------------------- \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 您运行此脚本的时间是<span class="variable">$</span>(date +%F_%H:%M:%S)！！！ \033[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m --------------------------------------------------- \033[0m&quot;</span></span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>变量：变量是用来临时保存数据的，该数据是可以变化的数据。</p><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">变量名=变量值</span><br><span class="line"></span><br><span class="line">变量名：用来临时保存数据的</span><br><span class="line">变量值：就是临时的可变化的数据</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义变量，调用变量</span></span><br><span class="line">A=25</span><br><span class="line">echo &quot;$&#123;A&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取消变量</span></span><br><span class="line">unset A</span><br><span class="line">echo &quot;$&#123;A&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="变量名定义规则"><a href="#变量名定义规则" class="headerlink" title="变量名定义规则"></a>变量名定义规则</h4><p><strong>2.1 变量名严格区分大小写</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A=hello</span><br><span class="line">a=world</span><br><span class="line"></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;A&#125;&quot;</span></span><br><span class="line">hello</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;a&#125;&quot;</span></span><br><span class="line">world</span><br></pre></td></tr></table></figure><p><strong>2.2  变量名不能有特殊符号</strong></p><p>命名要求：命名只能使用英文字母，数字和下划线，<strong>首个字符不能以数字开头</strong>。 中间<strong>不能有空格</strong>，可以使用下划线（_）。<strong>不能使用标点符号</strong>。 <strong>不能使用bash里的关键字</strong>（可用help命令查看保留关键字）。</p><blockquote><p>注：对于有空格的字符串给变量赋值时，要用引号引起来</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A=&quot;hello world&quot;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">合法变量</th><th style="text-align:center">非法变量</th></tr></thead><tbody><tr><td style="text-align:center">A=10</td><td style="text-align:center">\t=10</td></tr><tr><td style="text-align:center">a=10</td><td style="text-align:center">*a=10</td></tr><tr><td style="text-align:center">A_A=10</td><td style="text-align:center">5=10</td></tr><tr><td style="text-align:center">A_=10</td><td style="text-align:center">A =10</td></tr><tr><td style="text-align:center">a_=10</td><td style="text-align:center">A-=10</td></tr><tr><td style="text-align:center">_a=10</td><td style="text-align:center">A A=10</td></tr><tr><td style="text-align:center">_A=10</td><td style="text-align:center">5A=10</td></tr><tr><td style="text-align:center">ABC=10</td><td style="text-align:center">A = 10</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">A=hello world</td></tr><tr><td style="text-align:center">A<em>_</em>=10</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">………</td><td style="text-align:center">……….</td></tr></tbody></table></div><blockquote><p><strong>变量名最好做到见名知意</strong></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">好的变量名：</span><br><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">0.0</span></span><br><span class="line"><span class="built_in">DIR</span>=/export/server</span><br><span class="line">TMP_FILE=/var/log/<span class="number">1</span>.log</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><h4 id="变量名的定义方式"><a href="#变量名的定义方式" class="headerlink" title="变量名的定义方式"></a>变量名的定义方式</h4><p><strong>3.1 基本方式</strong></p><p>直接赋值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># A=1234567</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo $&#123;A:2:4&#125;</span></span><br><span class="line"><span class="number">3456</span>表示从A变量中第<span class="number">3</span>个字符开始截取，截取<span class="number">4</span>个字符</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="variable">$</span>变量名 和 <span class="variable">$</span>&#123;变量名&#125;的异同</span><br><span class="line">相同点：都可以调用变量</span><br><span class="line">不同点：<span class="variable">$</span>&#123;变量名&#125;可以只截取变量的一部分，而<span class="variable">$</span>变量名不可以</span><br></pre></td></tr></table></figure><p><strong>3.2  命令执行结果赋值给变量</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.时间</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># TIME=&quot;$(date +%F_%T)&quot;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;TIME&#125;&quot;</span></span><br><span class="line"><span class="number">2022</span><span class="literal">-07-04_21</span>:<span class="number">21</span>:<span class="number">51</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.主机名</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># HOSTNAME=&quot;$(hostname)&quot;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;HOSTNAME&#125;&quot;</span></span><br><span class="line">master</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.内核版本</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># c=&quot;$(uname -r)&quot;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;c&#125;&quot;</span></span><br><span class="line"><span class="number">3.10</span>.<span class="number">0</span><span class="literal">-1160</span>.el7.x86_64</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.系统版本</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># a=&quot;$(cat /etc/redhat-release)&quot;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;a&#125;&quot;</span></span><br><span class="line">CentOS Linux release <span class="number">7.9</span>.<span class="number">2009</span> (Core)</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>3.3 交互式变量</strong></p><p>目的：让 用户自己 给变量赋值，比较灵活。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read [选项] 变量名</span><br></pre></td></tr></table></figure><p><strong>3.3.1 常见选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-p</span>  : 定义提示用户的信息                                         </span><br><span class="line"><span class="literal">-n</span>  : 定义字符数（限制变量值的长度）                             </span><br><span class="line"><span class="literal">-s</span>  : 不显示（不显示用户输入的内容）                             </span><br><span class="line"><span class="literal">-t</span>  : 定义超时时间，默认单位为秒（限制用户输入变量值的超时时间） </span><br></pre></td></tr></table></figure><p><strong>3.3.2 例子</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.默认</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># read name</span></span><br><span class="line">Jermyn</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;name&#125;&quot;</span></span><br><span class="line">Jermyn</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.提示</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># read -p &quot;请输入您的姓名：&quot; name</span></span><br><span class="line">请输入您的姓名：Jermyn</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;name&#125;&quot;</span></span><br><span class="line">Jermyn</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.不显示</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># read -s passwd</span></span><br><span class="line"><span class="comment"># 输入不显示</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;passwd&#125;&quot;</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.定义时间</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># read -t 5 passwd</span></span><br><span class="line"><span class="comment"># 5秒后自动跳转 或者 输入回车后跳转</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;passwd&#125;&quot;</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.定义字符数</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># read -n 5 -p &quot;Please input your name:&quot; name</span></span><br><span class="line">Please input your name:Jermy（字符超过<span class="number">5</span>个的时候自动跳转）(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">注：read <span class="literal">-s</span> <span class="literal">-p</span> <span class="string">&quot;&quot;</span>   <span class="literal">-p</span>后面跟内容  不可写作  read <span class="literal">-p</span> <span class="literal">-s</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>变量值还以来自于文件</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;192.168.0.0 255.255.255.0&quot; &gt; net_conf</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># read IPADDR NETMASK &lt; net_conf</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;IPADDR&#125;&quot;</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment"># echo &quot;$&#123;NETMASK&#125;&quot;</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">test</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>3.4 定义有类型的变量</strong></p><p>目的： 给变量做一些限制，固定变量的类型，比如：整型、只读</p><p>用法：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 选项 变量名=变量值</span><br></pre></td></tr></table></figure><p><strong>3.4.1 常用选项</strong></p><div class="table-container"><table><thead><tr><th>选项</th><th>释义</th><th>举例</th></tr></thead><tbody><tr><td>-i</td><td>将变量看成整数（只可赋值整数，其他数据类型为0）</td><td>declare -i A=123</td></tr><tr><td>-r</td><td>定义只读变量(不可重新赋值，不可 unset )</td><td>declare -r B=hello</td></tr><tr><td>-a</td><td>定义普通数组；查看普通数组</td><td></td></tr><tr><td>-A</td><td>定义关联数组；查看关联数组</td><td></td></tr><tr><td>-x</td><td>将变量通过环境导出</td><td>declare -x AAA=123456 等于 export AAA=123456</td></tr></tbody></table></div><h4 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h4><p><strong>4.1 本地变量</strong></p><ul><li>当前用户自定义的变量。当前进程中有效，其他进程及当前进程的子进程无效。</li></ul><p><strong>4.2 环境变量</strong></p><ul><li><p><strong>当前进程</strong>有效，并且能够被<strong>子进程</strong>调用。</p><ul><li><code>env</code> 查看当前用户的环境变量</li><li><code>set</code> 查询当前用户的所有变量(临时变量与环境变量)</li><li><code>export 变量名=变量值</code>    或者  <code>变量名=变量值；export 变量名</code></li></ul></li><li><p>定义一个环境变量</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.直接定义</span><br><span class="line">declare <span class="literal">-x</span> NAME=Jermyn</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.定义一个本地变量，转换为环境变量</span><br><span class="line">NAME=Jermyn</span><br><span class="line">export NAME</span><br><span class="line"></span><br><span class="line">export NAME=Jermyn</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.想要当前登陆的用户生效的话，修改/root/.bashrc 文件内容</span><br><span class="line">vim /root/.bashrc</span><br><span class="line">export NAME=Jermyn</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.永久生效，配置 profile 文件</span><br><span class="line">vim /etc/profile</span><br><span class="line">export NAME=Jermyn</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.配置 HADOOP 的环境变量</span><br><span class="line"><span class="comment"># hadoop 环境变量</span></span><br><span class="line">export HADOOP_HOME=/export/server/hadoop<span class="literal">-3</span>.<span class="number">3.0</span></span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure></li></ul><p><strong>4.3  全局变量</strong></p><p>全局所有的用户和程序都能调用，且继承，新建的用户也默认能调用。</p><p><strong>4.3.1 配置文件</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">文件名</th><th style="text-align:center">说明</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">$HOME/.bashrc</td><td style="text-align:center">当前用户的bash信息,用户登录时读取</td><td style="text-align:center">定义别名、umask、函数等</td></tr><tr><td style="text-align:center">$HOME/.bash_profile</td><td style="text-align:center">当前用户的环境变量，用户登录时读取</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$HOME/.bash_logout</td><td style="text-align:center">当前 用户退出 当前shell时最后读取</td><td style="text-align:center">定义用户退出时执行的程序等</td></tr><tr><td style="text-align:center">/etc/bashrc</td><td style="text-align:center">全局的bash信息，所有用户都生效</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">/etc/profile</td><td style="text-align:center">全局环境变量信息</td><td style="text-align:center">系统和所有用户都生效</td></tr><tr><td style="text-align:center">$HOME/.bash_history</td><td style="text-align:center">用户的历史命令</td><td style="text-align:center">history -w   保存历史记录         history -c  清空历史记录</td></tr></tbody></table></div><blockquote><p><strong>注：修改后都需要 source 执行，重现加载环境变量才可以生效</strong></p></blockquote><p><strong>4.3.2 用户登录系统读取相关文件的顺序</strong></p><ol><li><code>/etc/profile</code></li><li><code>$HOME/.bash_profile</code></li><li><code>$HOME/.bashrc</code></li><li><code>/etc/bashrc</code></li><li><code>$HOME/.bash_logout</code></li></ol><p><strong>4.4 系统变量</strong></p><p>shell本身已经固定好了它的名字和作用.</p><div class="table-container"><table><thead><tr><th>内置变量</th><th>含义</th></tr></thead><tbody><tr><td>$?</td><td>上一条命令执行后返回的状态；状态值为<strong>0表示执行正常</strong>，<strong>非0表示执行异常</strong>或错误</td></tr><tr><td>$0</td><td>当前执行的程序或脚本名</td></tr><tr><td>$#</td><td>脚本后面接的<strong>参数的个数</strong></td></tr><tr><td>$*</td><td>脚本后面<strong>所有参数</strong>，参数当成一个整体输出，每一个变量参数之间以空格隔开</td></tr><tr><td>$@</td><td>脚本后面所有参数，参数是独立的，也是全部输出</td></tr><tr><td>$1~$9</td><td>脚本后面的位置参数，$1表示第1个位置参数，依次类推</td></tr><tr><td>${10}~${n}</td><td>扩展位置参数,第10个位置变量必须用{}大括号括起来(2位数字以上扩起来)</td></tr><tr><td>$$</td><td>当前所在进程的进程号，如<code>echo $$</code></td></tr><tr><td>$！</td><td>后台运行的最后一个进程号 (当前终端）</td></tr><tr><td>!$</td><td>调用最后一条命令历史中的参数</td></tr></tbody></table></div><blockquote><p>区分 $*   和  $@  的区别</p><p><code>$*</code>：表示将变量看成一个整体<br><code>$@</code>：表示变量是独立的</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">运行 ./demo.sh <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="variable">$</span>* 是指 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="variable">$</span><span class="selector-tag">@</span> 是指 <span class="number">1</span></span><br><span class="line">       <span class="number">2</span></span><br><span class="line">       <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="简单的四则运算"><a href="#简单的四则运算" class="headerlink" title="简单的四则运算"></a>简单的四则运算</h2><p>算数运算：默认情况下，只支持简单的整数运算</p><p>算数内容：加（+），减（-），乘（*），除（/），取余（%）</p><h4 id="四则运算符号"><a href="#四则运算符号" class="headerlink" title="四则运算符号"></a>四则运算符号</h4><div class="table-container"><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">$(())</td><td style="text-align:center">echo “$((1+1))”</td></tr><tr><td style="text-align:center">$[]</td><td style="text-align:center">echo “$[1+1]”；</td></tr><tr><td style="text-align:center">expr</td><td style="text-align:center">expr 1 + 1 (<strong>必须有空格</strong>)；expr 10 * 5（<strong>* 需要转义</strong>）；expr 5 % 10    <strong>注：不可求次幂</strong></td></tr><tr><td style="text-align:center">let</td><td style="text-align:center">n=1;let n+=1;echo “${n}”</td></tr></tbody></table></div><blockquote><p>默认支持整数运算，特殊支持小数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># echo 1+1.5|bc</span></span><br><span class="line"><span class="number">2.5</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># bc</span></span><br><span class="line">bc <span class="number">1.06</span>.<span class="number">95</span></span><br><span class="line">Copyright <span class="number">1991</span><span class="literal">-1994</span>, <span class="number">1997</span>, <span class="number">1998</span>, <span class="number">2000</span>, <span class="number">2004</span>, <span class="number">2006</span> Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line"><span class="keyword">For</span> details <span class="built_in">type</span> `warranty<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">1+1.5</span></span><br><span class="line"><span class="string">2.5</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="i-和-i"><a href="#i-和-i" class="headerlink" title="i++ 和 ++i"></a>i++ 和 ++i</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i++ ：先赋值，在计算</span><br><span class="line">++i ：先计算，在赋值</span><br></pre></td></tr></table></figure><h4 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h4><p><strong>3.1 数组分类</strong></p><ul><li><p>普通数组：只能使用整数作为数组索引(元素的下标)</p></li><li><p>关联数组：可以使用字符串作为数组索引(元素的下标)（类似：K,V）</p></li></ul><p><strong>3.2 普通数组定义</strong></p><ul><li>一次赋予一个值</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引下标]=值</span><br><span class="line"></span><br><span class="line">array[<span class="number">0</span>]=v1</span><br><span class="line">array[<span class="number">1</span>]=v2</span><br><span class="line">array[<span class="number">2</span>]=v3</span><br><span class="line">array[<span class="number">3</span>]=v4</span><br></pre></td></tr></table></figure><ul><li>一次赋予多个值</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值<span class="number">1</span> 值<span class="number">2</span> 值<span class="number">3</span> ...)</span><br><span class="line"></span><br><span class="line">array=(var1 var2 var3 var4)</span><br><span class="line"></span><br><span class="line">array1=(`cat /etc/passwd`)将文件中每一行赋值给array1数组</span><br><span class="line"></span><br><span class="line">array2=(`ls /root`)</span><br><span class="line"></span><br><span class="line">array3=(harry amy jack <span class="string">&quot;Miss Hou&quot;</span>)</span><br><span class="line"></span><br><span class="line">array4=(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="string">&quot;hello world&quot;</span> [<span class="number">10</span>]=linux)</span><br></pre></td></tr></table></figure><p><strong>3.3 数组的读取</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable">$</span>&#123;数组名[元素下标]&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>&#123;array[<span class="number">0</span>]&#125;获取数组里第一个元素</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>&#123;array[*]&#125;获取数组里的所有元素</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>&#123;<span class="comment">#array[*]&#125;获取数组里所有元素个数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>&#123;!array[<span class="selector-tag">@</span>]&#125;    获取数组元素的索引下标</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$</span>&#123;array[<span class="selector-tag">@</span>]:<span class="number">1</span>:<span class="number">2</span>&#125;    访问指定的元素；<span class="number">1</span>代表从下标为<span class="number">1</span>的元素开始获取；<span class="number">2</span>代表获取后面几个元素</span><br><span class="line"></span><br><span class="line">查看普通数组信息：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># declare -a</span></span><br></pre></td></tr></table></figure><p><strong>3.4 关联数组定义</strong></p><ul><li>首先声明关联数组</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="literal">-A</span> asso_array1</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="literal">-A</span> asso_array1</span><br><span class="line">declare <span class="literal">-A</span> asso_array2</span><br><span class="line">declare <span class="literal">-A</span> asso_array3</span><br></pre></td></tr></table></figure><ul><li><p>数组赋值</p><ul><li><p>一次赋一个值</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引<span class="type">or</span>下标]=变量值</span><br><span class="line"></span><br><span class="line"><span class="comment"># asso_array1[linux]=one</span></span><br><span class="line"><span class="comment"># asso_array1[java]=two</span></span><br><span class="line"><span class="comment"># asso_array1[php]=three</span></span><br></pre></td></tr></table></figure></li><li><p>一次赋多个值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># asso_array2=([name1]=harry [name2]=jack [name3]=amy [name4]=&quot;Jermyn&quot;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看关联数组</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># declare -A</span></span><br><span class="line">declare <span class="literal">-A</span> asso_array1=<span class="string">&#x27;([php]=&quot;three&quot; [java]=&quot;two&quot; [linux]=&quot;one&quot; )&#x27;</span></span><br><span class="line">declare <span class="literal">-A</span> asso_array2=<span class="string">&#x27;([name3]=&quot;amy&quot; [name2]=&quot;jack&quot; [name1]=&quot;harry&quot; [name4]=&quot;Jermyn&quot; )&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>获取关联数组值</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo $&#123;asso_array1[linux]&#125;</span></span><br><span class="line">one</span><br><span class="line"><span class="comment"># echo $&#123;asso_array1[php]&#125;</span></span><br><span class="line">three</span><br><span class="line"><span class="comment"># echo $&#123;asso_array1[*]&#125;</span></span><br><span class="line">three two one</span><br><span class="line"><span class="comment"># echo $&#123;!asso_array1[*]&#125;</span></span><br><span class="line">php java linux</span><br><span class="line"><span class="comment"># echo $&#123;#asso_array1[*]&#125;</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment"># echo $&#123;#asso_array2[*]&#125;</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># echo $&#123;!asso_array2[*]&#125;</span></span><br><span class="line">name3 name2 name1 name4</span><br></pre></td></tr></table></figure><p><strong>3.5 其他变量定义</strong></p><ul><li>取出一个目录下的目录和文件：<code>dirname</code>和 <code>basename</code> </li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># A=/root/test/shell_scripts/cp_passwd.sh</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># echo &quot;$&#123;A&#125;&quot;</span></span><br><span class="line">/root/test/shell_scripts/cp_passwd.sh</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># dirname $&#123;A&#125;</span></span><br><span class="line">/root/test/shell_scripts</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># basename $&#123;A&#125;</span></span><br><span class="line">cp_passwd.sh</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>变量”内容”的删除和替换</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">一个“%”代表从右往左删除</span><br><span class="line">两个“%%”代表从右往左去掉最多</span><br><span class="line">一个“<span class="comment">#”代表从左往右去掉删除</span></span><br><span class="line">两个“<span class="comment">##”代表从左往右去掉最多</span></span><br><span class="line"></span><br><span class="line">举例说明：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># url=www.taobao.com</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;#url&#125;       查看字符数</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url#*.&#125;     从左到右去掉以 . 分割的www. 保留 taobao.com</span></span><br><span class="line">taobao.com</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url#*o&#125;     从左到右去掉以 o 分割的 www.tao 保留 bao.com</span></span><br><span class="line">bao.com</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url##*.&#125; </span></span><br><span class="line">com</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url##*0&#125;</span></span><br><span class="line">www.taobao.com</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url%.*&#125;     从右到左以 . 分割 去掉 .com 保留 www.taobao</span></span><br><span class="line">www.taobao</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url%o*&#125;     从右到左以 o 分割 去掉 m 保留 www.taobao.co</span></span><br><span class="line">www.taobao.c</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url%%.*&#125;</span></span><br><span class="line">www</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url%%o*&#125;</span></span><br><span class="line">www.ta</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>了解</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">替换：/ 和 //</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url/ao/AO&#125;    用AO代替ao（从左往右第一个）</span></span><br><span class="line">www.tAObao.com</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># echo $&#123;url//ao/AO&#125;   贪婪替换（替代所有）</span></span><br><span class="line">www.tAObAO.com</span><br></pre></td></tr></table></figure><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><h4 id="条件判断语句-1"><a href="#条件判断语句-1" class="headerlink" title="条件判断语句"></a>条件判断语句</h4><p><strong>1.1 语法格式</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. test 条件表达式</span><br><span class="line"><span class="number">2</span>. [ 条件表达式 ]    注：表达式左右两边都有空格</span><br><span class="line"><span class="number">3</span>. [[ 条件表达式 ]]  注：支持正则，表达式左右两边都有空格</span><br></pre></td></tr></table></figure><h4 id="条件判断相关参数"><a href="#条件判断相关参数" class="headerlink" title="条件判断相关参数"></a>条件判断相关参数</h4><p>判断文件类型，判断文件新旧，判断字符串是否相等，判断权限等等</p><p><strong>2.1 判断文件类型</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">判断参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-e</td><td style="text-align:center">判断文件<strong>是否存在</strong>（任何类型文件）</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:center">判断文件<strong>是否存在并且是一个普通文件</strong></td></tr><tr><td style="text-align:center">-d</td><td style="text-align:center">判断文件是否存在并且<strong>是一个目录</strong></td></tr><tr><td style="text-align:center">-L</td><td style="text-align:center">判断文件是否存在并且<strong>是一个软连接文件</strong></td></tr><tr><td style="text-align:center">-b</td><td style="text-align:center">判断文件是否存在并且<strong>是一个块设备文件</strong></td></tr><tr><td style="text-align:center">-S</td><td style="text-align:center">判断文件是否存在并且<strong>是一个套接字文件</strong></td></tr><tr><td style="text-align:center">-c</td><td style="text-align:center">判断文件是否存在并且<strong>是一个字符设备文件</strong></td></tr><tr><td style="text-align:center">-p</td><td style="text-align:center">判断文件是否存在并且<strong>是一个命名管道文件</strong></td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">判断文件是否存在并且<strong>是一个非空文件（有内容）</strong></td></tr></tbody></table></div><p><strong>举例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># ls</span></span><br><span class="line">anaconda3                   hbase<span class="literal">-1</span>.<span class="number">2.4</span>       kafka<span class="literal">-eagle</span>                                  spark<span class="literal">-3</span>.<span class="number">2.0</span><span class="literal">-bin-hadoop3</span>.<span class="number">2</span></span><br><span class="line">apache<span class="literal">-zookeeper-3</span>.<span class="number">7.0</span><span class="literal">-bin</span>  jdk               kafka<span class="literal">-eagle-bin-master</span>                       zookeeper</span><br><span class="line"><span class="keyword">data</span>                        jdk1.<span class="number">8.0</span>_241      kafka<span class="literal">-eagle-web-2</span>.<span class="number">0.2</span>                        zookeeper.out</span><br><span class="line">hadoop<span class="literal">-3</span>.<span class="number">3.0</span>                kafka             mysql57<span class="literal">-community-release-el7-10</span>.noarch.rpm</span><br><span class="line">hbase                       kafka_2.<span class="number">11</span><span class="literal">-2</span>.<span class="number">0.0</span>  spark</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># test -e zookeeper</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># [ -d /export/server/ ]</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># [ ! -d /export/server/ ]</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">server</span>]<span class="comment"># echo $?</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>2.2 判断文件的权限</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">判断参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-r</td><td style="text-align:center">当前用户对其是否可读</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">当前用户对其是否可写</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">当前用户对其是否可执行</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">是否有suid，高级权限冒险位</td></tr><tr><td style="text-align:center">-g</td><td style="text-align:center">是否sgid，高级权限强制位</td></tr><tr><td style="text-align:center">-k</td><td style="text-align:center">是否有t位，高级权限粘滞位(只有文件的创建者，管理员，root可以删除)</td></tr></tbody></table></div><p><strong>举例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># ll</span></span><br><span class="line">total <span class="number">8</span></span><br><span class="line"><span class="literal">-rwxr-xr-x</span> <span class="number">1</span> root root  <span class="number">768</span> Jul  <span class="number">4</span> <span class="number">18</span>:<span class="number">49</span> cp_passwd.sh</span><br><span class="line"><span class="literal">-rw-r--r--</span> <span class="number">1</span> root root <span class="number">1679</span> Jul  <span class="number">5</span> <span class="number">16</span>:<span class="number">32</span> font_style.sh</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ -x /root/test/shell_scripts/font_style.sh ];echo $?</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># chmod +x font_style.sh</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># ll</span></span><br><span class="line">total <span class="number">8</span></span><br><span class="line"><span class="literal">-rwxr-xr-x</span> <span class="number">1</span> root root  <span class="number">768</span> Jul  <span class="number">4</span> <span class="number">18</span>:<span class="number">49</span> cp_passwd.sh</span><br><span class="line"><span class="literal">-rwxr-xr-x</span> <span class="number">1</span> root root <span class="number">1679</span> Jul  <span class="number">5</span> <span class="number">16</span>:<span class="number">32</span> font_style.sh</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ -x /root/test/shell_scripts/font_style.sh ];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>2.3 判断文件新旧（修改时间的新旧）**</p><div class="table-container"><table><thead><tr><th style="text-align:center">判断参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">file1 -nt  file2</td><td style="text-align:center">比较file1是否比file2新</td></tr><tr><td style="text-align:center">file1 -ot  file2</td><td style="text-align:center">比较file1是否比file2旧</td></tr><tr><td style="text-align:center">file1 -ef  file2</td><td style="text-align:center">比较是否为同一个文件，或者用于判断硬连接，是否指向同一个inode</td></tr></tbody></table></div><p><strong>举例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ cp_passwd.sh -nt font_style.sh ];echo $?</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ cp_passwd.sh -ot font_style.sh ];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>2.4 判断整数</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">判断参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:center">相等</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:center">不等</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:center">小于等于</td></tr></tbody></table></div><p><strong>举例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ 1 -eq 2 ];echo $?</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ 1=2 ];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ 1 = 2 ];echo $?    等号左右两边必须有空格</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>2.5 判字符串</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">判断参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-z</td><td style="text-align:center">判断是否 为空 字符串，字符串长度为0则成立</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">判断是否为 非空 字符串，字符串长度不为0则成立</td></tr><tr><td style="text-align:center">string1 = string2</td><td style="text-align:center">判断字符串是否相等</td></tr><tr><td style="text-align:center">string1 != string2</td><td style="text-align:center">判断字符串是否相不等</td></tr></tbody></table></div><p><strong>举例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [[ -z &quot;hello world&quot; ]];echo $?</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [[ -z &quot;     &quot; ]];echo $?     空格也为字符</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [[ -z &quot;&quot; ]];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ &quot;hello&quot;=&quot;world&quot; ];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ &quot;hello&quot; = &quot;world&quot; ];echo $?   等号左右两边必须有空格</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p> <strong>2.6  多重条件判断</strong></p><div class="table-container"><table><thead><tr><th>判断符号</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>-a 和 &amp;&amp;</td><td>逻辑与</td><td>[ 1 -eq 1 -a 1 -ne 0 ]     [ 1 -eq 1 ] &amp;&amp; [ 1 -ne 0 ]</td></tr><tr><td>-o 和 \</td><td>\</td><td></td><td>逻辑或</td><td>[ 1 -eq 1 -o 1 -ne 1 ]</td></tr></tbody></table></div><blockquote><p>&amp;&amp;    前面的表达式为真，才会执行后面的代码（1&amp;&amp;1 —&gt;TRUE）</p><p>||     前面的表达式为假，才会执行后面的代码（1||0—&gt;TRUE）</p><p>;         只用<strong>分割</strong>命令或表达式</p></blockquote><p><strong>举例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.判断用户是否是 root 用户，是的话打印<span class="string">&quot;THE USER IS ADMIN&quot;</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ $(id | cut -c 5) -eq 0 ]&amp;&amp; echo &quot;THE USER IS ADMIN&quot;</span></span><br><span class="line">THE USER IS ADMIN</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># [ $(id -u) -eq 0 ]&amp;&amp; echo &quot;THE USER IS ADMIN&quot;</span></span><br><span class="line">THE USER IS ADMIN</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.是 root 的话打印是管理员，不是的话打印不是</span><br><span class="line">[ <span class="variable">$</span>(<span class="type">id</span> -<span class="type">u</span>) -<span class="type">eq</span> <span class="number">0</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;THE USER IS ADMIN&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;THE USER IS NOT ADMIN&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># [[ 1 -eq 2 ]] &amp;&amp; echo &quot;AAA&quot; || echo &quot;BBB&quot; &amp;&amp; echo &quot;CCC&quot;</span></span><br><span class="line">BBB</span><br><span class="line">CCC</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># [[ 1 -eq 2 ]] || echo &quot;AAA&quot; || echo &quot;BBB&quot; &amp;&amp; echo &quot;CCC&quot;</span></span><br><span class="line">AAA</span><br><span class="line">CCC</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># [[ 1 -eq 2 ]] || echo &quot;AAA&quot; || echo &quot;BBB&quot; || echo &quot;CCC&quot;</span></span><br><span class="line">AAA</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># [[ 1 -eq 2 ]] || echo &quot;AAA&quot; &amp;&amp; echo &quot;BBB&quot; || echo &quot;CCC&quot;</span></span><br><span class="line">AAA</span><br><span class="line">BBB</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># [[ 1 -eq 2 ]] || echo &quot;AAA&quot; &amp;&amp; echo &quot;BBB&quot; &amp;&amp; echo &quot;CCC&quot;</span></span><br><span class="line">AAA</span><br><span class="line">BBB</span><br><span class="line">CCC</span><br></pre></td></tr></table></figure><ul><li><p>字符串的比较</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意：双引号引起来，看作一个整体；= 和 == 在 [ 字符串 ] 比较中都表示判断</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># A=&quot;HELLO&quot;;B=&quot;HELLO&quot;;[[ &quot;$&#123;A&#125;&quot; = &quot;$&#123;B&#125;&quot; ]];echo $?</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># A=&quot;HELLO&quot;;B=&quot;hello&quot;;[[ &quot;$&#123;A&#125;&quot; == &quot;$&#123;B&#125;&quot; ]];echo $?</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>2.7  <code>[ 条件 ]</code>   和  <code>[[ 条件 ]]</code> 的区别</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[]和test</span><br><span class="line">两者是一样的，在命令行里test expr和[ expr ]的效果相同。</span><br><span class="line">test的三个基本作用是判断文件、判断字符串、判断整数。支持使用 ”与或非“ 将表达式连接起来。</span><br><span class="line">test中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq, -gt这种形式。</span><br><span class="line">无论是字符串比较还是整数比较都千万不要使用大于号小于号。当然，如果你实在想用也是可以的，对于字符串比较可以使用尖括号的转义形式， 如果比较&quot;ab&quot;和&quot;bc&quot;：[ ab \&lt; bc ]，结果为真，也就是返回状态为0.</span><br><span class="line"></span><br><span class="line">[[ ]]</span><br><span class="line">这是内置在shell中的一个命令，它就比刚才说的test强大的多了。支持字符串的模式匹配（使用=~操作符时甚至支持shell的正则表达 式）。逻辑组合可以不使用test的-a,-o而使用&amp;&amp; ||。</span><br><span class="line">字符串比较时可以把右边的作为一个模式（这是右边的字符串不加双引号的情况下。如果右边的字符串加了双引号，则认为是一个文本字符串。），而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。</span><br><span class="line">注意：使用[]和[[]]的时候不要吝啬空格，每一项两边都要有空格，[[ 1 == 2 ]]的结果为“假”，但[[ 1==2 ]]的结果为“真”！</span><br><span class="line"></span><br><span class="line">let和(())</span><br><span class="line">两者也是一样的(或者说基本上是一样的，双括号比let稍弱一些)。主要进行算术运算(上面的两个都不行)，也比较适合进 行整数比较，可以直接使用熟悉的&lt;,&gt;等比较运算符。可以直接使用变量名如var而不需要$var这样的形式。支持分号隔开的多个表达式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 首先，尽管很相似，但是从概念上讲，二者是不同层次的东西。</span><br><span class="line">&quot;[[&quot;，是关键字，许多shell(如ash bsh)并不支持这种方式。ksh, bash(据说从2.02起引入对[[的支持)等支持。</span><br><span class="line">&quot;[&quot;是一条命令， 与test等价，大多数shell都支持。在现代的大多数sh实现中，&quot;[&quot;与&quot;test&quot;是内部(builtin)命令，换句话说执行&quot;test&quot;/&quot;[&quot;时不会调用/some/path/to/test这样的外部命令(如果有这样的命令的话)。</span><br><span class="line"></span><br><span class="line">2.[[]]结构比Bash版本的[]更通用。在[[和]]之间的所有的字符都不会被文件扩展或是标记分割，但是会有参数引用和命令替换。</span><br><span class="line">用[[ ... ]]测试结构比用[ ... ]更能防止脚本里的许多逻辑错误。比如说，&amp;&amp;,||,&lt;和&gt;操作符能在一个[[]]测试里通过，但在[]结构会发生错误。</span><br><span class="line"></span><br><span class="line">3.(( ))结构扩展并计算一个算术表达式的值。如果表达式值为0，会返回1或假作为退出状态码。一个非零值的表达式返回一个0或真作为退出状态码。这个结构和先前test命令及[]结构的讨论刚好相反。</span><br><span class="line"></span><br><span class="line">4.[ ... ]为shell命令，所以在其中的表达式应是它的命令行参数，所以串比较操作符&quot;&gt;&quot; 与&quot;&lt;&quot;必须转义，否则就变成IO改向操作符了(请参看上面2中的例子)。在[[中&quot;&lt;&quot;与&quot;&gt;&quot;不需转义；</span><br><span class="line">由于&quot;[[&quot;是关键字，不会做命令行扩展，因而相对的语法就稍严格些。例如</span><br><span class="line">在[ ... ]中可以用引号括起操作符，因为在做命令行扩展时会去掉这些引号，而在[[ ... ]]则不允许这样做。</span><br><span class="line"></span><br><span class="line">5.[[ ... ]]进行算术扩展，而[ ... ]不做</span><br><span class="line"></span><br><span class="line">6.[[ ... &amp;&amp; ... &amp;&amp; ...  ]] 和 [ ... -a ... -a ...] 不一样，[[ ]] 是逻辑短路操作，而 [ ] 不会进行逻辑短路</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> ~]<span class="comment"># [ 1 -eq 0 &amp;&amp; 1 -ne 0 ];echo $?</span></span><br><span class="line"><span class="literal">-bash</span>: [: <span class="type">missing</span> `]<span class="string">&#x27;</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">(base) [root@master ~]# [ 1 -eq 0 -a 1 -ne 0 ];echo $?</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">(base) [root@master ~]# [[ 1 -eq 0 &amp;&amp; 1 -ne 0 ]];echo $?</span></span><br><span class="line"><span class="string">1</span></span><br></pre></td></tr></table></figure><h2 id="流程控制语句（if…-）"><a href="#流程控制语句（if…-）" class="headerlink" title="流程控制语句（if….）"></a>流程控制语句（if….）</h2><h4 id="基本语法结构"><a href="#基本语法结构" class="headerlink" title="基本语法结构"></a>基本语法结构</h4><p><strong>1.1 if 结构</strong></p><p>语法：只要满足条件就一直执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition</span> ];then</span><br><span class="line">command</span><br><span class="line">command</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test 条件;then</span><br><span class="line">命令</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ 条件 ]];then</span><br><span class="line">命令</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ 条件 ] &amp;&amp; command</span><br></pre></td></tr></table></figure><p><strong>1.2 if…else 结构</strong></p><p>语法：判断是否满足条件，满足走一条，不满足走另一条</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition</span> ];then</span><br><span class="line">command1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">command2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">[ 条件 ] &amp;&amp; command1 || command2</span><br></pre></td></tr></table></figure><p><strong>1.3 if…elif…else 结构</strong></p><p>语法：选择的有很多，能走的只有一条</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="type">condition1</span> ];then</span><br><span class="line">command1  </span><br><span class="line">elif [ <span class="type">condition2</span> ];then</span><br><span class="line">command2   </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">command3</span><br><span class="line">fi</span><br><span class="line">注释：</span><br><span class="line">如果条件<span class="number">1</span>满足，执行命令<span class="number">1</span>后结束；如果条件<span class="number">1</span>不满足，再看条件<span class="number">2</span>，如果条件<span class="number">2</span>满足执行命令<span class="number">2</span>后结束；如果条件<span class="number">1</span>和条件<span class="number">2</span>都不满足执行命令<span class="number">3</span>结束.</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.判断当前主机是否可以连接远程主机</span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入您的 IP 或者 域名：&quot;</span> IP</span><br><span class="line">ping <span class="variable">$</span>&#123;IP&#125; <span class="literal">-c1</span> &gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m 您的主机网络可以与<span class="variable">$</span>&#123;IP&#125;联通. \033[0m&quot;</span></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m 您的主机网路不可以与<span class="variable">$</span>&#123;IP&#125;联通！！！ \033[0m&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;INPUT YOUR IP :&quot;</span> IP ; ping <span class="literal">-c3</span> <span class="variable">$</span>&#123;IP&#125; &gt; /dev/null ; [[ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;YOUR NETOWRK IS OK&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;YOUR NETTWORK IS ERROR&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.判断一个门户网站是否正常</span><br><span class="line">（直接去访问一下，通过访问成功和失败的返回值来判断）</span><br><span class="line"><span class="built_in">wget</span> www.baidu.com   </span><br><span class="line"><span class="built_in">curl</span>  www.baidu.com</span><br><span class="line">elinks <span class="literal">-dump</span> www.baidu.com</span><br><span class="line"></span><br><span class="line">脚本：</span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;Please input your IP or Domain Name:&quot;</span> web_server</span><br><span class="line"></span><br><span class="line"><span class="comment"># wget -P /root/test/index $&#123;web_server&#125; &amp;&gt;/dev/null</span></span><br><span class="line"><span class="built_in">wget</span> <span class="variable">$</span>&#123;web_server&#125; &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">        <span class="comment"># Check whether the folder exists. If not, create it</span></span><br><span class="line">        test <span class="literal">-d</span> /root/test/index || mkdir /root/test/index</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Move the build file to index and mark build time.</span></span><br><span class="line">        <span class="built_in">mv</span> ./index.html /root/test/index/index_<span class="variable">$</span>(date +%F_%T).html</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m The current website service is normal \033[0m&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m The network service of the current website is abnormal! \033[0m&quot;</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="条件判断语句（for…-）"><a href="#条件判断语句（for…-）" class="headerlink" title="条件判断语句（for….）"></a>条件判断语句（for….）</h2><h4 id="for循环语法结构"><a href="#for循环语法结构" class="headerlink" title="for循环语法结构"></a>for循环语法结构</h4><p><strong>1.1 列表循环</strong></p><p>语法：用于将一组命令执行<strong>已知的次数</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> &#123;list&#125;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">          command </span><br><span class="line">          command</span><br><span class="line">          …</span><br><span class="line">     done</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> a b c</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">         command</span><br><span class="line">         command</span><br><span class="line">     done</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;start，end，step&#125;</span></span><br><span class="line"><span class="number">1</span>.打印<span class="number">0</span><span class="literal">-50</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">0</span>..<span class="number">50</span>&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;i&#125;&quot;</span>;done</span><br><span class="line"><span class="number">2</span>.打印<span class="number">0</span><span class="literal">-50</span>的偶数</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">0</span>..<span class="number">50</span>..<span class="number">2</span>&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;i&#125;&quot;</span>;done</span><br><span class="line"><span class="number">3</span>.打印 <span class="number">10</span><span class="literal">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">10</span>..<span class="number">1</span>&#125;;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;i&#125;&quot;</span>;done</span><br><span class="line"></span><br><span class="line"><span class="comment"># $(seq start step end)</span></span><br><span class="line"><span class="number">4</span>.打印 <span class="number">1</span><span class="literal">-10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$</span>(seq <span class="number">10</span>);<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;i&#125;&quot;</span>;done</span><br><span class="line"><span class="number">5</span>.打印<span class="number">10</span><span class="literal">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$</span>(seq <span class="number">10</span> <span class="literal">-1</span> <span class="number">1</span>);<span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;i&#125;&quot;</span>;done</span><br></pre></td></tr></table></figure><p><strong>1.2 不带列表循环</strong></p><p>语法：不带列表的for循环执行时由 用户指定参数和参数的个数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> variable</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        command </span><br><span class="line">        command</span><br><span class="line">        …</span><br><span class="line">   done</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim demo.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash </span></span><br><span class="line"><span class="keyword">for</span> i</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;i&#125;&quot;</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># chmod +x demo.sh &amp;&amp; ./demo.sh a b c</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># chmod +x demo.sh &amp;&amp; ./demo.sh abc</span></span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">(base) [<span class="type">root</span>@<span class="type">master</span> <span class="type">shell_scripts</span>]<span class="comment"># bash -x demo.sh a b c</span></span><br><span class="line">+ <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&quot;$@&quot;&#x27;</span>         <span class="keyword">for</span> i 是 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&quot;$@&quot;&#x27;</span>  的省略</span><br><span class="line">+ <span class="built_in">echo</span> a</span><br><span class="line">a</span><br><span class="line">+ <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&quot;$@&quot;&#x27;</span></span><br><span class="line">+ <span class="built_in">echo</span> b</span><br><span class="line">b</span><br><span class="line">+ <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&quot;$@&quot;&#x27;</span></span><br><span class="line">+ <span class="built_in">echo</span> c</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p><strong>1.3  案例</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="number">1</span><span class="literal">-100</span> 的奇数和</span><br><span class="line">vim sum_odd_number.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">100</span>..<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        sum=<span class="variable">$</span>[ <span class="variable">$sum</span>+<span class="variable">$i</span> ]</span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1-100的奇数和是：<span class="variable">$</span>&#123;sum&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>1.4 循环控制语句</strong></p><p><strong>循环体：</strong> do….done之间的内容</p><ul><li>continue：继续；表示 循环体 内下面的代码不执行，重新开始下一次循环</li><li>break：打断；马上停止执行本次循环，执行 循环体 后面的代码</li><li>exit：表示直接跳出程序</li></ul><p>例子：</p><p>1.判断输入整数是否是质数(只能被1和它本身整除=的数叫质数。)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;Please Input A Int Number:&quot;</span> number</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 &amp; 2 is a specil case</span></span><br><span class="line">[ <span class="variable">$number</span> -<span class="type">eq</span> <span class="number">1</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$number</span> neither prime number nor composite number&quot;</span> <span class="variable">$</span><span class="variable">$</span> <span class="keyword">exit</span></span><br><span class="line">[ <span class="variable">$number</span> -<span class="type">eq</span> <span class="number">2</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$number</span> is prime number &quot;</span> <span class="variable">$</span><span class="variable">$</span> <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for loop 2 to the input number subtract 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$</span>(seq <span class="number">2</span> <span class="variable">$</span>[<span class="variable">$number</span>-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$number</span>%<span class="variable">$i</span> -<span class="type">eq</span> <span class="number">0</span> ]];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot; <span class="variable">$number</span> is not a prime number!&quot;</span></span><br><span class="line">        <span class="keyword">exit</span></span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; <span class="variable">$number</span> is a prime number!&quot;</span></span><br></pre></td></tr></table></figure><ol><li><p>批量加5个新用户，以u1到u5命名，并统一加一个新组，组名为 class ,统一改密码为123</p></li><li><p>添加用户的命令    <code>useradd -G development</code></p></li><li>判断class组是否存在  <code>grep -w ^development /etc/group</code> 或者<code>groupadd development</code></li><li>根据题意，判断该脚本循环5次来添加用户  <code>for</code></li><li>给用户设置密码，应该放到循环体里面</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment"># Name    : creating_users.sh                            </span></span><br><span class="line"><span class="comment"># Desc    : 批量创建用户,归为统一组，统一密码为                   </span></span><br><span class="line"><span class="comment"># Path    : /root/test/shell_scripts/creating_users.sh                   </span></span><br><span class="line"><span class="comment"># Auther  : Jermyn                                   </span></span><br><span class="line"><span class="comment"># Date    : 2022-07-07                               </span></span><br><span class="line"><span class="comment"># Version : 1.0                                      </span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入您创建的用户组:&quot;</span> <span class="built_in">group</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入您创建的用户名：&quot;</span> user_name</span><br><span class="line">read <span class="literal">-s</span> <span class="literal">-p</span> <span class="string">&quot;请输入您统一的密码：&quot;</span> password </span><br><span class="line"></span><br><span class="line">grep <span class="literal">-w</span> <span class="string">&quot;^<span class="variable">$</span>&#123;group&#125;&quot;</span> /etc/<span class="built_in">group</span> &amp;&gt;/dev/null </span><br><span class="line">[ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ] &amp;&amp; useradd  <span class="variable">$</span>&#123;<span class="built_in">group</span>&#125;   </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">1</span>..<span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">useradd <span class="literal">-G</span> <span class="variable">$</span>&#123;<span class="built_in">group</span>&#125; <span class="variable">$</span>&#123;user_name&#125;<span class="variable">$</span>&#123;i&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>&#123;password&#125;&quot;</span>|passwd <span class="literal">--stdin</span> <span class="variable">$</span>&#123;user_name&#125;<span class="variable">$</span>&#123;i&#125;</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">结果测试：</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> ~]<span class="comment"># id employe1</span></span><br><span class="line">uid=<span class="number">1001</span>(employe1) gid=<span class="number">1001</span>(employe1) groups=<span class="number">1001</span>(employe1),<span class="number">1000</span>(development)</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> ~]<span class="comment"># su - employe1</span></span><br><span class="line">Last login: Thu Jul  <span class="number">7</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">30</span> CST <span class="number">2022</span> on pts/<span class="number">0</span></span><br><span class="line">[<span class="type">employe1</span>@<span class="type">Jermyn</span> ~]<span class="variable">$</span> su - employe2</span><br><span class="line">Password: </span><br><span class="line">Last login: Thu Jul  <span class="number">7</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">42</span> CST <span class="number">2022</span> on pts/<span class="number">0</span></span><br><span class="line">[<span class="type">employe2</span>@<span class="type">Jermyn</span> ~]<span class="variable">$</span> <span class="keyword">exit</span></span><br><span class="line">logout</span><br><span class="line">[<span class="type">employe1</span>@<span class="type">Jermyn</span> ~]<span class="variable">$</span> <span class="keyword">exit</span></span><br><span class="line">logout</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><ol><li>写一个脚本，局域网内，把能ping通的IP和不能ping通的IP分类，并保存到两个文本文件里（以10.1.1.1~10.1.1.10 为例）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/env bash</span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"><span class="comment"># Name    : check_ping_network.sh                             </span></span><br><span class="line"><span class="comment"># Desc    : Check whether the PING succeeds and classification preservation</span></span><br><span class="line"><span class="comment"># Path    : /root/test/shell_scripts/check_ping_netowrk.sh                  </span></span><br><span class="line"><span class="comment"># Auther  : Jermyn                                   </span></span><br><span class="line"><span class="comment"># Date    : 2022-07-07                               </span></span><br><span class="line"><span class="comment"># Version : 1.0                                      </span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入您需要PING的主机的主机位（如：10.1.1）：&quot;</span> ip</span><br><span class="line"><span class="comment">#循环去ping主机的IP</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ping <span class="literal">-c1</span> <span class="variable">$ip</span>.<span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is ok&quot;</span> &gt;&gt; /tmp/ip_up.txt</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is down&quot;</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># time ./check_ping_network.sh </span></span><br><span class="line">请输入您需要PING的主机的主机位（如：<span class="number">10.1</span>.<span class="number">1</span>）：<span class="number">192.168</span>.<span class="number">88</span></span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m28.<span class="number">787</span>s</span><br><span class="line">user    <span class="number">0</span>m0.<span class="number">012</span>s</span><br><span class="line">sys     <span class="number">0</span>m0.<span class="number">080</span>s</span><br></pre></td></tr></table></figure><blockquote><p>因为上述的 检测方式 花费时间太长，所以提供一种并发机制</p><p>并行执行：<br><strong>{程序}&amp;表示将程序放到后台并行执行，如果需要等待程序执行完毕再进行下面内容，需要加wait</strong></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/env bash</span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"><span class="comment"># Name    : check_ping_network.sh                             </span></span><br><span class="line"><span class="comment"># Desc    : Check whether the PING succeeds and classification preservation</span></span><br><span class="line"><span class="comment"># Path    : /root/test/shell_scripts/check_ping_netowrk.sh                  </span></span><br><span class="line"><span class="comment"># Auther  : Jermyn                                   </span></span><br><span class="line"><span class="comment"># Date    : 2022-07-07                               </span></span><br><span class="line"><span class="comment"># Version : 2.0                                      </span></span><br><span class="line"><span class="comment">###########################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入您需要PING的主机的主机位（如：10.1.1）：&quot;</span> ip</span><br><span class="line"><span class="comment">#循环去ping主机的IP</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">ping <span class="literal">-c1</span> <span class="variable">$ip</span>.<span class="variable">$i</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is ok&quot;</span> &gt;&gt; /tmp/ip_up.txt</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ip</span>.<span class="variable">$i</span> is down&quot;</span> &gt;&gt; /tmp/ip_down.txt</span><br><span class="line">fi</span><br><span class="line">&#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检测已经完成，可以PING通的主机存放在/tmp/ip_up.txt &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检测已经完成，不可以PING通的主机存放在/tmp/ip_down.txt &quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">结果显示：</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># time ./check_ping_network.sh </span></span><br><span class="line">请输入您需要PING的主机的主机位（如：<span class="number">10.1</span>.<span class="number">1</span>）：<span class="number">192.168</span>.<span class="number">88</span></span><br><span class="line">检测已经完成，可以PING通的主机存放在/tmp/ip_up.txt </span><br><span class="line">检测已经完成，不可以PING通的主机存放在/tmp/ip_down.txt </span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m6.<span class="number">781</span>s</span><br><span class="line">user    <span class="number">0</span>m0.<span class="number">016</span>s</span><br><span class="line">sys     <span class="number">0</span>m0.<span class="number">030</span>s</span><br></pre></td></tr></table></figure><h2 id="条件判断语句（while…-amp-until）"><a href="#条件判断语句（while…-amp-until）" class="headerlink" title="条件判断语句（while…&amp;until）"></a>条件判断语句（while…&amp;until）</h2><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>语法：不确定循环换次数；条件为真就进入循环；条件为假就退出循环</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">command...</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>  [ <span class="number">1</span> -<span class="type">eq</span> <span class="number">1</span> ] 或者 (( <span class="number">1</span> &gt; <span class="number">2</span> ))</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">     command</span><br><span class="line">     command</span><br><span class="line">     ...</span><br><span class="line"> done</span><br></pre></td></tr></table></figure><p>实例：</p><p><strong>1. 脚本同步系统时间</strong></p><h4 id="①-具体需求"><a href="#①-具体需求" class="headerlink" title="① 具体需求"></a>① 具体需求</h4><ol><li>写一个脚本，30秒 同步一次系统时间，时间同步服务器10.1.1.1</li><li>如果同步失败，则进行邮件报警,每次失败都报警</li><li>如果同步成功,也进行邮件通知,但是  成功100次  才通知一次</li></ol><h4 id="②-思路"><a href="#②-思路" class="headerlink" title="② 思路"></a>② 思路</h4><ol><li>每隔30s同步一次时间，该脚本是一个死循环   while 循环</li><li>同步失败发送邮件   <ul><li>ntpdate 10.1.1.1   </li><li>rdate -s 10.1.1.1</li></ul></li><li>同步成功100次发送邮件   定义变量保存成功次数 </li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># 该脚本用于时间同步</span></span><br><span class="line">NTP=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ntpdate <span class="variable">$NTP</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;system date failed&quot;</span> |mail <span class="literal">-s</span> <span class="string">&quot;check system date&quot;</span>  root@localhost</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">let count++</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -<span class="type">eq</span> <span class="number">100</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;systemc date success&quot;</span> |mail <span class="literal">-s</span> <span class="string">&quot;check system date&quot;</span>  root@localhost &amp;&amp; count=<span class="number">0</span></span><br><span class="line">fi</span><br><span class="line">fi</span><br><span class="line"><span class="built_in">sleep</span> <span class="number">30</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定义变量</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">ntp_server=<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">rdate <span class="literal">-s</span> <span class="variable">$ntp</span><span class="literal">-server</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">ne</span> <span class="number">0</span> ];then</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;system date failed&quot;</span> |mail <span class="literal">-s</span> <span class="string">&#x27;check system date&#x27;</span>  root@localhost</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">let count++</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$</span>[<span class="variable">$count</span>%<span class="number">100</span>] -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">dte successfull<span class="string">&quot; |mail -s &#x27;check system date&#x27;  root@localhost &amp;&amp; count=0</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">sleep 3</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以上脚本还有更多的写法，课后自己完成</span></span><br></pre></td></tr></table></figure><h4 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h4><p>语法：条件为假就进入循环；条件为真就退出循环</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> expression   [ <span class="number">1</span> -<span class="type">eq</span> <span class="number">1</span> ]  (( <span class="number">1</span> &gt;= <span class="number">1</span> ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">command</span><br><span class="line">command</span><br><span class="line">...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>打印 1-5</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">5</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><ul><li>具体需求</li></ul><ol><li>使用until语句批量创建10个用户，要求stu1—stu5用户的UID分别为1001—1005；</li><li>stu6~stu10用户的家目录分别在/rhome/stu6—/rhome/stu10</li></ol><ul><li>思路</li></ul><ol><li>创建用户语句  <code>useradd -u|useradd -d</code></li><li>使用循环语句(until)批量创建用户  <code>until循环语句结构</code></li><li>判断用户前5个和后5个  <code>条件判断语句</code></li></ol><ul><li>落地实现</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/bin/env bash</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">d</span> /<span class="type">rhome</span> ];then</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;/rhome目录已存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    mkdir /rhome</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;/rhome不存在，已完成创建&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">10</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ];then</span><br><span class="line">                useradd <span class="literal">-u</span> <span class="variable">$</span>[<span class="number">1000</span>+<span class="variable">$i</span>] stu<span class="variable">$i</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="number">123</span>|passwd <span class="literal">--stdin</span> stu<span class="variable">$i</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                useradd <span class="literal">-d</span> /rhome/stu<span class="variable">$i</span> stu<span class="variable">$i</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="number">123</span>|passwd <span class="literal">--stdin</span> stu<span class="variable">$i</span></span><br><span class="line">        fi</span><br><span class="line">let i++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">==================================================</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">10</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">5</span> ];then</span><br><span class="line">useradd <span class="literal">-u</span> <span class="variable">$</span>[<span class="number">1000</span>+<span class="variable">$i</span>] stu<span class="variable">$i</span> &amp;&amp; <span class="built_in">echo</span> <span class="number">123</span>|passwd <span class="literal">--stdin</span> stu<span class="variable">$i</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">[ ! -<span class="type">d</span> /<span class="type">rhome</span> ] &amp;&amp; mkdir /rhome</span><br><span class="line">useradd <span class="literal">-d</span> /rhome/stu<span class="variable">$i</span> stu<span class="variable">$i</span> &amp;&amp; <span class="built_in">echo</span> <span class="number">123</span>|passwd <span class="literal">--stdin</span> stu<span class="variable">$i</span></span><br><span class="line">fi</span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p><strong>系统变量</strong>：RANDOM，默认会产生0~32767的随机整数</p><p><strong>前言：</strong>要想调用变量，必须加 $</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.随机产生 <span class="number">0</span><span class="literal">-32767</span> 之间的数字（注：RAMDOM必须大写）</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.随机产生 <span class="number">0</span><span class="literal">-2</span> 之间的数字（注：产生 <span class="number">0</span><span class="literal">-X</span> 之间的数字 宗旨就是随机数除以 X+<span class="number">1</span> 后取余数）</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>[ <span class="variable">$</span>&#123;RANDOM&#125;%3 ]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.随机产生 <span class="number">0</span><span class="literal">-99</span> 之间的数字 </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>[ <span class="variable">$</span>&#123;RANDOM&#125;%100 ]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>.随机产生 <span class="number">50</span><span class="literal">-99</span> 之间的数字（注：产生 A<span class="literal">-B</span> 之间的数字，宗旨就是，产生随机数除以 A+<span class="number">1</span> 后加上 B<span class="literal">-A</span>）</span><br><span class="line">例如：随机数字为 <span class="number">756</span> 除以 <span class="number">51</span> 商 <span class="number">14</span> 余 <span class="number">42</span> 加上 <span class="number">49</span> 得 <span class="number">91</span>   </span><br><span class="line">例如：随机数字为 <span class="number">764</span> 除以 <span class="number">51</span> 商 <span class="number">14</span> 余 <span class="number">50</span> 加上 <span class="number">49</span> 得 <span class="number">99</span></span><br><span class="line">例如：随机数字为 <span class="number">52</span>  除以 <span class="number">51</span> 商 <span class="number">1</span>  余  <span class="number">1</span> 加上 <span class="number">49</span> 得 <span class="number">50</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>[ <span class="variable">$</span>&#123;RANDOM&#125;%51+49 ]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>.随机产生一个一位数</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>[ <span class="variable">$</span>&#123;RANDOM&#125;%10 ]&quot;</span></span><br><span class="line"></span><br><span class="line">随机产生一个两位数</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>[ <span class="variable">$</span>&#123;RANDOM&#125;%90+10 ]&quot;</span></span><br><span class="line"></span><br><span class="line">随机产生一个三位数字（注：三位数字 <span class="number">100</span><span class="literal">-999</span> ）</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>[ <span class="variable">$</span>&#123;RANDOM&#125;%900+100 ]&quot;</span></span><br><span class="line"></span><br><span class="line">随机产生一个四位数字</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$</span>[ <span class="variable">$</span>&#123;RANDOM&#125;%9000+1000 ]&quot;</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><strong>2.1 具体需求</strong>：写一个脚本，产生一个phone_num.txt文件，随机产生以139开头的手机号1000个，每个一行。</p><blockquote><p>思路：可以每次产生四个，两次产生或者其他，但是如果每个数字单独产生的话，电话容易出现重复的</p></blockquote><ol><li>产生1000个电话号码，脚本需要循环1000次 <code>FOR WHILE UNTIL</code></li><li>139+8位,后8位随机产生，可以让每一位数字都随机产生  <code>echo $[$RANDOM%10]</code></li><li>将随机产生的数字分别保存到变量里，然后加上139保存到文件里</li></ol><p>1、for 循环</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">touch ./phone_number.txt</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;=<span class="number">1000</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    n4=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n5=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n6=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n7=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n8=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n9=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n3=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n11=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$</span>&#123;n4&#125;<span class="variable">$</span>&#123;n5&#125;<span class="variable">$</span>&#123;n6&#125;<span class="variable">$</span>&#123;n7&#125;<span class="variable">$</span>&#123;n8&#125;<span class="variable">$</span>&#123;n9&#125;<span class="variable">$</span>&#123;n10&#125;<span class="variable">$</span>&#123;n11&#125;&quot;</span> &gt;&gt;./phone_number.txt</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>2、while 循环</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">touch ./phone_number.txt</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -<span class="type">lt</span> <span class="number">1000</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    n4=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n5=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n6=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n7=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n8=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n9=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n3=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n11=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$</span>&#123;n4&#125;<span class="variable">$</span>&#123;n5&#125;<span class="variable">$</span>&#123;n6&#125;<span class="variable">$</span>&#123;n7&#125;<span class="variable">$</span>&#123;n8&#125;<span class="variable">$</span>&#123;n9&#125;<span class="variable">$</span>&#123;n10&#125;<span class="variable">$</span>&#123;n11&#125;&quot;</span> &gt;&gt;./phone_number.txt</span><br><span class="line">    let count++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>3、while 死循环</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">touch ./phone_number.txt</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    n4=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n5=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n6=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n7=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n8=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n9=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n3=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n11=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$</span>&#123;n4&#125;<span class="variable">$</span>&#123;n5&#125;<span class="variable">$</span>&#123;n6&#125;<span class="variable">$</span>&#123;n7&#125;<span class="variable">$</span>&#123;n8&#125;<span class="variable">$</span>&#123;n9&#125;<span class="variable">$</span>&#123;n10&#125;<span class="variable">$</span>&#123;n11&#125;&quot;</span> &gt;&gt;./phone_number.txt</span><br><span class="line">    let count++</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$count</span> -<span class="type">eq</span> <span class="number">1000</span> ];then <span class="keyword">exit</span>;fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>4、until 循环</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">touch ./phone_number.txt</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$count</span> -<span class="type">gt</span> <span class="number">1000</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    n4=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n5=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n6=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n7=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n8=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n9=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n3=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    n11=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">10</span> ]</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;139<span class="variable">$</span>&#123;n4&#125;<span class="variable">$</span>&#123;n5&#125;<span class="variable">$</span>&#123;n6&#125;<span class="variable">$</span>&#123;n7&#125;<span class="variable">$</span>&#123;n8&#125;<span class="variable">$</span>&#123;n9&#125;<span class="variable">$</span>&#123;n10&#125;<span class="variable">$</span>&#123;n11&#125;&quot;</span> &gt;&gt;./phone_number.txt</span><br><span class="line">    let count++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>2.2 具体需求</strong>：随机抽出5位幸运观众</p><ul><li><p>具体需求：</p><ul><li>在上面的1000个手机号里抽奖  5个 幸运观众，显示出这5个幸运观众。</li><li>但只显示头3个数和尾号的4个数，中间的都用*代替</li></ul></li><li><p>思路：</p><ul><li><p>确定幸运观众所在的行    <code>0-1000  随机找出一个数字   $[$RANDOM%1000+1]</code></p></li><li><p>将电话号码提取出来      <code>head -随机产生行号 phonenum.txt |tail -1</code></p></li><li><p>显示  前3个和后4个数到屏幕   <code>echo 139****</code></p></li></ul></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">&gt;luck_phone_num.txt</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    all_user=`wc <span class="literal">-l</span> phone_number.txt | cut <span class="literal">-d</span> <span class="string">&#x27; &#x27;</span> <span class="literal">-f1</span>`</span><br><span class="line">    random_num=<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="variable">$all_user</span>+<span class="number">1</span> ]</span><br><span class="line">    random_num_phone=<span class="variable">$</span>(head -<span class="variable">$random_num</span> phone_number.txt | tail <span class="literal">-1</span> |cut <span class="literal">-c</span> <span class="string">&#x27;7-&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;139****<span class="variable">$random_num_phone</span>&quot;</span> | <span class="built_in">tee</span> <span class="literal">-a</span> luck_phone_num.txt</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>2.3 批量创建用户(密码随机产生)</strong></p><p><strong>需求：</strong>批量创建5个用户，每个用户的密码为一个随机数</p><p><strong>思路：</strong>1.循环5次创建用户</p><p>​            2.产生一个密码文件来保存用户的随机密码</p><p>​            3.从密码文件中取出随机密码赋值给用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"><span class="comment"># Name    : creating_users02.sh                            </span></span><br><span class="line"><span class="comment"># Desc    : 批量创建用户,批量创建5个用户，每个用户的密码为一个随机数                  </span></span><br><span class="line"><span class="comment"># Path    : /root/test/shell_scripts/creating_users02.sh                   </span></span><br><span class="line"><span class="comment"># Auther  : Jermyn                                   </span></span><br><span class="line"><span class="comment"># Date    : 2022-07-12                              </span></span><br><span class="line"><span class="comment"># Version : 2.0                                      </span></span><br><span class="line"><span class="comment">########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> user0&#123;<span class="number">1</span>..<span class="number">5</span>&#125;:jermyn<span class="variable">$</span>[ <span class="variable">$RANDOM</span>%<span class="number">9000</span>+<span class="number">1000</span> ]<span class="selector-tag">@</span>.. | tr <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">tee</span> <span class="literal">-a</span> user_passwd.txt</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    user=`head -<span class="variable">$i</span> uesr_passwd.txt | tail <span class="literal">-1</span> | cut <span class="literal">-d</span> <span class="string">&#x27;:&#x27;</span> <span class="operator">-f</span> <span class="number">1</span> `</span><br><span class="line">    passwd=`head -<span class="variable">$i</span> uesr_passwd.txt | tail <span class="literal">-1</span> | cut <span class="literal">-d</span> <span class="string">&#x27;:&#x27;</span> <span class="operator">-f</span> <span class="number">2</span> `</span><br><span class="line">    useradd <span class="variable">$user</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pass</span>|passwd <span class="literal">--stdin</span> <span class="variable">$user</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="循环嵌套-shift-位移-补充expect"><a href="#循环嵌套-shift-位移-补充expect" class="headerlink" title="循环嵌套+shift 位移+补充expect"></a>循环嵌套+shift 位移+补充expect</h2><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><ul><li><p>一个循环体内又包含另一个<strong>完整</strong>的循环结构，称为循环的嵌套。</p></li><li><p>每次外部循环都会触发内部循环，直至内部循环完成，才接着执行下一次的外部循环。</p></li><li><p>for循环、while循环和until循环可以<strong>相互</strong>嵌套。</p></li></ul><p><strong>1.1  打印九九乘法表</strong></p><ul><li>for 循环</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> ((j=<span class="number">1</span>;j&lt;=<span class="variable">$i</span>;j++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="operator">-ne</span> <span class="string">&quot;<span class="variable">$j</span>*<span class="variable">$i</span>=<span class="variable">$</span>[ <span class="variable">$i</span>*<span class="variable">$j</span> ]\t&quot;</span></span><br><span class="line">    done</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>while 循环</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -<span class="type">le</span> <span class="number">9</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> [ <span class="variable">$j</span> -<span class="type">le</span> <span class="variable">$i</span> ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="operator">-ne</span> <span class="string">&quot;<span class="variable">$j</span>*<span class="variable">$i</span>=<span class="variable">$</span>[ <span class="variable">$i</span>*<span class="variable">$j</span> ]\t&quot;</span></span><br><span class="line">        let j++</span><br><span class="line">    done</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>until 循环</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">until</span> [ <span class="variable">$i</span> -<span class="type">gt</span> <span class="number">9</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    j=<span class="number">1</span></span><br><span class="line">    <span class="keyword">until</span> [ <span class="variable">$j</span> -<span class="type">gt</span> <span class="variable">$i</span> ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="operator">-ne</span> <span class="string">&quot;<span class="variable">$j</span>*<span class="variable">$i</span>=<span class="variable">$</span>[ <span class="variable">$i</span>*<span class="variable">$j</span> ]\t&quot;</span></span><br><span class="line">        let j++</span><br><span class="line">    done</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">let i++</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="shift-位移的用法"><a href="#shift-位移的用法" class="headerlink" title="shift 位移的用法"></a>shift 位移的用法</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span>退出整个程序</span><br><span class="line"><span class="keyword">break</span>   结束当前循环，或跳出本层循环</span><br><span class="line"><span class="keyword">continue</span> 忽略本次循环剩余的代码，直接进行下一次循环</span><br><span class="line">shift使位置参数向左移动，默认移动<span class="number">1</span>位，可以使用shift <span class="number">2</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line">true</span><br><span class="line">false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.1 实现用户自定义输入数字，然后脚本计算和：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.常规 <span class="keyword">for</span> 循环</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">let sum=<span class="variable">$sum</span>+<span class="variable">$i</span></span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> sum=<span class="variable">$sum</span></span><br><span class="line"></span><br><span class="line">结果显示</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># bash -x demo.sh 1 2 3</span></span><br><span class="line">+ sum=<span class="number">0</span></span><br><span class="line">+ <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&quot;$@&quot;&#x27;</span></span><br><span class="line">+ let sum=<span class="number">0</span>+<span class="number">1</span></span><br><span class="line">+ <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&quot;$@&quot;&#x27;</span></span><br><span class="line">+ let sum=<span class="number">1</span>+<span class="number">2</span></span><br><span class="line">+ <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;&quot;$@&quot;&#x27;</span></span><br><span class="line">+ let sum=<span class="number">3</span>+<span class="number">3</span></span><br><span class="line">+ <span class="built_in">echo</span> sum=<span class="number">6</span></span><br><span class="line">sum=<span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.使用 shift</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$</span><span class="comment"># -ne 0 ]</span></span><br><span class="line"><span class="type">do</span></span><br><span class="line"><span class="type">let</span> <span class="type">sum</span>=<span class="variable">$sum</span>+<span class="variable">$1</span></span><br><span class="line"><span class="type">shift</span></span><br><span class="line"><span class="type">done</span></span><br><span class="line"><span class="type">echo</span> <span class="type">sum</span>=<span class="variable">$sum</span></span><br><span class="line"></span><br><span class="line">结果显示：</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># bash -x demo.sh 1 2 3</span></span><br><span class="line">+ <span class="type">sum</span>=<span class="number">0</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="number">3</span> -<span class="type">ne</span> <span class="number">0</span> <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="type">let</span> <span class="type">sum</span>=<span class="number">0</span>+<span class="number">1</span></span><br><span class="line">+ <span class="type">shift</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="number">2</span> -<span class="type">ne</span> <span class="number">0</span> <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="type">let</span> <span class="type">sum</span>=<span class="number">1</span>+<span class="number">2</span></span><br><span class="line">+ <span class="type">shift</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="number">1</span> -<span class="type">ne</span> <span class="number">0</span> <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="type">let</span> <span class="type">sum</span>=<span class="number">3</span>+<span class="number">3</span></span><br><span class="line">+ <span class="type">shift</span></span><br><span class="line">+ <span class="string">&#x27;[&#x27;</span> <span class="number">0</span> -<span class="type">ne</span> <span class="number">0</span> <span class="string">&#x27;]&#x27;</span></span><br><span class="line">+ <span class="type">echo</span> <span class="type">sum</span>=<span class="number">6</span></span><br><span class="line"><span class="type">sum</span>=<span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="补充扩展expect"><a href="#补充扩展expect" class="headerlink" title="补充扩展expect"></a>补充扩展expect</h4><p>语法：expect 自动应答  tcl语言</p><p><strong>3.1 需求：A远程登录到server上什么都不做</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="comment"># 开启一个程序</span></span><br><span class="line">spawn ssh root@<span class="number">192.168</span>.<span class="number">88.139</span></span><br><span class="line"><span class="comment"># 捕获相关内容</span></span><br><span class="line">expect &#123;</span><br><span class="line">        <span class="string">&quot;(yes/no)?&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line">        <span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;123456\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact   //交互</span><br><span class="line"></span><br><span class="line">脚本执行方式：</span><br><span class="line"><span class="comment"># ./expect1.sh</span></span><br><span class="line"><span class="comment"># /root/test/shell_scripts/expect1.sh</span></span><br><span class="line"><span class="comment"># expect -f expect1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>）定义变量</span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="built_in">set</span> ip <span class="number">192.168</span>.<span class="number">88.139</span></span><br><span class="line"><span class="built_in">set</span> pass <span class="number">123456</span></span><br><span class="line"><span class="built_in">set</span> timeout <span class="number">5</span></span><br><span class="line">spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line"><span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）使用位置参数 类比 bash 的<span class="variable">$</span>* <span class="variable">$1</span> 等等</span><br><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="built_in">set</span> ip [ <span class="type">lindex</span> <span class="variable">$argv</span> <span class="number">0</span> ]</span><br><span class="line"><span class="built_in">set</span> pass [ <span class="type">lindex</span> <span class="variable">$argv</span> <span class="number">1</span> ]</span><br><span class="line"><span class="built_in">set</span> timeout <span class="number">5</span></span><br><span class="line">spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line"><span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><p><strong>3.2 需求:A远程登录到server上操作</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义变量 格式：set 变量名 变量值</span></span><br><span class="line"><span class="built_in">set</span> ip <span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="built_in">set</span> pass <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># timeout 时间间隔</span></span><br><span class="line"><span class="built_in">set</span> timeout <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="comment"># 如果捕获到 &quot;yes/no&quot; 发送 yes回车 反之继续操作</span></span><br><span class="line"><span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line"><span class="comment"># 如果捕获到 &quot;password:&quot; 发送 $pass 回车</span></span><br><span class="line"><span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行操作 捕获到 # </span></span><br><span class="line">expect <span class="string">&quot;#&quot;</span></span><br><span class="line">send <span class="string">&quot;rm -rf /tmp/*\r&quot;</span></span><br><span class="line">send <span class="string">&quot;touch /tmp/file&#123;1..3&#125;\r&quot;</span></span><br><span class="line">send <span class="string">&quot;date\r&quot;</span></span><br><span class="line">send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代表程序结束</span></span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p><strong>3.3  shell 脚本和 expect 结合</strong></p><p><strong>需求：shell脚本和expect结合使用，在多台服务器上创建1个用户</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell04</span>]<span class="comment"># cat ip.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span> <span class="number">123456</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.2</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 循环</span><br><span class="line"><span class="number">2</span>. 登录远程主机——&gt;ssh——&gt;从ip.txt文件里获取IP和密码分别赋值给两个变量</span><br><span class="line"><span class="number">3</span>. 使用expect程序来解决交互问题</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 循环在指定的服务器上创建用户和文件</span></span><br><span class="line"><span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span> &amp;&gt;/dev/null</span><br><span class="line">spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line"><span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect <span class="string">&quot;#&quot;</span> &#123; send <span class="string">&quot;useradd yy1;rm -rf /tmp/*;exit\r&quot;</span> &#125;</span><br><span class="line">expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">done &lt; ip.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cat</span> ip.txt|<span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">        /usr/bin/expect &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">        spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">        expect &#123;</span><br><span class="line">                <span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expect <span class="string">&quot;#&quot;</span></span><br><span class="line">        send <span class="string">&quot;hostname\r&quot;</span></span><br><span class="line">        send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">        expect eof</span><br><span class="line">        EOF</span><br><span class="line">        &#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;user is ok....&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">        /usr/bin/expect &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">        spawn ssh root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">        expect &#123;</span><br><span class="line">                <span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expect <span class="string">&quot;#&quot;</span></span><br><span class="line">        send <span class="string">&quot;hostname\r&quot;</span></span><br><span class="line">        send <span class="string">&quot;exit\r&quot;</span></span><br><span class="line">        expect eof</span><br><span class="line">        EOF</span><br><span class="line"></span><br><span class="line">        &#125;&amp;</span><br><span class="line">done&lt;ip.txt</span><br><span class="line">wait</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;user is ok....&quot;</span></span><br></pre></td></tr></table></figure><h2 id="实战示例"><a href="#实战示例" class="headerlink" title="实战示例"></a>实战示例</h2><p><strong>1、写一个脚本，将跳板机上yunwei用户的公钥推送到局域网内可以ping通的所有机器上</strong></p><p>说明：主机和密码文件已经提供</p><p>10.1.1.1:123456</p><p>10.1.1.2:123456</p><p><strong>案例分析</strong></p><ul><li><strong>关闭防火墙和selinux</strong></li><li>判断ssh服务是否开启（默认ok）</li><li>循环判断给定密码文件里的哪些IP是可以ping通</li><li>判断IP是否可以ping通——&gt;$?—&gt;流程控制语句</li><li>密码文件里获取主机的IP和密码保存变量 </li><li>判断公钥是否存在—&gt;不存在创建它</li><li>ssh-copy-id 将跳板机上的yunwei用户的公钥推送到远程主机—&gt;expect解决交互</li><li>将ping通的主机IP单独保存到一个文件</li><li>测试验证</li></ul><p><strong>落地实现</strong></p><p>代码拆分</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.判断yunwei用户的公钥是否存在</span><br><span class="line">[ ! -<span class="type">f</span> /<span class="type">hoem</span>/<span class="type">yunwei</span>/<span class="type">.ssh</span>/<span class="type">id_rsa</span> ] &amp;&amp; ssh<span class="literal">-keygen</span> <span class="literal">-P</span> <span class="string">&#x27;&#x27;</span> <span class="operator">-f</span> ./id_rsa</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.获取IP并且判断是否可以 ping 通</span><br><span class="line"><span class="number">2.1</span>主机密码文件 ip.txt</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span>:<span class="number">123456</span></span><br><span class="line">    <span class="number">10.1</span>.<span class="number">1.2</span>:<span class="number">123456</span></span><br><span class="line"><span class="number">2.2</span> 循环判断主机是否ping通</span><br><span class="line">tr <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27; &#x27;</span> &lt; ip.txt|<span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ping <span class="literal">-c1</span> <span class="variable">$ip</span> &amp;&gt;/dev/null</span><br><span class="line">      <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">      推送公钥</span><br><span class="line">      fi</span><br><span class="line">done</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.非交互式推送公钥</span><br><span class="line">/usr/bin/expect &lt;&lt;<span class="literal">-END</span> &amp;&gt;/dev/null</span><br><span class="line">        spawn ssh<span class="literal">-copy-id</span> root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">        expect &#123;</span><br><span class="line">                <span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        expect eof</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>最终实现</strong></p><ol><li><strong>环境准备</strong></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">jumper<span class="literal">-server</span>有yunwei用户</span><br><span class="line"></span><br><span class="line">yunwei用户 sudo 授权：</span><br><span class="line">visudo</span><br><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">yunwei  ALL=(root)      NOPASSWD:ALL,!/sbin/shutdown,!/sbin/init,!/bin/<span class="built_in">rm</span> <span class="literal">-rf</span> /</span><br><span class="line"></span><br><span class="line">解释说明：</span><br><span class="line"><span class="number">1</span>）第一个字段 yunwei 指定的是用户：可以是用户名，也可以是别名。每个用户设置一行，多个用户设置多行，也可以将多个用户设置成一个别名后再进行设置。</span><br><span class="line"><span class="number">2</span>）第二个字段ALL指定的是用户所在的主机：可以是ip,也可以是主机名，表示该sudo设置只在该主机上生效，ALL表示在所有主机上都生效！限制的一般都是本机，也就是限制使用这个文件的主机;一般都指定为<span class="string">&quot;ALL&quot;</span>表示所有的主机，不管文件拷到那里都可以用。比如：<span class="number">10.1</span>.<span class="number">1.1</span>=...则表示只在当前主机生效。</span><br><span class="line"><span class="number">3</span>）第三个字段（root）括号里指定的也是用户：指定以什么用户身份执行sudo，即使用sudo后可以享有所有root账号下的权限。如果要排除个别用户，可以在括号内设置，比如ALL=(ALL,!oracle,!pos)。</span><br><span class="line"><span class="number">4</span>）第四个字段ALL指定的是执行的命令：即使用sudo后可以执行所有的命令。除了关机和删除根内容以外；也可以设置别名。NOPASSWD: ALL表示使用sudo的不需要输入密码。</span><br><span class="line"><span class="number">5</span>）也可以授权给一个用户组</span><br><span class="line">%admin ALL=(ALL) ALL表示admin组里的所有成员可以在任何主机上以任何用户身份执行任何命令</span><br></pre></td></tr></table></figure><ol><li><strong>脚本实现</strong></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#判断公钥是否存在</span></span><br><span class="line">[ ! -<span class="type">f</span> /<span class="type">home</span>/<span class="type">yunwei</span>/<span class="type">.ssh</span>/<span class="type">id_rsa</span> ] &amp;&amp; ssh<span class="literal">-keygen</span> <span class="literal">-P</span> <span class="string">&#x27;&#x27;</span> <span class="operator">-f</span> ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#循环判断主机是否ping通，如果ping通推送公钥</span></span><br><span class="line">tr <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27; &#x27;</span> &lt; /shell04/ip.txt|<span class="keyword">while</span> read ip pass</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">        ping <span class="literal">-c1</span> <span class="variable">$ip</span> &amp;&gt;/dev/null</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$</span>? -<span class="type">eq</span> <span class="number">0</span> ];then</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$ip</span> &gt;&gt; ~/ip_up.txt</span><br><span class="line">        /usr/bin/expect &lt;&lt;<span class="literal">-END</span> &amp;&gt;/dev/null</span><br><span class="line">         spawn ssh<span class="literal">-copy-id</span> root<span class="selector-tag">@</span><span class="variable">$ip</span></span><br><span class="line">         expect &#123;</span><br><span class="line">                <span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line">                <span class="string">&quot;password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        expect eof</span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">        fi</span><br><span class="line">&#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;公钥已经推送完毕，正在测试....&quot;</span></span><br><span class="line"><span class="comment">#测试验证</span></span><br><span class="line">remote_ip=`tail <span class="literal">-1</span> ~/ip_up.txt`</span><br><span class="line">ssh root<span class="selector-tag">@</span><span class="variable">$remote_ip</span> hostname &amp;&gt;/dev/null</span><br><span class="line">test <span class="variable">$</span>? <span class="operator">-eq</span> <span class="number">0</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;公钥成功推送完毕&quot;</span></span><br></pre></td></tr></table></figure><h4 id="写一个脚本，统计web服务的不同连接状态个数"><a href="#写一个脚本，统计web服务的不同连接状态个数" class="headerlink" title="写一个脚本，统计web服务的不同连接状态个数"></a>写一个脚本，统计web服务的不同连接状态个数</h4><ol><li>找出查看网站连接状态的命令  <code>ss -natp|grep :22</code></li><li>如何统计==不同的==状态   循环去统计，需要计算</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#count_http_22_state</span></span><br><span class="line"><span class="comment">#统计每个状态的个数</span></span><br><span class="line"></span><br><span class="line">declare <span class="literal">-A</span> array1</span><br><span class="line">states=`ss <span class="literal">-ant</span>|grep <span class="number">22</span>|cut <span class="literal">-d</span><span class="string">&#x27; &#x27;</span> <span class="literal">-f1</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$states</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        let array1[<span class="variable">$i</span>]++</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过遍历数组里的索引和元素打印出来</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="variable">$</span>&#123;!array1[<span class="selector-tag">@</span>]&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$j:</span><span class="variable">$</span>&#123;array1[<span class="variable">$j</span>]&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="case语句-函数"><a href="#case语句-函数" class="headerlink" title="case语句+函数"></a>case语句+函数</h2><h4 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h4><p>语法：case语句为多重匹配语句；如果匹配成功，执行相匹配的命令。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">说明：pattern表示需要匹配的模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case var <span class="keyword">in</span>             定义变量;var代表是变量名</span><br><span class="line">pattern <span class="number">1</span>)              模式<span class="number">1</span>;用 | 分割多个模式，相当于or</span><br><span class="line">    command1            需要执行的语句</span><br><span class="line">    ;;                  两个分号代表命令结束</span><br><span class="line">pattern <span class="number">2</span>)</span><br><span class="line">    command2</span><br><span class="line">    ;;</span><br><span class="line">pattern <span class="number">3</span>)</span><br><span class="line">    command3</span><br><span class="line">    ;;</span><br><span class="line">  *)              default，不满足以上模式，默认执行*)下面的语句</span><br><span class="line">    command4</span><br><span class="line">    ;;</span><br><span class="line">esacesac表示case语句结束</span><br></pre></td></tr></table></figure><p>需求：</p><p><strong>1.1当给程序传入start、stop、restart三个不同参数时分别执行相应命令</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">start</span>|S)</span><br><span class="line">        service apache <span class="built_in">start</span> &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;apache 启动成功&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;apache 启动失败&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        stop|T)</span><br><span class="line">        service apache stop &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;apache 停止成功&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;apache 停止失败&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        restart|<span class="built_in">R</span>)</span><br><span class="line">        service apache restart &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;apache 重启完毕&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;apache 重启失败&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[31m 此脚本需要传入位置参数 \033[0m&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[41;30m 请选择 start|S || stop|T || restart|R\033[0m&quot;</span> </span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>1.2 脚本提示让用户输入需要管理的服务名，然后提示用户需要对服务做什么操作，如启动，关闭等操作</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入你要管理的服务名称(vsftpd):&quot;</span> service</span><br><span class="line">case <span class="variable">$service</span> <span class="keyword">in</span></span><br><span class="line">        vsftpd|ftp)</span><br><span class="line">        read <span class="literal">-p</span> <span class="string">&quot;请选择你需要做的事情(restart|stop):&quot;</span> action</span><br><span class="line">        case <span class="variable">$action</span> <span class="keyword">in</span></span><br><span class="line">                stop|S)</span><br><span class="line">                service vsftpd stop &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;该<span class="variable">$serivce</span>服务已经停止成功&quot;</span></span><br><span class="line">                ;;</span><br><span class="line">                <span class="built_in">start</span>)</span><br><span class="line">                service vsftpd <span class="built_in">start</span> &amp;&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;该<span class="variable">$serivce</span>服务已经成功启动&quot;</span></span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">        ;;</span><br><span class="line">        httpd|apache)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;apache hello world&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;请输入你要管理的服务名称(vsftpd):&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p><strong>1.3 菜单打印出来；交互式让用户输入操作编号，然后做出相应处理</strong></p><p><strong>落地实现：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">meue()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m</span></span><br><span class="line"><span class="string">################## 菜单栏 #########################</span></span><br><span class="line"><span class="string">#            f   显示磁盘分区                     #</span></span><br><span class="line"><span class="string">#            d   显示磁盘挂载                     #</span></span><br><span class="line"><span class="string">#            m   查看内存使用                     #</span></span><br><span class="line"><span class="string">#            u   查看系统负载                     #</span></span><br><span class="line"><span class="string">#            q   退出程序                         #</span></span><br><span class="line"><span class="string">###################################################</span></span><br><span class="line"><span class="string">\033[0m&quot;</span></span><br><span class="line">&#125; </span><br><span class="line">meue</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请选择您需要查询的内容：&quot;</span> action</span><br><span class="line">case <span class="variable">$action</span> <span class="keyword">in</span></span><br><span class="line">f)</span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[36m########################### 显示分区 ######################\033[0m&quot;</span> </span><br><span class="line">fdisk <span class="literal">-l</span></span><br><span class="line">meue</span><br><span class="line">;;</span><br><span class="line">d)</span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[36m########################### 显示磁盘挂载 ######################\033[0m&quot;</span> </span><br><span class="line">df <span class="literal">-h</span></span><br><span class="line">meue</span><br><span class="line">;;</span><br><span class="line">m)</span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[36m########################### 查看内存使用 ######################\033[0m&quot;</span> </span><br><span class="line">free <span class="literal">-m</span></span><br><span class="line">meue</span><br><span class="line">;;</span><br><span class="line">u)</span><br><span class="line"><span class="built_in">clear</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[36m########################### 查看系统负载区 ######################\033[0m&quot;</span> </span><br><span class="line">uptime</span><br><span class="line">meue</span><br><span class="line">;;</span><br><span class="line">q)</span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[36m########################### 退出程序 ######################\033[0m&quot;</span> </span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>语法 :</p><ul><li><p>shell中允许将<strong>一组命令集合</strong>或<strong>语句</strong>形成一段<strong>可用代码</strong></p></li><li><p>这些代码块称为shell函数给这段代码起个名字称为函数名，后续可以直接调用该段代码的功能</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"></span><br><span class="line">函数名()</span><br><span class="line">&#123;</span><br><span class="line">  函数体（一堆命令的集合，来实现某个功能）   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方法二：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名<span class="params">()</span></span></span><br><span class="line">&#123;</span><br><span class="line">   函数体（一堆命令的集合，来实现某个功能）</span><br><span class="line">   <span class="built_in">echo</span> hello</span><br><span class="line">   <span class="built_in">echo</span> world</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>函数中return说明:</strong></p><ol><li>return可以结束一个函数。类似于循环控制语句break(结束当前循环，执行循环体后面的代码)。</li><li>return默认返回函数中最后一个命令状态值，也可以给定参数值，范围是0-256之间。</li><li>如果没有return命令，函数将返回最后一个指令的退出状态值。</li></ol></blockquote><p><strong>2.1  当前命令行调用</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">fun_1()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;调用fun_1函数就打印了我！！！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun_2()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;调用fun_2函数就打印了我！！！&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># cat demo.sh </span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">fun_1()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;调用fun_1函数就打印了我！！！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun_2()&#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;调用fun_2函数就打印了我！！！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># source demo.sh </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># fun_1</span></span><br><span class="line">调用fun_1函数就打印了我！！！</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># fun_2</span></span><br><span class="line">调用fun_2函数就打印了我！！！</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p><strong>2.2 定义到用户的环境变量中</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc </span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">添加编写的函数：</span><br><span class="line"></span><br><span class="line">fun_1()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;调用fun_1函数就打印了我！！！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun_2()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;调用fun_2函数就打印了我！！！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：当用户打开 bash 的时候会读取该文件</span><br></pre></td></tr></table></figure><p><strong>2.3 脚本中调用</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">meue()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;\033[32m</span></span><br><span class="line"><span class="string">################## 菜单栏 #########################</span></span><br><span class="line"><span class="string">#            f   显示磁盘分区                     #</span></span><br><span class="line"><span class="string">#            d   显示磁盘挂载                     #</span></span><br><span class="line"><span class="string">#            m   查看内存使用                     #</span></span><br><span class="line"><span class="string">#            u   查看系统负载                     #</span></span><br><span class="line"><span class="string">#            q   退出程序                         #</span></span><br><span class="line"><span class="string">###################################################</span></span><br><span class="line"><span class="string">\033[0m&quot;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">meue</span><br></pre></td></tr></table></figure><p><strong>2.4 需求</strong></p><ol><li>写一个脚本收集用户输入的基本信息(姓名，性别，年龄)，如不输入一直提示输入</li><li>最后根据用户的信息输出相对应的内容</li></ol><p><strong>思路：</strong></p><ol><li>交互式定义多个变量来保存用户信息  姓名、性别、年龄</li><li><p>如果不输一直提示输入</p><ul><li>循环==直到输入字符串不为空  while  判断输入字符串是否为空</li><li>每个信息都必须不能为空，该功能可以定义为一个函数，方便下面脚本调用</li></ul></li><li><p>根据用户输入信息做出匹配判断</p></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env bash</span></span><br><span class="line">input_fun()</span><br><span class="line">&#123;</span><br><span class="line">input_info=<span class="string">&quot;&quot;</span></span><br><span class="line">output_info=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">while</span> [ -<span class="type">z</span> <span class="variable">$input_info</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$output_info</span>&quot;</span> input_info</span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$input_info</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">name=<span class="variable">$</span>(input_fun 请输入您的姓名：)</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$name</span> = <span class="string">&quot;exit&quot;</span> ]] ; then</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">fi</span><br><span class="line">gender=<span class="variable">$</span>(input_fun 请输入您的性别：)</span><br><span class="line">age=<span class="variable">$</span>(input_fun 请输入您的年龄：)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;name <span class="variable">$name</span> gender <span class="variable">$gender</span> age <span class="variable">$age</span>&quot;</span> | <span class="built_in">tee</span> <span class="literal">-a</span> stu_info.txt</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>2.5 需求</strong></p><ol><li>只允许yunwei用户通过跳板机远程连接后台的应用服务器做一些维护操作</li><li>公司运维人员远程通过yunwei用户连接跳板机时，跳出以下菜单供选择：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">欢迎使用 Jumper<span class="literal">-server</span> ，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line"><span class="built_in">h</span>. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><ol><li>当用户选择相应主机后，直接<strong>免密码登录</strong>成功</li><li>如果用户不输入一直提示用户输入，直到用户选择退出</li></ol><p><strong>综合分析</strong></p><ol><li>将脚本放到 yunwei 用户家目录里的.bashrc文件里（/root/yunwei/jump_server.sh）</li><li>将菜单定义为一个函数[打印菜单]，方便后面调用</li><li>用case语句来实现用户的选择【交互式定义变量】</li><li>当用户选择了某一台服务器后，进一步询问用户需要做的事情  case…esac  交互式定义变量</li><li>使用循环来实现用户不选择一直让其选择</li><li>限制用户退出后直接关闭终端  exit </li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># jumper-server</span></span><br><span class="line"><span class="comment"># 定义菜单打印功能的函数</span></span><br><span class="line">menu()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">欢迎使用Jumper<span class="literal">-server</span>，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line"><span class="built_in">h</span>. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 屏蔽以下信号</span></span><br><span class="line"><span class="keyword">trap</span> <span class="string">&#x27;&#x27;</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">19</span></span><br><span class="line"><span class="comment"># 调用函数来打印菜单</span></span><br><span class="line">menu</span><br><span class="line"><span class="comment">#循环等待用户选择</span></span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 菜单选择，case...esac语句</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请选择你要访问的主机:&quot;</span> host</span><br><span class="line">case <span class="variable">$host</span> <span class="keyword">in</span></span><br><span class="line"><span class="number">1</span>)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">2</span>)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.2</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">3</span>)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.3</span></span><br><span class="line">;;</span><br><span class="line"><span class="built_in">h</span>)</span><br><span class="line"><span class="built_in">clear</span>;menu</span><br><span class="line">;;</span><br><span class="line">q)</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">将脚本放到yunwei 用户家目录里的.bashrc里执行：每次启动体跳板机即运行脚本</span><br><span class="line">bash ~/jumper<span class="literal">-server</span>.sh</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>进一步完善需求</strong></p><p>为了进一步增强跳板机的安全性，工作人员通过跳板机访问生产环境，但是不能在跳板机上停留。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#公钥推送成功</span></span><br><span class="line"><span class="keyword">trap</span> <span class="string">&#x27;&#x27;</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">19</span></span><br><span class="line"><span class="comment">#打印菜单用户选择</span></span><br><span class="line">menu()&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="literal">-EOF</span></span><br><span class="line">欢迎使用Jumper<span class="literal">-server</span>，请选择你要操作的主机：</span><br><span class="line"><span class="number">1</span>. DB1<span class="literal">-Master</span></span><br><span class="line"><span class="number">2</span>. DB2<span class="literal">-Slave</span></span><br><span class="line"><span class="number">3</span>. Web1</span><br><span class="line"><span class="number">4</span>. Web2</span><br><span class="line"><span class="built_in">h</span>. help</span><br><span class="line">q. <span class="keyword">exit</span></span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数来打印菜单</span></span><br><span class="line">menu</span><br><span class="line"><span class="keyword">while</span> true</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;请输入你要选择的主机[h for help]：&quot;</span> host</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过case语句来匹配用户所输入的主机</span></span><br><span class="line">case <span class="variable">$host</span> <span class="keyword">in</span></span><br><span class="line"><span class="number">1</span>|DB1)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">2</span>|DB2)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.2</span></span><br><span class="line">;;</span><br><span class="line"><span class="number">3</span>|web1)</span><br><span class="line">ssh root@<span class="number">10.1</span>.<span class="number">1.250</span></span><br><span class="line">;;</span><br><span class="line"><span class="built_in">h</span>|help)</span><br><span class="line"><span class="built_in">clear</span>;menu</span><br><span class="line">;;</span><br><span class="line">q|quit)</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">自己完善功能：</span><br><span class="line"><span class="number">1</span>. 用户选择主机后，需要事先推送公钥；如何判断公钥是否已推</span><br><span class="line"><span class="number">2</span>. 比如选择web1时，再次提示需要做的操作，比如：</span><br><span class="line">clean log</span><br><span class="line">重启服务</span><br><span class="line"><span class="built_in">kill</span>某个进程</span><br></pre></td></tr></table></figure><p><strong>回顾信号：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>) SIGHUP 重新加载配置    </span><br><span class="line"><span class="number">2</span>) SIGINT键盘中断^C</span><br><span class="line"><span class="number">3</span>) SIGQUIT      键盘退出</span><br><span class="line"><span class="number">9</span>) SIGKILL 强制终止</span><br><span class="line"><span class="number">15</span>) SIGTERM    终止（正常结束），缺省信号</span><br><span class="line"><span class="number">18</span>) SIGCONT       继续</span><br><span class="line"><span class="number">19</span>) SIGSTOP       停止</span><br><span class="line"><span class="number">20</span>) SIGTSTP     暂停^Z</span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong>语法</strong>：正则表达式（Regular Expression、regex 或 regexp，缩写为RE），也译为正规表示法、常规表示法，是一种字符模式，用于在查找过程中匹配指定的字符。许多程序设计语言都支持利用正则表达式进行字符串操作。例如，在Perl中就内建了一个功能强大的正则表达式引擎。正则表达式这个概念最初是由Unix中的工具软件（例如sed和grep）普及开的。支持正则表达式的程序如：locate |find| vim| grep| sed |awk</p><p><strong>作用：</strong>匹配邮箱、匹配身份证号码、手机号、银行卡号等匹配某些特定字符串，做特定处理等等</p><p><strong>正则当中名词解释</strong>：</p><ul><li><p><strong>元字符</strong></p><p>指那些在正则表达式中具有<strong>特殊意义的==专用字符==</strong>,如:点(.) 星(*) 问号(?)等</p></li><li><p><strong>前导字符</strong></p><p>位于<strong>元字符</strong>前面的字符.    ab<strong>c*</strong>   aoo<strong>o.</strong></p></li></ul><h4 id="1-1-正则中普通常用的元字符"><a href="#1-1-正则中普通常用的元字符" class="headerlink" title="1.1  正则中普通常用的元字符"></a>1.1  正则中普通常用的元字符</h4><div class="table-container"><table><thead><tr><th>元字符</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>.</td><td>匹配除了换行符以外的任意单个字符</td><td></td></tr><tr><td>*</td><td>前导字符出现0次或连续多次</td><td></td></tr><tr><td>.*</td><td>任意长度字符</td><td>ab.*</td></tr><tr><td>^</td><td>行首(以…开头)</td><td>^root</td></tr><tr><td>$</td><td>行尾(以…结尾)</td><td>bash$</td></tr><tr><td>^$</td><td>空行</td><td></td></tr><tr><td>[]</td><td>匹配括号里任意单个字符或一组单个字符</td><td>[abc]</td></tr><tr><td><sup><a href="#fn_" id="reffn_"></a></sup></td><td>匹配不包含括号里任一单个字符或一组单个字符</td><td><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup></td></tr><tr><td>^[]</td><td>匹配以括号里任意单个字符或一组单个字符开头</td><td>^[abc]</td></tr><tr><td>\^[\^]</td><td>匹配不以括号里任意单个字符或一组单个字符开头</td><td>\^[^abc]</td></tr></tbody></table></div><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat RegExpTest_02.txt</span></span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">taobao.com</span><br><span class="line">taotaobaobao.com</span><br><span class="line"></span><br><span class="line">jingdong.com</span><br><span class="line">dingdingdongdong.com</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">Adfjd8789JHfdsdf/</span><br><span class="line">a87fdjfkdLKJK</span><br><span class="line"><span class="number">7</span>kdjfd989KJK;</span><br><span class="line">bSKJjkksdjf878.</span><br><span class="line">cidufKJHJ6576,</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">helloworld yourself</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.前导字符 g 后面任意字符出现</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;g.&quot; RegExpTest_02.txt</span></span><br><span class="line">ggle<span class="comment"># 前导字符 g 后面任意字符出现一次   gg ...</span></span><br><span class="line">gogle<span class="comment"># gogl ...</span></span><br><span class="line">google<span class="comment"># go ... gl</span></span><br><span class="line">gooogle<span class="comment"># go ... gl</span></span><br><span class="line">goooooogle<span class="comment"># go ... gl</span></span><br><span class="line">gooooooogle<span class="comment"># go ... gl</span></span><br><span class="line">jingdong.com<span class="comment"># gd ... g.</span></span><br><span class="line">dingdingdongdong.com<span class="comment"># gd ... gd ... gd ... g.</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.前导字符 g 出现零次或多次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;g*&quot; RegExpTest_02.txt</span></span><br><span class="line">ggle<span class="comment"># 前导字符 g 出现 两次</span></span><br><span class="line">gogle<span class="comment"># 前导字符 g 出现 一次</span></span><br><span class="line">google<span class="comment"># ........</span></span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle<span class="comment"># .........</span></span><br><span class="line">taobao.com<span class="comment"># 前导字符 g 出现 零次 未出现 g 即出现0次 符合</span></span><br><span class="line">taotaobaobao.com<span class="comment"># 前导字符 g 出现 零次</span></span><br><span class="line"><span class="comment"># 前导字符 g 出现 零次</span></span><br><span class="line">jingdong.com</span><br><span class="line">dingdingdongdong.com<span class="comment"># 前导字符 g 出现 一次</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">Adfjd8789JHfdsdf/</span><br><span class="line">a87fdjfkdLKJK</span><br><span class="line"><span class="number">7</span>kdjfd989KJK;</span><br><span class="line">bSKJjkksdjf878.</span><br><span class="line">cidufKJHJ6576,</span><br><span class="line"></span><br><span class="line">hello world</span><br><span class="line">helloworld yourself</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.  g 确定 前导字符 o 出现零次或多次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;go*&quot; RegExpTest_02.txt </span></span><br><span class="line">ggle<span class="comment"># g 确定 前导字符 o 出现零次</span></span><br><span class="line">gogle<span class="comment"># g 确定 前导字符 o 出现一次；g 确定 前导字符 o 出现零次</span></span><br><span class="line">google<span class="comment"># g 确定 前导字符 o 出现两次；g 确定 前导字符 o 出现零次</span></span><br><span class="line">gooogle<span class="comment"># g 确定 前导字符 o 出现三次；g 确定 前导字符 o 出现零次</span></span><br><span class="line">goooooogle<span class="comment"># g 确定 前导字符 o 出现六次；g 确定 前导字符 o 出现零次</span></span><br><span class="line">gooooooogle<span class="comment"># g 确定 前导字符 o 出现八次；g 确定 前导字符 o 出现零次</span></span><br><span class="line">jingdong.com<span class="comment"># g 确定 前导字符 o 出现零次</span></span><br><span class="line">dingdingdongdong.com<span class="comment"># g 确定 前导字符 o 出现零次</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>. 以 g 开头的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;^g&quot; RegExpTest_02.txt</span></span><br><span class="line">ggle<span class="comment"># 以 g 开头的行</span></span><br><span class="line">gogle<span class="comment"># 以 g 开头的行</span></span><br><span class="line">google</span><br><span class="line">gooogle<span class="comment"># 以 g 开头的行</span></span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>. 以 g 开头的后面的有一个字符</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;^g.&quot; RegExpTest_02.txt</span></span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>.以 g 开头的字符 前导字符是任意的后面一个字符 任意字符 出现一次或者多次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;^g.*&quot; RegExpTest_02.txt </span></span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.前导字符为 空 后面有任意字符，这个任意字符出现一次或者多次，以 gle 结尾</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;.*gle$&quot; RegExpTest_02.txt </span></span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>.查看空行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -n &quot;^$&quot; RegExpTest_02.txt </span></span><br><span class="line"><span class="number">11</span>:</span><br><span class="line"><span class="number">20</span>:</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span>.匹配 [<span class="type">ogl</span>] 中的 o 或 g 或 l</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;[ogl]&quot; RegExpTest_02.txt </span></span><br><span class="line">g</span><br><span class="line">gle</span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">taobao.com</span><br><span class="line">taotaobaobao.com</span><br><span class="line">jingdong.com</span><br><span class="line">dingdingdongdong.com</span><br><span class="line">hello world</span><br><span class="line">helloworld yourself</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>.匹配除了 o g l 以外的字符 不包含 空</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;[^ogl]&quot; RegExpTest_02.txt </span></span><br><span class="line">gle</span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">taobao.com</span><br><span class="line">taotaobaobao.com</span><br><span class="line">jingdong.com</span><br><span class="line">dingdingdongdong.com</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">Adfjd8789JHfdsdf/</span><br><span class="line">a87fdjfkdLKJK</span><br><span class="line"><span class="number">7</span>kdjfd989KJK;</span><br><span class="line">bSKJjkksdjf878.</span><br><span class="line">cidufKJHJ6576,</span><br><span class="line">hello world</span><br><span class="line">helloworld yourself</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>.匹配 [<span class="type">gh</span>] 任意单个字符开头的</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;^[gh]&quot; RegExpTest_02.txt </span></span><br><span class="line">g</span><br><span class="line">gle</span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">hello world</span><br><span class="line">helloworld yourself</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>.查看 profile 的前<span class="number">20</span>行，行过滤 不以 <span class="comment"># 开头的</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># head -20 /etc/profile | grep &quot;^[^#]&quot;</span></span><br><span class="line">pathmunge () &#123;</span><br><span class="line">    case <span class="string">&quot;:<span class="variable">$</span>&#123;PATH&#125;:&quot;</span> <span class="keyword">in</span></span><br><span class="line">        *:<span class="string">&quot;<span class="variable">$1</span>&quot;</span>:*)</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$2</span>&quot;</span> = <span class="string">&quot;after&quot;</span> ] ; then</span><br><span class="line">                PATH=<span class="variable">$PATH:</span><span class="variable">$1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                PATH=<span class="variable">$1:</span><span class="variable">$PATH</span></span><br><span class="line">            fi</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span>.查看 RegExpTest_02.txt 的前 <span class="number">10</span> 行 行过滤不以 go 开头的</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># head -10 RegExpTest_02.txt | grep -v  &quot;^go&quot;  </span></span><br><span class="line">g</span><br><span class="line">gle</span><br><span class="line">ggle</span><br><span class="line">taobao.com</span><br><span class="line">taotaobaobao.com</span><br></pre></td></tr></table></figure><h4 id="1-2-正则中其他常用元字符"><a href="#1-2-正则中其他常用元字符" class="headerlink" title="1.2  正则中其他常用元字符"></a>1.2  正则中其他常用元字符</h4><div class="table-container"><table><thead><tr><th>元字符</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>\&lt;</td><td>取单词的头</td><td></td></tr><tr><td>\&gt;</td><td>取单词的尾</td><td></td></tr><tr><td>\&lt;  \&gt;</td><td>精确匹配</td><td></td></tr><tr><td>\{n\}</td><td>匹配前导字符 连续出现n次</td><td></td></tr><tr><td>\{n,\}</td><td>匹配前导字符 至少出现n次</td><td></td></tr><tr><td>\{n,m\}</td><td>匹配前导字符出现 n次与m次之间</td><td></td></tr><tr><td>\(   \)</td><td>保存被匹配的字符</td><td></td></tr><tr><td>\d</td><td>匹配数字（<strong>grep -P</strong>）</td><td>[0-9]</td></tr><tr><td>\w</td><td>匹配字母数字下划线（<strong>grep -P</strong>）</td><td>[a-zA-Z0-9_]</td></tr><tr><td>\s</td><td>匹配空格、制表符、换页符（<strong>grep -P</strong>）</td><td>[\t\r\n]</td></tr></tbody></table></div><p><strong>举例说明：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.匹配单词的头以 hel 开头的</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;\&lt;hel&quot; RegExpTest_02.txt </span></span><br><span class="line"><span class="comment"># helloworld yourself01</span></span><br><span class="line">hello world</span><br><span class="line">helloworld yourself</span><br><span class="line"><span class="comment"># helloworld yourself02</span></span><br><span class="line"><span class="comment"># helloworld yourself03</span></span><br><span class="line"><span class="comment"># helloworld yourself04</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.精确匹配文件中 只是 g 的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;\&lt;g\&gt;&quot; RegExpTest_02.txt </span></span><br><span class="line">g</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. g 确定，前导字符 o 出现两次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;go\&#123;2\&#125;&quot; RegExpTest_02.txt </span></span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.前导字符 o 出现两次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;o\&#123;2\&#125;&quot; RegExpTest_02.txt </span></span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line"></span><br><span class="line">注：此语法可看作 oo 作为整体出现的次数，gogle 则匹配不到，gooole 则只有前两个oo 高亮</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>. 前导字符 o 出现至少 <span class="number">2</span> 次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;o\&#123;2,\&#125;&quot; RegExpTest_02.txt </span></span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>.匹配 ip <span class="number">10</span>即[<span class="number">0</span>-<span class="number">9</span>]出现两次； . 需要转义；<span class="number">1</span> 即[<span class="number">0</span>-<span class="number">9</span>] 出现一次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep &quot;[0-9]\&#123;2\&#125;\.[0-9]\&#123;1\&#125;.[0-9]\&#123;1\&#125;.[0-9]\&#123;1\&#125;&quot; RegExpTest_02.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.改<span class="number">10.1</span>.<span class="number">1.1</span> 为<span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line">vim 的末行模式 输入 :%s/\(<span class="number">10.1</span>.<span class="number">1</span>\).<span class="number">1</span>/\<span class="number">1.254</span>/g</span><br><span class="line">解释：%s 全局搜索</span><br><span class="line"> （<span class="number">10.1</span>.<span class="number">1</span>）将此打包起来</span><br><span class="line">  <span class="number">1.254</span>  <span class="number">1</span> 是标签名</span><br></pre></td></tr></table></figure><p><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230523184823.png" alt=""><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230523185723.png" alt=""><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>.修改 helloworld yourself 为 hiworld myself</span><br><span class="line"></span><br><span class="line">vim 的末行模式</span><br><span class="line">:%s/hello\(world \)your\(self\)/hi\<span class="number">1</span>my\<span class="number">2</span>/g</span><br></pre></td></tr></table></figure><br><img src="https://cdn1.tianli0.top/gh/Jermyn-code/FigureBed/f495/20230523190437.png" alt=""></p><h4 id="1-3-扩展类正则常用元字符"><a href="#1-3-扩展类正则常用元字符" class="headerlink" title="1.3 扩展类正则常用元字符"></a>1.3 扩展类正则常用元字符</h4><p><strong>语法：</strong></p><ul><li>grep你要用我，必须加 <code>grep -E</code>或者  让使用<code>egrep</code></li><li>sed你要用我，必须加 <code>sed -r</code></li></ul><div class="table-container"><table><thead><tr><th>扩展元字符</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>+</td><td>匹配一个或多个前导字符</td><td>bo+ 匹配boo、 bo</td></tr><tr><td>?</td><td>匹配零个或一个前导字符</td><td>bo? 匹配b、 bo</td></tr><tr><td>\</td><td></td><td>或</td><td>匹配a或b</td></tr><tr><td>()</td><td>组字符（看成整体）</td><td>(my\</td><td>your)self：表示匹配myself或匹配yourself</td></tr><tr><td>{n}</td><td>前导字符重复n次</td><td></td></tr><tr><td>{n,}</td><td>前导字符重复至少n次</td><td></td></tr><tr><td>{n,m}</td><td>前导字符重复n到m次</td></tr></tbody></table></div><p><strong>举例说明：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. g 固定，前导字符 o 出现一次或者多次，和 go* 区别 后者可以出现零次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;go+&quot; RegExpTest_02.txt</span></span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>. g 固定，前导字符 o 出现零次或者一次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;go?&quot; RegExpTest_02.txt</span></span><br><span class="line">g</span><br><span class="line">gle</span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">jingdong.com</span><br><span class="line">dingdingdongdong.com</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. g  是固定的，前导字符是后面任意一个字符 出现零次或者一次（注：就是匹配 g 后面是任意一个字符，如 go 和 <span class="built_in">gl</span> 是相同的）</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;g.?&quot; RegExpTest_02.txt</span></span><br><span class="line">g<span class="comment"># 前导字符 g 后空字符出现零次</span></span><br><span class="line">gle<span class="comment"># 前导字符 g 后面字符 l 出现一次</span></span><br><span class="line">ggle</span><br><span class="line">gogle</span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">jingdong.com</span><br><span class="line">dingdingdongdong.com</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.匹配以 a 或者 以 b 的行 </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;^a|^b&quot; RegExpTest_02.txt</span></span><br><span class="line">a87fdjfkdLKJK</span><br><span class="line">bSKJjkksdjf878.</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.匹配以 a 开头的 或者 含有 b 的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;^a|b&quot; RegExpTest_02.txt</span></span><br><span class="line">taobao.com</span><br><span class="line">taotaobaobao.com</span><br><span class="line">a87fdjfkdLKJK</span><br><span class="line">bSKJjkksdjf878.</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>.过滤 ao 或者 bo</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;(a|b)o&quot; RegExpTest_02.txt</span></span><br><span class="line">taobao.com</span><br><span class="line">taotaobaobao.com</span><br><span class="line">ao87fdjfkdLKJK</span><br><span class="line"><span class="number">7</span>kdjafd9bo89aoKJK;</span><br><span class="line">boSKaJjkksdajf878.</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.作用与 不加 \ 的效果相同</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep  &quot;go\&#123;2\&#125;&quot; RegExpTest_02.txt</span></span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;go&#123;2&#125;&quot; RegExpTest_02.txt</span></span><br><span class="line">google</span><br><span class="line">gooogle</span><br><span class="line">goooooogle</span><br><span class="line">gooooooogle</span><br></pre></td></tr></table></figure><h4 id="1-4-第二类正则"><a href="#1-4-第二类正则" class="headerlink" title="1.4 第二类正则"></a>1.4 第二类正则</h4><div class="table-container"><table><thead><tr><th>表达式</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>字母与数字字符</td><td>[[:alnum:]]+</td></tr><tr><td>[:alpha:]</td><td>字母字符(包括大小写字母)</td><td>[[:alpha:]]{4}</td></tr><tr><td>[:blank:]</td><td>空格与制表符</td><td>[[:blank:]]*</td></tr><tr><td>[:digit:]</td><td>数字</td><td>[[:digit:]]?</td></tr><tr><td>[:lower:]</td><td>小写字母</td><td>[[:lower:]]{4,}</td></tr><tr><td>[:upper:]</td><td>大写字母</td><td>[[:upper:]]+</td></tr><tr><td>[:punct:]</td><td>标点符号</td><td>[[:punct:]]</td></tr><tr><td>[:space:]</td><td>包括换行符，回车等在内的所有空白</td><td>[[:space:]]+</td></tr></tbody></table></div><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.数字连续出现<span class="number">4</span>次 （注：[:<span class="type">lower</span>:] 不可以有空格）</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># grep -E &quot;[[:digit:]]&#123;4&#125;&quot; RegExpTest_02.txt</span></span><br><span class="line">Adfjd8789JHfdsdf/</span><br><span class="line">cidufaKoJHJ6576,</span><br></pre></td></tr></table></figure><h2 id="正则字符一览表"><a href="#正则字符一览表" class="headerlink" title="正则字符一览表"></a>正则字符一览表</h2><p><strong>元字符</strong>：在正则中，具有特殊意义的专用字符，如: 星号(*)、加号(+)等</p><p><strong>前导字符</strong>：元字符前面的字符叫前导字符</p><div class="table-container"><table><thead><tr><th>元字符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>*</td><td>前导字符出现0次或者连续多次</td><td>ab*  abbbb</td></tr><tr><td>.</td><td>除了换行符以外，任意单个字符</td><td>ab.   ab8 abu</td></tr><tr><td>.*</td><td>任意长度的字符</td><td>ab.*  adfdfdf</td></tr><tr><td>[]</td><td>括号里的任意单个字符或一组单个字符</td><td>[abc][0-9][a-z]</td></tr><tr><td><sup><a href="#fn_" id="reffn_"></a></sup></td><td>不匹配括号里的任意单个字符或一组单个字符</td><td><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup></td></tr><tr><td>^[]</td><td>匹配以括号里的任意单个字符开头</td><td>^[abc]</td></tr><tr><td>\^<sup><a href="#fn_" id="reffn_"></a></sup></td><td>不匹配以括号里的任意单个字符开头</td><td></td></tr><tr><td>^</td><td>行的开头</td><td>^root</td></tr><tr><td>$</td><td>行的结尾</td><td>bash$</td></tr><tr><td>^$</td><td>空行</td><td></td></tr><tr><td>\{n\}和{n}</td><td>前导字符连续出现n次</td><td>[0-9]\{3\}</td></tr><tr><td>\{n,\}和{n,}</td><td>前导字符至少出现n次</td><td>[a-z]{4,}</td></tr><tr><td>\{n,m\}和{n,m}</td><td>前导字符连续出现n-m次</td><td>go{2,4}</td></tr><tr><td>\&lt;\&gt;</td><td>精确匹配单词</td><td>\<hello\\></td></tr><tr><td>\(\)</td><td>保留匹配到的字符</td><td>\(hello\)</td></tr><tr><td>+</td><td>前导字符出现1次或者多次</td><td>[0-9]+</td></tr><tr><td>?</td><td>前导字符出现0次或者1次</td><td>go?</td></tr><tr><td>\</td><td></td><td>或</td><td>\^root\</td><td>\^ftp</td></tr><tr><td>()</td><td>组字符</td><td>(hello\</td><td>world)123</td></tr><tr><td>\d</td><td>perl内置正则</td><td>grep -P  \d+</td></tr><tr><td>\w</td><td>匹配字母数字下划线</td></tr></tbody></table></div><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">文件准备：</span><br><span class="line">vim test.txt</span><br><span class="line"></span><br><span class="line">Aieur45869Root0000</span><br><span class="line"><span class="number">9</span>h847RkjfkIIIhello</span><br><span class="line">rootHllow88000dfjj</span><br><span class="line"><span class="number">8</span>ikuioerhfhupliooking</span><br><span class="line">hello world</span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.254</span></span><br><span class="line">welcome to uplooking.</span><br><span class="line">abcderfkdjfkdtest</span><br><span class="line">rlllA899kdfkdfj</span><br><span class="line">iiiA848890ldkfjdkfj</span><br><span class="line">abc</span><br><span class="line"><span class="number">12345678908374</span></span><br><span class="line"><span class="number">123456</span>@qq.com</span><br><span class="line"><span class="number">123456</span>@<span class="number">163</span>.com</span><br><span class="line">abcdefg@itcast.com23ed</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、查找不以大写字母开头的行（三种写法）。</span><br><span class="line">grep <span class="string">&#x27;^[^A-Z]&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-v</span> <span class="string">&quot;^[A-Z]&quot;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-v</span> <span class="string">&quot;\&lt;[A-Z]&quot;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-E</span> <span class="literal">-v</span> <span class="string">&quot;^[[:upper:]]&quot;</span> RegExpTest_01.txt    &lt;<span class="literal">---</span>&gt;   <span class="string">&#x27;^[^[:upper:]]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、查找有数字的行（两种写法）</span><br><span class="line">grep <span class="string">&#x27;[0-9]&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-P</span>  <span class="string">&quot;\d&quot;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&quot;[[:digit:]]&quot;</span> RegExpTest_01.txt</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、查找一个数字和一个字母连起来的</span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&#x27;[0-9][a-zA-Z]|[a-zA-Z][0-9]&#x27;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、查找不以<span class="built_in">r</span>开头的行</span><br><span class="line">grep <span class="literal">-v</span> <span class="string">&#x27;^r&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="string">&#x27;^[^r]&#x27;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、查找以数字开头的</span><br><span class="line">grep <span class="string">&#x27;^[0-9]&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&#x27;^[[:digit:]]&#x27;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、查找以大写字母开头的</span><br><span class="line">grep <span class="string">&#x27;^[A-Z]&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&quot;^[[:upper:]]&quot;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、查找以小写字母开头的</span><br><span class="line">grep <span class="string">&#x27;^[a-z]&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&quot;^[[:lower:]]&quot;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、查找以点结束的</span><br><span class="line">grep <span class="string">&#x27;\.$&#x27;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、去掉空行</span><br><span class="line">grep <span class="string">&#x27;^[^$]&#x27;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、查找完全匹配abc的行</span><br><span class="line">grep <span class="string">&#x27;\&lt;abc\&gt;&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-w</span> <span class="string">&#x27;abc&#x27;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">11</span>、查找A后有三个数字的行</span><br><span class="line">grep <span class="string">&#x27;A[0-9][0-9][0-9]&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep  <span class="string">&#x27;A[0-9]\&#123;3\&#125;&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&#x27;A([0-9])&#123;3&#125;&#x27;</span> RegExpTest_01.txt </span><br><span class="line"></span><br><span class="line"><span class="number">12</span>、统计root在/etc/passwd里出现了几次</span><br><span class="line">grep <span class="literal">-o</span> <span class="string">&#x27;root&#x27;</span> /etc/passwd | wc <span class="literal">-l</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">13</span>、用正则表达式找出自己的IP地址、广播地址、子网掩码</span><br><span class="line">ifconfig ens33 | grep <span class="literal">-o</span> <span class="string">&#x27;[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;&#x27;</span></span><br><span class="line">ifconfig | grep <span class="string">&quot;broadcast&quot;</span> | grep <span class="literal">-o</span> <span class="literal">-E</span> <span class="string">&#x27;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&#x27;</span></span><br><span class="line">ifconfig ens33 | grep <span class="literal">-o</span> <span class="literal">-P</span> <span class="string">&#x27;(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;&#x27;</span></span><br><span class="line">ifconfig ens33 | grep <span class="literal">-o</span> <span class="literal">-P</span> <span class="string">&#x27;\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">14</span>、找出文件中的ip地址</span><br><span class="line"><span class="built_in">cat</span> /etc/sysconfig/network<span class="literal">-scripts</span>/ifcfg<span class="literal">-ens33</span> | grep <span class="string">&quot;IPADDR&quot;</span> | cut <span class="literal">-d</span> <span class="string">&quot;=&quot;</span> <span class="literal">-f2</span> </span><br><span class="line"></span><br><span class="line"><span class="number">15</span>、找出全部是数字的行</span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&#x27;^[0-9]+$&#x27;</span> RegExpTest_01.txt </span><br><span class="line">grep <span class="literal">-E</span> <span class="literal">-v</span>  <span class="string">&quot;[[:alpha:]|[:punct:]|[:space:]]&quot;</span> RegExpTest_01.txt  | grep <span class="literal">-v</span> <span class="string">&quot;^<span class="variable">$</span>&quot;</span></span><br><span class="line">grep <span class="literal">-E</span> <span class="literal">-v</span>  <span class="string">&quot;[[:alpha:]|[:punct:]|[:space:]]&quot;</span> RegExpTest_01.txt  | grep <span class="string">&quot;[0-9].&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">16</span>、找出邮箱地址</span><br><span class="line">grep <span class="literal">-E</span> <span class="string">&#x27;^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]&#123;2,5&#125;)$&#x27;</span> RegExpTest_01.txt</span><br><span class="line">grep <span class="literal">-E</span>  <span class="string">&quot;([0-9]|[A-Z]|[a-z]|[._-])+@([0-9]|[A-Z]|[a-z]|[._-])+\.([A-Z]|[a-z])+<span class="variable">$</span>&quot;</span> RegExpTest_01.txt</span><br><span class="line"></span><br><span class="line">grep <span class="literal">--help</span>:</span><br><span class="line">匹配模式选择：</span><br><span class="line">Regexp selection and interpretation:</span><br><span class="line">  <span class="literal">-E</span>, <span class="literal">--extended-regexp</span>     扩展正则</span><br><span class="line">  <span class="literal">-G</span>, <span class="literal">--basic-regexp</span>        基本正则</span><br><span class="line">  <span class="literal">-P</span>, <span class="literal">--perl-regexp</span>         调用perl的正则</span><br><span class="line">  <span class="literal">-e</span>, <span class="literal">--regexp</span>=PATTERN      use PATTERN <span class="keyword">for</span> matching</span><br><span class="line">  <span class="operator">-f</span>, <span class="literal">--file</span>=FILE           obtain PATTERN from FILE</span><br><span class="line">  <span class="literal">-i</span>, <span class="literal">--ignore-case</span>         忽略大小写</span><br><span class="line">  <span class="literal">-w</span>, <span class="literal">--word-regexp</span>         匹配整个单词</span><br></pre></td></tr></table></figure><h2 id="脚本搭建Web服务"><a href="#脚本搭建Web服务" class="headerlink" title="脚本搭建Web服务"></a>脚本搭建Web服务</h2><h4 id="脚本搭建web服务"><a href="#脚本搭建web服务" class="headerlink" title="脚本搭建web服务"></a>脚本搭建web服务</h4><p><strong>要求如下</strong>：</p><ol><li>用户输入web服务器的IP、域名以及数据根目录</li><li>如果用户不输入则一直提示输入，直到输入为止</li><li>当访问www.test.cc时可以访问到数据根目录里的首页文件“this is test page” </li></ol><p><strong>参考脚本：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">参考：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">conf=/etc/httpd/conf/httpd.conf</span><br><span class="line">input_fun()</span><br><span class="line">&#123;</span><br><span class="line">  input_var=<span class="string">&quot;&quot;</span></span><br><span class="line">  output_var=<span class="variable">$1</span></span><br><span class="line">  <span class="keyword">while</span> [ -<span class="type">z</span> <span class="variable">$input_var</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">read <span class="literal">-p</span> <span class="string">&quot;<span class="variable">$output_var</span>&quot;</span> input_var</span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$input_var</span></span><br><span class="line">&#125;</span><br><span class="line">ipaddr=<span class="variable">$</span>(input_fun <span class="string">&quot;Input Host ip[192.168.0.1]:&quot;</span>)</span><br><span class="line">web_host_name=<span class="variable">$</span>(input_fun <span class="string">&quot;Input VirtualHostName [www.test.cc]:&quot;</span>)</span><br><span class="line">root_dir=<span class="variable">$</span>(input_fun <span class="string">&quot;Input host Documentroot dir:[/var/www/html]:&quot;</span>)</span><br><span class="line"></span><br><span class="line">[ ! -<span class="type">d</span> <span class="variable">$root_dir</span> ] &amp;&amp; mkdir <span class="literal">-p</span> <span class="variable">$root_dir</span></span><br><span class="line">chown apache.apache <span class="variable">$root_dir</span> &amp;&amp; chmod <span class="number">755</span> <span class="variable">$root_dir</span></span><br><span class="line"><span class="built_in">echo</span> this is <span class="variable">$web_host_name</span> &gt; <span class="variable">$root_dir</span>/index.html</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$ipaddr</span> <span class="variable">$web_host_name</span>&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line">[ -<span class="type">f</span> <span class="variable">$conf</span> ] &amp;&amp; <span class="built_in">cat</span> &gt;&gt; <span class="variable">$conf</span> &lt;&lt;<span class="keyword">end</span></span><br><span class="line">NameVirtualHost <span class="variable">$ipaddr:80</span></span><br><span class="line">&lt;VirtualHost <span class="variable">$ipaddr:80</span>&gt;</span><br><span class="line">ServerAdmin webmaster<span class="selector-tag">@</span><span class="variable">$web_host_name</span></span><br><span class="line">DocumentRoot <span class="variable">$root_dir</span></span><br><span class="line">ServerName <span class="variable">$web_host_name</span></span><br><span class="line">ErrorLog logs/<span class="variable">$web_host_name</span><span class="literal">-error_log</span></span><br><span class="line">CustomLog logs/<span class="variable">$web_host_name</span><span class="literal">-access_loh</span> common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="sed-用法"><a href="#sed-用法" class="headerlink" title="sed 用法"></a>sed 用法</h2><blockquote><p>sed 是 Stream Editor（流编辑器）的缩写，简称流编辑器；用来 处理文件 的。</p><p>sed 是一行一行读取文件内容并按照要求进行处理，把处理后的结果输出到屏幕。</p></blockquote><ul><li><p>首先sed读取文件中的一行内容，把其保存在一个临时缓存区中（也称为模式空间）</p></li><li><p>然后根据需求处理临时缓冲区中的行，完成后把该行发送到屏幕上</p></li></ul><p><strong>总结：</strong></p><ol><li>由于sed把每一行都存在临时缓冲区中，对这个<strong>副本</strong>进行编辑，所以不会直接修改原文件</li><li>Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作,对文件进行过滤和转换操作</li></ol><h4 id="命令行格式"><a href="#命令行格式" class="headerlink" title="命令行格式"></a>命令行格式</h4><p>语法：sed  [options]    <strong>‘</strong>处理动作<strong>‘</strong>  文件名  (注：一定是单引号 )   </p><p>sed  [options]    <strong>‘处理动作’</strong>   文件名</p><ul><li><strong>常用选项</strong></li></ul><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>-e</td><td>进行多项(多次)编辑</td><td></td></tr><tr><td>-n</td><td>取消默认输出</td><td>不自动打印模式空间</td></tr><tr><td>-r</td><td>使用扩展正则表达式</td><td></td></tr><tr><td>-i</td><td>原地编辑（修改源文件）</td><td></td></tr><tr><td>-f</td><td>指定sed脚本的文件名</td><td>sed  [options]    ==<strong>‘</strong>==处理动作<strong>==’==</strong>   文件名</td></tr></tbody></table></div><ul><li><strong>常见处理动作</strong></li></ul><blockquote><p>以下所有的动作都要在<strong>单引号</strong>里</p></blockquote><div class="table-container"><table><thead><tr><th>动作</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>‘p’</td><td>打印</td><td></td></tr><tr><td>‘i’</td><td>在指定行之前插入内容</td><td>类似vim里的大写O</td></tr><tr><td>‘a’</td><td>在指定行之后插入内容</td><td>类似vim里的小写o</td></tr><tr><td>‘c’</td><td>替换指定行所有内容</td><td></td></tr><tr><td>‘d’</td><td>删除指定行</td></tr></tbody></table></div><p><strong>1.1 例子</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim sed_test.txt</span><br><span class="line"></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><p><strong>1.1.1  对文件进行增、删、改、查操作</strong></p><blockquote><p>语法：sed  选项    <strong>‘定位+命令’</strong>    需要处理的文件</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 不加处理动作，打印文件的内容</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;&#x27; sed_test.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.按照处理流程，会一行一行执行代码，第一次的打印指运行此行时打印出来与代码要求无关，第二次打印指代码此行要求打印（注：简单理解为第一行时sed处理的内容，第二行为处理的结果）</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;p&#x27; demo.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. <span class="literal">-n</span> 指的是取消默认输出，可以理解为，每次 sed 处理文件的某行时都会打印一次此行的内容，<span class="literal">-n</span> 就取消了这次打印，而下面的结果就是，sed 对文件的处理的结果 （注： <span class="literal">-n</span> 和 <span class="string">&#x27;p&#x27;</span> 经常一起使用）</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;p&#x27; sed_test.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.此部分可以理解为，对第二行进行 sed 打印的操作，其他行都是默认打印的内容，第二行第一遍就是默认打印的结果</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;2p&#x27; sed_test.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.此部分理解为，sed 只对第二行进行了打印的操作，<span class="literal">-n</span> 值得默认打印内容都不输出</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;2p&#x27; sed_test.txt</span></span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>.打印 <span class="number">1</span><span class="literal">-5</span>行 理解上方几点，此无特别之处</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;1,5p&#x27; sed_test.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>. <span class="variable">$p</span> 指打印最后一行 无 ^p 用法，打印第一行 <span class="number">1</span>p</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;$p&#x27; sed_test.txt</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><p><strong>1.1.2 增加文件内容</strong></p><blockquote><p>i       定位符上一行插入内容</p><p>a      定位符下一行插入内容</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 在文件的第二行插入 hello world</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;2i hello world&#x27; sed_test.txt</span></span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed  &#x27;2i hello world&#x27; sed_test.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">hello world</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.不加定位符的话，就是每行的上一行都插入 hello world ，可以理解为 sed  对每行进行传入的操作，命令的结果就是内容 hello world 命令执行的对象就是每一行，所以每一行都会打印一次</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed  &#x27;i hello world&#x27; sed_test.txt</span></span><br><span class="line">hello world</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">hello world</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">hello world</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">hello world</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">hello world</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line">hello world</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line">hello world</span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line">hello world</span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.文件的第二行的上一行插入 hello 换行 world 。</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;2i hello\nworld&#x27; sed_test.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.先输入左侧单引号，添加的内容添加完成后在输入右侧的单引号。第一行输入 sed <span class="string">&#x27;3i\ 后敲击回车，第二行 \ 后敲击回车</span></span><br><span class="line"><span class="string">[root@Jermyn shell_scripts]# sed &#x27;</span><span class="number">3</span>i\</span><br><span class="line">&gt; hello\</span><br><span class="line">&gt; world<span class="string">&#x27; sed_test.txt</span></span><br><span class="line"><span class="string">root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="string">bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"><span class="string">adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span><br><span class="line"><span class="string">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span><br><span class="line"><span class="string">298374837483</span></span><br><span class="line"><span class="string">172.16.0.254</span></span><br><span class="line"><span class="string">10.1.1.1</span></span><br></pre></td></tr></table></figure><blockquote><p>注：示例 3 和 4 示例 3 更好操作些，示例4更直观些</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>. a 类比 i </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;1,3a 111&#x27; sed_test.txt[root@Jermyn shell_scripts]# sed &#x27;1,3a 111&#x27; sed_test.txt</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;$a 111&#x27; sed_test.txt</span></span><br></pre></td></tr></table></figure><p><strong>1.1.3 修改文件的内容</strong></p><blockquote><p>c   替换指定的整行内容</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.将以 adm 开头的行替换为 hello world</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;/^adm/c hello world&#x27; sed_test.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">hello world</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.每一行都替换为 hello world</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;c hello world&#x27; sed_test.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.此命令较之前特殊，是将 <span class="number">1</span><span class="literal">-5</span>总共<span class="number">5</span>行 替换为一行 hello world</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;1,5c hello world&#x27; sed_test.txt</span></span><br><span class="line">hello world</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><p><strong>1.1.4 删除文件的内容</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.删除文件的某行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;1d&#x27; sed_test.txt</span></span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># cat -n sed_test.txt</span></span><br><span class="line">     <span class="number">1</span>  root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.删除文件的 <span class="number">1</span><span class="literal">-3</span> 行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># cat -n sed_test.txt</span></span><br><span class="line">     <span class="number">1</span>  root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">     <span class="number">2</span>  bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">     <span class="number">3</span>  daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">     <span class="number">4</span>  adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line">     <span class="number">5</span>  <span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line">     <span class="number">6</span>  <span class="number">298374837483</span></span><br><span class="line">     <span class="number">7</span>  <span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line">     <span class="number">8</span>  <span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;1,3d&#x27; sed_test.txt</span></span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.删除文件的最后一行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;$d&#x27; sed_test.txt</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.不加定位就是全删</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;d&#x27; sed_test.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.正则删除文件中含有数字的，结果就是全删除了，每行都带有数字</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed &#x27;/[0-9]/d&#x27; sed_test.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>.只删除 ip 地址的</span><br><span class="line">sed  <span class="string">&#x27;/[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;/d&#x27;</span> sed_test.txt</span><br><span class="line">sed <span class="literal">-r</span> <span class="string">&#x27;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&#x27;</span> sed_test.txt</span><br></pre></td></tr></table></figure><p><strong>1.2  其他命令</strong></p><div class="table-container"><table><thead><tr><th>命令</th><th>解释</th><th>备注</th></tr></thead><tbody><tr><td>r</td><td>从另外文件中读取内容</td><td></td></tr><tr><td>w</td><td>内容另存为</td><td></td></tr><tr><td>&amp;</td><td>保存查找串以便在替换串中引用</td><td>和\(\)相同</td></tr><tr><td>=</td><td>打印行号</td><td></td></tr><tr><td>！</td><td>对所选行以外的所有行应用命令，放到行数之后</td><td>‘1,5!’</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table></div><p><strong>示例：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">r</span>从文件中读取输入行</span><br><span class="line">w将所选的行写入文件</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed &#x27;3r /etc/hosts&#x27; 2.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed &#x27;$r /etc/hosts&#x27; 2.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed &#x27;/root/w a.txt&#x27; 2.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed &#x27;/[0-9]&#123;4&#125;/w a.txt&#x27; 2.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed  -r &#x27;/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/w b.txt&#x27; 2.txt</span></span><br><span class="line"></span><br><span class="line">!对所选行以外的所有行应用命令，放到行数之后</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;1!p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;4p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;4!p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># cat -n 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;1,17p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;1,17!p&#x27; 1.txt </span></span><br><span class="line"></span><br><span class="line">&amp;   保存查找串以便在替换串中引用   \(\)</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;/root/p&#x27; a.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;s/root/#&amp;/p&#x27; a.txt </span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sed -n &#x27;s/^root/#&amp;/p&#x27; passwd   注释掉以root开头的行</span></span><br><span class="line"><span class="comment"># sed -n -r &#x27;s/^root|^stu/#&amp;/p&#x27; /etc/passwd注释掉以root开头或者以stu开头的行</span></span><br><span class="line"><span class="comment"># sed -n &#x27;1,5s/^[a-z].*/#&amp;/p&#x27; passwd  注释掉1~5行中以任意小写字母开头的行</span></span><br><span class="line"><span class="comment"># sed -n &#x27;1,5s/^/#/p&#x27; /etc/passwd  注释1~5行</span></span><br><span class="line">或者</span><br><span class="line">sed <span class="literal">-n</span> <span class="string">&#x27;1,5s/^/#/p&#x27;</span> passwd 以空开头的加上<span class="comment">#</span></span><br><span class="line">sed <span class="literal">-n</span> <span class="string">&#x27;1,5s/^#//p&#x27;</span> passwd 以<span class="comment">#开头的替换成空</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;/^root/p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;s/^root/#&amp;/p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;s/\(^root\)/#\1/p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr &#x27;/^root|^stu/p&#x27; 1.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr &#x27;s/^root|^stu/#&amp;/p&#x27; 1.txt </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">= 打印行号</span><br><span class="line"><span class="comment"># sed -n &#x27;/bash$/=&#x27; passwd    打印以bash结尾的行的行号</span></span><br><span class="line"><span class="comment"># sed -ne &#x27;/root/=&#x27; -ne &#x27;/root/p&#x27; passwd </span></span><br><span class="line"><span class="comment"># sed -n &#x27;/nologin$/=;/nologin$/p&#x27; 1.txt</span></span><br><span class="line"><span class="comment"># sed -ne &#x27;/nologin$/=&#x27; -ne &#x27;/nologin$/p&#x27; 1.txt</span></span><br><span class="line"></span><br><span class="line">q退出</span><br><span class="line"><span class="comment"># sed &#x27;5q&#x27; 1.txt</span></span><br><span class="line"><span class="comment"># sed &#x27;/mail/q&#x27; 1.txt</span></span><br><span class="line"><span class="comment"># sed -r &#x27;/^yunwei|^mail/q&#x27; 1.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;/bash$/p;10q&#x27; 1.txt</span></span><br><span class="line">ROOT:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">综合运用：</span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;1,5s/^/#&amp;/p&#x27; 1.txt </span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span><br><span class="line"><span class="comment">#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;1,5s/\(^\)/#\1/p&#x27; 1.txt </span></span><br><span class="line"><span class="comment">#root:x:0:0:root:/root:/bin/bash</span></span><br><span class="line"><span class="comment">#bin:x:1:1:bin:/bin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#daemon:x:2:2:daemon:/sbin:/sbin/nologin</span></span><br><span class="line"><span class="comment">#adm:x:3:4:adm:/var/adm:/sbin/nologin</span></span><br><span class="line"><span class="comment">#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span></span><br></pre></td></tr></table></figure><p><strong>1.3 其他选项</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-e</span> 多项编辑</span><br><span class="line"><span class="literal">-r</span>扩展正则</span><br><span class="line"><span class="literal">-i</span> 修改原文件</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -ne &#x27;/root/p&#x27; 1.txt -ne &#x27;/root/=&#x27;</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -ne &#x27;/root/=&#x27; -ne &#x27;/root/p&#x27; 1.txt </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在1.txt文件中的第5行的前面插入“hello world”;在1.txt文件的第8行下面插入“哈哈哈哈”</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -e &#x27;5ihello world&#x27; -e &#x27;8a哈哈哈哈哈&#x27; 1.txt  -e &#x27;5=;8=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印第 1 和第 5 行</span></span><br><span class="line">sed <span class="literal">-n</span> <span class="string">&#x27;1,5p&#x27;</span> <span class="number">1</span>.txt</span><br><span class="line">sed <span class="operator">-ne</span> <span class="string">&#x27;1p&#x27;</span> <span class="operator">-ne</span> <span class="string">&#x27;5p&#x27;</span> <span class="number">1</span>.txt</span><br><span class="line">sed <span class="operator">-ne</span> <span class="string">&#x27;1p;5p&#x27;</span> <span class="number">1</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤vsftpd.conf文件中以#开头和空行：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep -Ev &#x27;^#|^$&#x27; /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -e &#x27;/^#/d&#x27; -e &#x27;/^$/d&#x27; /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed &#x27;/^#/d;/^$/d&#x27; /etc/vsftpd/vsftpd.conf</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -r &#x27;/^#|^$/d&#x27; /etc/vsftpd/vsftpd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤smb.conf文件中生效的行：</span></span><br><span class="line">sed <span class="literal">-e</span> <span class="string">&#x27;/^#/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^;/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^$/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^\t$/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^\t#/d&#x27;</span> smb.conf</span><br><span class="line">sed <span class="literal">-r</span> <span class="string">&#x27;/^(#|$|;|\t#|\t$)/d&#x27;</span> smb.conf </span><br><span class="line">sed <span class="literal">-e</span> <span class="string">&#x27;/^#/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^;/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^$/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^\t$/d&#x27;</span> <span class="literal">-e</span> <span class="string">&#x27;/^\t#/&#x27;</span> smb.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印文件中不以字母开头的行</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep &#x27;^[^a-z]&#x27; 1.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -n &#x27;/^[^a-z]/p&#x27; 1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤出文件中的IP地址：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep -E &#x27;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&#x27; 1.txt </span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.254</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr &#x27;/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p&#x27; 1.txt </span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.254</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># grep -o -E &#x27;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&#x27; 2.txt </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> ~]<span class="comment"># sed -nr &#x27;/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p&#x27; 2.txt</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤出ifcfg-eth0文件中的IP、子网掩码、广播地址</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># grep -Eo &#x27;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&#x27; ifcfg-eth0 </span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># sed -nr &#x27;/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p&#x27; ifcfg-eth0|cut -d&#x27;=&#x27; -f2</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># sed -nr &#x27;/([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;/p&#x27; ifcfg-eth0|sed -n &#x27;s/[A-Z=]//gp&#x27;</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.254</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># ifconfig eth0|sed -n &#x27;2p&#x27;|sed -n &#x27;s/[:a-Z]//gp&#x27;|sed -n &#x27;s/ /\n/gp&#x27;|sed &#x27;/^$/d&#x27;</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># ifconfig | sed -nr &#x27;/([0-9]&#123;1,3&#125;\.)[0-9]&#123;1,3&#125;/p&#x27; | head -1|sed -r &#x27;s/([a-z:]|[A-Z/t])//g&#x27;|sed &#x27;s/ /\n/g&#x27;|sed  &#x27;/^$/d&#x27;</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">server</span> <span class="type">shell06</span>]<span class="comment"># ifconfig eth0|sed -n &#x27;2p&#x27;|sed -n &#x27;s/.*addr:\(.*\) Bcast:\(.*\) Mask:\(.*\)/\1\n\2\n\3/p&#x27;</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span> </span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.255</span> </span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>-i  选项  直接修改原文件</strong></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed -i &#x27;s/root/ROOT/;s/stu/STU/&#x27; 11.txt</span></span><br><span class="line"><span class="comment"># sed -i &#x27;17&#123;s/YUNWEI/yunwei/;s#/bin/bash#/sbin/nologin#&#125;&#x27; 1.txt</span></span><br><span class="line"><span class="comment"># sed -i &#x27;1,5s/^/#&amp;/&#x27; a.txt</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>-ni  不要一起使用<br>p 命令 不要再使用 -i 时使用</p></blockquote><p><strong>1.4  sed 结合正则使用</strong></p><blockquote><p>sed  选项  <strong>‘sed命令 或者 正则表达式 或者 地址定位’</strong>  文件名</p></blockquote><ol><li>定址用于决定对哪些行进行编辑。地址的形式可以是数字、正则表达式、或二者的结合。</li><li>如果没有指定地址，sed将处理输入文件的所有行。</li></ol><div class="table-container"><table><thead><tr><th>正则</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>/key/</td><td>查询包含关键字的行</td><td>sed -n ‘/root/p’ 1.txt</td></tr><tr><td>/key1/,/key2/</td><td>匹配包含两个关键字之间的行</td><td>sed -n ‘/\^adm/,/^mysql/p’ 1.txt</td></tr><tr><td>/key/,x</td><td>从匹配关键字的行开始到==文件第x行==之间的行（包含关键字所在行）</td><td>sed -n ‘/^ftp/,7p’</td></tr><tr><td>x,/key/</td><td>从文件的第x行开始到与关键字的匹配行之间的行</td><td></td></tr><tr><td>x,y!</td><td>不包含x到y行</td><td></td></tr><tr><td>/key/!</td><td>不包括关键字的行</td><td>sed -n ‘/bash$/!p’ 1.txt</td></tr></tbody></table></div><p><strong>示例：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.匹配 bin 到 lpd 之间的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;/bin/,/lpd/p&#x27; sed_test.txt </span></span><br><span class="line">ROOT:x:<span class="number">0</span>:<span class="number">0</span>:ROOT:/ROOT:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.匹配 adm 开头的行或者 <span class="built_in">lp</span> 开头的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -nr &#x27;/^adm|lp/p&#x27; sed_test.txt </span></span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.匹配以 <span class="built_in">lp</span> 开头的行到 第 <span class="number">8</span> 行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;/^lp/,8p&#x27; sed_test.txt </span></span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"><span class="number">298374837483</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.445.2522</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.匹配第 <span class="number">8</span> 行到以 <span class="number">10</span> 开头的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -n &#x27;8,/^10/p&#x27; sed_test.txt </span></span><br><span class="line"><span class="comment"># 192.168.445.2522</span></span><br><span class="line"><span class="number">172.16</span>.<span class="number">0.254</span></span><br><span class="line"><span class="number">10.1</span>.<span class="number">1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.匹配从第 <span class="number">2</span> 行开始 到以 adm 或者 <span class="built_in">lp</span> 开头的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># sed -nr &#x27;2,/^adm|^lp/p&#x27; sed_test.txt </span></span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br></pre></td></tr></table></figure><h4 id="脚本模式"><a href="#脚本模式" class="headerlink" title="脚本模式"></a>脚本模式</h4><p><strong>用法：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed -f scripts.sh  file//使用脚本处理文件</span></span><br><span class="line">建议使用   ./sed.sh   file</span><br><span class="line"></span><br><span class="line">脚本的第一行写上</span><br><span class="line"><span class="comment">#!/bin/sed -f</span></span><br><span class="line"><span class="number">1</span>,<span class="number">5</span>d</span><br><span class="line">s/root/hello/g</span><br><span class="line"><span class="number">3</span>i777</span><br><span class="line"><span class="number">5</span>i888</span><br><span class="line">a999</span><br><span class="line">p</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 脚本文件是一个sed的命令行清单。<span class="string">&#x27;commands&#x27;</span></span><br><span class="line">2. 在每行的末尾不能有任何空格、制表符（tab）或其它文本。</span><br><span class="line">3. 如果在一行中有多个命令，应该用分号分隔。</span><br><span class="line">4. 不需要且不可用引号保护命令</span><br><span class="line">5. <span class="comment">#号开头的行为注释</span></span><br></pre></td></tr></table></figure><h2 id="awk用法"><a href="#awk用法" class="headerlink" title="awk用法"></a>awk用法</h2><h4 id="awk-介绍"><a href="#awk-介绍" class="headerlink" title="awk 介绍"></a>awk 介绍</h4><p><strong>1.1 awk 概述</strong></p><ul><li>awk是一种==编程语言==，主要用于在linux/unix下对==文本和数据==进行处理，是linux/unix下的一个工具。数据可以来自标准输入、一个或多个文件，或其它命令的输出。</li><li>awk的处理文本和数据的方式：<strong>逐行扫描文件</strong>，默认从第一行到最后一行，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。</li><li>awk分别代表其作者姓氏的第一个字母。因为它的作者是三个人，分别是Alfred Aho、Brian Kernighan、Peter Weinberger。</li><li>gawk是awk的GNU版本，它提供了Bell实验室和GNU的一些扩展。</li></ul><ul><li>下面介绍的awk是以GNU的gawk为例的，在linux系统中已把awk链接到gawk，所以下面全部以awk进行介绍。</li></ul><p><strong>1.2 awk 作用</strong></p><ol><li>awk用来处理文件和数据的，是类unix下的一个工具，也是一种编程语言</li><li>可以用来统计数据，比如网站的访问量，访问的IP量等等</li><li>支持条件判断，支持for和while循环</li></ol><h4 id="awk-使用方式"><a href="#awk-使用方式" class="headerlink" title="awk 使用方式"></a>awk 使用方式</h4><p><strong>2.1 命令行模式的使用</strong></p><p><strong>语法：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">awk 选项 <span class="string">&#x27;命令部分&#x27;</span> 文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特别说明：</span><br><span class="line">引用shell变量需用双引号引起</span><br></pre></td></tr></table></figure><blockquote><p><strong>命名部分说明：</strong></p><ul><li>正则表达式，地址定位</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;/root/&#123;awk语句&#125;&#x27;</span>sed中： <span class="string">&#x27;/root/p&#x27;</span></span><br><span class="line"><span class="string">&#x27;NR==1,NR==5&#123;awk语句&#125;&#x27;</span>sed中： <span class="string">&#x27;1,5p&#x27;</span></span><br><span class="line"><span class="string">&#x27;/^root/,/^ftp/&#123;awk语句&#125;&#x27;</span>  sed中：<span class="string">&#x27;/^root/,/^ftp/p&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>{awk语句1<strong>;</strong>awk语句2<strong>;</strong>…}</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#123;print $0;print $1&#125;&#x27;</span>sed中：<span class="string">&#x27;p&#x27;</span></span><br><span class="line"><span class="string">&#x27;NR==5&#123;print $0&#125;&#x27;</span>sed中：<span class="string">&#x27;5p&#x27;</span></span><br><span class="line">注：awk命令语句间用分号间隔</span><br></pre></td></tr></table></figure><ul><li>BEGIN…END….</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;BEGIN&#123;awk语句&#125;;&#123;处理中&#125;;END&#123;awk语句&#125;&#x27;</span></span><br><span class="line"><span class="string">&#x27;BEGIN&#123;awk语句&#125;;&#123;处理中&#125;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#123;处理中&#125;;END&#123;awk语句&#125;&#x27;</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>2.2 常用选项介绍</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-F</span>  定义字段分割符号，默认的分隔符是 空格</span><br><span class="line"><span class="literal">-v</span>  定义变量并赋值</span><br></pre></td></tr></table></figure><h4 id="脚本模式使用"><a href="#脚本模式使用" class="headerlink" title="脚本模式使用"></a>脚本模式使用</h4><p><strong>3.1 脚本编写</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/awk -f 定义魔法字符</span></span><br><span class="line">以下是awk引号里的命令清单，不要用引号保护命令，多个命令用分号间隔</span><br><span class="line"><span class="keyword">BEGIN</span>&#123;FS=<span class="string">&quot;:&quot;</span>&#125;</span><br><span class="line">NR==<span class="number">1</span>,NR==<span class="number">3</span>&#123;print <span class="variable">$1</span><span class="string">&quot;\t&quot;</span><span class="variable">$NF</span>&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>3.2 脚本执行</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>：</span><br><span class="line">awk 选项 <span class="operator">-f</span> awk的脚本文件  要处理的文本文件</span><br><span class="line">awk <span class="operator">-f</span> awk.sh filename</span><br><span class="line"></span><br><span class="line">sed <span class="operator">-f</span> sed.sh <span class="literal">-i</span> filename</span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">./awk的脚本文件(或者绝对路径)要处理的文本文件</span><br><span class="line">./awk.sh filename</span><br><span class="line"></span><br><span class="line">./sed.sh filename方法<span class="number">1</span>：</span><br><span class="line">awk 选项 <span class="operator">-f</span> awk的脚本文件  要处理的文本文件</span><br><span class="line">awk <span class="operator">-f</span> awk.sh filename</span><br><span class="line"></span><br><span class="line">sed <span class="operator">-f</span> sed.sh <span class="literal">-i</span> filename</span><br><span class="line"></span><br><span class="line">方法<span class="number">2</span>：</span><br><span class="line">./awk的脚本文件(或者绝对路径)要处理的文本文件</span><br><span class="line">./awk.sh filename</span><br><span class="line"></span><br><span class="line">./sed.sh filename</span><br></pre></td></tr></table></figure><p><strong>3.3  awk内部相关变量</strong></p><div class="table-container"><table><thead><tr><th>变量</th><th>变量说明</th><th>备注</th></tr></thead><tbody><tr><td>$0</td><td>当前处理行的所有记录</td><td></td></tr><tr><td>$1,$2,$3…$n</td><td>文件中每行以间隔符号分割的不同字段</td><td>awk -F: ‘{print $1,$3}’</td></tr><tr><td>NF</td><td>当前记录的字段数（列数）</td><td>awk -F: ‘{print NF}’</td></tr><tr><td>$NF</td><td>最后一列</td><td>$(NF-1)表示倒数第二列</td></tr><tr><td>FNR/NR</td><td>行号</td><td></td></tr><tr><td>FS</td><td>定义间隔符</td><td>‘BEGIN{FS=”:”};{print $1,$3}’</td></tr><tr><td>OFS</td><td>定义输出字段分隔符，默认空格</td><td>‘BEGIN{OFS=”\t”};{print $1,$3}’</td></tr><tr><td>RS</td><td>输入记录分割符，默认换行</td><td>‘BEGIN{RS=”\t”};{print $0}’   <!--**awk一行一行执行命令，依据就是，每行行末有换行符，RS 默认就是换行符**--></td></tr><tr><td>ORS</td><td>输出记录分割符，默认换行</td><td>‘BEGI N{ORS=”\n\n”};{print $1,$3}’</td></tr><tr><td>FILENAME</td><td>当前输入的文件名</td></tr></tbody></table></div><p><strong>实例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vim awk_test.txt</span><br><span class="line">...</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd:x:999:998:User for polkitd:/:/sbin/nologin</span><br><span class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">ntp:x:38:38::/etc/ntp:/sbin/nologin</span><br><span class="line">Jermyn:x:1000:1000::/home/Jermyn:/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.awk 执行方式与 sed 类似，即一行一行执行，此命令打印当前处理的行，即打印文件的每行内容</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk &#x27;&#123;print $0&#125;&#x27; awk_test.txt 、</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk &#x27;&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">........</span><br><span class="line">ntp:x:<span class="number">38</span>:<span class="number">38</span>::/etc/ntp:/sbin/nologin</span><br><span class="line">Jermyn:x:<span class="number">1000</span>:<span class="number">1000</span>::/home/Jermyn:/bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.打印 <span class="number">1</span><span class="literal">-5</span> 行的内容，定位即是 NR==<span class="number">1</span>,NR==<span class="number">5</span> </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F: &#x27;NR==1,NR==5&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.打印第一行和第五行，此处 || 为逻辑运算符，并非正则， | 为正则</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;NR==1 || NR==5&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.打印 <span class="number">3</span><span class="literal">-5</span> 行，第二格命令是 NR 大于等于 <span class="number">3</span> 并且 NR 小于等于 <span class="number">5</span> 的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;NR==3,NR==5&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;NR&gt;=3 &amp;&amp; NR&lt;=5&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.打印以冒号 ： 分割的第一列和最后一列以及倒数第二列</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F : &#x27;&#123;print $1,$NF,$(NF-1)&#125;&#x27; awk_test.txt </span></span><br><span class="line">root /bin/bash /root</span><br><span class="line">bin /sbin/nologin /bin</span><br><span class="line">.......</span><br><span class="line">ntp /sbin/nologin /etc/ntp</span><br><span class="line">Jermyn /bin/bash /home/Jermyn</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>.两个命令区别就是 <span class="variable">$NF</span> 和 NF ,后者可以理解为 NF 为变量值为 NR=<span class="number">7</span> 即直接 print <span class="number">7</span> ，前者可以理解为是打印第 <span class="variable">$7</span> 列</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment">#  awk -F : &#x27;&#123;print $NF&#125;&#x27; awk_test.txt </span></span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment">#  awk -F : &#x27;&#123;print NF&#125;&#x27; awk_test.txt </span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.打印出包含 root 的行，/root/ 为地址定位</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;/root/&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">operator:x:<span class="number">11</span>:<span class="number">0</span>:operator:/root:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不加动作默认是打印</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;/root/&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">operator:x:<span class="number">11</span>:<span class="number">0</span>:operator:/root:/sbin/nologin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以理解为 匹配关键字 root 出现的行，过滤此行 以冒号 ：分割的第一列和最后一列</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F : &#x27;/root/&#123;print $1,$NF&#125;&#x27; awk_test.txt </span></span><br><span class="line">root /bin/bash</span><br><span class="line">operator /sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>.打印 <span class="number">1</span><span class="literal">-5</span> 行和以 root 开头的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;NR==1,NR==5;/^root/&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash<span class="comment"># 地址定位1-5行的时候打印一次</span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash<span class="comment"># 地址定位以root 开头的时候打印一次</span></span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin<span class="comment"># 地址定位1-5行的时候打印一次</span></span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin<span class="comment"># 地址定位1-5行的时候打印一次</span></span><br><span class="line">adm:x:<span class="number">3</span>:<span class="number">4</span>:adm:/var/adm:/sbin/nologin<span class="comment"># 地址定位1-5行的时候打印一次</span></span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin<span class="comment"># 地址定位1-5行的时候打印一次</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span>.以冒号 ：为分隔符取出第一行和最后一行，取出内容以 <span class="selector-tag">@</span> 隔开（注：OFS=<span class="string">&quot; &quot;</span> 为双引号，不可为单引号）</span><br><span class="line">下面两条命令效果相同，如果不定义分隔符的话，可以直接在打印的时候以 定义<span class="string">&quot;分隔符&quot;</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F : &#x27;BEGIN&#123;OFS=&quot;@&quot;&#125;;&#123;print $1,$NF&#125;&#x27; awk_test.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment">#  awk -F : &#x27;&#123;print $1&quot;@&quot;$NF&#125;&#x27; awk_test.txt </span></span><br><span class="line">root<span class="selector-tag">@</span>/bin/bash</span><br><span class="line">bin<span class="selector-tag">@</span>/sbin/nologin</span><br><span class="line">........ </span><br><span class="line">ntp<span class="selector-tag">@</span>/sbin/nologin</span><br><span class="line">Jermyn<span class="selector-tag">@</span>/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他方式</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F : &#x27;&#123;print &quot;用户名：&quot;$1&quot;\tSHELL解释器：&quot;$NF&#125;&#x27; awk_test.txt </span></span><br><span class="line">用户名：root    SHELL解释器：/bin/bash</span><br><span class="line">用户名：bin     SHELL解释器：/sbin/nologin</span><br><span class="line">用户名：daemon  SHELL解释器：/sbin/nologin</span><br><span class="line">用户名：adm     SHELL解释器：/sbin/nologin</span><br><span class="line">用户名：<span class="built_in">lp</span>      SHELL解释器：/sbin/nologin</span><br><span class="line">用户名：sync    SHELL解释器：/bin/sync</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>.下面两条命令效果相同</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;BEGIN&#123;FS=&quot;:&quot;;OFS=&quot;@&quot;&#125;;&#123;print $1,$NF&#125;&#x27; awk_test.txt </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F : &#x27;BEGIN&#123;OFS=&quot;@&quot;&#125;;&#123;print $1,$NF&#125;&#x27; awk_test.txt </span></span><br></pre></td></tr></table></figure><h4 id="awk工作原理"><a href="#awk工作原理" class="headerlink" title="awk工作原理"></a>awk工作原理</h4><p><code>awk -F: &#39;&#123;print $1,$3&#125;&#39; /etc/passwd</code></p><ol><li><p>awk使用一行作为输入，并将这一行赋给内部变量$0，每一行也可称为一个记录，以换行符(RS)结束</p></li><li><p>每行被间隔符    <strong>：</strong>  (默认为空格或制表符)分解成字段(或域)，每个字段存储在已编号的变量中，从$1开始</p><p>问：awk如何知道用空格来分隔字段的呢？</p><p>答：因为有一个内部变量 FS 来确定字段分隔符。初始时，FS赋为空格</p></li><li><p>awk使用print函数打印字段，打印出来的字段会以空格分隔，因为$1,$3之间有一个逗号。逗号比较特殊，它映射为另一个内部变量，称为 输出字段分隔符OFS，OFS默认为空格</p></li><li><p>awk处理完一行后，将从文件中获取另一行，并将其存储在$0中，覆盖原来的内容，然后将新的字符串分隔成字段并进行处理。该过程将持续到所有行处理完毕</p></li></ol><h4 id="awk使用进阶"><a href="#awk使用进阶" class="headerlink" title="awk使用进阶"></a>awk使用进阶</h4><p><strong>5.1 格式化输出<code>print</code>和<code>printf</code></strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">print函数类似<span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment"># date |awk &#x27;&#123;print &quot;Month: &quot;$2 &quot;\nYear: &quot;$NF&#125;&#x27;</span></span><br><span class="line"><span class="comment"># awk -F: &#x27;&#123;print &quot;username is: &quot; $1 &quot;\t uid is: &quot;$3&#125;&#x27; /etc/passwd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf函数类似<span class="built_in">echo</span> <span class="literal">-n</span></span><br><span class="line"><span class="comment"># awk -F: &#x27;&#123;printf &quot;%-15s %-10s %-15s\n&quot;, $1,$2,$3&#125;&#x27;  /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -F: &#x27;&#123;printf &quot;|%15s| %10s| %15s|\n&quot;, $1,$2,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -F: &#x27;&#123;printf &quot;|%-15s| %-10s| %-15s|\n&quot;, $1,$2,$3&#125;&#x27; /etc/passwd</span></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125;;&#123;printf &quot;%-15s %-15s %-15s\n&quot;,$1,$6,$NF&#125;&#x27;</span> a.txt</span><br><span class="line"></span><br><span class="line">%s 字符类型  strings%<span class="literal">-20s</span></span><br><span class="line">%d 数值类型</span><br><span class="line">占<span class="number">15</span>字符</span><br><span class="line">- 表示左对齐，默认是右对齐</span><br><span class="line">printf默认不会在行尾自动换行，加\n</span><br></pre></td></tr></table></figure><p><strong>5.2 定义变量</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># awk -v NUM=3 -F: &#x27;&#123; print $NUM &#125;&#x27; /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -v NUM=3 -F: &#x27;&#123; print NUM &#125;&#x27; /etc/passwd</span></span><br><span class="line"><span class="comment"># awk -v num=1 &#x27;BEGIN&#123;print num&#125;&#x27; </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="comment"># awk -v num=1 &#x27;BEGIN&#123;print $num&#125;&#x27; </span></span><br><span class="line">注意：</span><br><span class="line">awk中调用定义的变量不需要加<span class="variable">$</span></span><br></pre></td></tr></table></figure><p><strong>5.3 awk中BEGIN…END使用</strong></p><p>①BEGIN：表示在程序开始前执行</p><p>②END ：表示所有文件处理完后执行</p><p>③用法：<code>&#39;BEGIN&#123;开始处理之前&#125;;&#123;处理中&#125;;END&#123;处理结束后&#125;&#39;</code></p><p><strong>实例：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 打印最后一列和倒数第二列（登录shell和家目录）</span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">&#x27;BEGIN&#123; print &quot;Login_shell\t\tLogin_home\n***************************************&quot;&#125;;&#123;print $NF&quot;\t\t&quot;$(NF-1)&#125;;END&#123;print &quot;***************************************&quot;&#125;&#x27;</span> awk_test.txt </span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123; FS=&quot;:&quot;;print &quot;Login_shell\tLogin_home\n***************************************&quot;&#125;;&#123;print $NF&quot;\t&quot;$(NF-1)&#125;;END&#123;print &quot;***************************************&quot;&#125;&#x27;</span> awk_test.txt </span><br><span class="line"></span><br><span class="line">结果显示：</span><br><span class="line">Login_shell             Login_home</span><br><span class="line">***************************************</span><br><span class="line">/bin/bash               /root</span><br><span class="line">/sbin/nologin           /bin</span><br><span class="line">/sbin/nologin           /sbin</span><br><span class="line">/sbin/nologin           /var/adm</span><br><span class="line">............</span><br><span class="line">/sbin/nologin           /dev/null</span><br><span class="line">/sbin/nologin           /var/empty/sshd</span><br><span class="line">/sbin/nologin           /var/spool/postfix</span><br><span class="line">/sbin/nologin           /var/lib/chrony</span><br><span class="line">/sbin/nologin           /etc/ntp</span><br><span class="line">/bin/bash               /home/Jermyn</span><br><span class="line">***************************************</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.打印/etc/passwd里的用户名、家目录及登录shell</span><br><span class="line">awk <span class="operator">-F</span> <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;BEGIN&#123;print &quot;U_NAME\t\tH_DIR\t\t\tSHELL\n&quot;  &quot;*********************************************&quot;&#125;</span></span><br><span class="line"><span class="string">&#123;printf &quot;%-15s %-20s %-10s \n&quot;,$1,$(NF-1),$NF&#125;END&#123;print &quot;*********************************************&quot;&#125;&#x27;</span> awk_test.txt </span><br><span class="line"></span><br><span class="line">awk <span class="operator">-F</span>: <span class="string">&#x27;BEGIN&#123;OFS=&quot;\t\t&quot;;print&quot;u_name\t\th_dir\t\t\tshell\n</span></span><br><span class="line"><span class="string">*********************************************&quot;&#125;;</span></span><br><span class="line"><span class="string">&#123;printf &quot;%-15s %-20s %-10s\n&quot;,$1,$(NF-1),$NF&#125;;</span></span><br><span class="line"><span class="string">END&#123;print &quot;**********************************************&quot;&#125;&#x27;</span> awk_test.txt </span><br><span class="line"></span><br><span class="line">结果显示：</span><br><span class="line">U_NAME          H_DIR                   SHELL</span><br><span class="line">*********************************************</span><br><span class="line">root            /root                /bin/bash  </span><br><span class="line">bin             /bin                 /sbin/nologin </span><br><span class="line">.........</span><br><span class="line">chrony          /var/lib/chrony      /sbin/nologin </span><br><span class="line">ntp             /etc/ntp             /sbin/nologin </span><br><span class="line">Jermyn          /home/Jermyn         /bin/bash  </span><br><span class="line">*********************************************</span><br></pre></td></tr></table></figure><p><strong>5.4  awk和正则的综合运用</strong></p><div class="table-container"><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>~</td><td>匹配</td></tr><tr><td>!~</td><td>不匹配</td></tr><tr><td>!</td><td>逻辑非</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>\</td><td>\</td><td></td><td>逻辑或</td></tr></tbody></table></div><p><strong>实例：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.从第一行匹配到以 daemon 开头的行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;NR==1,/^daemon/&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.从第一行到第<span class="number">3</span>行 </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;NR==1,NR==3&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line">bin:x:<span class="number">1</span>:<span class="number">1</span>:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:<span class="number">2</span>:<span class="number">2</span>:daemon:/sbin:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.从以<span class="built_in">lp</span>开头的行匹配到第<span class="number">7</span>行</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;/^lp/,NR==7&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:<span class="number">5</span>:<span class="number">0</span>:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:<span class="number">6</span>:<span class="number">0</span>:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>.打印以root开头或者以<span class="built_in">lp</span>开头的行 </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;/^lp|^root/&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;/^lp/||/^root/&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/bin/bash</span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>.显示<span class="number">5</span><span class="literal">-10</span>行  </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;NR&gt;=5 &amp;&amp; NR&lt;=10&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line"><span class="built_in">lp</span>:x:<span class="number">4</span>:<span class="number">7</span>:<span class="built_in">lp</span>:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:<span class="number">5</span>:<span class="number">0</span>:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:<span class="number">6</span>:<span class="number">0</span>:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:<span class="number">7</span>:<span class="number">0</span>:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:<span class="number">8</span>:<span class="number">12</span>:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:<span class="number">11</span>:<span class="number">0</span>:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>.打印<span class="number">5</span><span class="literal">-10</span>行以shutdown结尾的内容：</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;NR&gt;=5 &amp;&amp; NR&lt;=10 &amp;&amp; $0~ /shutdown$/&#123;print $0&#125;&#x27; awk_test.txt </span></span><br><span class="line">shutdown:x:<span class="number">6</span>:<span class="number">0</span>:shutdown:/sbin:/sbin/shutdown</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk  &#x27;NR&gt;=5 &amp;&amp; NR&lt;=10 &amp;&amp; $0~ /shutdown$/&#x27; awk_test.txt</span></span><br><span class="line">shutdown:x:<span class="number">6</span>:<span class="number">0</span>:shutdown:/sbin:/sbin/shutdown</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>.awk 截取IP</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># ifconfig ens33 | awk -F &#x27; &#x27; &#x27;/netmask/&#123;print $2&#125;&#x27;</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.139</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># ifconfig ens33 | awk -F &quot; &quot; &#x27;/netmask/&#123;print $2RS$4RS$6&#125;&#x27;</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.139</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">88.255</span></span><br></pre></td></tr></table></figure><h4 id="awk的脚本编程"><a href="#awk的脚本编程" class="headerlink" title="awk的脚本编程"></a>awk的脚本编程</h4><p><strong>6.1 流程控制语句</strong></p><p><strong>6.1.1 if 结构</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>语句：</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="type">xxx</span> ];then</span><br><span class="line">xxx</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">awk 选项 <span class="string">&#x27;正则，地址定位&#123;awk语句&#125;&#x27;</span>  文件名</span><br><span class="line">&#123; <span class="keyword">if</span>(表达式)｛语句<span class="number">1</span>;语句<span class="number">2</span>;...｝&#125;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"><span class="number">1</span>.UID &gt;=<span class="number">500</span> &amp;&amp; UID &lt;=<span class="number">60000</span> </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;&#123; if($3&gt;=500 &amp;&amp; $3&lt;=60000) &#123;print $1,$3&#125;&#125;&#x27; awk_test.txt </span></span><br><span class="line">polkitd <span class="number">999</span></span><br><span class="line">chrony <span class="number">998</span></span><br><span class="line">Jermyn <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.格式打印</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;&#123; if($3==0) &#123;print $1&quot; IS ADMIN&quot;&#125;&#125;&#x27; awk_test.txt </span></span><br><span class="line">root IS ADMIN</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>.执行命令作为判断条件</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk &#x27;BEGIN&#123; if ( &#x27;$(id -u)&#x27; == 0) &#123;print &quot;THIS USER IS ADMIN&quot;&#125;&#125;&#x27;</span></span><br><span class="line">THIS USER IS ADMIN</span><br></pre></td></tr></table></figure><p><strong>6.1.2 if…else 结构</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if...else语句:</span><br><span class="line"><span class="keyword">if</span> [ <span class="type">xxx</span> ];then</span><br><span class="line">xxxxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">xxx</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">&#123;<span class="keyword">if</span>(表达式)｛语句;语句;...｝<span class="keyword">else</span>｛语句;语句;...&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.执行命令作为判断条件 if...else...结构</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk &#x27;BEGIN&#123; if ( &#x27;$[ id -u ]&#x27; != 0) &#123;print &quot;THIS USER IS NOT  ADMIN&quot;&#125; else &#123;print &quot;THIS USER IS ADMIN&quot;&#125; &#125;&#x27;</span></span><br><span class="line">THIS USER IS ADMIN</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2.如果 if($3&gt;=500 &amp;&amp; $3 !=65534 是普通用户 否则不是普通用户</span><br><span class="line">[root@Jermyn shell_scripts]# awk -F &#x27;:&#x27; &#x27;&#123; if($3&gt;=500 &amp;&amp; $3 !=65534 )  &#123;print $1&quot; Is a common user&quot;&#125; else &#123;print $1 &quot; Not ordinary users&quot;&#125;&#125;&#x27; awk_test.txt | tail</span><br><span class="line">nobody Not ordinary users</span><br><span class="line">systemd-network Not ordinary users</span><br><span class="line">dbus Not ordinary users</span><br><span class="line">polkitd Is a common user</span><br><span class="line">tss Not ordinary users</span><br><span class="line">sshd Not ordinary users</span><br><span class="line">postfix Not ordinary users</span><br><span class="line">chrony Is a common user</span><br><span class="line">ntp Not ordinary users</span><br><span class="line">Jermyn Is a common user</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上面例子可以规范格式，更加直观</span></span><br><span class="line">awk <span class="operator">-F</span> <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">if($3&gt;=500 &amp;&amp; $3 !=65534 )  </span></span><br><span class="line"><span class="string">&#123;print $1&quot; Is a common user&quot;&#125; </span></span><br><span class="line"><span class="string">else &#123;print $1 &quot; Not ordinary users&quot;&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> awk_test.txt | tail</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>.if( <span class="string">&#x27;$(id -u)&#x27;</span>&gt;=<span class="number">500</span> &amp;&amp; <span class="string">&#x27;$(id -u)&#x27;</span> !=<span class="number">65534</span> ) </span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk &#x27;BEGIN&#123;if( &#x27;$(id -u)&#x27;&gt;=500 &amp;&amp; &#x27;$(id -u)&#x27; !=65534 ) &#123;print &quot;是普通用户&quot;&#125; else &#123;print &quot;不是普通用户&quot;&#125;&#125;&#x27;</span></span><br><span class="line">不是普通用户</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上面例子可以规范格式，更加直观</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;</span></span><br><span class="line"><span class="string">if( &#x27;</span><span class="variable">$</span>(id <span class="literal">-u</span>)<span class="string">&#x27;&gt;=500 &amp;&amp; &#x27;</span><span class="variable">$</span>(id <span class="literal">-u</span>)<span class="string">&#x27; !=65534 ) </span></span><br><span class="line"><span class="string">&#123;print &quot;是普通用户&quot;&#125; </span></span><br><span class="line"><span class="string">else &#123;print &quot;不是普通用户&quot;&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>6.1.3   if…elif…else结构</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [<span class="type">xxxx</span>];then</span><br><span class="line">xxxx</span><br><span class="line">elif [<span class="type">xxx</span>];then</span><br><span class="line">xxx</span><br><span class="line">....</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">...</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if...else if...else语句：</span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">&#123; <span class="keyword">if</span>(表达式<span class="number">1</span>)｛语句;语句；...｝<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">2</span>)｛语句;语句；...｝<span class="keyword">else</span> <span class="keyword">if</span>(表达式<span class="number">3</span>)｛语句;语句；...｝<span class="keyword">else</span>｛语句;语句；...｝&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.判断用户是 管理员 还是 系统用户，还是 普通用户</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F: &#x27;&#123; if($3==0) &#123;print $1,&quot;:是管理员&quot;&#125; else if($3&gt;=1 &amp;&amp; $3&lt;=499 || $3==65534 ) &#123;print $1,&quot;:是系统用户&quot;&#125; else &#123;print $1,&quot;:是普通用户&quot;&#125;&#125;&#x27; awk_test.txt </span></span><br><span class="line">root :是管理员</span><br><span class="line">bin :是系统用户</span><br><span class="line">.......</span><br><span class="line">chrony :是普通用户</span><br><span class="line">ntp :是系统用户</span><br><span class="line">Jermyn :是普通用户</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="operator">-F</span> <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">if($3==0) </span></span><br><span class="line"><span class="string">&#123;print $1,&quot;:是管理员&quot;&#125; </span></span><br><span class="line"><span class="string">else if($3&gt;=1 &amp;&amp; $3&lt;=499 || $3==65534 ) </span></span><br><span class="line"><span class="string">&#123;print $1,&quot;:是系统用户&quot;&#125; </span></span><br><span class="line"><span class="string">else </span></span><br><span class="line"><span class="string">&#123;print $1,&quot;:是普通用户&quot;&#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> awk_test.txt </span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>.判断管理员 和 系统用户以及普通用户的个数</span><br><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F &#x27;:&#x27; &#x27;&#123;if ($3==0) &#123;i++&#125; else if ( $3&gt;=1 &amp;&amp; $3&lt;=499 || $3==65534 ) &#123;j++&#125; else &#123;k++&#125;&#125;;END&#123;print &quot;管理员个数为:&quot;i &quot;\n系统用户个数为:&quot;j&quot;\n普通用 户的个数为:&quot;k&#125;&#x27; awk_test.txt </span></span><br><span class="line">管理员个数为:<span class="number">1</span></span><br><span class="line">系统用户个数为:<span class="number">18</span></span><br><span class="line">普通用户的个数为:<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上面例子可以规范格式，更加直观</span></span><br><span class="line">awk <span class="operator">-F</span> <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">if ($3==0) </span></span><br><span class="line"><span class="string">&#123;i++&#125; </span></span><br><span class="line"><span class="string">else if ( $3&gt;=1 &amp;&amp; $3&lt;=499 || $3==65534 ) </span></span><br><span class="line"><span class="string">&#123;j++&#125; </span></span><br><span class="line"><span class="string">else </span></span><br><span class="line"><span class="string">&#123;k++&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">END&#123;print &quot;管理员个数为:&quot;i &quot;\n系统用户个数为:&quot;j&quot;\n普通用户的个数为:&quot;k&#125;&#x27;</span> awk_test.txt</span><br></pre></td></tr></table></figure><p><strong>6.2  循环语句</strong></p><p><strong>6.2.1 for循环</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1~5</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++));<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>;done</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk 打印 1-5</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN &#123; for(i=1;i&lt;=5;i++) &#123;print i&#125; &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印1~10中的奇数</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i+=<span class="number">2</span>));<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>;done|awk <span class="string">&#x27;&#123;sum+=$0&#125;;END&#123;print sum&#125;&#x27;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123; for(i=1;i&lt;=10;i+=2) &#123;print i&#125; &#125;&#x27;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123; for(i=1;i&lt;=10;i+=2) print i &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算1-5的和</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;sum=0;for(i=1;i&lt;=5;i++) sum+=i;print sum&#125;&#x27;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;for(i=1;i&lt;=5;i++) (sum+=i);&#123;print sum&#125;&#125;&#x27;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;for(i=1;i&lt;=5;i++) (sum+=i);print sum&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>6.2.2 while 循环</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印1-5</span></span><br><span class="line">i=<span class="number">1</span>;<span class="keyword">while</span> ((<span class="variable">$i</span>&lt;=<span class="number">5</span>));<span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>;let i++;done</span><br><span class="line"></span><br><span class="line"><span class="comment"># awk while 循环打印 1-5</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN &#123; i=1;while(i&lt;=5) &#123;print i;i++&#125; &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印1~10中的奇数</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;i=1;while(i&lt;=10) &#123;print i;i+=2&#125; &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算1-5的和</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;i=1;sum=0;while(i&lt;=5) &#123;sum+=i;i++&#125;; print sum &#125;&#x27;</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN &#123;i=1;while(i&lt;=5) &#123;(sum+=i) i++&#125;;print sum &#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>6.2.3 嵌套循环</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">嵌套循环：</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> ((y=<span class="number">1</span>;y&lt;=<span class="number">5</span>;y++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">for</span> ((x=<span class="number">1</span>;x&lt;=<span class="variable">$y</span>;x++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-n</span> <span class="variable">$x</span></span><br><span class="line">done</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123; for(y=1;y&lt;=5;y++) &#123;for(x=1;x&lt;=y;x++) &#123;printf x&#125; ;print &#125; &#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk &#x27;BEGIN &#123; for(y=1;y&lt;=5;y++) &#123; for(x=1;x&lt;=y;x++) &#123;printf x&#125;;print&#125; &#125;&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># awk &#x27;BEGIN&#123; y=1;while(y&lt;=5) &#123; for(x=1;x&lt;=y;x++) &#123;printf x&#125;;y++;print&#125;&#125;&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"></span><br><span class="line">尝试用三种方法打印<span class="number">99</span>口诀表：</span><br><span class="line"><span class="comment">#awk &#x27;BEGIN&#123;for(y=1;y&lt;=9;y++) &#123; for(x=1;x&lt;=y;x++) &#123;printf x&quot;*&quot;y&quot;=&quot;x*y&quot;\t&quot;&#125;;print&#125; &#125;&#x27;</span></span><br><span class="line"><span class="comment">#awk &#x27;BEGIN&#123;for(y=1;y&lt;=9;y++) &#123; for(x=1;x&lt;=y;x++) printf x&quot;*&quot;y&quot;=&quot;x*y&quot;\t&quot;;print&#125; &#125;&#x27;</span></span><br><span class="line"><span class="comment">#awk &#x27;BEGIN&#123;i=1;while(i&lt;=9)&#123;for(j=1;j&lt;=i;j++) &#123;printf j&quot;*&quot;i&quot;=&quot;j*i&quot;\t&quot;&#125;;print;i++ &#125;&#125;&#x27;</span></span><br><span class="line"><span class="comment">#awk &#x27;BEGIN&#123;for(i=1;i&lt;=9;i++)&#123;j=1;while(j&lt;=i) &#123;printf j&quot;*&quot;i&quot;=&quot;i*j&quot;\t&quot;;j++&#125;;print&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">循环的控制：</span><br><span class="line"><span class="keyword">break</span>条件满足的时候中断循环</span><br><span class="line"><span class="keyword">continue</span>条件满足的时候跳过循环</span><br><span class="line"><span class="comment"># awk &#x27;BEGIN&#123;for(i=1;i&lt;=5;i++) &#123;if(i==3) break;print i&#125; &#125;&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="comment"># awk &#x27;BEGIN&#123;for(i=1;i&lt;=5;i++)&#123;if(i==3) continue;print i&#125;&#125;&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>6.3 awk算数运算</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ - * / %(模) ^(幂<span class="number">2</span>^<span class="number">3</span>)</span><br><span class="line">可以在模式中执行计算，awk都将按浮点数方式执行算术运算</span><br><span class="line"><span class="comment"># awk &#x27;BEGIN&#123;print 1+1&#125;&#x27;</span></span><br><span class="line"><span class="comment"># awk &#x27;BEGIN&#123;print 1**1&#125;&#x27;</span></span><br><span class="line"><span class="comment"># awk &#x27;BEGIN&#123;print 2**3&#125;&#x27;</span></span><br><span class="line"><span class="comment"># awk &#x27;BEGIN&#123;print 2/3&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="统计案例"><a href="#统计案例" class="headerlink" title="统计案例"></a>统计案例</h4><p><strong>7.1 统计系统中各种类型的shell</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># awk -F: &#x27;&#123; shells[$NF]++ &#125;;END&#123;for (i in shells) &#123;print i,shells[i]&#125; &#125;&#x27; /etc/passwd</span></span><br><span class="line">/bin/sync <span class="number">1</span></span><br><span class="line">/bin/bash <span class="number">2</span></span><br><span class="line">/sbin/nologin <span class="number">17</span></span><br><span class="line">/sbin/halt <span class="number">1</span></span><br><span class="line">/sbin/shutdown <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">解释：此命令目的是打印出 shell 解释器的数量</span><br><span class="line">关键在于创建一个关联数组 shells</span><br><span class="line"><span class="variable">$NF</span> 是每行的最后一列即是 shell 解释器</span><br><span class="line">shells[<span class="variable">$NF</span>] 中 <span class="variable">$NF</span> 可以理解为下标，也可以理解为是 KEY 值 </span><br><span class="line">每行在执行的时候就是 shells[/<span class="type">bin</span>/<span class="type">sync</span>]  ........</span><br><span class="line">++ 可以理解为是 KEY 对应的 VALUE 值，每次相同的时候就 ++ 即对相同的解释器进行累加</span><br><span class="line">后面的 <span class="keyword">for</span> 循环可以理解为 <span class="keyword">for</span> i <span class="keyword">in</span> shells.KEY</span><br><span class="line">循环遍历数组内的下标</span><br><span class="line">所以 i 就是下标或者理解为 KEY</span><br><span class="line">所以 shells[<span class="type">i</span>] 就是 shells[<span class="type">KEY</span>] 可以理解为 KEY.VALUE</span><br></pre></td></tr></table></figure><p><strong>7.2 统计网站访问状态</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">Jermyn</span> <span class="type">shell_scripts</span>]<span class="comment"># ss -antp | grep 22 | awk &#x27;&#123;states[$1]++&#125;;END&#123;for (i in states) &#123;print i,states[i]&#125;&#125;&#x27; | sort -nr -t &#x27; &#x27; -k 2</span></span><br><span class="line">LISTEN <span class="number">2</span></span><br><span class="line">ESTAB <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>7.3  统计访问网站的每个IP的数量</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat -ant |grep :80 |awk -F: &#x27;&#123;ip_count[$8]++&#125;;END&#123;for(i in ip_count)&#123;print i,ip_count[i]&#125; &#125;&#x27; |sort</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ss -an |grep :80 | awk -F&quot;:&quot; &#x27;!/LISTEN/&#123;ip_count[$(NF-1)]++&#125;;END&#123;for(i in ip_count)&#123;print i,ip_count[i]&#125;&#125;&#x27; |sort -k2 -rn |head</span></span><br></pre></td></tr></table></figure><p><strong>7.4  统计网站日志中PV量</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">统计Apache/Nginx日志中某一天的PV量 　&lt;统计日志&gt;</span><br><span class="line"><span class="comment"># grep &#x27;27/Jul/2017&#x27; mysqladmin.cc-access_log |wc -l</span></span><br><span class="line"><span class="number">14519</span></span><br><span class="line"></span><br><span class="line">统计Apache/Nginx日志中某一天不同IP的访问量　&lt;统计日志&gt;</span><br><span class="line"><span class="comment"># grep &#x27;27/Jul/2017&#x27; mysqladmin.cc-access_log |awk &#x27;&#123;ips[$1]++&#125;;END&#123;for(i in ips)&#123;print i,ips[i]&#125; &#125;&#x27; |sort -k2 -rn |head</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grep &#x27;07/Aug/2017&#x27; access.log |awk &#x27;&#123;ips[$1]++&#125;;END&#123;for(i in ips)&#123;print i,ips[i]&#125; &#125;&#x27; |awk &#x27;$2&gt;100&#x27; |sort -k2 -rn</span></span><br></pre></td></tr></table></figure><p><strong>名词解释：</strong></p><blockquote><p>网站浏览量（PV）<br>名词：PV=PageView (网站浏览量)<br>说明：指页面的浏览次数，用以衡量网站用户访问的网页数量。多次打开同一页面则浏览量累计。用户每打开一个页面便记录1次PV。</p><p>名词：VV = Visit View（访问次数）<br>说明：从访客来到您网站到最终关闭网站的所有页面离开，计为1次访问。若访客连续30分钟没有新开和刷新页面，或者访客关闭了浏览器，则被计算为本次访问结束。</p><p>独立访客（UV）<br>名词：UV= Unique Visitor（独立访客数）<br>说明：1天内相同的访客多次访问您的网站只计算1个UV。</p><p>独立IP（IP）<br>名词：IP=独立IP数<br>说明：指1天内使用不同IP地址的用户访问网站的数量。同一IP无论访问了几个页面，独立IP数均为1</p></blockquote>]]></content>
    
    
    <summary type="html">shell脚本学习笔记，学完可自行编写shell脚本</summary>
    
    
    
    <category term="Linux" scheme="https://www.jermyn.cn/categories/Linux/"/>
    
    
    <category term="shell脚本" scheme="https://www.jermyn.cn/tags/shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>kafka基本操作</title>
    <link href="https://www.jermyn.cn/posts/c9d2.html"/>
    <id>https://www.jermyn.cn/posts/c9d2.html</id>
    <published>2022-08-26T20:13:37.000Z</published>
    <updated>2023-05-28T15:04:33.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka命令行操作"><a href="#Kafka命令行操作" class="headerlink" title="Kafka命令行操作"></a>Kafka命令行操作</h1><h2 id="创建-topic"><a href="#创建-topic" class="headerlink" title="创建 topic"></a>创建 topic</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-topics</span>.sh <span class="literal">--zookeeper</span> master:<span class="number">2181</span>,slave1:<span class="number">2181</span>,slave2:<span class="number">2181</span> <span class="literal">--create</span> <span class="literal">--replication-factor</span> <span class="number">3</span> <span class="literal">--partitions</span> <span class="number">3</span> <span class="literal">--topic</span> test_2</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/Y2Ye0lbX.png" alt="image-20220514215128761"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">--replication-factor</span> 副本数量</span><br><span class="line"><span class="literal">--partitions</span> 分区数量</span><br><span class="line"><span class="literal">--topic</span> topic 名称</span><br></pre></td></tr></table></figure><ul><li><p>手动指定副本的存储位置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-topics</span>.sh <span class="literal">--create</span> <span class="literal">--topic</span> test_3 <span class="literal">--zookeeper</span> master:<span class="number">2181</span> <span class="literal">--replica-assignment</span> <span class="number">0</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/JkZmObVt.png" alt="image-20220514215233630.png"></p></li></ul><h2 id="删除-topic"><a href="#删除-topic" class="headerlink" title="删除 topic"></a>删除 topic</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-topics</span>.sh  <span class="literal">--delete</span> <span class="literal">--topic</span> tpc_1 <span class="literal">--zookeeper</span> master：<span class="number">2181</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异步线程去删除）删除 topic,需要一个参数处于启用状态: delete.topic.enable = true,否则删不掉</span><br></pre></td></tr></table></figure><h2 id="查看-topic"><a href="#查看-topic" class="headerlink" title="查看 topic"></a>查看 topic</h2><ul><li><p>列出当前系统中的所有 topic </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka<span class="literal">-topics</span>.sh <span class="literal">--list</span> <span class="literal">--zookeeper</span> master:<span class="number">2181</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/rOh4L5F5.png" alt="image-20220514215549569"></p></li><li><p>查看 topic 详细信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-topics</span>.sh <span class="literal">--create</span> <span class="literal">--topic</span> tpc_1   <span class="literal">--zookeeper</span> master:<span class="number">2181</span> <span class="literal">--replica-assignment</span> <span class="number">0</span>:<span class="number">1</span>,<span class="number">1</span>:<span class="number">2</span></span><br><span class="line"></span><br><span class="line">./kafka<span class="literal">-topics</span>.sh <span class="literal">--describe</span> <span class="literal">--topic</span> tpc_1 <span class="literal">--zookeper</span> master:<span class="number">2181</span> </span><br></pre></td></tr></table></figure></li></ul><h2 id="增加分区数"><a href="#增加分区数" class="headerlink" title="增加分区数"></a>增加分区数</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-topics</span>.sh <span class="literal">--alter</span> <span class="literal">--topic</span> test_3 <span class="literal">--partitions</span> <span class="number">3</span> <span class="literal">--zookeeper</span> master:<span class="number">2181</span></span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/bVgH0zqM.png" alt="image-20220514215930035"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kafka 只支持增加分区,不支持减少分区</span><br></pre></td></tr></table></figure><h2 id="动态配置-topic-参数"><a href="#动态配置-topic-参数" class="headerlink" title="动态配置 topic 参数"></a>动态配置 topic 参数</h2><ul><li><p>通过管理命令,可以为已创建的 topic 增加、修改、删除 topic level 参数</p></li><li><p>添加、修改配置参数（开启压缩发送传输种提高kafka消息吞吐量的有效办法(‘gzip’, ‘snappy’, ‘lz4’, ‘zstd’)）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-configs</span>.sh <span class="literal">--zookeeper</span> master:<span class="number">2181</span> <span class="literal">--entity-type</span> topics <span class="literal">--entity-name</span> tpc_1 <span class="literal">--alter</span> <span class="literal">--add-config</span> compression.type=gzip </span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/sNr614B4.png" alt="image-20220514220000191"></p></li><li><p>删除配置参数</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-configs</span>.sh <span class="literal">--zookeeper</span> master:<span class="number">2181</span> <span class="literal">--entity-type</span> topics <span class="literal">--entity-name</span> tpc_1 <span class="literal">--alter</span> <span class="literal">--delete-config</span> compression.type</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/RHvjJY8P.png" alt="image-20220514220029815"></p></li></ul><h2 id="Kafka命令行生产者与消费者操作"><a href="#Kafka命令行生产者与消费者操作" class="headerlink" title="Kafka命令行生产者与消费者操作"></a>Kafka命令行生产者与消费者操作</h2><ul><li><p>生产者:kafka-console-producer</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-console-producer</span>.sh <span class="literal">--broker-list</span> master:<span class="number">9092</span>, slave1:<span class="number">9092</span>, slave2:<span class="number">9092</span> <span class="literal">--topic</span> tpc_1</span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/sNr614B4.png" alt="image-20220514214530805"></p></li><li><p>消费者:kafka-console-consumer</p></li><li><p>消费消息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-console-consumer</span>.sh <span class="literal">--bootstrap-server</span> master:<span class="number">9092</span>, slave1:<span class="number">9092</span>, slave2:<span class="number">9092</span> <span class="literal">--topic</span> tpc_1 <span class="literal">--from-beginning</span></span><br></pre></td></tr></table></figure></li><li><p>指定要消费的分区,和要消费的起始 offset </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-console-consumer</span>.sh <span class="literal">--bootstrap-server</span> master:<span class="number">9092</span>,slave1:<span class="number">9092</span>,slave2:<span class="number">9092</span> <span class="literal">--topic</span> tcp_1 <span class="literal">--offset</span> <span class="number">2</span> <span class="literal">--partition</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="配置管理-kafka-configs"><a href="#配置管理-kafka-configs" class="headerlink" title="配置管理 kafka-configs"></a>配置管理 kafka-configs</h2><ul><li><p>比如查看 topic 的配置可以按如下方式执行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-configs</span>.sh zookeeper master: <span class="number">2181</span> <span class="literal">--describe</span> <span class="literal">--entity-type</span> topics <span class="literal">--entity-name</span> tpc_2 </span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2022/08/25/xh9VTPfX.png" alt="image-20220514220122026"></p></li><li><p>比如查看 broker 的动态配置可以按如下方式执行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka<span class="literal">-configs</span>.sh zookeeper master: <span class="number">2181</span> <span class="literal">--describe</span> <span class="literal">--entity-type</span> brokers <span class="literal">--entity-name</span> <span class="number">0</span> <span class="literal">--zookeeper</span> master:<span class="number">2181</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.328888.xyz/2022/08/25/wrVsd.png" alt="image-20220514220138188"></p></li></ul><h1 id="Kafka生产者api示例"><a href="#Kafka生产者api示例" class="headerlink" title="Kafka生产者api示例"></a>Kafka生产者api示例</h1><h2 id="生产者api示例"><a href="#生产者api示例" class="headerlink" title="生产者api示例"></a>生产者api示例</h2><p>一个正常的生产逻辑需要具备以下几个步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1)配置生产者客户端参数及创建相应的生产者实例</span><br><span class="line">(2)构建待发送的消息</span><br><span class="line">(3)发送消息</span><br><span class="line">(4)关闭生产者实例</span><br></pre></td></tr></table></figure><ul><li>示例代码（部分截取）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 kafka 集群的地址</span></span><br><span class="line">props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;master:9092,slave1:9092,slave2:9092&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ack 模式,取值有 0,1,-1(all) , all 是最慢但最安全的，</span></span><br><span class="line">props.put(“acks”, “all”); </span><br><span class="line"></span><br><span class="line"><span class="comment">//失败重试次数-&gt;失败会自动重试（可恢复/不可恢复）--&gt;(有可能会造成数据的乱序)</span></span><br><span class="line">props.put(“retries”, <span class="number">3</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//数据发送的批次大小提高效率/吞吐量太大会数据延迟</span></span><br><span class="line">props.put(“batch.size”, <span class="number">10</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//消息在缓冲区保留的时间,超过设置的值就会被提交到服务端</span></span><br><span class="line">props.put(<span class="string">&quot;linger.ms&quot;</span>, <span class="number">10000</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//数据发送请求的最大缓存数</span></span><br><span class="line">props.put(<span class="string">&quot;max.request.size&quot;</span>,<span class="number">10</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//整个 Producer 用到总内存的大小,如果缓冲区满了会提交数据到服务端 buffer.memory 要大于 batch.size,否则会报申请内存不足的错误降低阻塞的可能性</span></span><br><span class="line">props.put(“buffer.memory”, <span class="number">10240</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//key-value序列化器</span></span><br><span class="line">props.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串最好</span></span><br><span class="line">props.put(“value.serializer”, “org.apache.kafka.common.serialization.StringSerializer”);</span><br></pre></td></tr></table></figure><ul><li>消息对象 ProducerRecord,它并不是单纯意义上的消息,它包含了多个属性,原本需要发送的与业务关的消息体只是其中的一个 value 属性 ,比“ Hello, rgzn!”只是 ProducerRecord 对象的一个属性。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ProducerRecord 类的定义如下:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerRecord</span>&lt;K, V&gt; &#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String topic; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Integer partition;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Headers headers; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> K key; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> V value; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Long timestamp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="必要参数配置"><a href="#必要参数配置" class="headerlink" title="必要参数配置"></a>必要参数配置</h2><ul><li>在创建真正的生产者实例前需要配置相应的参数,比如需要连接的 Kafka 集群地址。在 Kafka 生产者客户端 KatkaProducer 中有 3 个参数是必填的。</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* bootstrap.servers </span><br><span class="line">* key.serializer </span><br><span class="line">* value.serializer</span><br></pre></td></tr></table></figure><ul><li>为了防止参数名字符串书写错误,可以使用如下方式进行设置: </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG,ProducerInterceptorPrefix.class.getName());</span><br><span class="line">props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">&quot;master:9092,slave1:9092&quot;</span>); </span><br><span class="line">props.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName()); props.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,StringSerializer.class.getName());</span><br></pre></td></tr></table></figure><h2 id="生产者api参数发送方式"><a href="#生产者api参数发送方式" class="headerlink" title="生产者api参数发送方式"></a>生产者api参数发送方式</h2><p>这个客户端经过了生产环境测试并且通常情况它比原来Scals客户端更加快速、功能更加齐全。你可以通过添加以下示例的Maven坐标到客户端依赖中来使用这个新的客户端（你可以修改版本号来使用新的发布版本）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="发后即忘-fire-and-forget"><a href="#发后即忘-fire-and-forget" class="headerlink" title="发后即忘( fire-and-forget)"></a>发后即忘( fire-and-forget)</h3><p>发后即忘,它只管往 Kafka 发送,并不关心消息是否正确到达。在大多数情况下,这种发送方式没有问题; 不过在某些时候(比如发生不可重试异常时)会造成消息的丢失。这种发送方式的性能最高,可靠性最差。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;RecordMetadata&gt; send = producer.send(rcd);</span><br></pre></td></tr></table></figure><h3 id="同步发送-sync"><a href="#同步发送-sync" class="headerlink" title="同步发送(sync )"></a>同步发送(sync )</h3><p>0.8.x 前,有一个参数 producer.type=sycn|asycn 来决定生产者的发送模式;现已失效(新版中,producer 在底层只有异步)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">producer.send(rcd).get(); </span><br><span class="line">&#125; catch (Exception e) &#123; </span><br><span class="line">e.printStackTrace();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在调用 <code>send</code> 方法后可以接着调用 <code>get()</code> 方法，<code>send</code> 方法的返回值是一个 Future\对象，RecordMetadata 里面包含了发送消息的主题、分区、偏移量等信息。改写后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(topicName, <span class="string">&quot;k&quot;</span> + i, <span class="string">&quot;world&quot;</span> + i);</span><br><span class="line">        <span class="comment">/*同步发送消息*/</span></span><br><span class="line">        <span class="type">RecordMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> producer.send(record).get();</span><br><span class="line">        System.out.printf(<span class="string">&quot;topic=%s, partition=%d, offset=%s \n&quot;</span>,</span><br><span class="line">                metadata.topic(), metadata.partition(), metadata.offset());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时得到的输出如下：偏移量和调用次数有关，所有记录都分配到了 0 分区，这是因为在创建 <code>Hello-Kafka</code> 主题时候，使用 <code>--partitions</code> 指定其分区数为 1，即只有一个分区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">topic=Hello-Kafka, partition=0, offset=40 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=41 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=42 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=43 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=44 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=45 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=46 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=47 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=48 </span><br><span class="line">topic=Hello-Kafka, partition=0, offset=49</span><br></pre></td></tr></table></figure><h3 id="异步发送-async"><a href="#异步发送-async" class="headerlink" title="异步发送(async )"></a>异步发送(async )</h3><p>回调函数会在 producer 收到 ack 时调用,为异步调用,该方法有两个参数,分别是 RecordMetadata 和Exception,如果 Exception 为 null,说明消息发送成功,如果 Exception 不为 null,说明消息发送失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意:消息发送失败会自动重试,不需要我们在回调函数中手动重试</span><br></pre></td></tr></table></figure><p>通常我们并不关心发送成功的情况，更多关注的是失败的情况，因此 Kafka 提供了异步发送和回调函数。 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    ProducerRecord&lt;String, String&gt; record = <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(topicName, <span class="string">&quot;k&quot;</span> + i, <span class="string">&quot;world&quot;</span> + i);</span><br><span class="line">    <span class="comment">/*异步发送消息，并监听回调*/</span></span><br><span class="line">    producer.send(record, <span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;进行异常处理&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;topic=%s, partition=%d, offset=%s \n&quot;</span>,</span><br><span class="line">                        metadata.topic(), metadata.partition(), metadata.offset());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产者原理解析"><a href="#生产者原理解析" class="headerlink" title="生产者原理解析"></a>生产者原理解析</h2><p><img src="https://img1.imgtp.com/2022/08/25/yGrmg5cE.png" alt="image-20220514225146784.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">0、新建kafka生产实例，参数也是放在kafkaProducer里面</span><br><span class="line"></span><br><span class="line">1、Producerinterceptor拦截器，设置特定的规则对消息进行拦截，可以通过指定的消息</span><br><span class="line"></span><br><span class="line">2.Serializer序列化器，创建生产者对象时必须指定序列化器，作用就是将key和value转换为二进制</span><br><span class="line"></span><br><span class="line">3.Partitioner，topic中有分区，如何分发就是通过此处有规划的分发数据</span><br><span class="line"></span><br><span class="line">4.1 RecordAccumulator消息累加器，其中有多个分区，对于每个分区，都会单独维护主要用来缓存消息以便 Sender 线程可以批量发送, 进而减少网络传输的资源消耗以提升性能。</span><br><span class="line"></span><br><span class="line">4.2 RecordAccumulator 缓存的大小可以通过生产者客户端参数 buffer.memory 配 置, 默认值为 33554432B ,即 32M。</span><br><span class="line"></span><br><span class="line">4.3 如果生产者发送消息的速度超过发送到服务器的速度,则会导致生产者空间不足,这个时KafkaProducer.send()方法调用要么被阻塞,要么抛出异常,这个取决于参数max.block.ms 的配置,此参数的默认值为 60000,即 60 秒。（此配置可以理解为阻塞时间，在这个范围内不会抛出异常）</span><br><span class="line"></span><br><span class="line">4.4主线程中发送过来的消息都会被迫加到 RecordAccumulator 的某个双端队列(Deque )中,RecordAccumulator 内部为每个分区都维护了一个双端队列,即Deque&lt;ProducerBatch&gt;。消息写入缓存时,追加到双端队列的尾部;</span><br><span class="line"></span><br><span class="line">4.5、 Sender 读取消息时,从双端队列的头部读取。</span><br><span class="line"></span><br><span class="line">4.6 注意:ProducerBatch 是指一个消息批次; 与此同时,会将较小的 ProducerBatch凑成一个较ProducerBatch ,也可以减少网络请求的次数以提升整体的吞吐量。</span><br><span class="line"></span><br><span class="line">4.7 ProducerBatch 大小和 batch.size 参数也有着密切的关系。</span><br><span class="line"></span><br><span class="line">4.8 当一条消息(ProducerRecord ) 流入RecordAccumulator 时,会先寻找与消息分区所对应的双端队列(如果没有则新建),再从这个双端队列的尾部获取一个ProducerBatch (如果没有则新建),查看 ProducerBatch 中是否还可以写入这个ProducerRecord,如果可以写入,如果不可以则需要创建一个新的 Producer Batch。</span><br><span class="line"></span><br><span class="line">4.9 在新建ProducerBatch 时评估这条消息的大小是否超过 batch.size 参数大小, 如果不超过, 那么就以 batch.size 参数的大小来创建 ProducerBatch。</span><br><span class="line"></span><br><span class="line">4.10 如果生产者客户端需要向很多分区发送消息, 则可以将 buffer.memory 参数适当调大以增加整体的吞吐量</span><br><span class="line">6.1、 Sender 从 RecordAccumulator 获取缓存的消息之后,会进一步将&lt;分区,Deque&lt;Producer Batch&gt;&gt;的形式转变成&lt;Node,List&lt;ProducerBatch&gt;的形式,其中 Node 表示 Kafka 集群 broker 节点。</span><br><span class="line"></span><br><span class="line">6.2 对于网络连接来说,生产者客户端是与具体 broker 节点建立的连接,也就是向具体的 broker 节点发送消息,而并不关心消息属于哪一个分区;</span><br><span class="line"></span><br><span class="line">6.3 、 而对于 KafkaProducer 的应用逻辑而言,我们只关注向哪个分区中发送哪些消息,所以在这里需要做一个应用逻辑层面到网络 I/O层面的转换。</span><br><span class="line"></span><br><span class="line">6.4 在转换成&lt;Node, List&lt;ProducerBatch&gt;&gt;的形式之后, Sender 会进一步封装成&lt;Node,Request&gt; 的形式, 这样就可以将 Request 请求发往各个 Node 了,这里的 Request 是 Kafka 各种协议请求;</span><br><span class="line"></span><br><span class="line">6.5 下一步直接就可以从Request 发送到 Selector 在转到 kafka集群</span><br><span class="line"></span><br><span class="line">7.1 缓存操作可以理解为当请求 从 sender 发送给 kafka 集群时候，sender 是不知道是否成功发送，即kafka 是否接收到消息，所以此功能是，当sender只要给 kafka 发送请求，此消息就同步InFlightRequests</span><br><span class="line"></span><br><span class="line">7.2 请求在从 sender 线程发往 Kafka 之前还会保存到InFlightRequests 中,InFlightRequests 保存对象的具体形式为Map&lt;Nodeld, Deque&lt;request&gt;&gt;,它的主要作用是缓存了已经发出去但还没有收到服务端响应的请求(Nodeld 是一个 String 类型,表示节点的 id 编号)。</span><br><span class="line"></span><br><span class="line">7.3 与此同时,InFlightRequests 还提供了许多管理类的方法,并且通过配置参数还可以限制每个连接(也就是客户端与 Node 之间的连接) 最多缓存的请求数。</span><br><span class="line"></span><br><span class="line">7.4 这个配置参数为 max.in.flight.request.per. connection ,默认值为 5,即每个连接最多只能缓存 5 个未响应的请求,超过该数值之后就不能再向这个连接发送更多的请求了,除非有缓存的请求收到了响应</span><br><span class="line">( Response )。</span><br><span class="line"></span><br><span class="line">8.1 提交到selector 准备发送</span><br><span class="line"></span><br><span class="line">9、发送到 kafka集群</span><br><span class="line"></span><br><span class="line">10、当 kafka 集群受到消息 ，集群响应，返回给selector</span><br><span class="line"></span><br><span class="line">11.1、selector 回复给 InFlightRequests</span><br><span class="line"></span><br><span class="line">11.2、如果没有受到响应， request 则会在 InFlightRequests 一直缓存</span><br><span class="line">11.3 通过比较 Deque&lt;Request&gt; 的 size 与这个参数的大小来判断对应的 Node中是否己经堆积了很多未响应的消息, 如果真是如此, 那么说明这个 Node 节点负载较大或网络连接有问题,再继其发送请求会增大请求超时的可能。</span><br></pre></td></tr></table></figure><h1 id="消费者API"><a href="#消费者API" class="headerlink" title="消费者API"></a>消费者API</h1><p>一个正常的消费逻辑需要具备以下几个步骤: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1)配置消费者客户端参数</span><br><span class="line">(2)创建相应的消费者实例; </span><br><span class="line">(3)订阅主题; </span><br><span class="line">(4)拉取消息并消费; </span><br><span class="line">(5)提交消费位移 offset;</span><br><span class="line">(6)关闭消费者实例。</span><br></pre></td></tr></table></figure><ul><li>消费者API示例代码（部分截取）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 kakfa 服务的地址,不需要将所有 broker 指定上</span></span><br><span class="line">props.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;master:9092&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定 consumer group </span></span><br><span class="line">props.put(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;g1&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否自动提交 offset </span></span><br><span class="line">props.put(<span class="string">&quot;enable.auto.commit&quot;</span>, <span class="string">&quot;true&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动提交 offset 的时间间隔</span></span><br><span class="line">props.put(<span class="string">&quot;auto.commit.interval.ms&quot;</span>, <span class="string">&quot;1000&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// key 的反序列化类</span></span><br><span class="line">props.put(<span class="string">&quot;key.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// value 的反序列化类</span></span><br><span class="line">props.put(<span class="string">&quot;value.deserializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有消费偏移量记录,则自动重设为起始 offset:latest, earliest, none</span></span><br><span class="line"><span class="comment">//Earliest目前状态下最前面的一条消息（日志在一定保存时间后会自动清空）</span></span><br><span class="line"><span class="comment">//none（上次记录的偏移量，如果没有，会抛异常） </span></span><br><span class="line">props.put(<span class="string">&quot;auto.offset.reset&quot;</span>,<span class="string">&quot;earliest&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 consumer KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(props); </span></span><br><span class="line"><span class="comment">// 消费者订阅的 topic, 可同时订阅多个</span></span><br><span class="line">consumer.subscribe(Arrays.asList(<span class="string">&quot;first&quot;</span>, <span class="string">&quot;test&quot;</span>,<span class="string">&quot;test1&quot;</span>)); </span><br></pre></td></tr></table></figure><h2 id="Kafka消费者可选属性"><a href="#Kafka消费者可选属性" class="headerlink" title="Kafka消费者可选属性"></a>Kafka消费者可选属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1. fetch.min.byte</span><br><span class="line">消费者从服务器获取记录的最小字节数。如果可用的数据量小于设置值，broker 会等待有足够的可用数据时才会把它返回给消费者。</span><br><span class="line"></span><br><span class="line">2. fetch.max.wait.ms</span><br><span class="line">broker 返回给消费者数据的等待时间，默认是 500ms。</span><br><span class="line"></span><br><span class="line">3. max.partition.fetch.bytes</span><br><span class="line">该属性指定了服务器从每个分区返回给消费者的最大字节数，默认为 1MB。</span><br><span class="line"></span><br><span class="line">4. session.timeout.ms</span><br><span class="line">消费者在被认为死亡之前可以与服务器断开连接的时间，默认是 3s。</span><br><span class="line"></span><br><span class="line">5. auto.offset.reset</span><br><span class="line">该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span><br><span class="line"></span><br><span class="line">latest (默认值) ：在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的最新记录）;</span><br><span class="line">earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录。</span><br><span class="line">6. enable.auto.commit</span><br><span class="line">是否自动提交偏移量，默认值是 true。为了避免出现重复消费和数据丢失，可以把它设置为 false。</span><br><span class="line"></span><br><span class="line">7. client.id</span><br><span class="line">客户端 id，服务器用来识别消息的来源。</span><br><span class="line"></span><br><span class="line">8. max.poll.records</span><br><span class="line">单次调用 poll() 方法能够返回的记录数量。</span><br><span class="line"></span><br><span class="line">9. receive.buffer.bytes &amp; send.buffer.byte</span><br><span class="line">这两个参数分别指定 TCP socket 接收和发送数据包缓冲区的大小，-1 代表使用操作系统的默认值。</span><br></pre></td></tr></table></figure><ul><li>必要参数配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,StringDeserializer.class.getName());</span><br><span class="line"></span><br><span class="line">props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,StringDeserializer.class.getName());</span><br><span class="line"></span><br><span class="line">props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,brokerList);</span><br><span class="line"></span><br><span class="line">props.put(ConsumerConfig.GROUP_ID_CONFIG,groupid);</span><br><span class="line"></span><br><span class="line">props.put(ConsumerConfig.CLIENT_ID_CONFIG,clientid);</span><br></pre></td></tr></table></figure><h2 id="subscribe-订阅主题"><a href="#subscribe-订阅主题" class="headerlink" title="subscribe 订阅主题"></a>subscribe 订阅主题</h2><ul><li><p>subscribe 有如下重载方法: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(Collection&lt;String&gt; topics,ConsumerRebalanceListener listener)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(Collection&lt;String&gt; topics)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(Pattern pattern, ConsumerRebalanceListener listener)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(Pattern pattern)</span></span><br></pre></td></tr></table></figure></li><li><p>指定集合方式订阅主题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consumer.subscribe(Arrays.asList(topic1)); </span><br><span class="line">consumer <span class="title function_">subscribe</span><span class="params">(Arrays.asList(topic2)</span>);</span><br></pre></td></tr></table></figure></li><li><p>正则方式订阅主题</p><p>如果消费者采用的是正则表达式的方式(subscribe(Pattern))订阅, 在之后的过程中,如果有人又创建了新的主题,并且主题名字与正表达式相匹配,那么这个消费者就可以消费到新添加的主题中的消息。如果应用程序需要消费多个主题,并且可以处理不同的类型,那么这种订阅方式就很有效。</p><ul><li><p>正则表达式的方式订阅的示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consumer.subscribe(Pattern.compile (<span class="string">&quot;topic.*&quot;</span> )); </span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="assign-订阅主题"><a href="#assign-订阅主题" class="headerlink" title="assign 订阅主题"></a>assign 订阅主题</h2><p>消费者不仅可以通过 KafkaConsumer.subscribe() 方法订阅主题,还可直接订阅某些主题的指定分区; </p><ul><li><p>在 KafkaConsumer 中提供了 assign() 方法来实现这些功能,此方法的具体定义如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assign</span><span class="params">(Collection&lt;TopicPartition&gt; partitions)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个方法只接受参数 partitions,用来指定需要订阅的分区集合。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consumer.assign(Arrays.asList(<span class="keyword">new</span> <span class="title class_">TopicPartition</span> (<span class="string">&quot;tpc_1&quot;</span> , <span class="number">0</span>),<span class="keyword">new</span> <span class="title class_">TopicPartition</span>(“tpc_2”,<span class="number">1</span>))) ;</span><br></pre></td></tr></table></figure></li></ul><h2 id="subscribe-与-assign-的区别"><a href="#subscribe-与-assign-的区别" class="headerlink" title="subscribe 与 assign 的区别"></a>subscribe 与 assign 的区别</h2><ul><li><p>通过 subscribe()方法订阅主题具有消费者自动再均衡功能 ; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在多个消费者的情况下可以根据分区分配策略来自动分配各个消费者与分区的关系。 当消费组的消费者增加或减少时,分区分配关系会自动调整,以实现消费负载均衡及故障自动转移。</span><br></pre></td></tr></table></figure></li><li><p>assign() 方法订阅分区时,是不具备消费者自动均衡的功能的; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实这一点从 assign()方法参数可以看出端倪,两种类型 subscribe()都有 ConsumerRebalanceListener 类型参数的方法,而 assign()方法却没有。</span><br></pre></td></tr></table></figure></li></ul><h2 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h2><p>可以使用 KafkaConsumer 中的 unsubscribe()方法采取消主题的订阅,这个方法既可以取消通过subscribe( Collection)方式实现的订阅; 也可以取消通过 subscribe(Pattem)方式实现的订阅,还可以取消通过 assign( Collection)方式实现的订阅。示例码如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consumer.unsubscribe(); </span><br></pre></td></tr></table></figure><p>如果将 subscribe(Collection )或 assign(Collection)集合参数设置为空集合,作用与 unsubscribe()方法相同,如下示例中三行代码的效果相同: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consumer.unsubscribe(); </span><br><span class="line">consumer.subscribe(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;()) ; </span><br><span class="line">consumer.assign(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TopicPartition&gt;());</span><br></pre></td></tr></table></figure><h2 id="消息的消费模式"><a href="#消息的消费模式" class="headerlink" title="消息的消费模式"></a>消息的消费模式</h2><p>Kafka 中的消费是基于拉取模式的。消息的消费一般有两种模式:推送模式和拉取模式。推模式是服务端主动将消息推送给消费者,而拉模式是消费者主动向服务端发起请求来拉取消息。</p><p>对于 poll () 方法而言,如果某些分区中没有可供消费的消息,那么此分区对应的消息拉取的结果就为空如果订阅的所有分区中都没有可供消费的消息,那么 poll()方法返回为空的消息集; poll () 方法具体定义如下:<br>public ConsumerRecords<K, V> poll(final Duration timeout)<br>超时时间参数 timeout , 用来控制 poll() 方法的阻塞时间, 在消费者的缓冲区里没有可用数据时会发生阻塞。如果消费者程序只用来单纯拉取并消费数据,则为了提高吞吐率,可以把 timeout 设置为Long.MAX_VALUE;</p><ul><li><p>消费者消费到的每条消息的类型为 ConsumerRecord</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerRecord</span>&lt;K, V&gt; &#123; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">NO_TIMESTAMP</span> <span class="operator">=</span> RecordBatch.NO_TIMESTAMP; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NULL_SIZE</span> <span class="operator">=</span> -<span class="number">1</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NULL_CHECKSUM</span> <span class="operator">=</span> -<span class="number">1</span>; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String topic; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> partition; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> offset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> timestamp; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TimestampType timestampType; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> serializedKeySize; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> serializedValueSize; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Headers headers; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> K key; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> V value; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> Long checksum;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">topic partition 这两个字段分别代表消息所属主题的名称和所在分区的编号。</span><br><span class="line"></span><br><span class="line">offsset 表示消息在所属分区的偏移量。</span><br><span class="line"></span><br><span class="line">timestamp 表示时间戳,与此对应的 timestampType 表示时间戳的类型。</span><br><span class="line"></span><br><span class="line">timestampType 有两种类型 CreateTime 和 LogAppendTime , 分别代表消息创建的时间戳和消息追加到日志的时间戳。</span><br><span class="line"></span><br><span class="line">headers 表示消息的头部内容。</span><br><span class="line"></span><br><span class="line">key value 分别表示消息的键和消息的值,一般业务应用要读取的就是 value ; </span><br><span class="line"></span><br><span class="line">serializedKeySize、serializedValueSize 分别表示 key、value 经过序列化之后的大小,如果 key 为空, 则 serializedKeySize 值为 -1,同样,如果 value 为空,则 serializedValueSize 的值也会为 -1; </span><br><span class="line"></span><br><span class="line">checksum 是 CRC32 的校验值。</span><br></pre></td></tr></table></figure></li></ul><h2 id="指定位移消费"><a href="#指定位移消费" class="headerlink" title="指定位移消费"></a>指定位移消费</h2><p>有些时候,我们需要一种更细粒度的掌控,可以让我们从特定的位移处开始拉取消息,而KafkaConsumer 中的 seek() 方法正好提供了这个功能,让我们可以追前消费或回溯消费。</p><ul><li><p>seek()方法的具体定义如下: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seek</span><span class="params">(TopicPartiton partition,<span class="type">long</span> offset)</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="再均衡监听器"><a href="#再均衡监听器" class="headerlink" title="再均衡监听器"></a>再均衡监听器</h2><p>一个消费组中,一旦有消费者的增减发生,会触发消费者组的 rebalance 再均衡; 如果 A 消费者消费掉的一批消息还没来得及提交 offset, 而它所负责的分区在 rebalance 中转移给了 B 消费者,则有可能发生数据的重复消费处理。此情形下,可以通过再均衡监听器做一定程度的补救;</p><h2 id="自动位移提交"><a href="#自动位移提交" class="headerlink" title="自动位移提交"></a>自动位移提交</h2><p>Kafka 中默认的消费位移的提交方式是自动提交,这个由消费者客户端参数 enable.auto.commit 配置, 默认值为 true 。当然这个默认的自动提交不是每消费一条消息就提交一次,而是定期提交,这个定期的周期时间由客户端参数 auto.commit.interval.ms 配置, 默认值为 5 秒, 此参数生效的前提是 enable.</p><p>auto.commit 参数为 true。</p><p>在默认的方式下,消费者每隔 5 秒会将拉取到的每个分区中最大的消息位移进行提交。自动位移提交的动作是在 poll() 方法的逻辑里完成的,在每次真正向服务端发起拉取请求之前会检查是否可以进行位移提交,如果可以,那么就会提交上一次轮询的位移。</p><p>Kafka 消费的编程逻辑中位移提交是一大难点,自动提交消费位移的方式非常简便,它免去了复杂的位移提交逻辑,让编码更简洁。但随之而来的是重复消费和消息丢失的问题。</p><ul><li><p>重复消费</p><p>假设刚刚提交完一次消费位移,然后拉取一批消息进行消费,在下一次自动提交消费位移之前,消费者崩溃了,那么又得从上一次位移提交的地方重新开始消费,这样便发生了重复消费的现象(对于再均衡的情况同样适用)。我们可以通过减小位移提交的时间间隔来减小重复消息的窗口大小,但这样并不能避免重复消费的发送,而且也会使位移提交更加频繁。</p></li><li><p>丢失消息</p><p>按照一般思维逻辑而言,自动提交是延时提交,重复消费可以理解,那么消息丢失又是在什么情形下会发生的呢?我们来看下图中的情形: 拉取线程不断地拉取消息并存入本地缓存, 比如在 BlockingQueue 中, 另一个处理线程从缓存中读取消息并进行相应的逻辑处理。设目前进行到了第 y+l 次拉取,以及第 m 次位移提交的时候,也就是x+6 之前的位移己经确认提交了, 处理线程却还正在处理 x+3 的消息; 此时如果处理线程发生了异常, 待其恢复之后会从第 m 次位移提交处,也就是 x+6 的位置开始拉取消息,那么 x+3 至 x+6 之间的消息就没有得到相应的处理,这样便发生消息丢失的现象。</p></li></ul><h2 id="手动位移提交-调用-kafka-api"><a href="#手动位移提交-调用-kafka-api" class="headerlink" title="手动位移提交(调用 kafka api)"></a>手动位移提交(调用 kafka api)</h2><p>自动位移提交的方式在正常情况下不会发生消息丢失或重复消费的现象, 但是在编程的世界里异常无可避免; 同时, 自动位移提交也无法做到精确的位移管理。 在 Kafka 中还提供了手动位移提交的方式, 这样可以使得开发人员对消费位移的管理控制更加灵活。<br>很多时候并不是说拉取到消息就算消费完成,而是需要将消息写入数据库、写入本地缓存,或者是更加复杂的业务处理。在这些场景下,所有的业务处理完成才能认为消息被成功消费; 手动的提交方式可以让开发人员根据程序的逻辑在合适的地方进行位移提交。 开启手动提交功能的前提是消费者客户端参数 enable.auto.commit 配置为 fals ,示例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props.put(ConsumerConf.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>); </span><br></pre></td></tr></table></figure><p>手动提交可以细分为同步提交和异步提交,对应于 KafkaConsumer 中的 commitSync()和commitAsync()两种类型的方法。</p><h1 id="Topic管理-API"><a href="#Topic管理-API" class="headerlink" title="Topic管理 API"></a>Topic管理 API</h1><p>一般情况下,我们都习惯使用 kafka-topic.sh 本来管理主题,如果希望将管理类的功能集成到公司内部的系统中,打造集管理、监控、运维、告警为一体的生态平台,那么就需要以程序调用 API 方式去实现。这种调用 API 方式实现管理主要利用 KafkaAdminClient 工具类KafkaAdminClient 不仅可以用来管理 broker、配置和 ACL (Access Control List),还可用来管理主题)</p><h2 id="列出主题"><a href="#列出主题" class="headerlink" title="列出主题"></a>列出主题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ListTopicsResult</span> <span class="variable">listTopicsResult</span> <span class="operator">=</span> adminClient.listTopics(); </span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; topics = listTopicsResult.names().get(); </span><br><span class="line"></span><br><span class="line">System.out.println(topics);</span><br></pre></td></tr></table></figure><h2 id="查看主题信息"><a href="#查看主题信息" class="headerlink" title="查看主题信息"></a>查看主题信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DescribeTopicsResult</span> <span class="variable">describeTopicsResult</span> <span class="operator">=</span> adminClient.describeTopics(Arrays.asList(<span class="string">&quot;tpc_4&quot;</span>, <span class="string">&quot;tpc_3&quot;</span>)); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Map&lt;String, TopicDescription&gt; res = describeTopicsResult.all().get();</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; ksets = res.keySet(); </span><br><span class="line"><span class="keyword">for</span> (String k : ksets) &#123; </span><br><span class="line">System.out.println(res.get(k)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建主题"><a href="#创建主题" class="headerlink" title="创建主题"></a>创建主题</h2><ul><li>代码示例（部分截取）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数配置</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>(); </span><br><span class="line">props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">&quot;master:9092,slave1:9092,slave2:9092&quot;</span>); </span><br><span class="line">props.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG,<span class="number">3000</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 admin client 对象</span></span><br><span class="line"><span class="type">AdminClient</span> <span class="variable">adminClient</span> <span class="operator">=</span> KafkaAdminClient.create(props); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 由服务端 controller 自行分配分区及副本所在 broker </span></span><br><span class="line"><span class="type">NewTopic</span> <span class="variable">tpc_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewTopic</span>(<span class="string">&quot;tpc_3&quot;</span>, <span class="number">2</span>, (<span class="type">short</span>) <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动指定分区及副本的 broker 分配</span></span><br><span class="line">HashMap&lt;Integer, List&lt;Integer&gt;&gt; replicaAssignments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 分区 0,分配到 broker0,broker1 replicaAssignments.put(0,Arrays.asList(0,1)); </span></span><br><span class="line"><span class="comment">// 分区 1,分配到 broker0,broker2 </span></span><br><span class="line">replicaAssignments.put(<span class="number">0</span>,Arrays.asList(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="type">NewTopic</span> <span class="variable">tpc_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewTopic</span>(<span class="string">&quot;tpc_4&quot;</span>, replicaAssignments); </span><br><span class="line"><span class="type">CreateTopicsResult</span> <span class="variable">result</span> <span class="operator">=</span> adminClient.createTopics(Arrays.asList(tpc_3,tpc_4)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 future 中等待服务端返回</span></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">result.all().get(); </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125; </span><br><span class="line">adminClient.close();</span><br></pre></td></tr></table></figure><h2 id="删除主题"><a href="#删除主题" class="headerlink" title="删除主题"></a>删除主题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DeleteTopicsResult</span> <span class="variable">deleteTopicsResult</span> <span class="operator">=</span> adminClient.deleteTopics(Arrays.asList(<span class="string">&quot;tpc_1&quot;</span>, <span class="string">&quot;tpc_1&quot;</span>)); </span><br><span class="line"></span><br><span class="line">Map&lt;String, KafkaFuture&lt;Void&gt;&gt; values = deleteTopicsResult.values();</span><br><span class="line"></span><br><span class="line">System.out.println(values);</span><br></pre></td></tr></table></figure><h2 id="其他管理"><a href="#其他管理" class="headerlink" title="其他管理"></a>其他管理</h2><p>除了进行 topic 管理之外,KafkaAdminClient 也可以进行诸如动态参数管理,分区管理等各类管理操作;</p><p>powershell</p>]]></content>
    
    
    <summary type="html">kafka基本操作包括：Kafka命令行操作，kafka生产者api示例，消费者api，topic管理api</summary>
    
    
    
    <category term="大数据" scheme="https://www.jermyn.cn/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="kafka" scheme="https://www.jermyn.cn/tags/kafka/"/>
    
    <category term="命令行" scheme="https://www.jermyn.cn/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    <category term="linux" scheme="https://www.jermyn.cn/tags/linux/"/>
    
    <category term="shell" scheme="https://www.jermyn.cn/tags/shell/"/>
    
    <category term="生产者" scheme="https://www.jermyn.cn/tags/%E7%94%9F%E4%BA%A7%E8%80%85/"/>
    
    <category term="消费者" scheme="https://www.jermyn.cn/tags/%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    
  </entry>
  
</feed>
